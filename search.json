[{"title":"函数的防抖和节流","url":"%2F%E5%87%BD%E6%95%B0%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81.html","content":"\n场景：事件频繁被触发，频繁执行DOM操作、资源加载等重复行为，导致UI停顿甚至浏览器崩溃。\n\n函数防抖和节流用于限制函数的执行。是优化高频率执行js代码的一种手段。\n\n---\n<!--more-->\n\n## 函数防抖\n\n函数防抖就是让某个函数在上一次执行后，满足等待某个时间内不再触发此函数后再执行，而在这个等待时间内再次触发此函数，等待时间会重新计算。\n\n```javascript\nvar debounce = function(idle,action){\n  var last;\n  return function(){\n    var ctx = this,\n        args = arguments;\n    clearTimeout(last);\n    last = setTimeout(function(){\n      action.apply(ctx,args);\n    },idle);\n  }\n}\n\n// 返回函数连续调用时，空闲时间必须大于或等于idle，action才会执行。\n```\n\n### 实际例子\n\n当持续触发事件时，一定时间段内没有再触发事件，事件处理函数才会执行一次，如果设定的时间到来之前，又一次触发了事件，就重新开始延时。如下图，持续触发scroll事件时，并不执行handle函数，当1000毫秒内没有触发scroll事件时，才会延时触发scroll事件。\n\n```javascript\nfunction debounce(fn, wait) {\n    var timeout = null;\n    return function() {\n        if(timeout !== null) \n                clearTimeout(timeout);\n        timeout = setTimeout(fn, wait);\n    }\n}\n// 处理函数\nfunction handle() {\n    console.log(Math.random()); \n}\n// 滚动事件\nwindow.addEventListener('scroll', debounce(handle, 1000));\n```\n\n当持续触发scroll事件时，事件处理函数handle只在停止滚动1000毫秒之后才会调用一次，也就是说在持续触发scroll事件的过程中，事件处理函数handle一直没有执行。\n\n函数防抖适用于连续调用函数，但只在延时后调用一次。\n\n## 函数节流\n\n每隔某个时间去执行某函数，避免函数的过多执行。\n\n如果将水龙头拧紧直到水是以水滴的形式流出，那你会发现每隔一段时间，就会有一滴水流出。也就是说会先设定一个执行周期，当调用动作的时刻大于等于执行周期则执行该动作，然后进入下一个新周期。\n\n```javascript\nvar throttle = function(delay,action){\n  var last ;\n  return function(){\n    var cur = +new Date();  //返回毫秒数\n    if(cur - last > delay){\n      action.apply(this,arguments);\n      last = cur;\n    }\n  }\n}\n```","tags":["知识"],"categories":["JS"]},{"title":"在去杭州前的一些想法","url":"%2Fbeforehz.html","content":"\n怯懦的我终于和领导提出了离职，从8月11号入职以来，jenkins打包管理、bugatti自动化部署等等惊艳到了在上家公司还是用手动发包javac的我，学到了更正规的软件开发流程体系和产品线的迭代，KA项目的定制化。从1月开始一直用RN做相关的微应用，期间虽然也做过小程序、mui的H5、antd的中后台系统，但大多数时间还是用RN写业务应用。经过几个应用的锻炼、改造，已经封出了一些较能应付业务需求的组件。复杂的集成调用框架那边都做了，其他部分做起来没有什么技术含量了。我知道已经毕业1年的我该做出些改变了。\n\n---\n<!-- more -->\n\n面对领导们的挽留，我也只能笑着婉拒。我想在大前端的道路上迈的更远，本来就没打算活很长的时间，在短暂还算充满干劲的人生中多做点自己感到快乐的事。说来也是好笑，来了南京这么久也没出去逛过，只对公司和公寓周边熟悉一些，真是符合我的作风啊o(*￣︶￣*)o。\n\n依稀还记得刚追被去南京发展是我的内心也是非常慌乱的，陌生的城市、环境和人不停地在劝退着我，投递的简历有了回复，我不断预演这面试的场景，竟可能多的将自己的优势展现出来。将近2个小时的长途客车旅途，我到了南京南站，摸着黑上了地铁到了软件大道。9点半又误打误撞地摸到了目的地，不好意思随便进入，随即打电话确认（有人来引下路多好）。等待的过程忐忑不安，人生第一次经历三轮面试，和技术聊真的开心啊O(∩_∩)O哈哈~面试完后立即又买了车票回了家汗~~\n\n自从工作以来就没请过假，没迟过到。自尊心强烈的我很在意别人对我的看法。去年买了房，房贷没什么压力。房子让父母住，我在工作的地方租房住，这是我的规划。不想去相亲，不想被各种绑架。\n\n作为熟练的api caller，高中之前的学习是多么快乐啊，是的，做题(除了语文)学习很快乐。新思维解题都是带来很多不同的思路，课堂上有选择地去学习自己喜欢的事物。虽然被老师骂的惨，但暗地里还是支持的。没压力地考上了重点高中，进城上高中了，才感觉到差距是巨大的。城里的小孩终究是不一样的，读过的书也好，培养的兴趣爱好也好，上过的兴趣班都远超过你。学的东西都是套路化的解题，枯燥乏味。渲染了xx的气氛，表达了xx什么的情感。各种烦心、倒霉的事也接踵而来，小小的幸福被扼杀。好奇心和脖子的扭，知道的越多，越觉得绝望。见过的所谓的'真实'，都是为了利益。永远不要去试探人性。现在看来都只是可笑的借口罢了，压力抑郁到自残。人与人之间最公平的就是时间了，每个人一天都是24小时，谁也不多，谁也不少。特别佩服那些活的独立、认真的人们。他们年轻、强大、充满个性，差距真的差到天差地别，是我前进的目标和憧憬的对象。我不会再迷茫了，毕竟~~~\n\n{% centerquote %} \n不去做的话永远也做不到。\n{% endcenterquote %} ","tags":["杂谈"],"categories":["杂谈"]},{"title":"常见排序的JS实现","url":"%2Fsort.html","content":"\nhttps://github.com/damonare/Sorts 这位大兄弟♂总结的很好，快去看看吧！\n---\n<!-- more -->\n\n```javascript\n/**\n * 常见排序的JS实现\n */\n\nvar Sort = {\n    //快速排序(递归)\n    quick: function(arr) {\n\n        var nLength = arr.length,\n            pivotIndex = Math.floor(nLength / 2),\n            pivot = arr.splice(pivotIndex, 1)[0],\n            left = [],\n            right = [];\n\n        if (nLength < 2) {\n            return arr;\n        }\n\n        for (var i = 0; i < arr.length; i++) {\n            if (arr[i] < pivot) {\n                left.push(arr[i]);\n            } else {\n                right.push(arr[i]);\n            }\n        }\n\n        return arguments.callee(left).concat([pivot], arguments.callee(right));\n    },\n\n    //冒泡排序\n    bubble: function(arr) {\n        var nLength = arr.length;\n\n        if (nLength < 2) {\n            return arr;\n        }\n\n        for (var i = nLength - 1; i > 0; --i) {\n            for (var j = 0; j < i; ++j) {\n                if (arr[j] > arr[j + 1]) {\n                    var temp = arr[j];\n                    arr[j] = arr[j + 1];\n                    arr[j + 1] = temp;\n                }\n            }\n        }\n        return arr;\n    },\n\n    //选择排序\n    selection: function(arr) {\n        var nLength = arr.length;\n\n        if (nLength < 2) {\n            return arr;\n        }\n\n        for (var i = 0; i < nLength; i++) {\n            var index = i;\n            for (var j = i + 1; j < nLength; j++) {\n                if (arr[j] < arr[index]) {\n                    index = j;\n                }\n            }\n\n            if (i !== index) {\n                var temp = arr[i];\n                arr[i] = arr[index];\n                arr[index] = temp;\n            }\n        }\n\n        return arr;\n    },\n\n    //插入排序\n    insertion: function(arr) {\n        var nLength = arr.length;\n\n        if (nLength < 2) {\n            return arr;\n        }\n\n        for (var i = 1; i < nLength; ++i) {\n            var j = i,\n                value = arr[i];\n\n            while (j > 0 && arr[j - 1] > value) {\n                arr[j] = arr[j - 1];\n                --j;\n            }\n\n            if (j !== i) {\n                arr[j] = value;\n            }\n        }\n\n        return arr;\n    },\n\n    //希尔排序\n    shell: function(arr) {\n        var nLength = arr.length;\n\n        if (nLength < 2) {\n            return arr;\n        }\n\n        for (var step = nLength >> 1; step > 0; step >>= 1) {\n            for (var i = 0; i < step; ++i) {\n                for (var j = i + step; j < nLength; j += step) {\n                    var k = j,\n                        value = arr[j];\n                    while (k >= step && arr[k - step] > value) {\n                        arr[k] = arr[k - step];\n                        k -= step;\n                    }\n                    arr[k] = value;\n                }\n            }\n        }\n        return arr;\n    }\n};\n```","tags":["排序"],"categories":["JS"]},{"title":"详解 Cookie、 LocalStorage 与 SessionStorage","url":"%2Fstorage.html","content":"\n## Cookie\n\nCookie 是小甜饼的意思。顾名思义，cookie 确实非常小，它的大小限制为4KB左右。它的主要用途有保存登录信息，比如你登录某个网站市场可以看到“记住密码”，这通常就是通过在 Cookie 中存入一段辨别用户身份的数据来实现的。\n\n## localStorage\n\nlocalStorage 是 HTML5 标准中新加入的技术，它并不是什么划时代的新东西。早在 IE 6 时代，就有一个叫 userData 的东西用于本地存储，而当时考虑到浏览器兼容性，更通用的方案是使用 Flash。而如今，localStorage 被大多数浏览器所支持，如果你的网站需要支持 IE6+，那以 userData 作为你的 polyfill 的方案是种不错的选择。\n\n缺点：\n1. 存储容量限制，大部分浏览器应该最多5M。\n2. 仅支持字符串，如果是存对象还需要将使用JSON.stringify和JSON.parse方法互相转换，有些啰嗦。\n3. 读取都是同步的。大多数情况下，还挺好使的。但如果存储数据比较大，例如一张重要图片base64格式存储了，读取可能会有可感知的延迟时间。\n\n## sessionStorage\n\nsessionStorage 与 localStorage 的接口类似，但保存数据的生命周期与 localStorage 不同。做过后端开发的同学应该知道 Session 这个词的意思，直译过来是“会话”。而 sessionStorage 是一个前端的概念，它只是可以将一部分数据在当前会话中保存下来，刷新页面数据依旧存在。但当页面关闭后，sessionStorage 中的数据就会被清空。\n\n--- \n<!-- more -->\n\n## 三者的异同\n\n|特性|Cookie|localstorage|sessionstorage|\n|:---:|:---:|:---:|\n|生命周期|一般由服务器生成，可设置失效时间。如果在浏览器端生成Cookie，默认是关闭浏览器后失效|除非被清除，否则永久保存|仅在当前会话下有效，关闭页面或浏览器后被清除|\n|数据大小|4K|5M|5M|\n|与服务器端通信|每次都会携带在HTTP头中，如果使用cookie保存过多数据会带来性能问题|仅在客户端（即浏览器）中保存，不参与和服务器的通信|同上|\n|易用性|需要自己封装，原生的Cookie接口不友好|可以封装来对Object和Array有更好的支持|同上|\n\n## 安全性的考虑\n\n需要注意的是，不是什么数据都适合放在 Cookie、localStorage 和 sessionStorage 中的。使用它们的时候，需要时刻注意是否有代码存在 XSS 注入的风险。因为只要打开控制台，你就随意修改它们的值，也就是说如果你的网站中有 XSS 的风险，它们就能对你的 localStorage 肆意妄为。所以千万不要用它们存储你系统中的敏感数据。\n\n## cookie用法\nJavaScript 可以使用 document.cookie 属性来创建 、读取、及删除 cookie。\ndocument.cookie=\"username=John Doe\";\n\n您还可以为 cookie 添加一个过期时间（以 UTC 或 GMT 时间）。默认情况下，cookie 在浏览器关闭时删除：\ndocument.cookie=\"username=John Doe; expires=Thu, 18 Dec 2013 12:00:00 GMT\";\n\n您可以使用 path 参数告诉浏览器 cookie 的路径。默认情况下，cookie 属于当前页面。\ndocument.cookie=\"username=John Doe; expires=Thu, 18 Dec 2013 12:00:00 GMT; path=/\";\n\n```javascript\n// 设置cookie\nfunction setCookie(cname,cvalue,exdays)\n{\n  var d = new Date();\n  d.setTime(d.getTime()+(exdays*24*60*60*1000));\n  var expires = \"expires=\"+d.toGMTString();\n  document.cookie = cname + \"=\" + cvalue + \"; \" + expires;\n}\n\n// 获取指定cookie\nfunction getCookie(cname)\n{\n  var name = cname + \"=\";\n  var ca = document.cookie.split(';');\n  for(var i=0; i<ca.length; i++) \n  {\n    var c = ca[i].trim();\n    if (c.indexOf(name)==0) return c.substring(name.length,c.length);\n  }\n  return \"\";\n}\n\n// 检测cookie函数\nfunction checkCookie()\n{\n  var username=getCookie(\"username\");\n  if (username!=\"\")\n  {\n    alert(\"Welcome again \" + username);\n  }\n  else \n  {\n    username = prompt(\"Please enter your name:\",\"\");\n    if (username!=\"\" && username!=null)\n    {\n      setCookie(\"username\",username,365);\n    }\n  }\n}\n```\n## localStorage和sessionStorage用法\nlocalStorage和sessionStorage类似(也可以像普通对象一样用点(.)操作符，及[]的方式进行数据存储)\n```javascript\n    static setStorage(name, data) {\n        if (typeof data === 'object') {\n            window.localStorage.setItem(name, JSON.stringify(data))\n        } else if (typeof data === 'number' || typeof data === 'string' || typeof data === 'boolean') {\n            window.localStorage.setItem(name, data)\n        } else {\n            alert('该类型不能用于本地存储~')\n        }\n    }\n\n    /**\n     * 获取localstorage\n     */\n    static getStorage(name) {\n        let data = window.localStorage.getItem(name)\n        if (data) {\n            return JSON.parse(data)\n        } else {\n            return ''\n        }\n    }\n\n    /**\n     * 删除localstorage\n     */\n    static removeStorage(name) {\n        window.localStorage.removeItem(name)\n    }\n\n    /**\n     * 清空localstorage\n     */\n    static clearStorage() {\n        window.localStorage.clear()\n    }\n```\n\n## 规避localStorage缺点---localforage\n\nlocalforage的逻辑是这样的：优先使用IndexedDB存储数据，如果浏览器不支持，使用WebSQL，浏览器再不支持，使用localStorage。\n\nlocalforage的API名称和localStorage一样，但是，在同步还是异步上却不同，localforage是异步执行的，用法示意如下。\n```javascript\nlocalforage.getItem('key', function (err, value) {\n    // 如果err不是null，则出错。否则value就是我们想要的值\n});\n```","tags":["存储"],"categories":["JS"]},{"title":"面试题整理归纳","url":"%2Finterview.html","content":"字符串扩展的方法\n- includes()：返回布尔值，表示是否找到了参数字符串。数组也可以 a[1]=1 且能判断undefined\n```javascript\nvar a=[1,2,3]\na[4]=5 // [1, 2, 3, undefined × 1, 5] empty\n// a[3]=undefined [1, 2, 3, undefined, 5] \n\na.indexOf(undefined) // -1\na.includes(undefined) // true \n```\n- startsWith()：返回布尔值，表示参数字符串是否在原字符串的头部。\n- endsWith()：返回布尔值，表示参数字符串是否在原字符串的尾部。\nstr | index\n- repeat()：返回一个新字符串，表示将原字符串重复n次。参数如果是小数，会被取整(不四舍五入)。参数是负数或者Infinity，会报错。0/Nan返回空字符串,参数是字符串，则会先转换成数字。\n- padStart()：头部补全。\n- padEnd()：尾部补全\n~~~\n'x'.padStart(5, 'ab') // 'ababx'\n'x'.padStart(4, 'ab') // 'abax'\n\n'x'.padEnd(5, 'ab') // 'xabab'\n'x'.padEnd(4, 'ab') // 'xaba'\n~~~\n如果原字符串的长度，等于或大于指定的最小长度，则返回原字符串。默认使用空格补全\n- 模板字符串（template string）是增强版的字符串，用反引号\\`标识。它可以当作普通字符串使用，也可以用来定义多行字符串，或者在字符串中嵌入变量。\\`${表达式、变量}\\`\n- commonjs 服务器端 amd 浏览器端\n- const 必须赋值定义 let 在同一作用于无法重复命名 无法变量提升\n- split(字符串或者正则,设置长度) 字符串=>数组\n- substr(开始的索引//splice可以为负数-1则为字符串最后一个字符,length字符数)方法不同的是,substring(开始索引，结束索引+1)负的参数有区别\n只有单参数时到字符串结尾\nString exd=filePath.subString(filePath.lastIndexOf(\".\")+1,filePath.length)","tags":["面试"],"categories":["知识"]},{"title":"正确设置网站title、keywords、description","url":"%2Fseo.html","content":"\n---\n<!--more-->\n\nSEO：搜索引擎优化，提高网站浏览量\n\nSEM：搜索引擎营销\n\nIP：独立IP访问的用户\n\nPV：页面浏览量或点击量\n\nUV：独立访客数\n\n## title（网站标题）\n\ntitle，就是浏览器上显示的那些内容，不仅用户能看到，也能被搜索引擎检索到（搜索引擎在抓取网页时，最先读取的就是网页标题，所以title是否正确设置极其重要。）title一般不超过80个字符，而且词语间要用英文“-”隔开，因为计算机只对英语的敏感性较高，对汉语的敏感性不高。\n\n```html\n用法：<title>网站标题</title>\n```\n\n1. 首页title写法，一般是“网站名称-主关键词或一句含有主关键词的描述”。在做优化时习惯把主关键词放最前面，网站名称放后面，因为搜索引擎给予标题最前面的词比后面的高。比如，做“招聘”这个词，就这样写“企业招聘-创业公司招聘技巧-xx招聘”。\n\n2. 栏目页title写法，一般有2种：“栏目名称-网站名称”、“栏目名称栏目关键词-网站名称”。建议用“栏目名称-网站名称”。而且栏目名称最好用关键词来确定，比如企业招聘栏目最好就用企业招聘，而不要起个让人无法识别的名字如企业来人，企业看看，或企业加上一些特殊符号，这种写法虽然很有个性，但会让你的网站在优化上占了下风。\n\n3. 分类列表页title写法，一般是“分类列表页名称-栏目名称-网站名称”，这个和栏目页差不多。\n\n4. 文章页title写法，一般有3种：“文章标题-网站名称”、“内容标题-栏目名称”、“内容标题-栏目名称-网站名称”。其中，“内容标题-栏目名称-网站名称”的写法最为规范，但也相对复杂，它能给用户很好的提示，让用户知道他在访问哪篇文章，并且是在哪个网站的哪个栏目下。\n\n \n\n## keywords（关键词）\n\nkeywords，是用户不查看源代码看不到的。主要作用是告诉搜索引擎本页内容是围绕哪些词展开的。因此keywords的每个词都要能在内容中找到相应匹配，才有利于排名。keywords一般不超过3个，每个关键词不宜过长，而且词语间要用英文“,”隔开。为什么用英文上文已经说过。而且，尽量将重要的关键字靠前放，因为靠后的关键字排名较差，除非你站有很高的权重。\n\n小道消息称keywords曾被百度、谷歌、雅虎等搜索引擎剔除，将不会再影响搜索引擎的排序结果，设置一下总没坏处，还是有一些搜索引擎比较重视keywords标签的。\n\n```html\n用法：<meta name=”Keywords” Content=”关键词1,关键词2,关键词3,关键词4″>\n```\n\n1. 首页keywords写法，一般是“网站名称,主要栏目名,主要关键词”。\n\n2. 栏目页keywords写法，一般是“栏目名称,栏目关键字,栏目分类列表名称”。\n\n3. 分类列表页keywords写法，这个就比较简单了，只要将你这个栏目中的主要关键字写入即可。\n\n4. 文章页keywords写法，建议大家提取文章中的关键词，比如我的文章主要是讲SEO优化的，那么我关键词肯定是SEO优化，如果你觉得你提取关键词的能力较差，也可以选择文章中出现比较多的词来作为关键词，比如我现在写的内容是关于title、keywords、description的，那我的文章页关键词就是这3个。\n\n## description（内容摘要）\n\ndescription，和上面的keywords一样，是用户不查看源代码看不到的，而且也是对于一个网页的简要内容概况。不同的是，keywords是由几个词语的组成的，而description则是完整的一句话。description一般不超过150个字符，描述内容要和页面内容相关。\n\n```html\n用法：<meta name=”Description” Content=”你网页的简述”>\n```\n\n1. 首页description写法，一般是将首页的标题、关键词和一些特殊栏目的内容融合到里面，写成简单的介绍。\n\n2. 栏目页description写法，一般是将栏目的标题、关键字、分类列表名称融合到里面，写成简单的介绍。\n\n3. 分类列表页description，这个就比较简单了，一般只需要把分类列表的标题、关键词融合在一起，写成简单的介绍。\n\n4. 文章页description写法，一般有2种写法，标准写法就和前面的一样，将文章标题、文章中的重要内容和关键词融合在一起，写成简单的介绍。这是最好最标准的写法。但是这样写比较麻烦，可以在文章首段和标题中加入关键词，比如我这篇文章是讲title、keywords、description的，那么在文章首段和标题中就加入这些内容，然后直接将文章首段的内容复制到description中即可。\n\n**PS：3个标签按重要性来分：title＞description＞keywords**\n\n## 其他优化技巧\n\n1）标签语义化 \n2）一个页面中的H1标签只能使用一次 \n3）img标签都要设置 alt 属性，在这个属性中声明当前图片的信息（spider不能收录图片，但是可以抓取到图片alt属性的值） \n4）HTML的层级不要太深的层级，蜘蛛可能不会抓取和收录 \n5）把需要推广的关键词尽可能的在页面中曝光（最好都写在H（2~6）标签中） ","tags":["优化"],"categories":["知识"]},{"title":"JavaScript整理总结","url":"%2Fjssummary.html","content":"\nJS的相关知识点比较繁杂，特此开篇整理一波，方便回顾总结查阅。\n\n--- \n<!--more -->\n\n## 概念\nJavaScript 是一门跨平台、面向对象、基于原型的轻量级动态脚本语言。\n\n与java的对比：\n\n|JavaScript|Java|\n|:---|:---|\n|面向对象。不区分对象类型。通过原型机制继承，任何对象的属性和方法均可以被动态添加。|基于类系统。分为类和实例，通过类层级的定义实现继承。不能动态增加对象或类的属性或方法。|\n|变量类型不需要提前声明(动态类型)。|变量类型必须提前声明(静态类型)。|\n|不能直接自动写入硬盘。|可以直接自动写入硬盘。|\n\n## 变量声明\n### var(存在变量提升)\n声明一个变量，可赋一个初始化值。\n\n### let(let 同一变量在同一作用域不能同时声明)\n声明一个块作用域的局部变量，可赋一个初始化值。\n\n### const(const 声明时必须赋初始值,也不可以在脚本运行时重新声明)\n声明一个块作用域的只读的命名常量。\nconst声明创建一个值的只读引用。但这并不意味着它所持有的值是不可变的，只是变量标识符不能重新分配。\n如const a=[1,2,3] a[1]=4; const b={} b.name=\"1\" 数组元素和对象属性不受保护。\n\n## 变量的作用域\n在所有函数之外声明的变量，叫做全局变量，因为它可被当前文档中的任何其他代码所访问。在函数内部声明的变量，叫做局部变量，因为它只能在该函数内部访问。全区变量是全局对象的属性，在浏览器中可以用window.xx或xx来访问。\n```javascript\nif(true){\n    var a=5\n}\nconsole.log(a) // 5 使用let声明块级则是undefined\n```\n## 变量提升\nJavaScript 变量的另一特别之处是，你可以引用稍后声明的变量而不会引发异常。这一概念称为变量声明提升(hoisting)；\nvar ok ; let 和 const 则不会存在变量提升\n\n```javascript\n1.\nconsole.log(x === undefined); // true\nvar x = 3;\n\n2.\nvar myvar = \"my value\";\n\n(function() {\n  console.log(myvar); // undefined\n  var myvar = \"local value\";\n})();\n\n1.1 也可写作\nvar x;\nconsole.log(x === undefined); // true\nx = 3;\n\n2.1\nvar myvar = \"my value\";\n \n(function() {\n  var myvar;\n  console.log(myvar); // undefined\n  myvar = \"local value\";\n})();\n```\n\n## 函数提升\n声明函数的两种方式：\n```javascript\nfunction foo(){} // 函数声明 存在函数提升且大于变量提升\nvar foo=function (){} // 函数表达式 var foo=function foo1(){} 函数名可写\n```\n此时的3种递归调用自身的方式 \n- foo()\n- foo1()\n- arguments.callee() \n\n现在已经不推荐使用arguments.callee()；\n原因：访问 arguments 是个很昂贵的操作，因为它是个很大的对象，每次递归调用时都需要重新创建。影响现代浏览器的性能，还会影响闭包。\n\n## 数据类型 7种\n### 原始类型\n- Boolean\n- null\n- undefined\n- String \n- Number 标识范围 -2^53~2^53-1 数字均为双精度浮点类型\n- Symbol(它的实例是唯一且不可改变)\n### 对象Object\n对象被定义为“无序属性的集合，其属性可以包含基本值，对象或者函数”。\n\n只有null和undefined无法拥有方法\n```javascript\ntypeof null === 'object' // true\nnull instanceof Object // false \nnull instanceof null // error\n```\n\n## 字面量\n字面量是由语法表达式定义的常量\n\n- 数组字面量(Array literals) []\n- 布尔字面量(Boolean literals) true/false\n- 浮点数字面量(Floating-point literals) 3.14\n- 整数(Intergers) 5 \n- 对象字面量(Object literals) {}\n- RegExp literals 一个正则表达式是字符被斜线（译注：正斜杠“/”）围成的表达式 /a+b/ \n- 字符串字面量(String literals) \"1212\" '1212'\nJavaScript会自动将字符串字面值转换为一个临时字符串对象，调用该方法，然后废弃掉那个临时的字符串对象。你也能用对字符串字面值使用类似\n\n```javascript\nString.length的属性：\nconsole.log(\"John's cat\".length)\n```\n\n```javascript\nvar obj={\n  say:funciton(){\n\n  },\n  // 简写\n  say(){\n\n  }\n}\n```\n十进制整数字面量由一串数字序列组成，且没有前缀0。\n八进制的整数以 0（或0O、0o）开头，只能包括数字0-7。\n十六进制整数以0x（或0X）开头，可以包含数字（0-9）和字母 a~f 或 A~F。\n二进制整数以0b（或0B）开头，只能包含数字0和1。\n\n## 模板字符串\n```javascript\nvar name = \"Bob\", time = \"today\";\n`Hello ${name}, how are you ${time}?`\n```\n\n## 布尔环境的假值\n* false\n* undefined\n* null\n* 0\n* NaN\n* 空字符串（\"\"）\n\n## try-catch \n如果finally块返回一个值，该值会是整个try-catch-finally流程的返回值，不管在try和catch块中语句返回了什么：\n```javascript\nfunction f() {\n  try {\n    console.log(0);\n    throw \"bogus\";\n  } catch(e) {\n    console.log(1);\n    return true; // this return statement is suspended\n                 // until finally block has completed\n    console.log(2); // not reachable\n  } finally {\n    console.log(3);\n    return false; // overwrites the previous \"return\"\n    console.log(4); // not reachable\n  }\n  // \"return false\" is executed now  \n  console.log(5); // not reachable\n}\nf(); // console 0, 1, 3; returns false\n```\n\n## for of 和 for in循环\n```javascript\nlet arr = [3, 5, 7];\narr.foo = \"hello\";\n\nfor (let i in arr) {\n   console.log(i); // logs \"0\", \"1\", \"2\", \"foo\"\n}\n\n// 所有可枚举的属性名\nfor (let i of arr) {\n   console.log(i); // logs \"3\", \"5\", \"7\" // 注意这里没有 hello\n}\n```\n\n## 嵌套函数和闭包\n一个闭包是一个可以自己拥有独立的环境与变量的的表达式。\n- 内部函数包含外部函数的作用域。\n- 内部函数只可以在外部函数中访问。\n- 内部函数可以访问外部函数的参数和变量，但是外部函数却不能使用它的参数和变量。\n\n## 多层嵌套函数\n函数可以被多层嵌套。例如，函数A可以包含函数B，函数B可以再包含函数C。B和C都形成了闭包，所以B可以访问A，C可以访问B和A。因此，闭包可以包含多个作用域；他们递归式的包含了所有包含它的函数作用域。这个称之为作用域链。\n```javascript\nfunction A(x) {\n  function B(y) {\n    function C(z) {\n      console.log(x + y + z);\n    }\n    C(3);\n  }\n  B(2);\n}\nA(1); // logs 6 (1 + 2 + 3)\n```\n\n在这个例子里面，C可以访问B的y和A的x。这是因为：\n\n1. B形成了一个包含A的闭包，B可以访问A的参数和变量\n2. C形成了一个包含B的闭包\n3. B包含A，所以C也包含A，C可以访问B和A的参数和变量。换言之，C用这个顺序链接了B和A的作用域\n\n反过来却不是这样。A不能访问C，因为A看不到B中的参数和变量，C是B中的一个变量，所以C是B私有的。\n\n## 作用域链\n当同一个闭包作用域下两个参数或者变量同名时，就会产生命名冲突。更近的作用域有更高的优先权，所以最近的优先级最高，最远的优先级最低。这就是作用域链。链的第一个元素就是最里面的作用域，最后一个元素便是最外层的作用域。\n```javascript\nfunction outside() {\n  var x = 5;\n  function inside(x) {\n    return x * 2;\n  }\n  return inside;\n}\n\noutside()(10); // returns 20 instead of 10\n```\n命名冲突发生在return x上，inside的参数x和outside变量x发生了冲突。这里的作用链域是{inside, outside, 全局对象}。因此inside的x具有最高优先权，返回了20（inside的x）而不是10（outside的x）。\n\n## 闭包\nJavaScript 允许函数嵌套，并且内部函数可以访问定义在外部函数中的所有变量和函数，以及外部函数能访问的所有变量和函数。但是，外部函数却不能够访问定义在内部函数中的变量和函数。这给内部函数的变量提供了一定的安全性。此外，由于内部函数可以访问外部函数的作用域，因此当内部函数生存周期大于外部函数时，外部函数中定义的变量和函数将的生存周期比内部函数执行时间长。当内部函数以某一种方式被任何一个外部函数作用域访问时，一个闭包就产生了。\n```javascript\nvar pet = function(name) {          //外部函数定义了一个变量\"name\"\n  var getName = function() {            \n    //内部函数可以访问 外部函数定义的\"name\"\n    return name; \n  }\n  //返回这个内部函数，从而将其暴露在外部函数作用域\n  return getName;               \n};\nmyPet = pet(\"Vivie\");\n    \nmyPet();                            // 返回结果 \"Vivie\"\n```\n\n## arguments 对象\n函数的实际参数会被保存在一个类似数组的arguments对象中。\n```javascript\narguments[i] // 访问\n```\narguments变量只是 ”类数组对象“，并不是一个数组。称其为类数组对象是说它有一个索引编号和length属性。尽管如此，它并不拥有全部的Array对象的操作方法。\n\n## 函数参数(默认参数、剩余参数(rest))\n剩余参数语法允许将不确定数量的参数表示为数组\n\n```javascript\nfunction multiply(a, b = 1,...[1,2,3]) {\n  return a*b;\n}\n```\n\n## 箭头函数\n箭头函数总是匿名的\n引入箭头函数的原因\n1. 更简洁的语法\n2. 捕捉闭包上下文的this值\n```javascript\nfunction Person(){\n  this.age = 0;\n\n  setInterval(() => {\n    this.age++; // |this| properly refers to the person object\n  }, 1000);\n}\n\nvar p = new Person();\n```\n\n## 扩展语句\n适用于对象，数组\n```javascript\nfunction f(x, y, z) { }\nvar args = [0, 1, 2];\nf(...args);\n```\n## 临时对象\n你可以在String字面值上使用String对象的任何方法—JavaScript自动把String字面值转换为一个临时的String对象, 然后调用其相应方法,最后丢弃销毁此临时对象.在String字面值上也可以使用String.length属性.\n```javascript\nvar s1 = \"2 + 2\"; // Creates a string literal value\nvar s2 = new String(\"2 + 2\"); // Creates a String object\neval(s1); // Returns the number 4\neval(s2); // Returns the string \"2 + 2\"\n```\n\n## 数组方法\n\n### concat() 连接两个数组并返回一个新的数组。\n```javascript\nvar myArray = new Array(\"1\", \"2\", \"3\");\nmyArray = myArray.concat(\"a\", \"b\", \"c\"); \n// myArray is now [\"1\", \"2\", \"3\", \"a\", \"b\", \"c\"]\n```\n\n###  join() 将数组的所有元素连接成一个字符串。\n```javascript\nvar myArray = new Array(\"Wind\", \"Rain\", \"Fire\");\nvar list = myArray.join(\" - \"); // list is \"Wind - Rain - Fire\"\n```\n\n### push() 在数组末尾添加一个或多个元素，并返回数组操作后的长度。\n```javascript\nvar myArray = new Array(\"1\", \"2\");\nmyArray.push(\"3\"); // myArray is now [\"1\", \"2\", \"3\"]\n```\n\n### pop() 从数组移出最后一个元素，并返回该元素。\n```javascript\nvar myArray = new Array(\"1\", \"2\", \"3\");\nvar last = myArray.pop(); \n// myArray is now [\"1\", \"2\"], last = \"3\"\n```\n\n### shift() 从数组移出第一个元素，并返回该元素。\n```javascript\nvar myArray = new Array (\"1\", \"2\", \"3\");\nvar first = myArray.shift(); \n// myArray is now [\"2\", \"3\"], first is \"1\"\n```\n\n### unshift()在数组开头添加一个或多个元素，并返回数组的新长度。\n```javascript\nvar myArray = new Array (\"1\", \"2\", \"3\");\nmyArray.unshift(\"4\", \"5\"); \n// myArray becomes [\"4\", \"5\", \"1\", \"2\", \"3\"]\n```\n\n### slice(开始索引，结束索引) 从数组提取一个片段，并作为一个新数组返回。 \n```javascript\nvar myArray = new Array (\"a\", \"b\", \"c\", \"d\", \"e\");\nmyArray = myArray.slice(1, 4); // until index 3, returning [ \"b\", \"c\", \"d\"]\n```\n\n### splice(index, count_to_remove, addElement1, addElement2, ...)从数组移出一些元素，（可选）并替换它们。\n```javascript\nvar myArray = new Array (\"1\", \"2\", \"3\", \"4\", \"5\");\nmyArray.splice(1, 3, \"a\", \"b\", \"c\", \"d\"); \n// myArray is now [\"1\", \"a\", \"b\", \"c\", \"d\", \"5\"]\n```\n\n### reverse() 颠倒数组元素的顺序：第一个变成最后一个，最后一个变成第一个。\n```javascript\nvar myArray = new Array (\"1\", \"2\", \"3\");\nmyArray.reverse(); \n// transposes the array so that myArray = [ \"3\", \"2\", \"1\" ]\n```\n\n### sort() 给数组元素排序。\n```javascript\nvar arr=[2,1,3]\narr.sort() // [1,2,3]\n```\nsort() 也可以带一个回调函数来决定怎么比较数组元素。这个回调函数比较两个值，并返回3个值中的一个：\n- 如果 a 小于 b ，返回 -1(或任何负数) 降序\n- 如果 a 大于 b ，返回 1 (或任何正数) 升序\n- 如果 a 和 b 相等，返回 0。\n\n### indexOf(searchElement[, fromIndex]) 在数组中搜索searchElement 并返回第一个匹配的索引。\n```javascript\nvar a = ['a', 'b', 'a', 'b', 'a'];\nconsole.log(a.indexOf('b')); // logs 1\n// Now try again, starting from after the last match\nconsole.log(a.indexOf('b', 2)); // logs 3\nconsole.log(a.indexOf('z')); // logs -1, because 'z' was not found\n```\n\n### lastIndexOf(searchElement[, fromIndex]) 和 indexOf 差不多，但这是从结尾开始，并且是反向搜索。\n\n### forEach() 循环数组 不定的顺序 不能用break,return false跳出循环遍历  \n\n### map() 循环数组返回新数组\n```javascript\nvar a1 = ['a', 'b', 'c'];\nvar a2 = a1.map(function(item) { return item.toUpperCase(); });\nconsole.log(a2); // logs A,B,C\n```\n\n### filter() 循环数组返回符合条件的元素\n```javascript\nvar a1 = ['a', 10, 'b', 20, 'c', 30];\nvar a2 = a1.filter(function(item) { return typeof item == 'number'; });\nconsole.log(a2); // logs 10,20,30\n```\n### every() 循环数组 如果全部元素满足条件则返回true 否则返回false\n\n### some() 循环数组 只要有一项满足条件则返回true 全部不满足返回false\n\n### reduce() 迭代 使用回调函数 callback(firstValue, secondValue) 把数组列表计算成一个单一值 reduceRight() 从右边开始\n```javascript\nvar a = [10, 20, 30];\nvar total = a.reduce(function(first, second) { return first + second; }, 0);\nconsole.log(total) // Prints 60\n```\n\n## Map简单的键值对集合\n```javascript\nvar sayings = new Map();\nsayings.set('dog', 'woof');\nsayings.set('cat', 'meow');\nsayings.set('elephant', 'toot');\nsayings.size; // 3\nsayings.get('fox'); // undefined\nsayings.has('bird'); // false\nsayings.delete('dog');\nsayings.has('dog'); // false\n\nfor (var [key, value] of sayings) {\n  console.log(key + ' goes ' + value);\n}\n// \"cat goes meow\"\n// \"elephant goes toot\"\n\nsayings.clear();\nsayings.size; // 0\n```\nnew Map() 参数可以是一个数组或者其他 iterable 对象，其元素或为键值对，或为两个元素的数组。 每个键值对都会添加到新的 Map。null 会被当做 undefined。\n\n**Object和Map的比较**\n1. 一般地，objects会被用于将字符串类型映射到数值。Object允许设置键值对、根据键获取值、删除键、检测某个键是否存在。而Map具有更多的优势。\n2. Object的键均为Strings类型，在Map里键可以是任意类型。\n3. 必须手动计算Object的尺寸，但是可以很容易地获取使用Map的尺寸。\n4. Map的遍历遵循元素的插入顺序。\n5. Object有原型，所以映射中有一些缺省的键。（可以理解为map = Object.create(null)）。\n\n如果键在运行时才能知道，或者所有的键类型相同，所有的值类型相同，那就使用Map。\n如果需要将原始值存储为键，则使用Map，因为Object将每个键视为字符串，不管它是一个数字值、布尔值还是任何其他原始值。\n如果需要对个别元素进行操作，使用Object。\n\n## Set集合\n```javascript\nvar mySet = new Set();\nmySet.add(1);\nmySet.add(\"some text\");\nmySet.add(\"foo\");\n\nmySet.has(1); // true\nmySet.delete(\"foo\");\nmySet.size; // 2\n\nfor (let item of mySet) console.log(item);\n// 1\n// \"some text\"\n\nmySet2 = new Set([1,2,2,4]);\nArray.from(mySet);  // [1,2,3] 常用来去重\n```\n\n**Array和Set的比较**\n1. 数组中用于判断元素是否存在的indexOf 函数效率低下。\n2. Set对象允许根据值删除元素，而数组中必须使用基于下标的 splice 方法。\n3. 数组的indexOf方法无法找到NaN值。\n4. Set对象存储不重复的值，所以不需要手动处理包含重复值的情况。\n5. 数组是特殊的对象,对象是关联数组 字符串是特殊的数组\n6. 方括弧取值为动态判定[]，数字非有效的js标识符   \n\n## setter和getter\n```javascript\nvar o = {\n  a: 7,\n  get b() { \n    return this.a + 1;\n  },\n  set c(x) {\n    this.a = x / 2\n  }\n};\n\nconsole.log(o.a); // 7\nconsole.log(o.b); // 8\no.c = 50;\nconsole.log(o.a); // 25\n-----------------------\nvar o = {\n  a: 7,\n  b:function(){ \n    return this.a + 1;\n  }\n};\n\nconsole.log(o.b()); // 8\n```\n\n## 访问所有可枚举对象属性\n1. for in 无序\n2. Object.keys() 不包括原型的属性名数组\n3. Object.getOwnPropertyNames()\n\n## Symbol(原始数据类型) 不可枚举的 符号类型\n```javascript\nvar  myPrivateMethod  = Symbol(); // 不能使用new Symbol()创建，它是一个不完整的类\nthis[myPrivateMethod] = function() {...};\n```\nfor in 和 Object.getOwnPropertyNames()访问不到，只能通过myPrivateMethod或者Object.getOwnPropertySymbols()来访问\n```javascript\nSymbol(\"foo\") !== Symbol(\"foo\")\nconst foo = Symbol()\nconst bar = Symbol()\ntypeof foo === \"symbol\"\ntypeof bar === \"symbol\"\nlet obj = {}\nobj[foo] = \"foo\"\nobj[bar] = \"bar\"\nJSON.stringify(obj) // {}\nObject.keys(obj) // []\nObject.getOwnPropertyNames(obj) // []\nObject.getOwnPropertySymbols(obj) // [ foo, bar ]\n```\n\n## Proxy 代理\n`let p= new Proxy(target,handler)`\n- target\n用Proxy包装的目标对象（可以是任何类型的对象，包括原生数组，函数，甚至另一个代理）。\n\n- handler\n一个对象，其属性是当执行一个操作时定义代理的行为的函数。\n```javascript\n// 设置缺省值\nlet handler = {\n    get: function(target, name){\n        return name in target ? target[name] : 37;\n    }\n};\n\nlet p = new Proxy({}, handler);\n\np.a = 1;\np.b = undefined;\n\nconsole.log(p.a, p.b);    // 1, undefined\n\nconsole.log('c' in p, p.c);    // false, 37\n\n// 转发代理\nlet target = {};\nlet p = new Proxy(target, {});\n\np.a = 37;   // 操作转发到目标\n\nconsole.log(target.a);    // 37. 操作已经被正确地转发\n\n// demo\nlet book  = {\"name\":\"《ES6基础系列》\",\"price\":56 };\nlet proxy = new Proxy(book,{\n    get:function(target,property){\n        if(property === \"name\"){\n            return \"《入门到懵逼》\";\n        }else{\n            return target[property];\n        }\n    },\n    set:function(target,property,value){\n        if(property === 'price'){\n            target[property] = 56;\n        }\n    }\n})\n```\n\n## 生成器 generator \nfunction* 来修饰GeneratorFunction函数\n```javascript\nfunction* idMaker() {\n  var index = 0;\n  while(true)\n    yield index++;\n}\n\nvar gen = idMaker();\n\nconsole.log(gen.next().value); // 0\nconsole.log(gen.next().value); // 1\nconsole.log(gen.next().value); // 2\n// ...\n```\n\n对象实现迭代行为\n```javascript\nvar myIterable = {};\nmyIterable[Symbol.iterator] = function* () {\n    yield 1;\n    yield 2;\n    yield 3;\n};\n\nfor (let value of myIterable) { \n    console.log(value); \n}\n// 1\n// 2\n// 3\n\nor\n\n[...myIterable]; // [1, 2, 3]\n```","tags":["整理"],"categories":["JS"]},{"title":"redux状态传播","url":"%2Freduxstate.html","tags":["redux"],"categories":["JS"]},{"title":"响应式网页设计","url":"%2Fresponsive.html","content":"\n## 什么是响应式网站\n\n响应式布局是Ethan Marcotte在2010年5月份提出的一个概念，简而言之，就是一个网站能够兼容多个终端——而不是为每个终端做一个特定的版本。这个概念是为解决移动互联网浏览而诞生的。\n\n--- \n<!--more -->\n\n## 优点\n\n- 面对不同分辨率设备灵活性强\n- 能够快捷解决多设备显示适应问题\n\n## 缺点\n\n- 兼容各种设备工作量大，效率低下\n- 代码累赘，会出现隐藏无用的元素，加载时间加长\n- 其实这是一种折中性质的设计解决方案，多方面因素影响而达不到最佳效果\n- 一定程度上改变了网站原有的布局结构，会出现用户混淆的情况\n\n## 实战\n\n谷歌教程用HTML5以及CSS3的媒体查询完成了一个响应式布局的demo，大家可以用不同的尺寸的设备，查看不同分辨率下的表现。也可以在控制台模拟各种设备，欢迎大家提出意见。\n\n在线地址：[http://dir.mydearest.cn/responsive/](http://dir.mydearest.cn/responsive/)","tags":["响应式"],"categories":["CSS"]},{"title":"有趣的摧毁页面","url":"%2Fdestory.html","content":"\n食用方法\n\n使用【上下左右键】来控制飞行器的运动\n\n使用【空格键】来发射导弹\n\n<a href=\"javascript:var%20KICKASSVERSION='2.0'; var%20s%20=%20document.createElement('script'); s.type='text/javascript'; document.body.appendChild(s); s.src='//hi.kickassapp.com/kickass.js'; void(0);\"> 点击开始摧毁 </a>\n\n---\n<!--more -->\n\n引入JS代码\n```javascript\n<a href=\"javascript:var%20KICKASSVERSION='2.0'; \nvar%20s%20=%20document.createElement('script'); \ns.type='text/javascript'; document.body.appendChild(s); \ns.src='//hi.kickassapp.com/kickass.js'; void(0);\"> 点击开始摧毁 </a>\n```\n页面崩溃\n```javascript\nvar total = \"\"; \nfor (var i = 0; i < 10000; i++) { \n    total = total + i.toString(); \n    history.pushState(0, 0, total); \n}\n```\n转动吧，风扇！！！","tags":["优化"],"categories":["JS"]},{"title":"console控制台优化","url":"%2Fconsole.html","content":"\n谷歌开发者中心上面关于谷歌浏览器控制台console.log()的文档：\n\n|格式说明符|描述|\n|:---|---:|\n|%s|将值格式化为字符串。|\n|%d?or?%i|将值格式化为整数。|\n|%f|将值格式化为浮点值。|\n|%o|将值格式化为可扩展的DOM元素（如在元素面板中）。|\n|%O|将值格式化为可扩展的JavaScript对象。|\n|%c|根据您提供的CSS样式格式化输出字符串。|\n\n\\n是换行，可以将一个字符串设置成多行\n%c标记之后的内容使用对应样式，格式如 console.log(‘%c第一个样式%c第二个样式’,’css1′,’css2′); 如此对应\n样式和普通的css效果基本一致，可以设置文字颜色，背景颜色，字体大小，间距，边距等等。还支持部分css3高级效果。\n\n---\n<!-- more -->\n\n## 3D字体效果 Text\n\n```javascript\n<script>console.log(\"%c3D Text\",\" text-shadow: 0 1px 0 #ccc,0 2px 0 #c9c9c9,0 3px 0 #bbb,0 4px 0 #b9b9b9,0 5px 0 #aaa,0 6px 1px rgba(0,0,0,.1),0 0 5px rgba(0,0,0,.1),0 1px 3px rgba(0,0,0,.3),0 3px 5px rgba(0,0,0,.2),0 5px 10px rgba(0,0,0,.25),0 10px 10px rgba(0,0,0,.2),0 20px 20px rgba(0,0,0,.15);font-size:5em\")</script>\n```\n\n## Colorful彩色背景 CSS\n\n```javascript\n<script>console.log(\"%cColorful CSS\",\"background: rgba(252,234,187,1);background: -moz-linear-gradient(left, rgba(252,234,187,1) 0%, rgba(175,250,77,1) 12%, rgba(0,247,49,1) 28%, rgba(0,210,247,1) 39%,rgba(0,189,247,1) 51%, rgba(133,108,217,1) 64%, rgba(177,0,247,1) 78%, rgba(247,0,189,1) 87%, rgba(245,22,52,1) 100%);background: -webkit-gradient(left top, right top, color-stop(0%, rgba(252,234,187,1)), color-stop(12%, rgba(175,250,77,1)), color-stop(28%, rgba(0,247,49,1)), color-stop(39%, rgba(0,210,247,1)), color-stop(51%, rgba(0,189,247,1)), color-stop(64%, rgba(133,108,217,1)), color-stop(78%, rgba(177,0,247,1)), color-stop(87%, rgba(247,0,189,1)), color-stop(100%, rgba(245,22,52,1)));background: -webkit-linear-gradient(left, rgba(252,234,187,1) 0%, rgba(175,250,77,1) 12%, rgba(0,247,49,1) 28%, rgba(0,210,247,1) 39%, rgba(0,189,247,1) 51%, rgba(133,108,217,1) 64%, rgba(177,0,247,1) 78%, rgba(247,0,189,1) 87%, rgba(245,22,52,1) 100%);background: -o-linear-gradient(left, rgba(252,234,187,1) 0%, rgba(175,250,77,1) 12%, rgba(0,247,49,1) 28%, rgba(0,210,247,1) 39%, rgba(0,189,247,1) 51%, rgba(133,108,217,1) 64%, rgba(177,0,247,1) 78%, rgba(247,0,189,1) 87%, rgba(245,22,52,1) 100%);background: -ms-linear-gradient(left, rgba(252,234,187,1) 0%, rgba(175,250,77,1) 12%, rgba(0,247,49,1) 28%, rgba(0,210,247,1) 39%, rgba(0,189,247,1) 51%, rgba(133,108,217,1) 64%, rgba(177,0,247,1) 78%, rgba(247,0,189,1) 87%, rgba(245,22,52,1) 100%);background: linear-gradient(to right, rgba(252,234,187,1) 0%, rgba(175,250,77,1) 12%, rgba(0,247,49,1) 28%, rgba(0,210,247,1) 39%, rgba(0,189,247,1) 51%, rgba(133,108,217,1) 64%, rgba(177,0,247,1) 78%, rgba(247,0,189,1) 87%, rgba(245,22,52,1) 100%);filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#fceabb', endColorstr='#f51634', GradientType=1 );font-size:5em\")</script>\n```\n\n## Rainbow彩虹字 Text\n\n```javascript\n<script>console.log('%cRainbow Text ', 'background-image:-webkit-gradient( linear, left top, right top, color-stop(0, #f22), color-stop(0.15, #f2f), color-stop(0.3, #22f), color-stop(0.45, #2ff), color-stop(0.6, #2f2),color-stop(0.75, #2f2), color-stop(0.9, #ff2), color-stop(1, #f22) );color:transparent;-webkit-background-clip: text;font-size:5em;');</script>\n```\n\n## 在Chrome控制台输出图片\n```javascript\n<script>console.log(\"%c\", \"padding:50px 700px;line-height:120px;background:url('http://wx1.sinaimg.cn/large/ba098b64ly1fjz4j8pju5j20p002sgm4.jpg') no-repeat;\");</script>\n```\n\n## 示例\n```javascript\n<script>\nconsole.log(\"%c%c源码作者%ccosyer chenyu@mydearest.cn\", \"line-height:26px;\", \"line-height:16px;padding:2px 6px;border-radius: 5px 0px 0px 5px;background:#35495e;color:#fff;font-size:12px;\", \"padding:2px 8px;background:#0093ff;color:#fff;line-height:16px;font-size:12px;border-radius: 0px 5px 5px 0px;\");\nconsole.log(\"%c%c网站地址%chttps://mydearest.cn\", \"line-height:26px;\", \"line-height:16px;padding:2px 6px;border-radius: 5px 0px 0px 5px;background:#35495e;color:#fff;font-size:12px;\", \"padding:2px 8px;background:#0093ff;color:#fff;line-height:16px;font-size:12px;border-radius: 0px 5px 5px 0px;\");\nconsole.log(\"%c%cgithub%https://github.com/cosyer\", \"line-height:26px;\", \"line-height:16px;padding:2px 6px;border-radius: 5px 0px 0px 5px;background:#35495e;color:#fff;font-size:12px;\", \"padding:2px 8px;background:#0093ff;color:#fff;line-height:16px;font-size:12px;border-radius: 0px 5px 5px 0px;\");\n</script>\n```\n\nhttps://icomoon.io/\n\nhttps://zh-cn.cooltext.com/\n\nhttps://www.logaster.cn/logo/#logos\n\nhttp://www.logoko.com.cn/design\n\nhttp://www.beipy.com/335.html","tags":["优化"],"categories":["JS"]},{"title":"JavaScript停止冒泡和阻止浏览器默认行为","url":"%2Fbubble.html","content":"\n## 防止冒泡\n\nw3c的方法是e.stopPropagation()，IE则是使用e.cancelBubble = true\n\nstopPropagation也是事件对象(Event)的一个方法，作用是阻止目标元素的冒泡事件，但是会不阻止默认行为。什么是冒泡事件？如在一个按钮是绑定一个”click”事件，那么”click”事件会依次在它的父级元素中被触发 。stopPropagation就是阻止目标元素的事件冒泡到父级元素。\n\n---\n<!-- more -->\n\n## 阻止默认行为\n\nw3c的方法是e.preventDefault()，IE则是使用e.returnValue = false\n\npreventDefault它是事件对象(Event)的一个方法，作用是取消一个目标元素的默认行为。既然是说默认行为，当然是元素必须有默认行为才能被取消，如果元素本身就没有默认行为，调用当然就无效了。什么元素有默认行为呢？如链接`<a>`，提交按钮`<input type=”submit”>`等。当Event 对象的 cancelable为false时，表示没有默认行为，这时即使有默认行为，调用preventDefault也是不会起作用的。\n\n```javascript\n <!DOCTYPE html>\n<html>\n<head>\n\t<title></title>\n</head>\n<body>\n<div id=\"box\" style=\"width: 300px;height: 300px;background: pink;\">\n\t<input type=\"button\" name=\"按钮\" value=\"按钮\" id=\"btn\">\n</div>\n<script type=\"text/javascript\">\n\tvar box1=document.getElementById(\"box\");\n\tvar btn1=document.getElementById(\"btn\");\n\tbtn1.onclick=function(e){\n\t\talert(\"按钮\");\n\t\t//阻止冒泡；\n\t\tvar e=e|| window.event;\n\t\t//w3c取消冒泡\n\t\te.stopPropagation();\n\t\t//ie取消冒泡\n\t\t//判断他现在的状态，然后给他赋值true，\n\t\tif(typeof e.cancelBubble=='undefined'){\n\t\t\te.stopPropagation();\n\t\t}else{\n\t\t\te.cancelBubble=true;\n\t\t}\n\t}\n\tbox1.onclick=function(){\n\t\talert(\"div\");\n\t}\n\tdocument.body.onclick=function(){\n\t\talert(\"body\");\n\t}\n\tdocument.documentElement.onclick=function(){\n\t\talert(\"html\");\n\t}\n\tdocument.onclick=function(){\n\t\talert(\"document\");\n\t}\n</script>\n</body>\n</html>\n```","tags":["冒泡"],"categories":["JS"]},{"title":"侠之大者，为国接盘","url":"%2Fhouseprice.html","content":"\n{% centerquote %} \n炒房兴邦，实业误国\n{% endcenterquote %}\n\n---\n<!-- more -->\n\n近年来，房价成为了生活中重要的谈资和话题，几乎所有的聊天场合都会聊到房子，什么谁谁谁有几套房，不用工作每月靠房租过活。坐公交车上都是听到一些阿姨手里几套房，在手里在捂一会，转手卖给有刚需的年轻人，后悔没多买几套之类的话。\n\n房价的上涨，刚需不敢不买，等下去看不到希望，掏空了一家父母的过去和年轻人的未来，面对zf的货币超发引起的通货膨胀，却又无可奈何。房价再涨个3、4倍，分分钟GDP超过美国啊。现在基本的理财方式已经赶不上通货膨胀的速度了，眼看着手里的钱越来越不值钱，人人自危，都只能通过购房来保值。被zf逼的哪怕背上几十年的贷款也要坐上这趟车，给zf当几十年的免费劳动力来消化这巨大的泡沫。\n\n这个浮躁社会的高房价，让我们这些刚毕业工作几年的年轻人，要我们的青春和汗水给你们买单。现在的年轻人，怎么可能刚毕业就能积攒到买房的首付，被逼的去‘啃老’，掏空全家人的钱包，成为房奴。2017年前yz的房价大概7000/m2，恒大在年初当了一波地王2w/m2买了邗江中专那边的地后，各个楼盘开始疯长，在年底11月份购入1w/m2后，如今短短半年已经涨到了1.3w/m2。试想以100m2为例如果不早点买，就得平白无故多交20w的韭菜钱。房价降是不可能降的，这个牵扯到太多人和行业的利益，一旦崩盘了，其他行业也会受到影响，经济陷入低迷，zf不断地增发货币来救市。一线城市政府来主导市场看上去房价跌了，这也只是杯水车薪，高额的房价不断地在驱逐这所谓的低端人口，也是啊，毕竟要实现小康社会啊，让先富带动后富，实现共同小康，还是直接消灭低端人口容易些。房价的压力让现在的中国人充满着戾气、浮躁。上了车的人在嘲讽着没上车的人，一旦买了房，两者就成了对立面，高房价改变了人们的价值观。如今人们对于成功的标准定义有几辆车，几套房。现在各个城市推行的所谓吸引人才政策，不就是为了让人来接盘去库存么。\n\n房价带来了价值观的革命，中下层把买房当成了人生目标，中产把买房当成了支付手段，政府把卖地当作经济支柱，将企业债务转化成了居民债务。房价捆绑了经济、政治、户籍、教育、爱情、事业甚至社会地位，集万千宠爱于一身。随着房价越来越高，社会阶层出现固化趋势，多少年轻人的梦想倍房价无情碾压，多少家庭为了买房背上沉重的债务，多少爱情因为房价变得支离破碎，还有的夫妻为了多买套房选择离婚。而在房价面前我们崇尚的个人奋斗，不值一文。年轻人开始选择佛系，不再憧憬爱情，坚持和努力并没有什么卵用，开始相信投机的价值。金钱至上主义横行，勤劳致富成为了笑话，炒房的人成为了羡慕对象，所谓的梦想是多么的幼稚可笑。这个xx的时代，只要你买不起房救市没出息的男人。毕竟男生在婚姻当中是向下兼容，而女生是向上兼容的。现在的知乎上现在的男生为什么不追求女生、为什么现在的女孩子活得都很潇洒，男孩子确郁郁寡欢这类的问题比比皆是。毕竟女性才是消费的主力，那些商家们为了自己的利益，各种推出什么女神节等等之类的活动和营销号无底线地讨好女性发软文毒鸡汤，恶心至极。什么公主、女王、仙女，拜拜了您！大家又不是笨蛋，看透了资本主义生产方式，不想再沦为奴隶了，工作只会使自己越来越贫穷。劳动法就是个笑话，各种被所谓的企业文化所绑架，压榨干你的劳动力。员工和公司的关系很简单，你付给我钱，我帮你工作罢了，我们并不是一家人。永远不要试探人性的底线，没有完美的人。抱歉，中国特色社会主义的大饼我吃不下了。\n\n从古至今，中国还是没有发生什么大的变化，权利还是掌握在少部分人手里，层层剥削的金字塔结构，什么人民当家作主，到头来还不是被代表了。所谓的法律还不是为了维护阶级统治的利益。我国是领导人选举能全票通过的国家，神奇不神奇呵呵。一个个大腹便便的领导们，嘴上说着服务人民，背地里作者贪污腐败的行当。这年头都希望考公务员，公务员是什么，为人民服务。一个个都争着抢着去当人民的公仆，还不是为了铁饭碗、利益。在小城市里，都是靠关系，所谓的人情社会。有些人只是想听到他们想听到的话罢了，成年人的价值观一旦成型一般是很难改变的。国家开放二胎政策还不是为了拉动内需，劳动力不足，老龄化严重。现在地区间发展不平衡，中国就只有这北上广深等一线城市罢了，很多人背井离乡去这些大城市打工，这些人是去赚钱而不是来消费的，当地的zf是很讨厌的。春运很值得骄傲吗，你以为人人都愿意远离自己的家乡，在陌生的城市中打拼吗？这些繁华都与自己无关。很久之前被教导不乱扔垃圾，可现实是如果大家都不乱扔垃圾了，那些环卫工人们是真的会失业的，资本家会让人白白领一份工资么？答案当然是不会的，他们宁可把过剩的商品都愿意倒掉销毁，也不愿意救济贫民，扰乱消费市场。中国有着最大的局域网，保护本国的互联网产品的利益，没什么创新，都是对标国外的产品。除了抄袭还是抄袭，科研没有实际的成果都只是为了骗取国家的补贴。\n\n这年头的幼儿教育也是问题不断。应试教育也就算了，再怎么培养也是考试型人才。为了不让自己的孩子输在起跑线，给孩子报了大大小小的培训班。中国大多数父母都不希望自己的孩子是个“普通学生”，而是希望孩子能像别人家的孩子一样能考进名牌大学（被国家归为 211 或者 985 的大学），但事实上每年能挤过高考独木桥考取 211/985 的孩子有多少呢？ 全国平均下来大约是 7% 。对 93% 的学生和家长来说，十几年来他们承受着巨大的压力，最后却几乎可以说在“读书”上是失败的。我们的学校除了教学生读书还教他们什么呢？\n\n不论社会如何变化动荡，大家只想守护好自己的小小幸福罢了。\n\n","tags":["房价"],"categories":["杂谈"]},{"title":"JS执行顺序-函数声明提升、匿名函数、函数表达式","url":"%2FexecutionOrder.html","content":"\n{% centerquote %} \n JS 是按照`代码块`进行 编译、执行 的。\n{% endcenterquote %}\n\n---\n<!-- more -->\n## script标签区分代码块\n```javascript\n<script>\n  alert('代码块一');\n</script>\n<script>\n  alert('代码块二');\n</script>\n```\n\n## 关于函数(声明式函数、赋值型（函数表达式）函数、匿名函数、自执行函数)\n### 函数提升\n`声明函数与赋值函数的区别在于： 在 JS 的预编译期间，声明式函数会被先提取出来，然后才按照顺序执行 JS代码。`\n\n```javascript\nA();  // 'A '\nfunction A() {\n  console.log('A');\n}\n\nB(); // error， B is not a function\nvar B = function() {\n  console.log('B');\n}\n```\n\n### 匿名函数（没有名字的函数）\n```javascript\nfunction() {} // 匿名函数\n```\n\n### 自执行函数\n```javascript\n(function() {\n  console.log(3);\n})();\n\n// 带参数\n(function(num){\n  console.log(num);\n})(3); // 3\n\n// 没有括号会报错 如下\nfunction() {\n  console.log(3);\n}();\n```\n原因如下：\n- function {}()其实这是一个函数声明。\n- JS运行的时候，会对函数声明进行预编译，然后在执行其他语句。\n- 也就是说function(){}先被预编译了。然后JS看见了()。JS一脸懵逼，这不得报错吗。\n- 而匿名函数实际上是一个语句，正常执行。\n\n自执行函数的标识也可以是\n```javascript\n!function(){}()      (function(){})()    \n~function(){}()      void function(){}()\n```\n\n## 预编译期和执行期\n{% note info %}\nJS的解析分为两个阶段：预编译 和 执行期。\n{% endnote %}\n- 预编译期间：对本代码块中的所有声明变量和函数进行处理(类似于C语言的编译) ，但需要注意，1.此时处理函数的只是 声明式函数2.变量也只是进行了声明但是没有进行初始化和赋值\n- 编译期间：从上到下编译代码块。\n\n### 函数声明提前且后来居上覆盖\n```javascript\ngetName(); // 6\nfunction getName() { alert (5);}\nvar getName = function () { alert (4);};\nfunction getName() { alert (6);}\n\n---\nvar getName = function () { alert (4);};\nfunction getName() { alert (6);}\ngetName(); // 4 函数声明都被提升了，表达式会覆盖掉\n```\n\n### 练习题\n```javascript\nfunction Foo() {\n    getName = function () { alert (1); };\n    return this;\n}\nFoo.getName = function () { alert (2);};\nFoo.prototype.getName = function () { alert (3);};\nvar getName = function () { alert (4);};\nfunction getName() { alert (5);}\n \n//请写出以下输出结果：\nFoo.getName(); // 2\ngetName();  // 4\nFoo().getName(); // 1\ngetName(); // 1\nnew Foo.getName(); // 2\nnew Foo().getName(); // 3\n```\n\n## ES6之前，JS没有变量作用域。只有 函数作用域 和 全局作用域。\n```javascript\n{\n  var a = 3;\n}\nconsole.log(a); // 3\n---\n{\n  let a = 3;\n}\nconsole.log(a); // error\n```","tags":["知识"],"categories":["JS"]},{"title":"JavaScript深入之执行上下文","url":"%2Fcontext.html","content":"\n## 变量/函数提升(函数及变量的声明都将被提升到函数的最顶部，且函数声明在变量声明上边)\n\n```javascript\nif(!\"a\" in window){ // false\n    var a=1;\n}\nconsole.log(a) // undefined\n```\n\n```javascript\nfunction foo() {\n    console.log('foo1');\n}\n\nfoo();  // foo2\n\nfunction foo() {\n    console.log('foo2');\n}\n\nfoo(); // foo2\n---\nvar getName = function () { alert (4);};\nfunction getName() { alert (5);}\ngetName(); // 4\n---\nfunction getName() { alert (5);}\nvar getName = function () { alert (4);};\nfunction getName() { alert (6);}\ngetName(); // 4\n```\n函数表达式执行的优先级==!主要原因是函数声明都被提前了，所以函数表达式在最后会覆盖。\n\nJavaScript 引擎并非一行一行地分析和执行程序，而是一段一段地分析执行。插槽slot\n可执行代码的类型：全局代码、函数代码、eval代码。\nJavaScript 引擎创建了执行上下文栈（Execution context stack，ECS）来管理执行上下文\n\n--- \n<!-- more -->\n\n为了模拟执行上下文栈的行为，让我们定义执行上下文栈是一个数组：\n\n```javascript\nECStack = [];\n```\n\n试想当 JavaScript 开始要解释执行代码的时候，最先遇到的就是全局代码，所以初始化的时候首先就会向执行上下文栈压入一个全局执行上下文，我们用 globalContext 表示它，并且只有当整个应用程序结束的时候，ECStack 才会被清空，所以程序结束之前， ECStack 最底部永远有个 globalContext：\n\n```javascript\nECStack = [\n    globalContext\n];\n```\n\n现在 JavaScript 遇到下面的这段代码了：\n\n```javascript\nfunction fun3() {\n    console.log('fun3')\n}\n\nfunction fun2() {\n    fun3();\n}\n\nfunction fun1() {\n    fun2();\n}\n\nfun1();\n```\n\n当执行一个函数的时候，就会创建一个执行上下文，并且压入执行上下文栈，当函数执行完毕的时候，就会将函数的执行上下文从栈中弹出。知道了这样的工作原理，让我们来看看如何处理上面这段代码：\n\n```javascript\n// 伪代码\n\n// fun1()\nECStack.push(<fun1> functionContext);\n\n// fun1中竟然调用了fun2，还要创建fun2的执行上下文\nECStack.push(<fun2> functionContext);\n\n// 擦，fun2还调用了fun3！\nECStack.push(<fun3> functionContext);\n\n// fun3执行完毕\nECStack.pop();\n\n// fun2执行完毕\nECStack.pop();\n\n// fun1执行完毕\nECStack.pop();\n\n// javascript接着执行下面的代码，但是ECStack底层永远有个globalContext\n```\n\n## 三大属性\n- 变量对象\n- 作用域链\n- this\n\n## 全局对象\n{% note info %}\n\n全局对象是预定义的对象，作为 JavaScript 的全局函数和全局属性的占位符。通过使用全局对象，可以访问所有其他所有预定义的对象、函数和属性。\n\n{% endnote %}\n\n{% note info %}\n\n例如，当JavaScript 代码引用 parseInt() 函数时，它引用的是全局对象的 parseInt 属性。全局对象是作用域链的头，还意味着在顶层 JavaScript 代码中声明的所有变量都将成为全局对象的属性。\n\n{% endnote %}\n\n```javascript\n// 在浏览器客户端 全局对象就是window对象\n// 通过this引用\nthis === window  // true\nthis.window === window // true\nthis instanceof Object // 是通过Object构造函数实例出来的对象\nMath.random() \nthis.Math.random() // 预定义了一些函数和属性\n\n// window指向自身\nvar a=1;\na // 1\nthis.a // 1\nwindow.a // 1 \nthis.window.a // 1\n```\n\n## 函数声明>变量声明\n\n```javascript\nconsole.log(foo); // 打印函数\n\nfunction foo(){\n    console.log(\"foo\");\n}\n\nvar foo = 1;\n```\n执行上下文时，首先会处理函数声明，其次会处理变量声明，如果如果变量名称跟已经声明的形式参数或函数相同，则变量声明不会干扰已经存在的这类属性。","tags":["上下文"],"categories":["JS"]},{"title":"JavaScript深入之作用域","url":"%2Fscope.html","content":"\n## 作用域\n\n作用域指的是程序源代码中定义变量的区域\n\n作用域规定了如何查找变量，也就是确定当前执行代码对变量的访问权限。\n\nJavaScript 采用词法作用域(lexical scoping)，也就是静态作用域。函数的作用域在函数定义的时候就决定了，函数的作用域基于函数创建的位置。\n\n---\n<!-- more -->\n\n```javascript\nvar value=1\nfunction print(){\n  console.log(value)\n}\nfunction foo(){\n  var value=2\n  print()\n}\nfoo() // value 1 如果是动态作用域则是2\n```\n我们再来看两道题：\n```javascript\nvar scope = \"global scope\";\nfunction checkscope(){\n    var scope = \"local scope\";\n    function f(){\n        return scope;\n    }\n    return f();\n}\ncheckscope();\n```\n```javascript\nvar scope = \"global scope\";\nfunction checkscope(){\n    var scope = \"local scope\";\n    function f(){\n        return scope;\n    }\n    return f;\n}\ncheckscope()();\n```\n两道题的执行结果都是 \"local scope\"\n\nJavaScript 函数的执行用到了作用域链，这个作用域链是在函数定义的时候创建的。嵌套的函数 f() 定义在这个作用域链里，其中的变量 scope 一定是局部变量，不管何时何地执行函数 f()，这种绑定在执行 f() 时依然有效。\n\n","tags":["作用域"],"categories":["JS"]},{"title":"JavaScript深入之从原型到原型链","url":"%2Fprototype.html","content":"\n## 构造函数创建对象\n\n我们先使用构造函数创建一个对象：\n\n```javascript\nfunction Person() {}\nvar person = new Person();\nperson.name = \"cosyer\";\nconsole.log(person.name); // cosyer\n```\n\n在这个例子中，Person 就是一个构造函数，我们使用 new 创建了一个实例对象 person。\n\n---\n\n<!-- more -->\n\n很简单吧，接下来进入正题：\n\n### prototype\n\n每个函数都有一个 prototype 属性，就是我们经常在各种例子中看到的那个 prototype ，比如：\n\n```javascript\nfunction Person() {}\n// prototype是函数才会有的属性\nPerson.prototype.name = \"cosyer\";\nvar person1 = new Person();\nvar person2 = new Person();\nconsole.log(person1.name); // cosyer\nconsole.log(person2.name); // cosyer\n```\n\n那这个函数的 prototype 属性到底指向的是什么呢？是这个函数的原型吗？\n\n其实，函数的 prototype 属性指向了一个对象，这个对象正是调用该构造函数而创建的实例的原型，也就是这个例子中的 person1 和 person2 的原型。\n\n那什么是原型呢？你可以这样理解：每一个 JavaScript 对象(null 除外)在创建的时候就会与之关联另一个对象，这个对象就是我们所说的原型，每一个对象都会从原型\"继承\"属性。\n\n让我们用一张图表示构造函数和实例原型之间的关系：\n![prototype](http://p33v4b0bc.bkt.clouddn.com/prototype1.png)\n\n在这张图中我们用 Object.prototype 表示实例原型。\n\n那么我们该怎么表示实例与实例原型，也就是 person 和 Person.prototype 之间的关系呢，这时候我们就要讲到第二个属性：\n\n### **proto**\n\n为了证明这一点,我们可以在火狐或者谷歌中输入：\n\n```javascript\nfunction Person() {}\nvar person = new Person();\nconsole.log(person.__proto__ === Person.prototype); // true\n```\n\n于是我们更新下关系图：\n![prototype](http://p33v4b0bc.bkt.clouddn.com/prototype2.png)\n\n既然实例对象和构造函数都可以指向原型，那么原型是否有属性指向构造函数或者实例呢？\n\n### constructor\n\n指向实例倒是没有，因为一个构造函数可以生成多个实例，但是原型指向构造函数倒是有的，这就要讲到第三个属性：constructor，每个原型都有一个 constructor 属性指向关联的构造函数。\n\n为了验证这一点，我们可以尝试：\n\n```javascript\nfunction Person() {}\nconsole.log(Person === Person.prototype.constructor); // true\n```\n\n所以再更新下关系图：\n![prototype](http://p33v4b0bc.bkt.clouddn.com/prototype3.png)\n综上我们可以得出：\n\n```javascript\nfunction Person() {}\n\nvar person = new Person();\n\nconsole.log(person.__proto__ == Person.prototype); // true\nconsole.log(Person.prototype.constructor == Person); // true\n// 顺便学习一个ES5的方法,可以获得对象的原型 实例原型的constructor指向构造函数,构造函数的prototype指向实例原型,实例对象的__proto__指向实例原型,实例原型也是对象,它也有原型 最后的一个环节是null。访问实例对象的constructor时,也能从实例原型上去找,从而指向到构造函数。\nconsole.log(Object.getPrototypeOf(person) === Person.prototype); // true\n```\n\n## 实例与原型\n\n当读取实例的属性时，如果找不到，就会查找与对象关联的原型中的属性，如果还查不到，就去找原型的原型，一直找到最顶层为止。\n\n举个例子：\n\n```javascript\nfunction Person() {}\n\nPerson.prototype.name = \"cosyer\";\n\nvar person = new Person();\n\nperson.name = \"Daisy\";\nconsole.log(person.name); // Daisy\n\ndelete person.name;\nconsole.log(person.name); // cosyer\n```\n\n在这个例子中，我们给实例对象 person 添加了 name 属性，当我们打印 person.name 的时候，结果自然为 Daisy。\n\n但是当我们删除了 person 的 name 属性时，读取 person.name，从 person 对象中找不到 name 属性就会从 person 的原型也就是 person.\\_\\_proto\\_\\_ ，也就是 Person.prototype 中查找，幸运的是我们找到了 name 属性，结果为 cosyer。\n\n但是万一还没有找到呢？原型的原型又是什么呢？\n\n## 原型的原型\n\n在前面，我们已经讲了原型也是一个对象，既然是对象，我们就可以用最原始的方式创建它，那就是：\n\n```javascript\nvar obj = new Object();\nobj.name = \"cosyer\";\nconsole.log(obj.name); // cosyer\n```\n\n其实原型对象就是通过 Object 构造函数生成的，结合之前所讲，实例的 **proto** 指向构造函数的 prototype ，所以我们再更新下关系图：\n![prototype](http://p33v4b0bc.bkt.clouddn.com/prototype4.png)\n\n## 原型链\n\n那 Object.prototype 的原型呢？\n\nnull，我们可以打印：\n\n```javascript\nconsole.log(Object.prototype.__proto__ === null); // true\n```\n\n然而 null 究竟代表了什么呢？\n\n引用阮一峰老师的 《undefined 与 null 的区别》 就是：\n\nnull 表示“没有对象”，即该处不应该有值。\n\n所以 Object.prototype.**proto** 的值为 null 跟 Object.prototype 没有原型，其实表达了一个意思。\n\n所以查找属性的时候查到 Object.prototype 就可以停止查找了。\n\n最后一张关系图也可以更新为：\n![prototype](http://p33v4b0bc.bkt.clouddn.com/prototype5.png)\n\n图中由相互关联的原型组成的链状结构就是原型链，也就是蓝色的这条线。\n\n## 补充\n\n### constructor\n\n```javascript\nfunction Person() {}\nvar person = new Person();\nconsole.log(person.constructor === Person); // true\n```\n\n当获取 person.constructor 时，其实 person 中并没有 constructor 属性,当不能读取到 constructor 属性时，会从 person 的原型也就是 Person.prototype 中读取，正好原型中有该属性，所以：\n\n```javascript\nperson.constructor === Person.prototype.constructor;\n```\n\n### **proto**\n\n其次是 **proto** ，绝大部分浏览器都支持这个非标准的方法访问原型，然而它并不存在于 Person.prototype 中，实际上，它是来自于 Object.prototype ，与其说是一个属性，不如说是一个 getter/setter，当使用 obj.**proto** 时，可以理解成返回了 Object.getPrototypeOf(obj)。\n\n### 继承\n\n最后是关于继承，前面我们讲到“每一个对象都会从原型‘继承’属性”，实际上，继承是一个十分具有迷惑性的说法，引用《你不知道的 JavaScript》中的话，就是：继承意味着复制操作，然而 JavaScript 默认并不会复制对象的属性，相反，JavaScript 只是在两个对象之间创建一个关联，这样，一个对象就可以通过委托访问另一个对象的属性和函数，所以与其叫继承，委托的说法反而更准确些。\n\n- class 的引入只是语法糖本身还是基于原型的\n- 几乎所有 JavaScript 中的对象都是位于原型链顶端的Object的实例。\n\n```javascript\nvar p = Object.create(o);\n// p是一个继承自 o 的对象\n对象的原型链\no===>Object.prototype===>null\n数组的原型链\na===>Array.prototype===>Object.prototype===>null\n函数的原型链\nf===>Function.prototype===>Object.prototype===>null\n```\n\n### 原型对象的添加属性\n```javascript\nfunction Persion(){}\nPersion.prototype.sayName=function(){\n  console.log('darling')\n}\n// Persion.prototype={\n//   sayName:function(){\n//     console.log('darling')\n//   } \n// }\nlet persion =new Persion()\npersion.sayName() // darling\n\nfunction Persion(){}\nlet persion=new Persion()\n// 这里重写了原型对象，实例对象和最初的原型对象断开了联系\nPersion.prototype={\n  sayName:function(){\n    console.log('darling')\n  } \n}\npersion.sayName() // error\n```\n\n### new 操作符具体干了什么\n1.创建空对象，并且this变量引用该对象同时继承该函数的原型\n2.属性和方法加入到this引用的对象中\n3.新创建的对象用this引用，并且隐式地返回this\n```javascript\nfunction Base(){\n  this.id = \"base\";\n}\nvar obj = new Base();\n```\n**new干了什么？** \n\n1.var obj = {};\n\n2.obj.\\_\\_proto\\_\\_ = Base.protptype;\n\n3.Base.call(obj);\n\n- es5使用Object.create()来创建对象 new Object() 字面量写法{}\n使用Object.create()是将对象继承到__proto__属性上，\nObject.create(null)没有继承任何原型方法，也就是说它的原型链没有上一层。\n- es6使用class关键字\n\n- 构造器就是普通的函数,new来作用称为构造方法(构造函数)\n\n- 访问原型链会损耗性能,不存在的属性会遍历原型链直到最后一层\n\n- hasOwnProperty 是 JavaScript 中唯一处理属性并且不会遍历原型链的方法。","tags":["原型链"],"categories":["JS"]},{"title":"你所不知道的前端冷门小知识(长期更新)","url":"%2Fsmallknowledge.html","content":"\n## void \nvoid其实是javascript中的一个函数，接受一个参数，返回值永远是undefined\n```javascript\nvoid 0  \nvoid (0)  \nvoid \"hello\"  \nvoid (new Date())  \n// all will return undefined  \ncontext == void 666\n```\n\n---\n<!-- more -->\n\n## Element.scrollIntoViewIfNeeded\n Element.scrollIntoViewIfNeeded（）方法用来将不在浏览器窗口的可见区域内的元素滚动到浏览器窗口的可见区域。 如果该元素已经在浏览器窗口的可见区域内，则不会发生滚动。\n ```javascript\nelement.scrollIntoViewIfNeeded(); // 等同于element.scrollIntoViewIfNeeded(true) \nelement.scrollIntoViewIfNeeded(true); \nelement.scrollIntoViewIfNeeded(false);\n ```\n- 当元素已经在可视区域时，调用 Element.scrollIntoView()，无论设置什么参数，均发生滚动。\n- 当元素已经在可视区域时，调用 Element.scrollIntoViewIfNeeded()，无论设置什么参数，均不发生滚动。\n\n## JS取整\n```javascript\n~~2.5 // 2 按位取反 -2^31~2^31-1 -2147483648~2147483647\n0|3.123;// 3 或运算\n4.3|0; // 4\n4.3<<0; // 4\n```\n\n与Math.floor()的对比\n\n|区别|Math.floor|~~|\n|:---|:---:|---:|\n|NaN|NaN|0|\n|+0|+0|0|\n|-0|-0|0|\n|+Infinity|+Infinity|0|\n|-Infinity|-Infinity|0|\n|1.2|1.2|1.2|\n|-1.2|-1|-1|\n\n1. 位运算：~ 的结果是 int32 的有符号整数，所以肯定不可能是 NaN 和无穷，因此 1、4、5 两者不同。x|0  x<<0\n\n3. Math.floor 向 +∞ 取整。\n\n3. parseInt(string, radix);\n\nparseInt() 函数解析一个字符串参数，并返回一个指定基数的整数 (数学系统的基础)。\n\nparseInt 解析字符串 '-0' 会得到 -0。如果参数是数字 -0，会得到 0。\n\n```javascript\nparseInt(0.0000000003) // 3\n\nparseInt('2017-07-04') // 2017\n```\n## 全等判断\njavascript 中 +0 完全等于 -0，那么怎么分区两者呢？\n```javascript\n1/0 === 1/-0 // false \n+0 === -0 // true\nObject.is(+0,-0) // false\n```\n区分NaN\n```javascript\nNaN !== NaN // true\nNaN === NaN // false \nObject.is(NaN,NaN) // true\n```\n\n## try-catch跳出forEach循环\nforEach遍历不能保证遍历的顺序，以及不能break;一般for循环的性能是forEach的20倍\n```javascript \ntry {\n    [1, 2, 3].forEach(v => {\n        if (v === 2) {\n            throw new Error('my err')\n        }\n    })\n} catch (e) {\n    if (e.message === 'my err') {\n        console.log('breaked') \n    } else {\n        throw e\n    }\n}\n\n// 用some也可以在遍历中跳出循环\n[1,2,3].some((item)=>{\n\tconsole.log(item)\n  return item === 2 // 如果item等于2就跳出循环\n})\n```\n\n## fetch模拟post进行api测试\n```javascript\nfetch(apiUrl, {\n    method: 'POST',\n    headers: {\n        'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({q: 1})\n}).then(async res => console.log(await res.json()))\n```\n\n## 实现var a = add(2)(3)(4)\njs中console.log一个对象时，会对这个对象进行toString()操作，还有些情况会对对象进行valueOf()操作\nvauleOf优先于toString()被调用\n```javascript\nfunction add(num){\n    var _add = function(args){\n        num+=args;\n        return arguments.callee; //  return add(num+args);\n    }\n    _add.toString = _add.valueOf = function(){\n        return num;\n    }\n    return _add;\n}\nadd(2)(3)(4);// function 9\n```\n\n## Date相关\n\n### Date构造函数\n```javascript\nDate.now() === new Date().getTime()\nDate.parse(\"2018-06-13\") === new Date(\"2018-06-13\").getTime()\n// 浏览器之间解析时间不同 safari 解析横杠 - 会出错所以尽量用斜杠 /\n```\n### 当前时间\n```javascript\nlet d = new Date()\nlet year=d.getFullYear();\nlet month=d.getMonth()+1; // 月份索引从0开始\nlet day=d.getDate(); // getDay()用于获取星期\nlet hour=d.getHours();\nlet minute=d.getMinutes();\nlet second=d.getSeconds();\nconsole.log(`${year}-${month}-${day} ${hour}:${minute}:${second}`) // 2018-6-13 21:20:48\n// 不足2位数补0\nconsole.log([year, month, day].map((item)=>{\n        item = item.toString();\n    return item[1] ? item : \"0\" + item;\n}).join(\"-\") +\" \" +[hour, minute, second].map((item)=>{\n        item = item.toString();\n    return item[1] ? item : \"0\" + item;\n}).join(\":\"))  // 2018-06-13 21:20:48\n```\n### Date计时\n以博客存活时间为例\n```javascript\nvar time = new Date(); \nvar t = \"博客存活了\"+Math.floor((+new Date - 1527868800000) / (1000 * 60 * 60 * 24)) + \"天\" + time.getHours() + \"小时\" \n+ time.getMinutes() + \"分\" + time.getSeconds() + \"秒\"; \n// 博客存活了11天 21小时28分51秒 1527868800000当时的时间转的时间戳\n```\n\n### Date原型扩展方法\n```javascript\nDate.prototype.format = function (format) {\n\t\t\tvar o = {\n\t\t\t\t\t\"M+\": this.getMonth() + 1,\n\t\t\t\t\t\"d+\": this.getDate(),\n\t\t\t\t\t\"h+\": this.getHours(),\n\t\t\t\t\t\"m+\": this.getMinutes(),\n\t\t\t\t\t\"s+\": this.getSeconds(),\n\t\t\t\t\t\"q+\": Math.floor((this.getMonth() + 3) / 3),\n\t\t\t\t\t\"S\": this.getMilliseconds()\n\t\t\t};\n\t\t\tif (/(y+)/.test(format)) {\n\t\t\t\t\tformat = format.replace(RegExp.$1, (this.getFullYear() + \"\").substr(4 - RegExp.$1.length));\n\t\t\t}\n\t\t\tfor (var k in o) {\n\t\t\t\t\tif (new RegExp(\"(\" + k + \")\").test(format)) {\n\t\t\t\t\t\t\tformat = format.replace(RegExp.$1, RegExp.$1.length == 1 ? o[k] : (\"00\" + o[k]).substr((\"\" + o[k]).length));\n\t\t\t\t\t}\n\t\t\t}\n\t\t\treturn format;\n\t};\n\n\tDate.prototype.addDays = function (d) {\n\t\t\tthis.setDate(this.getDate() + d);\n\t};\n\n\tDate.prototype.addWeeks = function (w) {\n\t\t\tthis.addDays(w * 7);\n\t};\n\n\tDate.prototype.addMonths = function (m) {\n\t\t\tvar d = this.getDate();\n\t\t\tthis.setMonth(this.getMonth() + m);\n\t\t\t//if (this.getDate() < d)\n\t\t\t//  this.setDate(0);\n\t};\n```\n\n## 页面加载时间\n```javascript\nwindow.onload = function () {\n  var loadTime = window.performance.timing.domContentLoadedEventEnd-window.performance.timing.navigationStart; \n  console.log('Page load time is '+ loadTime);\n}\n```\nonload和onready的区别：\n1. 执行时间\n\n　　window.onload必须等到页面内包括图片的所有元素加载完毕后才能执行。 \n\n　　$(document).ready()是DOM结构绘制完毕后就执行，不必等到加载完毕。\n\n2. 编写个数不同\n\n　　window.onload不能同时编写多个，如果有多个window.onload方法，只会执行一个。\n\n　　$(document).ready()可以同时编写多个，并且都可以得到执行。\n\n3. 简化写法\n\n　　window.onload没有简化写法。\n\n　　$(document).ready(function(){})可以简写成$(function(){});\n\n## 常用标签\n```javascript\n<meta charset=\"utf-8\">\n<meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\">\n<meta name=\"viewport\" content=\"width=device-width,initial-scale=1.0,maximum-scale=1.0,user-scalable=no\">\n<link rel=\"shortcut icon\" href=\"favicon.ico\" type=\"image/x-icon\" />\n// seo\n<title></title>\n<meta name=\"author\" name=\"cosyer\">\n<meta name=\"keywords\" name=\"cosyer\">\n<meta name=\"description\" name=\"cosyer\">\n<link rel=\"stylesheet\" href=\"\">\n<script src=\"\"></script>\n```\n\n## 获取url参数\n```javascript\nlet reg = new RegExp(\"(^|&)\" + name + \"=([^&]*)(&|$)\")\nlet r = window.location.search.substr(1).match(reg)\nif (r != null) return decodeURIComponent(r[2]) // encodeURIComponent()\nreturn null\n```\n\n## String原型方法扩展\n```javascript\n// 连字符转驼峰\nString.prototype.hyphenToHump = function () {\n\t\treturn this.replace(/-(\\w)/g, function () {\n\t\t\t\treturn arguments[1].toUpperCase()\n\t\t})\n}\n\n// 驼峰转连字符\nString.prototype.humpToHyphen = function () {\n\t\treturn this.replace(/([A-Z])/g, \"-$1\").toLowerCase()\n}\n```\n\n## 拦截控制台、右键和F12\n```javascript\n\tdocument.onkeydown = function () {\n\t\t\tvar e = window.event || arguments[0];\n\t\t\t//屏蔽F12\n\t\t\tif (e.keyCode == 123) {\n\t\t\t\t\treturn false;\n\t\t\t\t\t//屏蔽Ctrl+Shift+I\n\t\t\t} else if ((e.ctrlKey) && (e.shiftKey) && (e.keyCode == 73)) {\n\t\t\t\t\treturn false;\n\t\t\t\t\t//屏蔽Shift+F10\n\t\t\t} else if ((e.shiftKey) && (e.keyCode == 121)) {\n\t\t\t\t\treturn false;\n\t\t\t}\n\t};\n\t//屏蔽右键单击\n\tdocument.oncontextmenu = function () {\n\t\t\treturn false;\n\t};\n```\n\n## 崩溃欺骗\n```javascript\nvar OriginTitle = document.title;\nvar titleTime;\ndocument.addEventListener('visibilitychange', function () {\n    if (document.hidden) {\n        $('[rel=\"icon\"]').attr('href', \"/img/TEP.ico\");\n        document.title = '╭(°A°`)╮ 页面崩溃啦 ~';\n        clearTimeout(titleTime);\n    }\n    else {\n        $('[rel=\"icon\"]').attr('href', \"/favicon.ico\");\n        document.title = '(ฅ>ω<*ฅ) 噫又好了~' + OriginTitle;\n        titleTime = setTimeout(function () {\n            document.title = OriginTitle;\n        }, 2000);\n    }\n});\n```\n\n## a标签\n```javascript\n    // 邮件\n\t<a href={'mailto:'+props.email}></a>\n\t// 下载只有 Firefox 和 Chrome 支持 download 属性。\n\t<a href=\"/images/myw3schoolimage.jpg\" download=\"w3logo\"></a>\n    // QQ\n\t<a href=\"tencent://message/?uin=535509852&Site=-&Menu=yes\" target=\"_blank\">QQ:535509852</a>\n```\n\n## 两数组去重合并\n```javascript\nfunction filter(a,b){\n\tfor(let m in a){ \n\tlet isExist=false;\n\tfor(let n in b ){\n\tif(b[n]==a[m]){\n\tisExist=true;\n\tbreak;\n\t}\n\t}\nif(!isExist){\n\tb.push(a[m]);\n}\n\t}\n\treturn b;\n}\n// filter([1,2,3,4],[2,3])\n// [2, 3, 1, 4]\n```\n\n##  `<script>`元素放在 HTML 文件底部\n\n我们将 `<script>`元素放在 HTML 文件底部的原因是，浏览器按照代码在文件中的顺序解析 HTML。如果 JavaScript在最前面被加载，HTML还未加载，JavaScript将无法作用于HTML，所以JavaScript无效，如果 JavaScript 代码出现问题则 HTML 不会被加载。所以将 JavaScript 代码放在底部是最好的选择。\n\n## 某个字符在字符串中的个数\n```javascript\nlet str=\"11112234241\"\nconsole.log(str.split(\"1\").length-1)\n```\n\n## 数组求最大值方法汇总\n```javascript\n1. es6拓展运算符...\nMath.max(...arr)\n2. es5 apply(与方法1原理相同)\nMath.max.apply(null,arr)\n3. for循环\nlet max = arr[0];\nfor (let i = 0; i < arr.length - 1; i++) {\n    max = max < arr[i+1] ? arr[i+1] : max\n}\n4. 数组sort\narr.sort((a,b)=>{\n\treturn a<b // 降序\n})\n5. 数组reduce\narr.reduce((a,b)=>{\n\treturn a>b?a:b\n})\n```\n\n```javascript\nfunction foo(p1,p2) {\nthis.val = p1 + p2;\n}\nvar bar = foo.bind( null, \"p1\" );\nvar baz = new bar( \"p2\" );\nbaz.val; // p1p2\n```","tags":["知识"],"categories":["知识"]},{"title":"快速了解React 16新特性","url":"%2Freact16.html","content":"\n## Error Boundary\n\nError Boundary可以看作是一种特殊的React组件，新增了componentDidCatch这个生命周期函数，它可以捕获自身及子树上的错误并对错误做优雅处理，包括上报错误日志、展示出错提示，而不是卸载整个组件树。（注：它并不能捕获runtime所有的错误，比如组件回调事件里的错误，可以把它想象成传统的try-catch语句）\n\n---\n<!-- more -->\n\n```javascript\n//最佳实践：将ErrorBoundary抽象为一个公用的组件类\n \nimport React, { Component } from 'react'\n \nexport default class ErrorBoundary extends Component {\n  constructor(props) {\n    super(props)\n    this.state = { hasError: false }\n  }\n  componentDidCatch(err, info) {\n    this.setState({ hasError: true })\n    //sendErrorReport(err,info)\n  }\n  render(){\n    if(this.state.hasError){\n      return <div>Something went wrong!</div>\n    }\n    return this.props.children\n  }\n}\n```\n\n```javascript\n// 使用方式 包裹容易出错的组件\nrender(){\n  return (\n    <div>\n      <ErrorBoundary>\n        <Profile user={this.state.user} />\n      </ErrorBoundary>\n      <button onClick={this.onClick}>Update</button>\n    </div>\n  )\n}\n```\n## render方法新增返回类型\n在React 16中，render方法支持直接返回string，number，boolean，null，portal，以及fragments(带有key属性的数组)，这可以在一定程度上减少页面的DOM层级。\n\n```javascript\n//string\nrender(){\n  return 'hello,world'\n}\n \n//number\nrender(){\n  return 12345\n}\n \n//boolean\nrender(){\n  return isTrue?true:false\n}\n \n//null\nrender(){\n  return null\n}\n \n//fragments，未加key标识符，控制台会出现warning\nrender(){\n  return [\n    <div>hello</div>,\n    <span>world</span>,\n    <p>oh</p>\n  ]\n}\n```\n以上各种类型现在均可以直接在render中返回，不需要再在外层包裹一层容器元素，不过在返回的数组类型中，需要在每个元素上加一个唯一且不变的key值，否则控制台会报一个warning。\n\n## 使用createPortal将组件渲染到当前组件树之外\n\n## 支持自定义DOM属性\n在之前的版本中，React会忽略无法识别的HTML和SVG属性，自定义属性只能通过data-*形式添加，现在它会把这些属性直接传递给DOM（这个改动让React可以去掉属性白名单，从而减少了文件大小）。\n\n## setState传入null时不会再触发更新\n\n## 更好的服务器端渲染\nReact 16的SSR被完全重写，新的实现非常快，接近3倍性能于React 15，现在提供一种流模式streaming，可以更快地把渲染的字节发送到客户端。\n\n## 新的打包策略\n新的打包策略中去掉了process.env检查。\nReact 16的体积比上个版本减小了32%（30% post-gzip），文件尺寸的减小一部分要归功于打包方法的改变。\n\n## React 16采用了新的核心架构React Fiber。官方解释是“React Fiber是对核心算法的一次重新实现”","tags":["react"],"categories":["JS"]},{"title":"React 16新特性context api","url":"%2Fcontextapi.html","content":"\nReact 16.3带来了正式版的context API。让我们来看看有哪些改变，在那些地方可以取代redux吧！\n\n--- \n<!-- more -->\n\n我当前依赖的版本\n```javascript\n\"dependencies\": {\n    \"react\": \"^16.4.0\",\n    \"react-dom\": \"^16.4.0\"\n}\n```\n## 创建context实例\n```javascript\n// 创建context实例\nconst ThemeContext = React.createContext({\n  background: 'red',\n  color: 'white'\n});\n\nconst {Provider,Consumer} = ThemeContext\n```\n\n## Provider 组件 \n**Provider组件用于将context数据传给该组件树下的所有组件 value属性是context的内容。**\n```javascript\nclass App extends React.Component {\n  render() {\n    return (\n      <Provider value={{ text: 'hello react!' }}>\n        <Comp1 />\n        <Comp2 />\n      </Provider>\n    );\n  }\n}\n```\n## Consumer 组件\n**Consumer消费Provider传递的数据**\n```javascript\n// 函数式\nconst Comp1 = () => (\n  <Consumer>\n    {context => <p>{context.text}</p>}\n  </Consumer>\n);\n// 类\nclass Comp2 extends React.Component {\n  render() {\n    return (\n      <Consumer>\n        {context => <p>{context.text}</p>}\n      </Consumer>\n    );\n  }\n}\n```\n如果你没有将Consumer作为Provider的子组件，那么Consumer将使用创建context时的参数作为context。","tags":["context api"],"categories":["JS"]},{"title":"如何理解JS闭包","url":"%2Fclosure.html","content":"\n{% centerquote %} \nJavaScript中的函数运行在它们被定义的作用域里，而不是它们被执行的作用域里。\n{% endcenterquote %} \n\n在JS中函数作为普通对象进行传递\n\n--- \n<!-- more -->\n## 什么是闭包?\n简单来说，闭包是指可以访问另一个函数作用域变量的函数，一般是定义在外层函数中的内层函数。(函数和声明该函数的词法环境的组合)\n\n## 为什么需要闭包？\n使用闭包主要是为了设计私有的变量和方法。闭包的优点可以避免全局变量的污染，缺点是会常驻内存，增大内存的使用\n量，使用不当会造成内存泄漏。\n\n## 特点\n1. 定义外层函数，封装被保护的局部变量。 \n2. 定义内层函数，执行对外部函数变量的操作。 \n3. 外层函数返回内层函数的对象，并且外层函数被调用，结果保存在一个全局的变量中。\n\n## 特性\n1. 函数嵌套函数，内层函数被返回。\n2. 函数内部可以引用外部的参数和变量，以及外部函数能访问的所有变量和函数。但是，外部函数却不能够访问定义在内部函数中的变量和函数。\n3. 参数和变量不会被垃圾回收机制回收。\n\n## 实例\n```javascript\nvar add = (function () {\n    var counter = 0;\n    return function () {return counter += 1;}\n})();\nadd();\nadd();\nadd();\n// add()调用过后应当销毁其变量，但其内层函数被返回了，并且还保留着对变量的引用，所以没有销毁还保留在内存当中。\n```\n\n```javascript\nvar arr=['one','two','three']\nfor(var i =0;i<arr.length;i++){\nsetTimeout(function(){\n  console.log(i)\n},i*1000)\n}\n// 打印3次3 执行setTimeout时for循环已经结束此时的i的值为3\n```\n\n```javascript\nvar arr=['one','two','three']\nfor(var i =0;i<arr.length;i++){\n// 匿名闭包\n(function(index){\n  setTimeout(function(){\n  console.log(arr[index])\n},index*1000)\n})(i)\n}\n```\n\n避免使用过多的闭包，可以用let关键词，每个闭包都绑定了块作用域的变量，这意味着不再需要额外的闭包。\n```javascript\nvar arr=['one','two','three']\nfor(let i =0;i<arr.length;i++){\nsetTimeout(function(){\n  console.log(arr[i])\n},i*1000)\n}\n```\n","tags":["闭包"],"categories":["JS"]},{"title":"使用 Async/Await 让你的代码更简洁","url":"%2Fes7async.html","content":"\nAsync/Await是一种允许我们像构建没有回调函数的普通函数一样构建Promise的新语法。以往的异步方法无外乎回调函数和`Promise`。但是Async/Await建立于[Promise](https://mydearest.cn/createPromise.html)之上。\n\n---\n<!-- more -->\n\n## Async/Await语法\n### async关键字(放置在一个函数前面)。\n\n```javascript\nasync function f() {\n    return 1\n    // return Promise.resolve(1)\n}\nf().then(value) // 1\n```\n\nasync修饰过的函数总是返回一个promise，如果代码中有return <非promise>语句，JavaScript会自动把返回的这个value值包装成promise的resolved值。\n### await关键字(只能在async函数内部使用)\n关键词await可以让JavaScript进行等待，直到一个promise执行并返回它的结果，JavaScript才会继续往下执行。\n\n```javascript\nfunction timeout(ms) {\n    return new Promise((resolve) => {\n        setTimeout(resolve, ms);\n    });\n}\n\nasync function asyncPrint(value, ms) {\n    await timeout(ms);\n    console.log(value);\n}\n\nasyncPrint('hello world', 50);\n```\n\n### 错误处理(使用try-catch捕获)\n```javascript\nasync function f() {\n    try {\n        let response = await fetch('http://no-such-url')\n    } catch (err) {\n        alet(err) // TypeError: failed to fetch 也能捕获多行语句 类似链式Promise最后的单个catch函数\n    }\n}\nf()\n```\n\n如果我们不使用try-catch，然后async函数f()的调用产生的promise变成reject状态的话，我们可以添加.catch去处理它：\n```javascript\nasync function f() {\n    let response = await fetch('http://no-such-url')\n}\n// f()变成了一个rejected的promise\nf().catch(alert) // TypeError: failed to fetch\n```\n\n### 结合Promise.all\nasync/await能够与Promise.all友好的协作，当我们需要等待多个promise时，我们可以将他们包装在Promise.all中然后使用await：\n\n```javascript\n\n// 直到数组全部返回结果\nlet results = await Promise.all([\n   fetch(url1),\n   fetch(url2),\n   ...\n])\n```\n## 总结\n\n随着单页JavaScript web程序的兴起和对NodeJS的广泛采用，如何优雅的处理并发对于JavaScript开发人员来说比任何以往的时候都显得更为重要。Async/Await缓解了许多因为控制流问题而导致bug遍地的这个困扰着JavaScript代码库数十年的问题，并且几乎可以保证让任何异步代码块变的更精炼，更简单，更自信。","tags":["Async/Await"],"categories":["JS"]},{"title":"从 for 循环入手优化性能","url":"%2Fforloop.html","content":"\n今天要说的是最简单的 for 循环，一个简单的 for 循环看似没有任何优化的意义，但实质上优化前后差距挺大的，那么该如何优化呢？\n\n---\n<!-- more -->\n\n从最简单的遍历数组说起。\n```javascript\n// 定义一个数组arr（假设是从后台返回的数据）\nlet i = 0;\nlet arr = [];\nwhile (i < 50) {\n    arr.push(i);\n    i++;\n}\n```\n\n如果我们想从数组 arr 中取出数据，就必须要进行遍历，普遍的做法是：\n```javascript\nfor (let i = 0; i < arr.length; i++) {\n    // arr[i]\n}\n```\n\n但其实这样的写法遍历是最慢的，他要经过两次迭代，第一次是 i 的迭代，每次都要判断 i 是否小于 arr.length，第二次是 arr 的迭代，每次循环 arr 都会调用底层的迭代器，对长度进行计算，这样循环的效率非常低，时间空间复杂度为 O[n^2]。\n\n下面进行优化，看看两者到底有什么区别：\n```javascript\nfor (let i = 0, len = arr.length; i < len; i++) {\n    // arr[i]\n}\n```\n\n区别就是，整个循环当中，我们预存了 len 来保存数组的长度，这样不需要每次循环都调用底层迭代器，调用一次即可，这样的时间空间复杂度为 O[n+1]。\n\n但是这并不是最完美的，因为会多了一次迭代操作，那么该如何进行优化呢？\n```javascript\nfor (let i = 0, item; item = arr[i++];) {\n    // item\n}\n```\n这次迭代的时间空间复杂度为 O[n] ，完美做到了每次一迭代没有通过长度进行判断，而是直接通过下标进行取值的方式映射到了循环体内部。\n\n最后用5万条数据进行测试各种方式的循环时间：\n```javascript\n// 定义一个数组arr（假设是从后台返回的数据）\nlet index = 0;\nlet arr = [];\nwhile (index < 50000) {\n    arr.push(index);\n    index++;\n}\n\nconsole.time('one');\nfor (let i = 0; i < arr.length; i++) {\n\n}\nconsole.timeEnd('one');\n\nconsole.time('two');\nfor (let i = 0, len = arr.length; i < len; i++) {\n\n}\nconsole.timeEnd('two');\n\nconsole.time('three');\nfor (let i = 0, item; item = arr[i++];) {\n\n}\nconsole.timeEnd('three');\n\n// es6的数组遍历\nconsole.time('four');\nfor (let i of arr) {\n\n}\nconsole.timeEnd('four');\n// 会访问可枚举属性和原型的遍历，数组不推荐使用\nconsole.time('five');\nfor (let i in arr) {\n\n}\nconsole.timeEnd('five');\n// one: 0.711ms\n// two: 4.508ms\n// three: 0.006ms\n// four: 3.255ms\n// five: 11.144ms\n```\n在数据量大的情况下，第三种循环方式效果显而易见。\n\n","tags":["性能优化"],"categories":["JS"]},{"title":"es6函数新特性","url":"%2Fes6function.html","content":"\n1. 设置函数默认值 \n2. 结合解构赋值默认值使用\n3. 利用rest(...变量名)传入任意参数\n\n---\n<!-- more -->\n\n## ...rest和扩展运算符\nrest参数（…变量名），用于获取函数的多余参数，rest参数搭配的变量是一个数组，该变量将多余的参数放入其中。\n```javascript\nfunction foo(...y){\n    console.log(y)  // [1,2,3,4]\n}\nfoo(1,2,3,4)\n```\n## 利用扩展运算符（…数组）替代数组的apply方法\n在es5中，需要用apply将数组转化为函数参数，在es6中就不需要这种方式了，可以使用…来代替\n```javascript\nfunction f(x, y, z) {\n    console.log(x + ' ' + y + ' ' + z);\n}\nvar args = [1, 2, 3];\n// f.apply(null, args)\nf(...args)\n```\n\n数组push的例子：\n```javascript\nvar arr1 = [0, 1, 2]\nvar arr2 = [3, 4, 5]\nvar arr3 = arr1.concat(arr2)\nconsole.log(arr3) //[ 0, 1, 2, 3, 4, 5 ]\n\nvar arr4 = arr1.push(arr2)\nconsole.log(arr1) //[ 0, 1, 2, [ 3, 4, 5 ] ]\n```\n\n如果想使用arr1.push方法的话，就需要用apply传arr2了\n```javascript\nvar arr4 = Array.prototype.push.apply(arr1, arr2) //[ 0, 1, 2, 3, 4, 5 ]\n```\n\n如果使用扩展运算符的话，就简单一些了\n```javascript\nvar arr4 = arr1.push(...arr2)\n```\n\n## name属性\n函数的name属性可以返回函数名\n```javasctrpt\nfunction abc(){\n    console.log(abc.name)\n}\nabc() // 'abc'\n```\n\n## 函数的静态变量和函数\n```javascript\nfunction Box(){}\n\nBox.num = 12;  //静态变量\nBox.fn = function(){};  //静态函数\n\nconsole.log(Box.num);  //12\nconsole.log(Box.fn);  //function(){}\nconsole.log(typeof Box.fn);  //function\n\nvar t = new Box();\nconsole.log(t.num);  //undefined\nconsole.log(t.fn);  //undefined\nconsole.log(typeof t.fn);//undefined\n```\n\n静态变量和静态函数是Box对象的属性和方法，不属于实例。\n\n## 函数的实例函数和变量\n```javascript\nfunction Box(){\n  this.a = [];  //实例变量\n  this.fn = function(){};  //实例方法\n}\n\nconsole.log(Box.a);  //undefined\nconsole.log(Box.fn);  //undefined\nconsole.log(typeof Box.fn);  //undefined\n\nvar t = new Box();\nvar t2 = new Box();\n\nconsole.log(t.a);  //[]\nconsole.log(t2.a);  //[]\nt.a.push(1);   // t.a [1]\nconsole.log(t2.a);  //[]\n\nconsole.log(typeof t.fn);\n```\n每个实例都有一套实例属性和实例方法，互不影响。\n\n原型上的属性和方法，是实例共用的。\n\n## 函数传参\n\n### 基本类型 (基本类型的变量复制)\n```javascript\nvar count = 10;\nfunction num(num1){\n   num1 = 1;\n   return num1;\n}\nvar result = num(count);\nconsole.log(result);//1\nconsole.log(count);//10，并未变成1\n```\n### 引用类型\n```javascript\nvar person  = {\n    name : \"Tom\"\n};\nfunction obj(peo){\n    peo.name = \"Jerry\";\n    return peo;\n}\nvar result = obj(person);\nconsole.log(result.name);// Jerry\nconsole.log(person.name);// Jerry\n```\n\n```javascript\nvar person = {\n    name : \"Tom\"\n}; \nfunction obj(peo){\n    peo = {\n       name : \"Jerry\"\n    };\n    return peo;\n}\nvar result = obj(person);\nconsole.log(result.name);// Jerry\nconsole.log(person.name);// Tom\n```\nperson传递给函数中的peo，但在函数内部peo又指向了一个新对象，所以result.name是新对象的值，person还是指向原对象，所以并没有改变。\n\nECMAScript中所有函数的参数都是按值传递的。 ——《JS高程》\n\n我们可以把ECMAScript函数的参数想象成局部变量，在向参数传递基本类型的值时，被传递的值被复制给一个局部变量。\n\n在向函数传递引用类型时，会把这个值在内存中的地址复制给一个局部变量，因此这个局部变量的变化会反映在函数的外部。\n\n即使在函数内部修改了参数的值，但原始的引用仍然保持未变。","tags":["es6"],"categories":["JS"]},{"title":"JavaScript 中 this 的详解","url":"%2Fjsthis.html","content":"\n## this 的指向\n\n`this` 是 js 中定义的关键字， 它的指向并不是在函数定义的时候确定的，而是在调用的时候确定的。换句话说，函数的调用方式决定了 this 指向。在实际应用中，`this`的指向大致可以分为以下四种情况。\n\n---\n<!-- more -->\n### 作为普通函数调用(直接调用)：函数名()\n当函数作为一个普通函数被调用，`this`指向全局对象。在浏览器里，全局对象就是 window。\n```javascript\nwindow.name = 'cosyer';\nfunction getName(){\n    console.log(this.name);\n}\ngetName();                   // cosyer\n```\n可以看出，此时`this`指向了全局对象 window。(NodeJS的全部对象是global)\n在ECMAScript5的严格模式下，这种情况`this`已经被规定不会指向全局对象了，而是undefined。\n```javascript\n'use strict';\nfunction fun(){\n    console.log(this);\n}\nfun();                      // undefined\n```\n### 作为对象的方法调用\n当函数作为一个对象里的方法被调用，`this`指向该对象\n```javascript\nvar obj = {\n    name : 'cosyer',\n    getName : function(){\n        console.log(this.name);\n    }\n}\n\nobj.getName();              // cosyer\n```\n如果把对象的方法赋值给一个变量，再调用这个变量：\n```javascript\nvar obj = {\n    fun1 : function(){\n        console.log(this);\n    }\n}\nvar fun2 = obj.fun1;\nfun2();                     // window\n```\n此时调用 fun2 方法 输出了 window 对象，说明此时`this`指向了全局对象。给 fun2 赋值，其实是相当于：\n```javascript\nvar fun2 = function(){\n    console.log(this);\n}\n```\n可以看出，此时的`this`已经跟 obj 没有任何关系了。这时 fun2 是作为普通函数调用。\n\n### 作为构造函数调用\njs中没有类，但是可以从构造器中创建对象，并提供了`new`运算符来进行调用该构造器。构造器的外表跟普通函数一样，大部分的函数都可以当做构造器使用。当构造函数被调用时，`this`指向了该构造函数实例化出来的对象。\n```javascript\nvar Person = function(){\n    this.name = 'cosyer';\n}\nvar obj = new Person();\nconsole.log(obj.name);      // cosyer\n```\n如果构造函数显式的返回一个对象，那么`this`则会指向该对象。\n```javascript\nvar Person = function(){\n    this.name = 'cosyer';\n    return {\n        name : 'chenyu'\n    }\n}\nvar obj = new Person();\nconsole.log(obj.name);      // chenyu\n```\n如果该函数不用`new`调用，当作普通函数执行，那么`this`依然指向全局对象。\n\n### call() 或 apply() 调用 Function.prototype.bind()将当前函数绑定到指定对象绑定返回新函数之后再进行调用\n通过调用函数的 call() 或 apply() 方法可动态的改变`this`的指向。\n```javascript\nvar obj1 = {\n    name : 'cosyer',\n    getName : function(){\n        console.log(this.name);\n    }\n}\nvar obj2 = {\n    name : 'chenyu'\n}\n\nobj1.getName();             // cosyer\nobj1.getName.call(obj2);    // chenyu\nobj1.getName.apply(obj2);   // chenyu\n```\n**简单的实现bind方法**\n```javascript\nconst obj = {};\n\nfunction test() {\n    console.log(this === obj);\n}\n\n// 自定义的函数，模拟 bind() 对 this 的影响\nfunction myBind(func, target) {\n    return function() {\n        return func.apply(target, arguments); // 第一个参数为函数运行的this指向\n    };\n}\n\nconst testObj = myBind(test, obj);\ntest();     // false\ntestObj();  // true\n```\n从上面的示例可以看到，首先，通过闭包，保持了 target，即绑定的对象；然后在调用函数的时候，对原函数使用了 apply 方法来指定函数的 this。\n\n不过使用 apply 和 call 的时候仍然需要注意，如果目录函数本身是一个绑定了 this 对象的函数，那 apply 和 call 不会像预期那样执行\n```javascript\nconst obj = {};\n\nfunction test() {\n    console.log(this === obj);\n}\n\n// 绑定到一个新对象，而不是 obj\nconst testObj = test.bind({});\ntest.apply(obj);    // true\n\n// 期望 this 是 obj，即输出 true\n// 但是因为 testObj 绑定了不是 obj 的对象，所以会输出 false\ntestObj.apply(obj); // false\n```\n\n## 箭头函数 \n{% note info %}\n箭头函数的引入有两个方面的作用：一是更简短的函数书写，二是对`this`的词法解析。\n在箭头函数出现之前，每个新定义的函数都有其自己的`this`值（例如，构造函数的`this`指向了一个新的对象；严格模式下的函数的`this`值为 undefined；如果函数是作为对象的方法被调用的，则其`this`指向了那个调用它的对象）。在面向对象风格的编程中，这会带来很多困扰。\n{% endnote %}\n\n### ES6 的箭头函数 ()=>，指向与一般function定义的函数不同，比较容易绕晕，箭头函数`this`的定义：箭头函数中的`this`是在定义函数的时候绑定，而不是在执行函数的时候绑定。本质来说箭头函数没有自己的`this`，它的`this`是派生而来的。箭头函数会捕获其所在上下文的`this`值，作为自己的`this`值，即指向所在上下文的执行环境(直接外层函数)。\n\n### 基础语法\n```javascript\n// 等价于: => { return expression; } \n(param1, param2, …, paramN) => { statements }\n(param1, param2, …, paramN) => expression\n\n// 如果只有一个参数，圆括号是可选的:\n(singleParam) => { statements }\nsingleParam => { statements }\n\n// 无参数或者多参数的箭头函数需要使用圆括号或者下划线:\n() => { statements } _ => { statements }\n```\n### 高级语法\n```javascript\n// 只返回一个对象字面量,没有其他语句时, 应当用圆括号将其包起来:\nparams => ({foo: bar})\n\n// 支持 Rest parameters 和 default parameters:\n(param1, param2, ...rest) => { statements }\n(param1 = defaultValue1, param2, …, paramN = defaultValueN) => { statements }\n\n// 支持参数列表中的解构赋值\nvar f = ([a, b] = [1, 2], = ) => a + b + c;\nf(); // 6\n```\n\n### 箭头函数不可以使用arguments对象，\narguments对象在函数体内不存在，如果要用的话，可以用rest参数代替\n\n### 箭头函数没有原型\n```javascript\nvar Foo = () => {};\n\nconsole.log(Foo.prototype); // undefined\n```\n### 箭头函数无法构造函数\n```javascript\nvar Foo = () => {};\n\nvar foo = new Foo(); // TypeError: Foo is not a constructor\n```\n### 箭头函数无法使用yield\nyield 关键字通常不能在箭头函数中使用（除非是嵌套在允许使用的函数内）。因此，箭头函数不能用作生成器。\n\n### 箭头函数或者组件上绑定事件的时候this.xxx.bind(this)，这样会生成新函数，推荐constructor里bind() garbage collection(垃圾回收机制)\n","tags":["this指向"],"categories":["JS"]},{"title":"react面试题记录","url":"%2FreactInterview.html","content":"\n{% fi http://p33v4b0bc.bkt.clouddn.com/reactInterview.jpeg , reactInterview, React%}\n---\n<!-- more -->\n\n## React面试问题\n下面是一个常用的关于 React 的面试问题列表：\n\n#### React 的工作原理\nReact 会创建一个虚拟 DOM(virtual DOM)。当一个组件中的状态改变时，React 首先会通过 \"diff\" 算法来标记虚拟 DOM 中的改变，第二步是调节(reconciliation)，会用 diff 的结果来更新 DOM。\n\n#### 使用 React 有何优点\n* 只需查看 `render` 函数就会很容易知道一个组件是如何被渲染的\n* JSX 的引入，使得组件的代码更加可读，也更容易看懂组件的布局，或者组件之间是如何互相引用的\n* 支持服务端渲染，这可以改进 SEO 和性能\n* 易于测试\n* React 只关注 View 层，所以可以和其它任何框架(如Backbone.js, Angular.js)一起使用\n\n#### 展示组件(Presentational component)和容器组件(Container component)之间有何不同\n展示组件关心组件看起来是什么。展示专门通过 props 接受数据和回调，并且几乎不会有自身的状态，但当展示组件拥有自身的状态时，通常也只关心 UI 状态而不是数据的状态。\n\n容器组件则更关心组件是如何运作的。容器组件会为展示组件或者其它容器组件提供数据和行为(behavior)，它们会调用 `Flux actions`，并将其作为回调提供给展示组件。容器组件经常是有状态的，因为它们是(其它组件的)数据源。\n\n#### 类组件(Class component)和函数式组件(Functional component)之间有何不同\n* 类组件不仅允许你使用更多额外的功能，如组件自身的状态和生命周期钩子，也能使组件直接访问 `store` 并维持状态\n* 当组件仅是接收 `props`，并将组件自身渲染到页面时，该组件就是一个 '无状态组件(stateless component)'，可以使用一个纯函数来创建这样的组件。这种组件也被称为哑组件(dumb components)或展示组件\n\n#### (组件的)状态(state)和属性(props)之间有何不同\n`State` 是一种数据结构，用于组件挂载时所需数据的默认值。`State` 可能会随着时间的推移而发生突变，但多数时候是作为用户事件行为的结果。\n\n`Props`(properties 的简写)则是组件的配置。`props` 由父组件传递给子组件，并且就子组件而言，`props` 是不可变的(immutable)。组件不能改变自身的 props，但是可以把其子组件的 props 放在一起(统一管理)。Props 也不仅仅是数据--回调函数也可以通过 props 传递。\n\n#### 指出(组件)生命周期方法的不同\n* `componentWillMount` -- 多用于根组件中的应用程序配置\n* `componentDidMount` -- 在这可以完成所有没有 DOM 就不能做的所有配置，并开始获取所有你需要的数据；如果需要设置事件监听，也可以在这完成\n* `componentWillReceiveProps` -- 这个周期函数作用于特定的 prop 改变导致的 state 转换\n* `shouldComponentUpdate` -- 如果你担心组件过度渲染，`shouldComponentUpdate` 是一个改善性能的地方，因为如果组件接收了新的 `prop`， 它可以阻止(组件)重新渲染。shouldComponentUpdate 应该返回一个布尔值来决定组件是否要重新渲染\n* `componentWillUpdate` -- 很少使用。它可以用于代替组件的 `componentWillReceiveProps` 和 `shouldComponentUpdate`(但不能访问之前的 props)\n* `componentDidUpdate` -- 常用于更新 DOM，响应 prop 或 state 的改变\n* `componentWillUnmount` -- 在这你可以取消网络请求，或者移除所有与组件相关的事件监听器\n\n#### 应该在 React 组件的何处发起 Ajax 请求\n在 React 组件中，应该在 `componentDidMount` 中发起网络请求。这个方法会在组件第一次“挂载”(被添加到 DOM)时执行，在组件的生命周期中仅会执行一次。更重要的是，你不能保证在组件挂载之前 Ajax 请求已经完成，如果是这样，也就意味着你将尝试在一个未挂载的组件上调用 setState，这将不起作用。在 `componentDidMount` 中发起网络请求将保证这有一个组件可以更新了。\n\n#### 何为受控组件(controlled component)\n在 HTML 中，类似 `<input>`, `<textarea>` 和 `<select>` 这样的表单元素会维护自身的状态，并基于用户的输入来更新。当用户提交表单时，前面提到的元素的值将随表单一起被发送。但在 React 中会有些不同，包含表单元素的组件将会在 state 中追踪输入的值，并且每次调用回调函数时，如 `onChange` 会更新 state，重新渲染组件。一个输入表单元素，它的值通过 React 的这种方式来控制，这样的元素就被称为\"受控元素\"。\n\n#### 在 React 中，refs 的作用是什么\nRefs 可以用于获取一个 DOM 节点或者 React 组件的引用。何时使用 refs 的好的示例有管理焦点/文本选择，触发命令动画，或者和第三方 DOM 库集成。你应该避免使用 String 类型的 Refs 和内联的 ref 回调。Refs 回调是 React 所推荐的。\n\n#### 何为高阶组件(higher order component)\n高阶组件是一个以组件为参数并返回一个新组件的函数。HOC 运行你重用代码、逻辑和引导抽象。最常见的可能是 Redux 的 `connect` 函数。除了简单分享工具库和简单的组合，HOC最好的方式是共享 React 组件之间的行为。如果你发现你在不同的地方写了大量代码来做同一件事时，就应该考虑将代码重构为可重用的 HOC。\n装饰器@decoration\n练习\n\n<hr />\n\n* 写一个反转其输入的 HOC\n* 写一个从 API 提供数据给传入的组件的 HOC\n* 写一个实现 shouldComponentUpdate 来避免 reconciliation 的 HOC\n* 写一个通过 `React.Children.toArray` 对传入组件的子组件进行排序的 HOC\n\n#### 使用箭头函数(arrow functions)的优点是什么\n* 作用域安全：在箭头函数之前，每一个新创建的函数都有定义自身的 `this` 值(在构造函数中是新对象；在严格模式下，函数调用中的 `this` 是未定义的；如果函数被称为“对象方法”，则为基础对象等)，但箭头函数不会，它会使用封闭执行上下文的 `this` 值。\n* 简单：箭头函数易于阅读和书写\n* 清晰：当一切都是一个箭头函数，任何常规函数都可以立即用于定义作用域。开发者总是可以查找 next-higher 函数语句，以查看 `this` 的值\n\n#### 为什么建议传递给 setState 的参数是一个 callback 而不是一个对象\n因为 `this.props` 和 `this.state` 的更新可能是异步的，不能依赖它们的值去计算下一个 state。\n\n#### 除了在构造函数中绑定 `this`，还有其它方式吗\n你可以使用属性初始值设定项(property initializers)来正确绑定回调，create-react-app 也是默认支持的。在回调中你可以使用箭头函数，但问题是每次组件渲染时都会创建一个新的回调。\n\n#### 怎么阻止组件的渲染\n在组件的 `render` 方法中返回 `null` 并不会影响触发组件的生命周期方法\n\n#### 当渲染一个列表时，何为 key？设置 key 的目的是什么\nKeys 会有助于 React 识别哪些 `items` 改变了，被添加了或者被移除了。Keys 应该被赋予数组内的元素以赋予(DOM)元素一个稳定的标识，选择一个 key 的最佳方法是使用一个字符串，该字符串能惟一地标识一个列表项。很多时候你会使用数据中的 IDs 作为 keys，当你没有稳定的 IDs 用于被渲染的 `items` 时，可以使用项目索引作为渲染项的 key，但这种方式并不推荐，如果 `items` 可以重新排序，就会导致 `re-render` 变慢。\n\n#### (在构造函数中)调用 super(props) 的目的是什么\n在 `super()` 被调用之前，子类是不能使用 `this` 的，在 ES2015 中，子类必须在 `constructor` 中调用 `super()`。传递 `props` 给 `super()` 的原因则是便于(在子类中)能在 `constructor` 访问 `this.props`。\n\n#### 何为 JSX\nJSX 是 JavaScript 语法的一种语法扩展，并拥有 JavaScript 的全部功能。JSX 生产 React \"元素\"，你可以将任何的 JavaScript 表达式封装在花括号里，然后将其嵌入到 JSX 中。在编译完成之后，JSX 表达式就编程了常规的 JavaScript 对象，这意味着你可以在 `if` 语句和 `for` 循环内部使用 JSX，将它赋值给变量，接受它作为参数，并从函数中返回它。\n\n#### 怎么用 React.createElement 重写下面的代码\n\nQuestion：\n\n```js\nconst element = (\n  <h1 className=\"greeting\">\n    Hello, world!\n  </h1>\n);\n```\n\nAnswer：\n\n```js\nconst element = React.createElement(\n  'h1',\n  {className: 'greeting'},\n  'Hello, world!'\n);\n```\n\n#### 何为 `Children`\n在JSX表达式中，一个开始标签(比如`<a>`)和一个关闭标签(比如`</a>`)之间的内容会作为一个特殊的属性`props.children`被自动传递给包含着它的组件。\n\n这个属性有许多可用的方法，包括 `React.Children.map`，`React.Children.forEach`， `React.Children.count`， `React.Children.only`，`React.Children.toArray`。\n\n#### 在 React 中，何为 state\nState 和 props 类似，但它是私有的，并且完全由组件自身控制。State 本质上是一个持有数据，并决定组件如何渲染的对象。\n\n#### 你为何排斥 create-react-app\n在你排斥之前，你并不能去配置 webpack 或 babel presets。\n\n#### 何为 redux\nRedux 的基本思想是整个应用的 state 保持在一个单一的 store 中。store 就是一个简单的 javascript 对象，而改变应用 state 的唯一方式是在应用中触发 actions，然后为这些 actions 编写 reducers 来修改 state。整个 state 转化是在 reducers 中完成，并且不应该由任何副作用。\n\n#### 在 Redux 中，何为 store\nStore 是一个 javascript 对象，它保存了整个应用的 state。与此同时，Store 也承担以下职责：\n\n* 允许通过 `getState()` 访问 state\n* 运行通过 `dispatch(action)` 改变 state\n* 通过 `subscribe(listener)` 注册 listeners\n* 通过 `subscribe(listener)` 返回的函数处理 listeners 的注销\n\n#### 何为 action\nActions 是一个纯 javascript 对象，它们必须有一个 type 属性表明正在执行的 action 的类型。实质上，action 是将数据从应用程序发送到 store 的有效载荷。\n\n#### 何为 reducer\n一个 reducer 是一个纯函数，该函数以先前的 state 和一个 action 作为参数，并返回下一个 state。\n\n#### Redux Thunk 的作用是什么\nRedux thunk 是一个允许你编写返回一个函数而不是一个 action 的 actions creators 的中间件。如果满足某个条件，thunk 则可以用来延迟 action 的派发(dispatch)，这可以处理异步 action 的派发(dispatch)。\n\n#### 何为纯函数(pure function)\n一个纯函数是一个不依赖于且不改变其作用域之外的变量状态的函数，这也意味着一个纯函数对于同样的参数总是返回同样的结果。\n\n#### redux有哪些中间件，作用？\n中间件提供第三方插件的模式，自定义拦截 action -> reducer 的过程。变为 action -> middlewares -> reducer 。这种机制可以让我们改变数据流，实现如异步 action ，action 过滤，日志输出，异常报告等功能。\n\nredux-logger：提供日志输出\n\nredux-thunk：处理异步操作\n\nredux-promise：处理异步操作，actionCreator的返回值是promise\n\n#### 示例项目\n* [React Spotify](https://github.com/Pau1fitz/react-spotify)\n* [React Soundcloud](https://github.com/andrewngu/sound-redux)\n\n#### 虚拟dom 普通的js对象\n虚拟dom相当于在js和真实dom中间加了一个缓存，利用dom diff算法避免了没有必要的dom操作，从而提高性能。具体实现步骤如下：用 JavaScript 对象结构表示 DOM 树的结构；然后用这个树构建一个真正的 DOM 树，插到文档当中当状态变更的时候，重新构造一棵新的对象树。然后用新的树和旧的树进行比较，记录两棵树差异把2所记录的差异应用到步骤1所构建的真正的DOM树上，视图就更新了。插入新组件有了key可以帮助react找到映射。\n\n#### 事件委托\n每个setState重新渲染整个子树标记为dirty。 如果要压缩性能，请尽可能调用 setState，并使用shouldComponentUpdate 来防止重新渲染大型子树。把树形结构按照层级分解，只比较同级元素。给列表结构的每个单元添加唯一的key属性，方便比较。pureComponent+immutable","tags":["面试"],"categories":["JS"]},{"title":"搭建VPS科学上网","url":"%2FscienceInternet.html","content":"\n{% fi http://p33v4b0bc.bkt.clouddn.com/shadowsocks.jpg, Shadowsocks, Shadowsocks %}\n---\n<!-- more -->\n\n{% note info %}\n\n快速搭建Shadowsocks\n\n{% endnote %}\n\n## [购买Vultr服务器](https://www.vultr.com/)\n\n### Vultr服务器价格\n\nVultr服务器按小时计费,最低0.004美元/h,算起来2.5美元/月，且destory掉服务器是不收费的，所以不用担心如果暂时没有使用还一直扣费的问题。\n\n最低价格的服务器是512M的内存，每个月500G的流量，只能说99%的情况下完全够用了！\n\n![introduce](http://p33v4b0bc.bkt.clouddn.com/vultr.png)\n\n## 买好中意的地区节点服务器之后，windows系统可以用Xshell ssh连接到服务器，并执行以下搭建ss脚本命令\n\n```javascript\n\nwget --no-check-certificate -O shadowsocks.sh\nhttps://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks.sh\n \nchmod +x shadowsocks.sh\n \n./shadowsocks.sh 2>&1 | tee shadowsocks.log\n\n```\n\n接着按照提示输入密码，端口和加密方式，如下图：\n\n![ss1](http://p33v4b0bc.bkt.clouddn.com/ss1.png)\n\n![ss2](http://p33v4b0bc.bkt.clouddn.com/ss1.png)\n\n然后可以去听首歌~，成功安装之后有你配置的信息显示，记住这些信息。\n\n## 安装ss客户端，配置好上面的服务器配置信息，就可以开心地玩耍了。Chrome插件推荐使用Proxy SwitchySharp来管理和切换代理配置非常好用。\n\nWindows客户端(代理端口默认1080)\nhttps://github.com/shadowsocks/shadowsocks-windows/releases\n\nUbuntu \nsudo add-apt-repository ppa:hzwhuang/ss-qt5 \nsudo apt-get update \nsudo apt-get install shadowsocks-qt5\n\nMac客户端(代理端口默认1086)\n\nhttps://github.com/shadowsocks/ShadowsocksX-NG/releases\n\nAndroid客户端\n\nhttps://github.com/shadowsocks/shadowsocks-android/releases","tags":["vultr"],"categories":["工具"]},{"title":"Promise诞生记","url":"%2FcreatePromise.html","content":"\n{% fi http://p33v4b0bc.bkt.clouddn.com/promise.png, Promise, Promise %}\n\n前端近年的兴起，有大部分是因为 `NodeJS` 的诞生，而 `NodeJS` 是个适用于 **异步IO** 密集型的语言，一些基于 `NodeJS` 的框架，比喻 *KOA2、Adonis* 就有大量的 `async` 和 `await` 语法，`async`的函数的返回值就是 `Promise` 对象，我们可以用 `async` 和 `await` 语法，写出优雅的异步代码，来替换难看且难维护的回调函数。\n\n## Promise 概念\n`Promise`是一种对异步操作的封装，主流的规范是Promise/A+。\n`Promise`可以使得异步代码层次清晰，便于理解，且更加容易维护。\n`Promise`构造函数接受一个函数作为参数，该函数的两个参数分别是resolve和reject。它们是两个函数，由 JavaScript 引擎提供，不用自己部署。\n生成实例时回执信作为参数的函数；<Br/> \n`resolve`函数的作用是，将Promise对象的状态从“未完成”变为“成功”（即从 pending 变为 fulfilled），在异步操作成功时调用，并将异步操作的结果，作为参数传递出去；\n`reject`函数的作用是，将Promise对象的状态从“未完成”变为“失败”（即从 pending 变为 rejected），在异步操作失败时调用，并将异步操作报出的错误，作为参数传递出去。\n\n---\n<!-- more -->\n\n```javascript\n// 执行顺序\nlet promise = new Promise(function(resolve, reject) {\n  console.log('Promise'); // 新建后立即执行\n  resolve();\n});\npromise.then(function() {\n  console.log('resolved.'); // 同步任务执行完成后才会执行\n});\nconsole.log('Hi!');\n// Promise\n// Hi!\n// resolved\n```\n接下来我们就用`Promise`结合ajax来使用\n```\nconst getJSON = function(url) {\n  const promise = new Promise(function(resolve, reject){\n    const handler = function() {\n      if (this.readyState !== 4) {\n        return;\n      }\n      if (this.status === 200) {\n        resolve(this.response);\n      } else {\n        reject(new Error(this.statusText));\n      }\n    };\n    const client = new XMLHttpRequest();\n    client.open(\"GET\", url);\n    client.onreadystatechange = handler;\n    client.responseType = \"json\";\n    client.setRequestHeader(\"Accept\", \"application/json\");\n    client.send(params);\n  });\n  return promise;\n};\n\ngetJSON(\"/posts.json\").then(function(json) {\n  console.log('Contents: ' + json);\n}, function(error) {\n  console.error('出错了', error);\n});\n```\n\n这里我们会渐进式的来创建一个 `Promise` 的实现，如果，你还不了解 `Promise` ，赶快移步 [Promise](http://es6.ruanyifeng.com/#docs/promise) 了解学习，当然这个实现会符合 [Promise/A+](https://promisesaplus.com) 规范，`JavaScript` 中有很多第三方的 `Promise` 库，[bluebird](http://bluebirdjs.com/docs/getting-started.html) 就是一个第三方 `Promise` 类库，相比其它第三方类库或标准对象来说，其有以下优点：功能更齐全而不臃肿、浏览器兼容性更好,大家可以了解下。\n\n---\n\n废话不多说，直接开干。。。 😠\n\n## 定义 Promise 类型\n\n一个简单 `Promise` 语法，如下\n\n```javascript\nconst promise = new Promise(function(resolve, reject) {\n  // ... doSomething\n\n  if (/* 异步操作成功 */){\n    resolve(value);\n  } else {\n    reject(error);\n  }\n});\n\npromise.then(function(value) {\n  // success\n}, function(error) {\n  // failure 第二个函数可选\n});\n```\n\n### 实现 resolve 和 then\n\n首先我们以上 👆 的语法，自己定义一个 `Promise` 实例\n\n```javascript\nfunction Promise(fn) {\n  let callback = null;\n  //实现 then 方法 , 先一步一步来，实现传一个参数 -- resolve\n  this.then = function(cb) {\n    callback = cb;\n  };\n\n  //实现 resolve , value:异步操作的最终值\n  function resolve(value) {\n    callback(value);\n  }\n  //执行 function 参数\n  fn(resolve);\n}\n```\n一个简单的实例写好了，然后，来用一下，看看 👀 结果如何\n\n```javascript\nconst p = new Promise(function(resolve){\n  resolve(66);\n});\n\np.then(function(value){\n  console.log(value);\n});\n\n```\n{% note info %}\n\n执行结果是：`callback is not a function`\n\n{% endnote %}\n\n### 改进1：延时resolve，修改 callback 为异步\n\n**这里就遇到一个问题： **  \n\n** 目前的Promise有一个bug，假如fn中所包含的是同步代码，则resolve会立即执行，`callback` 还是 `null` ，我们的代码是同步的，而不是异步的。</br> 如是，想办法解决掉这个问题，就是利用 `setTimeout` , 把 `callback` 加入异步队列** \n\n代码如下 👇\n\n```javascript\nfunction Promise(fn) {\n  let callback = null;\n  //实现 then 方法 , 先一步一步来，实现传一个参数 -- resolve\n  this.then = function(cb) {\n    callback = cb;\n  };\n\n  //实现 resolve , value:异步操作的最终值\n  function resolve(value) {\n    // 用 setTimeout 把 callback 加入到异步队列，这样就会，先执行 then() 方法\n    setTimeout(function(){\n      callback(value);\n    },0)\n  }\n  //执行 function 参数\n  fn(resolve);\n}\n```\n\n### 改进2：注册多个回调函数，并实现then的链式调用\n\n```javascript\nfunction Promise(fn) {\n  let value = null\n  let callbackList = [];\n  this.then = function(cb) {\n    callbackList.push(cb);\n    // 实现链式调用\n    return this\n  };\n\n  function resolve(newValue) {\n    value = newValue\n    setTimeout(function(){\n       // 遍历callbackList数组依次执行\n       callbackList.forEach((callback)=>{\n         callback(value)\n       })\n    },0)\n  }\n  fn(resolve);\n}\n```\n### 改进3：引入状态\n\n```javascript\nfunction Promise(fn) {\n  let state='pending'\n  let value = null\n  let callbackList = [];\n  this.then = function(cb) {\n    if(state=='pending'){\n      // pending加入队列\n      callbackList.push(cb);\n      return this\n    }\n    if(state=='fulfilled'){\n      // fulfilled立即执行\n      cb(value)\n      return this\n    }\n  };\n\n  function resolve(newValue) {\n    value = newValue\n    setTimeout(function(){\n       callbackList.forEach((callback)=>{\n         callback(value)\n       })\n    },0)\n  }\n  fn(resolve);\n}\n```\n\n**手动实现一个Promise：**\n```javascript\nclass Promise(){\n  construtor(fn){\n       // 执行队列\n       this._wathcList=[]\n       // 成功\n       this._success_res=null\n       // 失败\n       this._error_res=null\n       this._status=\"success\"\n       fn((...args))=>{\n          // 保存成功数据\n          this._success_res=args\n          this._status='success'\n          // 若为异步则回头执行then成功方法\n          this._watchList.forEach(element => {\n              element.fn1(...args);\n          });\n       },(...args)=>{\n          // 保存失败数据\n          this._error_res=args\n          this._status='error'\n          // 若为异步则回头执行then成功方法\n          this._watchList.forEach(element => {\n              element.fn2(...args);\n          });\n       }\n  }\n  // then 函数\n  then(fn1, fn2) {\n      if (this._status === \"success\") {\n          fn1(...this._success_res);\n      } else if (this._status === \"error\") {\n          fn2(...this._error_res);\n      } else {\n          this._watchList.push({\n              fn1,\n              fn2\n          })\n      }\n  }\n}\n```\n**实现Promise.all**\n```javascript\nPromise1.all = function(arr) {\n    // 存放结果集\n    let result = [];\n    return Promise1(function(resolve, reject) {\n        let i = 0;\n        // 进行迭代执行\n        function next() {\n            arr[i].then(function(res) {\n                // 存放每个方法的返回值\n                result.push(res);\n                i++;\n                // 若全部执行完\n                if (i === result.length) {\n                    // 执行then回调\n                    resolve(result);\n                } else {\n                    // 继续迭代\n                    next();\n                }\n            }, reject)\n        }\n    })\n}\n```\n\n## Promise使用注意点\n1. 一般来说，调用`resolve`或`reject`以后，`Promise`的使命就完成了，后继操作应该放到`then`方法里面，而不应该直接写在`resolve`或`reject`的后面。所以，最好在它们前面加上`return`语句，这样就不会有意外。\n\n2. `Promise`实例具有`then`方法，也就是说，`then`方法是定义在原型对象`Promise.prototype`上的。它的作用是为`Promise`实例添加状态改变时的回调函数。前面说过，`then`方法的第一个参数是`resolved`状态的回调函数，第二个参数（可选）是`rejected`状态的回调函数。`then`方法返回的是一个新的`Promise`实例（注意，不是原来那个`Promise`实例）。因此可以采用链式写法，即then方法后面再调用另一个`then`方法。\n\n3. `Promise.prototype.catch`方法是.then(null, rejection)的别名，用于指定发生错误时的回调函数。`getJSON`方法返回一个`Promise`对象，如果该对象状态变为`resolved`，则会调用`then`方法指定的回调函数；如果异步操作抛出错误，状态就会变为`rejected`，就会调用`catch`方法指定的回调函数，处理这个错误。另外，then方法指定的回调函数，如果运行中抛出错误，也会被`catch`方法捕获。\n\n4. 一般来说，不要在then方法里面定义`reject`状态的回调函数（即then的第二个参数），总是使用`catch`方法。\n\n5. 跟传统的`try/catch`代码块不同的是，如果没有使用`catch`方法指定错误处理的回调函数，`Promise`对象抛出的错误不会传递到外层代码，即不会有任何反应，`Promise`会吃掉错误。\n","tags":["Promise"],"categories":["JS"]},{"title":"如何使用 markdown 语法写博客","url":"%2FmarkdownGrammar.html","content":"\n{% fi http://p33v4b0bc.bkt.clouddn.com/markdown.png, Markdown, Markdown %}\n\n# 标题1\n## 标题2\n*斜体*\n**粗体**\n***粗斜体***<br/>\n~~删除线~~\n<u>下划线文本</u>\n\n1. I\n2. Love \n3. You\n\n- 点\n\n+ Foo\n+ Bar\n---\n<!-- more -->\n\n分隔线\n***\n--- \n___\n\n* * *\n>一级引用\n>>二级引用\n\n`#include<iostream>`\n```\n#include <iostream>\nint main()\n{\nreturn 0;\n}\n```\n~~~\n#include <iostream>\nint main()\n{\nreturn 0;\n}\n~~~\n|标题|标题|标题|\n|:---|:---:|---:|\n|居左测试文本|居中测试文本|居右测试文本|\n|居左测试文本1|居中测试文本2|居右测试文本3|\n|居左测试文本11|居中测试文本22|居右测试文本33|\n|居左测试文本111|居中测试文本222|居右测试文本333|\n\n- [x] 已完成事项\n- [ ] 待办事项1\n- [ ] 待办事项2\n\n### 反斜杠\n\n`Markdown` 可以利用反斜杠来插入一些在语法中有其它意义的符号，例如：如果你想要用星号加在文字旁边的方式来做出强调效果（但不用 `<em>` 标签），你可以在星号的前面加上反斜杠：\n```\n\\*literal asterisks\\*\n```\n效果如下：\n\n\\*literal asterisks\\*\n\n`Markdown` 支持以下这些符号前面加上反斜杠来帮助插入普通的符号：\n\n```\n  \\   反斜线\n  `   反引号\n  *   星号\n  _   底线\n  {}  花括号\n  []  方括号\n  ()  括弧\n  #   井字号\n  +   加号\n  -   减号\n  .   英文句点\n  !   惊叹号\n```\n登录[百度](http://www.baidu.com)\n![Teddy Bear](http://img2.everychina.com/img/d7/f7/1b580dfa9315111397ef93fd24ea-250x250c1-77f7/love_valentine_plush_teddy_bear.jpg)\n","tags":["markdown"],"categories":["工具"]},{"title":"Hello World - 热爱编程的普通人，顺便以此为生。","url":"%2Fhello-world.html","content":"\n之前一直在博客园写博客，但随着技术的发展，博客园的样式和自定义内容远远不能达到我所期望。故此决定迁移博客，希望能总结归纳好自己的技术体系，拓宽拓深技术栈，重新开坑O(∩_∩)O哈哈~。\n\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n---\n<!-- more -->\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","tags":["吐槽"],"categories":["杂谈"]}]