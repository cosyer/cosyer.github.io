<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>cosyer&#39;s Blog</title>
    <link>http://mydearest.cn/</link>
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>陈宇的博客</description>
    <pubDate>Fri, 30 Nov 2018 14:56:51 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>helloPHP</title>
      <link>http://mydearest.cn/helloPHP.html</link>
      <guid>http://mydearest.cn/helloPHP.html</guid>
      <pubDate>Mon, 26 Nov 2018 06:30:10 GMT</pubDate>
      <description>
      
        &lt;p&gt;1年以前我就浅学过PHP，用&lt;code&gt;thinkPHP&lt;/code&gt;框架开发起来确实比较轻松快捷流水化。最近闲来无事，再次回顾学习下这个世界上最好的语言。&lt;/p&gt;
&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;PHP 是一种创建动态交互性站点的强有力的服务器端脚本语言。&lt;/p&gt;
&lt;h2 id=&quot;语法&quot;&gt;&lt;a href=&quot;#语法&quot; class=&quot;headerlink&quot; title=&quot;语法&quot;&gt;&lt;/a&gt;语法&lt;/h2&gt;&lt;p&gt;PHP 脚本在服务器上执行，然后将纯 HTML 结果发送回浏览器。&lt;/p&gt;
&lt;p&gt;PHP 脚本可以放在文档中的任何位置。&lt;/p&gt;
&lt;p&gt;PHP 脚本以 &amp;lt;?php 开始，以 ?&amp;gt; 结束。很多语言的语法都相类似。&lt;/p&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;html&amp;gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;body&amp;gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;?php&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;Hello World!&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 单行注释&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;多行注释&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;?&amp;gt;&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/body&amp;gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>1年以前我就浅学过PHP，用<code>thinkPHP</code>框架开发起来确实比较轻松快捷流水化。最近闲来无事，再次回顾学习下这个世界上最好的语言。</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>PHP 是一种创建动态交互性站点的强有力的服务器端脚本语言。</p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p>PHP 脚本在服务器上执行，然后将纯 HTML 结果发送回浏览器。</p><p>PHP 脚本可以放在文档中的任何位置。</p><p>PHP 脚本以 &lt;?php 开始，以 ?&gt; 结束。很多语言的语法都相类似。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt; </span><br><span class="line">&lt;html&gt; </span><br><span class="line">&lt;body&gt; </span><br><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="keyword">echo</span> <span class="string">"Hello World!"</span>;</span><br><span class="line"><span class="comment">// 单行注释</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">多行注释</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">?&gt;</span> </span><br><span class="line">&lt;/body&gt; </span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><hr><a id="more"></a><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><ul><li><p>变量以 $ 符号开始，后面跟着变量的名称</p></li><li><p>变量名必须以字母或者下划线字符开始</p></li><li><p>变量名只能包含字母数字字符以及下划线（A-z、0-9 和 _ ）</p></li><li><p>变量名不能包含空格</p></li><li><p>变量名是区分大小写的（$y 和 $Y 是两个不同的变量）</p></li></ul><blockquote><p>同js一样PHP也是弱类型脚本语言不需要声明变量的数据类型</p></blockquote><h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><ol><li>local 局部</li><li>global 全局</li><li>static 静态</li><li>parameter 参数</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">$x=<span class="number">5</span>; <span class="comment">// 全局变量 </span></span><br><span class="line">$z=<span class="number">5</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myTest</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    $y=<span class="number">10</span>; <span class="comment">// 局部变量 </span></span><br><span class="line">    <span class="keyword">global</span> $x,$z; <span class="comment">// 函数内部访问全局变量需要加global关键字</span></span><br><span class="line">    $z=$x+$z;</span><br><span class="line">    <span class="comment">// 一样的效果$GLOBALS['z']=$GLOBALS['x']+$GLOBALS['z'];</span></span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line">myTest(); </span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;p&gt;测试函数外变量:&lt;p&gt;"</span>; </span><br><span class="line"><span class="keyword">echo</span> <span class="string">"变量 x 为: $x"</span>; </span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>; </span><br><span class="line"><span class="keyword">echo</span> <span class="string">"变量 y 为: $y"</span>; </span><br><span class="line"><span class="keyword">echo</span> $z; <span class="comment">// 10</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>当一个函数完成时，它的所有变量通常都会被删除。所以当需要时可以声明静态变量</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myTest</span><span class="params">($y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> $x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">echo</span> $x,$y; <span class="comment">// 参数变量</span></span><br><span class="line">    $x++;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">myTest(<span class="number">1</span>);</span><br><span class="line">myTest(<span class="number">2</span>);</span><br><span class="line">myTest(<span class="number">3</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="输出echo和print"><a href="#输出echo和print" class="headerlink" title="输出echo和print"></a>输出echo和print</h3><p>echo 和 print 区别:</p><ul><li>echo - 可以输出一个或多个字符串</li><li>print - 只允许输出一个字符串，返回值总为 1<blockquote><p>echo 输出的速度比 print 快， echo 没有返回值，print有返回值1。</p></blockquote></li></ul><h3 id="语句加分号"><a href="#语句加分号" class="headerlink" title="语句加分号"></a>语句加分号</h3><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><ol><li>String（字符串）</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">$txt1=<span class="string">"Hello"</span>; </span><br><span class="line">$txt2=<span class="string">"World"</span>; </span><br><span class="line"><span class="keyword">echo</span> $txt1 . <span class="string">" "</span> . $txt2;  <span class="comment">// "Hello world"</span></span><br><span class="line"><span class="keyword">echo</span> strlen(<span class="string">"Hello World!"</span>); <span class="comment">// 返回长度</span></span><br><span class="line"><span class="keyword">echo</span> strpos(<span class="string">"Hello World!"</span>,<span class="string">"World"</span>); <span class="comment">// 返回索引和js indexOf很像</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><ol><li>Integer（整型）</li><li>Float（浮点型）</li><li>Boolean（布尔型）</li><li>Array（数组）<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$cars=<span class="keyword">array</span>(<span class="string">"Volvo"</span>,<span class="string">"BMW"</span>,<span class="string">"Toyota"</span>);</span><br><span class="line"><span class="keyword">echo</span> count($cars);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">// 数组遍历</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$cars=<span class="keyword">array</span>(<span class="string">"Volvo"</span>,<span class="string">"BMW"</span>,<span class="string">"Toyota"</span>);</span><br><span class="line">$arrlength=count($cars);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span>($x=<span class="number">0</span>;$x&lt;$arrlength;$x++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> $cars[$x];</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">// 关联数组 object？</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$age=<span class="keyword">array</span>(<span class="string">"Peter"</span>=&gt;<span class="string">"35"</span>,<span class="string">"Ben"</span>=&gt;<span class="string">"37"</span>,<span class="string">"Joe"</span>=&gt;<span class="string">"43"</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"Peter is "</span> . $age[<span class="string">'Peter'</span>] . <span class="string">" years old."</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">// 遍历关联数组</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$age=<span class="keyword">array</span>(<span class="string">"Peter"</span>=&gt;<span class="string">"35"</span>,<span class="string">"Ben"</span>=&gt;<span class="string">"37"</span>,<span class="string">"Joe"</span>=&gt;<span class="string">"43"</span>);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">foreach</span>($age <span class="keyword">as</span> $x=&gt;$x_value)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"Key="</span> . $x . <span class="string">", Value="</span> . $x_value;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li></ol><p>数组排序函数</p><ul><li>sort() - 对数组进行升序排列</li><li>rsort() - 对数组进行降序排列</li><li>asort() - 根据关联数组的值，对数组进行升序排列</li><li>ksort() - 根据关联数组的键，对数组进行升序排列</li><li>arsort() - 根据关联数组的值，对数组进行降序排列</li><li>krsort() - 根据关联数组的键，对数组进行降序排列</li></ul><ol><li>Object（对象）使用class关键字声明类对象。类是可以包含属性和方法的结构。</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  <span class="keyword">var</span> $color;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($color=<span class="string">"green"</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;color = $color;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">what_color</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;color;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><ol><li>NULL（空值）<blockquote><p>PHP var_dump() 函数返回变量的数据类型和值：</p></blockquote><h3 id="常量的声明"><a href="#常量的声明" class="headerlink" title="常量的声明"></a>常量的声明</h3>define()函数 <blockquote><p>define(“slogan”, “hello”);该函数有三个参数:</p></blockquote></li></ol><ul><li>name：必选参数，常量名称，即标志符。</li><li>value：必选参数，常量的值。</li><li>case_insensitive ：可选参数，如果设置为 TRUE，该常量则大小写不敏感。默认是大小写敏感的。</li></ul><h3 id="if…elseif…-else-语句"><a href="#if…elseif…-else-语句" class="headerlink" title="if…elseif….else 语句"></a>if…elseif….else 语句</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$t=date(<span class="string">"H"</span>);</span><br><span class="line"><span class="keyword">if</span> ($t&lt;<span class="string">"10"</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"Have a good morning!"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">elseif</span> ($t&lt;<span class="string">"20"</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"Have a good day!"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"Have a good night!"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="超级全局变量"><a href="#超级全局变量" class="headerlink" title="超级全局变量"></a>超级全局变量</h3><ul><li>$GLOBALS(超级全局变量组)</li><li>$_SERVER(包含了诸如头信息(header)、路径(path)、以及脚本位置(script locations)等等信息的数组)</li><li>$_REQUEST(用于收集HTML表单提交的数据)</li><li>$_POST(用于收集HTML表单提交的数据,method设置为post)</li><li>$_GET(用于收集HTML表单提交的数据,method设置为get,也可以收集URL中发送的数据)</li><li>$_FILES</li><li>$_ENV</li><li>$_COOKIE</li><li>$_SESSION</li></ul><h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><ul><li>while - 只要指定的条件成立，则循环执行代码块</li><li>do…while - 首先执行一次代码块，然后在指定的条件成立时重复这个循环</li><li>for - 循环执行代码块指定的次数</li><li>foreach - 根据数组中每个元素来循环代码块<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$x=<span class="keyword">array</span>(<span class="string">"one"</span>,<span class="string">"two"</span>,<span class="string">"three"</span>);</span><br><span class="line"><span class="keyword">foreach</span> ($x <span class="keyword">as</span> $value)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> $value . <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="魔术常量-预定义常量"><a href="#魔术常量-预定义常量" class="headerlink" title="魔术常量(预定义常量)"></a>魔术常量(预定义常量)</h3><ul><li><strong>LINE</strong>(当前行号)</li><li><strong>FILE</strong>(文件的完整路径和文件名)</li><li><strong>DIR</strong>(文件所在目录)</li><li><strong>FUNCTION</strong>(函数内部返回函数名)</li><li><strong>CLASS</strong>(类内部返回类名)</li><li><strong>TRAIT</strong>(Trait 名包括其被声明的作用区域)从基类继承的成员被插入的 SayWorld Trait 中的 MyHelloWorld 方法所覆盖。其行为 MyHelloWorld 类中定义的方法一致。优先顺序是当前类中的方法会覆盖 trait 方法，而 trait 方法又覆盖了基类中的方法。</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'Hello '</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">trait</span> SayWorld &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">parent</span>::sayHello();</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'World!'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyHelloWorld</span> <span class="keyword">extends</span> <span class="title">Base</span> </span>&#123;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">SayWorld</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">$o = <span class="keyword">new</span> MyHelloWorld();</span><br><span class="line">$o-&gt;sayHello(); <span class="comment">// Hello World</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>METHOD</strong>(返回方法定义时的名称)</li><li><strong>NAMESPACE</strong>(当前的命名空间名称)</li></ul><ol><li>用户编写的代码与PHP内部的类/函数/常量或第三方类/函数/常量之间的名字冲突。</li><li>为很长的标识符名称(通常是为了缓解第一类问题而定义的)创建一个别名（或简短）的名称，提高源代码的可读性。</li></ol><h3 id="php获取下拉菜单的数据"><a href="#php获取下拉菜单的数据" class="headerlink" title="php获取下拉菜单的数据"></a>php获取下拉菜单的数据</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$q = <span class="keyword">isset</span>($_GET[<span class="string">'q'</span>])? htmlspecialchars($_GET[<span class="string">'q'</span>]) : <span class="string">''</span>;</span><br><span class="line"><span class="keyword">if</span>($q) &#123;</span><br><span class="line">        <span class="keyword">if</span>($q ==<span class="string">'BAIDU'</span>) &#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">'百度&lt;br&gt;http://www.baidu.com'</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>($q ==<span class="string">'GOOGLE'</span>) &#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">'Google 搜索&lt;br&gt;http://www.google.com'</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>($q ==<span class="string">'TAOBAO'</span>) &#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">'淘宝&lt;br&gt;http://www.taobao.com'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;form action=<span class="string">""</span> method=<span class="string">"get"</span>&gt; </span><br><span class="line">    &lt;select name=<span class="string">"q"</span>&gt;</span><br><span class="line">    &lt;option value=<span class="string">""</span>&gt;选择一个站点:&lt;/option&gt;</span><br><span class="line">    &lt;option value=<span class="string">"BAIDU"</span>&gt;Runoob&lt;/option&gt;</span><br><span class="line">    &lt;option value=<span class="string">"GOOGLE"</span>&gt;Google&lt;/option&gt;</span><br><span class="line">    &lt;option value=<span class="string">"TAOBAO"</span>&gt;Taobao&lt;/option&gt;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">"提交"</span>&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="获取当前时间"><a href="#获取当前时间" class="headerlink" title="获取当前时间"></a>获取当前时间</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//设置默认当前时区</span></span><br><span class="line">date_default_timezone_set(<span class="string">'PRC'</span>);</span><br><span class="line"><span class="keyword">echo</span> date(<span class="string">'Y-m-d H:i:s'</span>,time());</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="文件引入"><a href="#文件引入" class="headerlink" title="文件引入"></a>文件引入</h3><blockquote><p>include 和 require 的区别</p><ul><li>require 一般放在 PHP 文件的最前面，程序在执行前就会先导入要引用的文件；</li><li>include 一般放在程序的流程控制中，当程序执行时碰到才会引用，简化程序的执行流程。</li><li>require 引入的文件有错误时，执行会中断，并返回一个致命错误；</li><li>include 引入的文件有错误时，会继续执行，并返回一个警告。</li></ul></blockquote><h3 id="打开文件"><a href="#打开文件" class="headerlink" title="打开文件"></a>打开文件</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$file = fopen(<span class="string">"test.txt"</span>,<span class="string">"r"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取文件每一行，直到文件结尾</span></span><br><span class="line"><span class="keyword">while</span>(!feof($file))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> fgets($file). <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">    <span class="comment">//  逐个字符echo fgetc($file);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fclose($file);</span><br></pre></td></tr></table></figure><h3 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"upload_file.php"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"file"</span>&gt;</span>文件名：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"file"</span> <span class="attr">id</span>=<span class="string">"file"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">name</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">header(<span class="string">"Content-Type: text/html;charset=utf-8"</span>);</span><br><span class="line"><span class="comment">// 允许上传的图片后缀</span></span><br><span class="line">$allowedExts = <span class="keyword">array</span>(<span class="string">"gif"</span>, <span class="string">"jpeg"</span>, <span class="string">"jpg"</span>, <span class="string">"png"</span>, <span class="string">"PNG"</span>);</span><br><span class="line">$temp = explode(<span class="string">"."</span>, $_FILES[<span class="string">"file"</span>][<span class="string">"name"</span>]);</span><br><span class="line"><span class="keyword">echo</span> $_FILES[<span class="string">"file"</span>][<span class="string">"size"</span>];</span><br><span class="line">$extension = end($temp);     <span class="comment">// 获取文件后缀名</span></span><br><span class="line"><span class="keyword">if</span> ((($_FILES[<span class="string">"file"</span>][<span class="string">"type"</span>] == <span class="string">"image/gif"</span>)</span><br><span class="line">|| ($_FILES[<span class="string">"file"</span>][<span class="string">"type"</span>] == <span class="string">"image/jpeg"</span>)</span><br><span class="line">|| ($_FILES[<span class="string">"file"</span>][<span class="string">"type"</span>] == <span class="string">"image/jpg"</span>)</span><br><span class="line">|| ($_FILES[<span class="string">"file"</span>][<span class="string">"type"</span>] == <span class="string">"image/pjpeg"</span>)</span><br><span class="line">|| ($_FILES[<span class="string">"file"</span>][<span class="string">"type"</span>] == <span class="string">"image/x-png"</span>)</span><br><span class="line">|| ($_FILES[<span class="string">"file"</span>][<span class="string">"type"</span>] == <span class="string">"image/png"</span>))</span><br><span class="line">&amp;&amp; ($_FILES[<span class="string">"file"</span>][<span class="string">"size"</span>] &lt; <span class="number">204800</span>)   <span class="comment">// 小于 200 kb</span></span><br><span class="line">&amp;&amp; in_array($extension, $allowedExts))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> ($_FILES[<span class="string">"file"</span>][<span class="string">"error"</span>] &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"错误：: "</span> . $_FILES[<span class="string">"file"</span>][<span class="string">"error"</span>] . <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"上传文件名: "</span> . $_FILES[<span class="string">"file"</span>][<span class="string">"name"</span>] . <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"文件类型: "</span> . $_FILES[<span class="string">"file"</span>][<span class="string">"type"</span>] . <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"文件大小: "</span> . ($_FILES[<span class="string">"file"</span>][<span class="string">"size"</span>] / <span class="number">1024</span>) . <span class="string">" kB&lt;br&gt;"</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"文件临时存储的位置: "</span> . $_FILES[<span class="string">"file"</span>][<span class="string">"tmp_name"</span>] . <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 判断当期目录下的 upload 目录是否存在该文件</span></span><br><span class="line">        <span class="comment">// 如果没有 upload 目录，你需要创建它，upload 目录权限为 777</span></span><br><span class="line">        <span class="keyword">if</span> (file_exists(<span class="string">"upload/"</span> . $_FILES[<span class="string">"file"</span>][<span class="string">"name"</span>]))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">echo</span> $_FILES[<span class="string">"file"</span>][<span class="string">"name"</span>] . <span class="string">" 文件已经存在。 "</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 如果 upload 目录不存在该文件则将文件上传到 upload 目录下</span></span><br><span class="line">            move_uploaded_file($_FILES[<span class="string">"file"</span>][<span class="string">"tmp_name"</span>], <span class="string">"upload/"</span> . $_FILES[<span class="string">"file"</span>][<span class="string">"name"</span>]);</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"文件存储在: "</span> . <span class="string">"upload/"</span> . $_FILES[<span class="string">"file"</span>][<span class="string">"name"</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"非法的文件格式"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="设置cookie-必须写在html之前"><a href="#设置cookie-必须写在html之前" class="headerlink" title="设置cookie(必须写在html之前)"></a>设置cookie(必须写在html之前)</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">setcookie(<span class="string">"user"</span>, <span class="string">"cosyer"</span>, time()+<span class="number">3600</span>); <span class="comment">// 1小时后过期</span></span><br><span class="line"><span class="keyword">echo</span> $_COOKIE[<span class="string">"user"</span>]; <span class="comment">// (isset($_COOKIE["user"])判断是否设置了cookie</span></span><br><span class="line"><span class="comment">// 删除setcookie("user", "", time()-3600);设置成过去的时点</span></span><br></pre></td></tr></table></figure><h3 id="存储session"><a href="#存储session" class="headerlink" title="存储session"></a>存储session</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">session_start();</span><br><span class="line"><span class="comment">// 存储 session 数据</span></span><br><span class="line">$_SESSION[<span class="string">'views'</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="comment">// 释放 session 数据</span></span><br><span class="line"><span class="comment">// unset($_SESSION['views']);</span></span><br><span class="line"><span class="comment">// 清空所有数据</span></span><br><span class="line"><span class="comment">// session_destroy();</span></span><br></pre></td></tr></table></figure><h3 id="php发送email"><a href="#php发送email" class="headerlink" title="php发送email"></a>php发送email</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_REQUEST[<span class="string">'email'</span>])) &#123; <span class="comment">// 如果接收到邮箱参数则发送邮件</span></span><br><span class="line">    <span class="comment">// 发送邮件</span></span><br><span class="line">    $email = $_REQUEST[<span class="string">'email'</span>] ;</span><br><span class="line">    $subject = $_REQUEST[<span class="string">'subject'</span>] ;</span><br><span class="line">    $message = $_REQUEST[<span class="string">'message'</span>] ;</span><br><span class="line">    mail(<span class="string">"someone@example.com"</span>, $subject,</span><br><span class="line">    $message, <span class="string">"From:"</span> . $email);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"邮件发送成功"</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123; <span class="comment">// 如果没有邮箱参数则显示表单</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;form method='post' action='mailform.php'&gt;</span></span><br><span class="line"><span class="string">    Email: &lt;input name='email' type='text'&gt;&lt;br&gt;</span></span><br><span class="line"><span class="string">    Subject: &lt;input name='subject' type='text'&gt;&lt;br&gt;</span></span><br><span class="line"><span class="string">    Message:&lt;br&gt;</span></span><br><span class="line"><span class="string">    &lt;textarea name='message' rows='15' cols='40'&gt;</span></span><br><span class="line"><span class="string">    &lt;/textarea&gt;&lt;br&gt;</span></span><br><span class="line"><span class="string">    &lt;input type='submit'&gt;</span></span><br><span class="line"><span class="string">    &lt;/form&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h3><blockquote><p>die(“文件不存在”);</p></blockquote><h3 id="异常处理-同-try-catch-new-Exception"><a href="#异常处理-同-try-catch-new-Exception" class="headerlink" title="异常处理 同 try catch new Exception()"></a>异常处理 同 try catch new Exception()</h3>]]></content:encoded>
      
      <comments>http://mydearest.cn/helloPHP.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>chrome插件扩展程序开发指南</title>
      <link>http://mydearest.cn/chrome%E6%8F%92%E4%BB%B6%E6%89%A9%E5%B1%95%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97.html</link>
      <guid>http://mydearest.cn/chrome%E6%8F%92%E4%BB%B6%E6%89%A9%E5%B1%95%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97.html</guid>
      <pubDate>Mon, 26 Nov 2018 06:30:10 GMT</pubDate>
      <description>
      
        &lt;h3 id=&quot;什么是chrome-extensions&quot;&gt;&lt;a href=&quot;#什么是chrome-extensions&quot; class=&quot;headerlink&quot; title=&quot;什么是chrome extensions&quot;&gt;&lt;/a&gt;什么是chrome extensions&lt;/h3&gt;&lt;p&gt;Chrome Extensions，中文名叫 “Chrome浏览器扩展程序”。引用官方文档的描述，翻译一下就是 “可以修改和增强浏览器功能的 H5 小程序”。
它的入口在浏览器窗口的右上角，地址栏的最右边&lt;/p&gt;
&lt;hr&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h3 id="什么是chrome-extensions"><a href="#什么是chrome-extensions" class="headerlink" title="什么是chrome extensions"></a>什么是chrome extensions</h3><p>Chrome Extensions，中文名叫 “Chrome浏览器扩展程序”。引用官方文档的描述，翻译一下就是 “可以修改和增强浏览器功能的 H5 小程序”。它的入口在浏览器窗口的右上角，地址栏的最右边</p><hr><a id="more"></a><h3 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h3><h4 id="manifest-json"><a href="#manifest-json" class="headerlink" title="manifest.json"></a>manifest.json</h4><p>manifest.json 是整个插件扩展程序中最重要的一个描述文件，这个 json 格式的文件包含了你整个扩展程序的一些重要描述，比如 “扩展程序名称”、“扩展程序图标”、“权限申请” 等。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  // Required</span><br><span class="line">  "manifest_version": 2, // manifest 版本号，这里都写 2 就好了，从 Google Chrome 18 开始，就开始升级到 2 版本了</span><br><span class="line">  "name": "My Extension",</span><br><span class="line">  "version": "1.0.0", // 扩展程序版本，这个是自定义的，建议参考 semver 规范(http://semver.org/)</span><br><span class="line"></span><br><span class="line">  // Recommended</span><br><span class="line">  "default_locale": "zh", // 默认语言，具体可以看 i18n 文档(https://developer.chrome.com/extensions/i18n)</span><br><span class="line">  "description": "A plain text description", // 项目描述</span><br><span class="line">  "icons": &#123; // icon，不同的位置支持不同大小的 icon，具体看文档(https://developer.chrome.com/extensions/manifest/icons)</span><br><span class="line">    "128": "icons/icon_128.png",</span><br><span class="line">    "48": "icons/icon_48.png",</span><br><span class="line">    "16": "icons/icon_16.png"</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  // Pick one (or none)</span><br><span class="line">  "browser_action": &#123; // 多数都是使用这个，插件扩展程序针对的是浏览器行为（图标是在地址栏外面）</span><br><span class="line">    "default_icon": "icons/24.png", // 最佳大小为19*19，地址栏上的插件扩展程序的 icon（一般作为主入口）</span><br><span class="line">    "default_popup": "popup.html", // 点击插件扩展程序 icon 后弹出来的窗口的主页面 html</span><br><span class="line">    "default_title": "extentsions demo" // 当鼠标放到扩展程序图标上时显示的文字</span><br><span class="line">  &#125;,</span><br><span class="line">  "page_action": &#123; // 插件扩展程序针对的是页面行为（图标是在地址栏里面的）</span><br><span class="line">    ...</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  // Optional</span><br><span class="line">  "author": ...,</span><br><span class="line">  "automation": ...,</span><br><span class="line">  "background": &#123;</span><br><span class="line">    // Recommended</span><br><span class="line">    "persistent": false</span><br><span class="line">  &#125;,</span><br><span class="line">  "background": &#123;</span><br><span class="line">    "scripts": ["eventPage.js"],</span><br><span class="line">    "persistent": false</span><br><span class="line">  &#125;,</span><br><span class="line">  "chrome_settings_overrides": &#123;...&#125;,</span><br><span class="line">  "chrome_ui_overrides": &#123;</span><br><span class="line">    "bookmarks_ui": &#123;</span><br><span class="line">      "remove_bookmark_shortcut": true,</span><br><span class="line">      "remove_button": true</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  "chrome_url_overrides": &#123;...&#125;,</span><br><span class="line">  "commands": &#123;...&#125;,</span><br><span class="line">  "content_capabilities": ...,</span><br><span class="line">  "content_scripts": [&#123;...&#125;],</span><br><span class="line">  "content_security_policy": "policyString",</span><br><span class="line">  "converted_from_user_script": ...,</span><br><span class="line">  "current_locale": ...,</span><br><span class="line">  "declarative_net_request": ...,</span><br><span class="line">  "devtools_page": "devtools.html",</span><br><span class="line">  "event_rules": [&#123;...&#125;],</span><br><span class="line">  "externally_connectable": &#123;</span><br><span class="line">    "matches": ["*://*.example.com/*"]</span><br><span class="line">  &#125;,</span><br><span class="line">  "file_browser_handlers": [...],</span><br><span class="line">  "file_system_provider_capabilities": &#123;</span><br><span class="line">    "configurable": true,</span><br><span class="line">    "multiple_mounts": true,</span><br><span class="line">    "source": "network"</span><br><span class="line">  &#125;,</span><br><span class="line">  "homepage_url": "http://path/to/homepage",</span><br><span class="line">  "import": [&#123;"id": "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"&#125;],</span><br><span class="line">  "incognito": "spanning, split, or not_allowed",</span><br><span class="line">  "input_components": ...,</span><br><span class="line">  "key": "publicKey",</span><br><span class="line">  "minimum_chrome_version": "versionString",</span><br><span class="line">  "nacl_modules": [...],</span><br><span class="line">  "oauth2": ...,</span><br><span class="line">  "offline_enabled": true,</span><br><span class="line">  "omnibox": &#123;</span><br><span class="line">    "keyword": "aString"</span><br><span class="line">  &#125;,</span><br><span class="line">  "optional_permissions": ["tabs"],</span><br><span class="line">  "options_page": "options.html",</span><br><span class="line">  "options_ui": &#123;</span><br><span class="line">    "chrome_style": true,</span><br><span class="line">    "page": "options.html"</span><br><span class="line">  &#125;,</span><br><span class="line">  "permissions": ["tabs"],</span><br><span class="line">  "platforms": ...,</span><br><span class="line">  "plugins": [...],</span><br><span class="line">  "requirements": &#123;...&#125;,</span><br><span class="line">  "sandbox": [...],</span><br><span class="line">  "short_name": "Short Name",</span><br><span class="line">  "signature": ...,</span><br><span class="line">  "spellcheck": ...,</span><br><span class="line">  "storage": &#123;</span><br><span class="line">    "managed_schema": "schema.json"</span><br><span class="line">  &#125;,</span><br><span class="line">  "system_indicator": ...,</span><br><span class="line">  "tts_engine": &#123;...&#125;,</span><br><span class="line">  "update_url": "http://path/to/updateInfo.xml",</span><br><span class="line">  "version_name": "aString",</span><br><span class="line">  "web_accessible_resources": [...]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="学做一个demo"><a href="#学做一个demo" class="headerlink" title="学做一个demo"></a>学做一个demo</h4><ol><li><p>manifestjson(该文本文件需要用UTF8字符集保存)</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"第一个Chrome插件"</span>,</span><br><span class="line">  <span class="attr">"manifest_version"</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"1.0"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">"我的第一个Chrome插件，还不错吧"</span>,</span><br><span class="line">  <span class="attr">"browser_action"</span>: &#123;</span><br><span class="line">    <span class="attr">"default_icon"</span>: <span class="string">"1.png"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"content_scripts"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"matches"</span>: [<span class="string">"https://www.baidu.com/"</span>],</span><br><span class="line">      <span class="attr">"js"</span>: [<span class="string">"test.js"</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>test.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alert(<span class="string">"Hello World"</span>);</span><br><span class="line"><span class="built_in">document</span>.body.style.backgroundColor=<span class="string">"gray"</span>;</span><br></pre></td></tr></table></figure></li></ol><p>content_scripts是运行在打开页面的脚本，可以拿到整个页面的DOM对象，所以可以利用该脚本对页面进行操作。</p><ol><li><p>添加图片1.png</p></li><li><p>打开chrome，打开菜单，找到扩展程序选项更多工具&gt;扩展程序路径下。点击加载已解压的扩展程序，添加文件夹就OK啦！</p></li></ol><h3 id="常用api"><a href="#常用api" class="headerlink" title="常用api"></a>常用api</h3><ul><li>bookmarks: 书签管理接口，可以对浏览器的书签进行增删改查等管理</li><li>tabs: 标签管理接口，可以对浏览器的标签进行增删改查等管理</li><li>contextMenus: 右键菜单管理</li><li>cookies: 浏览器 cookie 的管理</li><li>notifications: 消息通知</li><li>desktopCapture: 可针对 “窗口” 或者 ”标签“ 的截图接口</li><li>i18n: 国际化（多语言支持）</li></ul><h3 id="程序发布和分享"><a href="#程序发布和分享" class="headerlink" title="程序发布和分享"></a>程序发布和分享</h3><p>打包扩展程序，第一次打包只需要设置根目录，打包完成后会生成.crx和.pem密钥文件(版本的迭代需要此文件，否则则会生成新的程序文件)，将.crx文件发给其他人拖入扩展程序页面即可安装。</p><h3 id="发布到chrome商店"><a href="#发布到chrome商店" class="headerlink" title="发布到chrome商店"></a>发布到chrome商店</h3><p>当一切准备就绪，就可以准备发布上线了，Chrome 有个官方的插件扩展程序市场，还自带了发布和更新等一体化管理的流程，非常方便。传送门：<a href="https://chrome.google.com/webstore/developer/dashboard" target="_blank" rel="noopener">Chrome商店dashboard</a></p><p>注意，上传的是 zip 而不是生成的 crx 文件，具体参考：<a href="https://developer.chrome.com/webstore/publish" target="_blank" rel="noopener">https://developer.chrome.com/webstore/publish</a></p><h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3><ol><li>引入外部 js 时报 Refused to load the script 的问题<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"https://code.jquery.com/jquery-3.2.1.min.js"</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ol><p>解决方案：修改 content_security_policy，把对应的域名加上去即可，比如以上的问题可以解决：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"content_security_policy"</span>: <span class="string">"https://code.jquery.com"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>以上表示允许 <a href="https://code.jquery.com" target="_blank" rel="noopener">https://code.jquery.com</a> 域名下的外部 js 的引入。</p><ol><li>Chrome 插件扩展程序是开源的方式安装的，可以去安装目录通过扩展程序 ID 来找到源码。正常情况下，Chrome 插件扩展程序的默认安装目录如下：</li></ol></blockquote><ul><li>Windows XP：C:\Documents and Settings\用户名\Local Settings\Application Data\Google\Chrome\User Data\Default\Extensions</li><li>Windows7：C:\Users\用户名\AppData\Local\Google\Chrome\User Data\Default\Extensions</li><li>Mac：~/Library/Application Support/Google/Chrome/Default/Extensions</li><li>Ubuntu：~/.config/google-chrome/Default/Extensions如果在这些不同操作系统中的默认安装位置没找到插件，那么还有一种方法可以查询到。</li></ul><p>地址栏访问 chrome:version找到 “个人资料路径”，该路径下的 extensions 文件夹就是 Chrome 插件扩展程序的安装路径了安装路径下的插件扩展程序，是以 ID 为目录区分的地址栏访问 chrome://extensions/，可以查看每个插件扩展程序的 ID</p><h3 id="高级教程-学做一个书签管理插件"><a href="#高级教程-学做一个书签管理插件" class="headerlink" title="高级教程-学做一个书签管理插件"></a>高级教程-学做一个书签管理插件</h3><p><a href="">项目地址</a></p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://developer.chrome.com/extensions/overview" target="_blank" rel="noopener">官方文档</a></p>]]></content:encoded>
      
      <comments>http://mydearest.cn/chrome%E6%8F%92%E4%BB%B6%E6%89%A9%E5%B1%95%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>webapck4零配置了解一下</title>
      <link>http://mydearest.cn/webpack4%E9%9B%B6%E9%85%8D%E7%BD%AE%E4%BA%86%E8%A7%A3%E4%B8%80%E4%B8%8B.html</link>
      <guid>http://mydearest.cn/webpack4%E9%9B%B6%E9%85%8D%E7%BD%AE%E4%BA%86%E8%A7%A3%E4%B8%80%E4%B8%8B.html</guid>
      <pubDate>Mon, 26 Nov 2018 01:55:40 GMT</pubDate>
      <description>
      
        &lt;p&gt;webpack4 最主要的卖点便是零配置，要想成为一位webpack配置工程师怎么能不开始了解呢？话不多说，让我们开始体验 webpack 4 的一些特性。&lt;/p&gt;
&lt;h3 id=&quot;entry-和-output&quot;&gt;&lt;a href=&quot;#entry-和-output&quot; class=&quot;headerlink&quot; title=&quot;entry 和 output&quot;&gt;&lt;/a&gt;entry 和 output&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;创建空目录，初始化配置&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mkdir webpack4-quickstart&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt;  webpack4-quickstart&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm init -xyz&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;安装相关依赖&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm i webpack --save-dev&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm i webpack-cli --save-dev&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;webpack： 即 webpack 核心库。它提供了很多 API, 通过 Node.js 脚本中 require(‘webpack’) 的方式来使用 webpack。&lt;/li&gt;
&lt;li&gt;webpack-cli：是 webpack 的命令行工具。webpack 4 之前命令行工具是集成在 webpack 包中的，4.0 开始 webpack 包本身不再集成 cli。&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;package.json添加构建命令&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;scripts&quot;&lt;/span&gt;:&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;build&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;webpack&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>webpack4 最主要的卖点便是零配置，要想成为一位webpack配置工程师怎么能不开始了解呢？话不多说，让我们开始体验 webpack 4 的一些特性。</p><h3 id="entry-和-output"><a href="#entry-和-output" class="headerlink" title="entry 和 output"></a>entry 和 output</h3><ol><li><p>创建空目录，初始化配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir webpack4-quickstart</span><br><span class="line"><span class="built_in">cd</span>  webpack4-quickstart</span><br><span class="line">npm init -xyz</span><br></pre></td></tr></table></figure></li><li><p>安装相关依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm i webpack --save-dev</span><br><span class="line">npm i webpack-cli --save-dev</span><br></pre></td></tr></table></figure></li></ol><ul><li>webpack： 即 webpack 核心库。它提供了很多 API, 通过 Node.js 脚本中 require(‘webpack’) 的方式来使用 webpack。</li><li>webpack-cli：是 webpack 的命令行工具。webpack 4 之前命令行工具是集成在 webpack 包中的，4.0 开始 webpack 包本身不再集成 cli。</li></ul><ol><li>package.json添加构建命令<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>:&#123;</span><br><span class="line">    <span class="string">"build"</span>:<span class="string">"webpack"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><hr><a id="more"></a><ul><li>如果直接开始运行<code>npm run build</code>会因为缺少指定的默认目录的文件导致抛出错误</li><li><p>添加入口文件 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ./src/index.js</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"hello world"</span>)</span><br></pre></td></tr></table></figure></li><li><p>再执行<code>npm run build</code>，则默认生成了’./dist/main.js’文件</p></li></ul><h3 id="development和production模式"><a href="#development和production模式" class="headerlink" title="development和production模式"></a>development和production模式</h3><p>在webpack 4 以前，拥有2份配置文件是webpack项目常见的情况，一个常规的项目配置可能是这样的：</p><blockquote><p>一份开发环境的配置，用来配置 dev server 和其他的一些东西一份生产环境的配置，配置一些 UglifyJSPlugin、sourcemaps 等等但是在webpack 4中，我们可以通过设置命令行参数production和development来区分环境：</p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">  "dev": "webpack --mode development",</span><br><span class="line">  "build": "webpack --mode production"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分别执行<code>npm run dev</code>和<code>npm run build</code>会发现第二种执行的代码被压缩了。</p><blockquote><p>Development mode 则是在速度上进行了优化，只不过不会提供压缩功能。Production mode 可以实现各种优化，包括 代码压缩、tree-shaking…</p></blockquote><h3 id="脚本中覆盖默认的入口和出口"><a href="#脚本中覆盖默认的入口和出口" class="headerlink" title="脚本中覆盖默认的入口和出口"></a>脚本中覆盖默认的入口和出口</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">  "dev": "webpack --mode development ./entry/index.js --output ./output/main.js",</span><br><span class="line">  "build": "webpack --mode production ./entry/index.js --output ./output/main.js"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="babel插件配置es6-gt-es5"><a href="#babel插件配置es6-gt-es5" class="headerlink" title="babel插件配置es6-&gt;es5"></a>babel插件配置es6-&gt;es5</h3><ol><li><p>插件依赖</p><blockquote><p>babel-corebabel-loaderbabel-preset-env 编译 ES6 -&gt; ES5 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i babel-core babel-loader babel-preset-env --save-dev</span><br></pre></td></tr></table></figure></blockquote></li><li><p>通过<code>./babelrc</code>来配置相关插件</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"presets"</span>:[</span><br><span class="line">        <span class="string">"env"</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>2种方式来配置<code>babel-loader</code></p><blockquote><p>webpack.config.js配置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">        use: &#123;</span><br><span class="line">          loader: <span class="string">"babel-loader"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></blockquote></li></ol><blockquote><p>脚本命令配置 –module-bind<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">    "dev": "webpack --mode development --module-bind js=babel-loader",</span><br><span class="line">    "build": "webpack --mode production --module-bind js=babel-loader"</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p></blockquote><p>这里只是简单的介绍，想要详细的了解webpack4的新特性请访问<a href="https://github.com/cosyer/webpack4" target="_blank" rel="noopener">github地址</a>。</p>]]></content:encoded>
      
      <comments>http://mydearest.cn/webpack4%E9%9B%B6%E9%85%8D%E7%BD%AE%E4%BA%86%E8%A7%A3%E4%B8%80%E4%B8%8B.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>实现前端路由</title>
      <link>http://mydearest.cn/%E5%AE%9E%E7%8E%B0%E5%89%8D%E7%AB%AF%E8%B7%AF%E7%94%B1.html</link>
      <guid>http://mydearest.cn/%E5%AE%9E%E7%8E%B0%E5%89%8D%E7%AB%AF%E8%B7%AF%E7%94%B1.html</guid>
      <pubDate>Sat, 24 Nov 2018 03:44:48 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;现代的前端框架react/vue/angular都有路由router的概念，通过手写实现可以帮助我们更好地了解它的工作原理。&lt;/p&gt;
&lt;h3 id=&quot;实现路由的2种方式&quot;&gt;&lt;a href=&quot;#实现路由的2种方式&quot; class=&quot;headerlink&quot; title=&quot;实现路由
        
      
      </description>
      
      <content:encoded><![CDATA[<p>现代的前端框架react/vue/angular都有路由router的概念，通过手写实现可以帮助我们更好地了解它的工作原理。</p><h3 id="实现路由的2种方式"><a href="#实现路由的2种方式" class="headerlink" title="实现路由的2种方式"></a>实现路由的2种方式</h3><ol><li>hash模式</li><li>history模式</li></ol><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><p>hash: 地址栏会多出一个#号，对url造成影响，在某些场景下如微信支付有坑。history: 兼容性差，直接访问汇报400，需要服务器做处理。</p><h3 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h3><p>hash基于hashchang，而history则基于pushState和popState</p><h3 id="hash模式"><a href="#hash模式" class="headerlink" title="hash模式"></a>hash模式</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">  &lt;title&gt;Document&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">  &lt;style&gt;</span></span><br><span class="line"><span class="regexp">    body &#123;</span></span><br><span class="line"><span class="regexp">      margin: 0;</span></span><br><span class="line"><span class="regexp">      padding: 0;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    #login, #index &#123;</span></span><br><span class="line"><span class="regexp">      width: 100%;</span></span><br><span class="line"><span class="regexp">      height: 100%;</span></span><br><span class="line"><span class="regexp">      display: none;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    #login &#123;</span></span><br><span class="line"><span class="regexp">      background: #f5f5f5;</span></span><br><span class="line"><span class="regexp">      display: block;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    #index &#123;</span></span><br><span class="line"><span class="regexp">      background: #aaddff;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>style&gt;</span><br><span class="line">&lt;<span class="regexp">/head&gt;</span></span><br><span class="line"><span class="regexp">&lt;body&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;!--登录页--&gt;</span></span><br><span class="line"><span class="regexp">&lt;div id="login" class="component"&gt;</span></span><br><span class="line"><span class="regexp">  &lt;input type="button" onclick="hashPush('index?id=1')" value="登陆"&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--首页--&gt;</span><br><span class="line">&lt;div id=<span class="string">"index"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"component"</span>&gt;</span><br><span class="line">  &lt;input type=<span class="string">"button"</span> onclick=<span class="string">"hashPush('login?key=2',&#123;data:'params data'&#125;)"</span> value=<span class="string">"退出登陆"</span>&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="comment">// 全局变量</span></span><br><span class="line">  <span class="keyword">var</span> params = &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 页面跳转</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">hashPush</span>(<span class="params">url, param</span>) </span>&#123;</span><br><span class="line">    location.hash = <span class="string">"#"</span> + url</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 解析url</span></span><br><span class="line">    <span class="keyword">let</span> questionIndex = url.indexOf(<span class="string">"?"</span>)</span><br><span class="line">    <span class="keyword">let</span> path = url</span><br><span class="line">    <span class="keyword">if</span> (questionIndex &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">      path = url.substr(<span class="number">0</span>, questionIndex)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (param) &#123;</span><br><span class="line">      params[path] = param</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 监听hash的变动</span></span><br><span class="line">  <span class="built_in">window</span>.addEventListener(<span class="string">'hashchange'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> url = location.hash.slice(<span class="number">1</span>) || <span class="string">"index"</span></span><br><span class="line">    <span class="comment">// 解析url</span></span><br><span class="line">    <span class="keyword">let</span> questionIndex = url.indexOf(<span class="string">"?"</span>)</span><br><span class="line">    <span class="keyword">let</span> path, query</span><br><span class="line">    <span class="keyword">if</span> (questionIndex &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">      path = url.substr(<span class="number">0</span>, questionIndex)</span><br><span class="line">      <span class="keyword">let</span> queryString = url.substr(questionIndex + <span class="number">1</span>)</span><br><span class="line">      <span class="keyword">let</span> queryArray = queryString.split(<span class="string">"&amp;"</span>)</span><br><span class="line">      <span class="keyword">let</span> queryObject = &#123;&#125;</span><br><span class="line">      queryArray.map(<span class="function"><span class="params">str</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> equalIndex = str.indexOf(<span class="string">"="</span>)</span><br><span class="line">        <span class="keyword">if</span> (equalIndex &gt; <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="keyword">let</span> key = str.substr(<span class="number">0</span>, equalIndex)</span><br><span class="line">          <span class="keyword">let</span> value = str.substr(equalIndex + <span class="number">1</span>)</span><br><span class="line">          queryObject[key] = value</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">      query = queryObject</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      path = url</span><br><span class="line">      query = &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'接收到url传递的参数'</span>, query)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'直接用params传递的参数'</span>, params[path])</span><br><span class="line">    setVisible(path)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 显示跟路由地址对应的内容，隐藏其他内容</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">setVisible</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> components = <span class="built_in">Array</span>.from(<span class="built_in">document</span>.body.querySelectorAll(<span class="string">".component"</span>))</span><br><span class="line">    components.map(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (item.id === url) &#123;</span><br><span class="line">        <span class="comment">// console.log('显示',item.id)</span></span><br><span class="line">        item.style.display = <span class="string">'block'</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// console.log('隐藏',item.id)</span></span><br><span class="line">        item.style.display = <span class="string">'none'</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>html&gt;</span><br></pre></td></tr></table></figure><h3 id="history模式-需要服务器环境"><a href="#history模式-需要服务器环境" class="headerlink" title="history模式(需要服务器环境)"></a>history模式(需要服务器环境)</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">  &lt;title&gt;Document&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">  &lt;style&gt;</span></span><br><span class="line"><span class="regexp">    body &#123;</span></span><br><span class="line"><span class="regexp">      margin: 0;</span></span><br><span class="line"><span class="regexp">      padding: 0;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    #login, #index &#123;</span></span><br><span class="line"><span class="regexp">      width: 100%;</span></span><br><span class="line"><span class="regexp">      height: 100%;</span></span><br><span class="line"><span class="regexp">      display: none;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    #login &#123;</span></span><br><span class="line"><span class="regexp">      background: #f5f5f5;</span></span><br><span class="line"><span class="regexp">      display: block;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    #index &#123;</span></span><br><span class="line"><span class="regexp">      background: #aaddff;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>style&gt;</span><br><span class="line">&lt;<span class="regexp">/head&gt;</span></span><br><span class="line"><span class="regexp">&lt;body&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;!--登录页--&gt;</span></span><br><span class="line"><span class="regexp">&lt;div id="login" class="component"&gt;</span></span><br><span class="line"><span class="regexp">  &lt;input type="button" onclick="historyPush('index')" value="登陆"&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--首页--&gt;</span><br><span class="line">&lt;div id=<span class="string">"index"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"component"</span>&gt;</span><br><span class="line">  &lt;input type=<span class="string">"button"</span> onclick=<span class="string">"historyPush('login',&#123;data:'params data'&#125;)"</span> value=<span class="string">"退出登陆"</span>&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="comment">// 全局变量</span></span><br><span class="line">  <span class="keyword">var</span> params = &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 页面跳转</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">historyPush</span>(<span class="params">url, param</span>) </span>&#123;</span><br><span class="line">    history.pushState(param, <span class="string">'我是页面标题'</span>, url)</span><br><span class="line">    <span class="keyword">if</span> (param) &#123;</span><br><span class="line">      params[url] = param</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 监听前进后退</span></span><br><span class="line">  <span class="built_in">window</span>.addEventListener(<span class="string">'popstate'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// e.state 就是pushState 的时候，传的第一个参数</span></span><br><span class="line">    <span class="keyword">let</span> url = state.target.location.pathName</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'接收到传递的参数'</span>, e.state)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'直接用params传递的参数'</span>, params[path])</span><br><span class="line">    setVisible(path)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 显示跟路由地址对应的内容，隐藏其他内容</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">setVisible</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> components = <span class="built_in">Array</span>.from(<span class="built_in">document</span>.body.querySelectorAll(<span class="string">".component"</span>))</span><br><span class="line">    components.map(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (item.id === url) &#123;</span><br><span class="line">        <span class="comment">// console.log('显示',item.id)</span></span><br><span class="line">        item.style.display = <span class="string">'block'</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// console.log('隐藏',item.id)</span></span><br><span class="line">        item.style.display = <span class="string">'none'</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>html&gt;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://mydearest.cn/%E5%AE%9E%E7%8E%B0%E5%89%8D%E7%AB%AF%E8%B7%AF%E7%94%B1.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>js函数柯里化</title>
      <link>http://mydearest.cn/js%E5%87%BD%E6%95%B0%E6%9F%AF%E9%87%8C%E5%8C%96.html</link>
      <guid>http://mydearest.cn/js%E5%87%BD%E6%95%B0%E6%9F%AF%E9%87%8C%E5%8C%96.html</guid>
      <pubDate>Thu, 22 Nov 2018 01:25:48 GMT</pubDate>
      <description>
      
        &lt;h3 id=&quot;函数柯里化定义&quot;&gt;&lt;a href=&quot;#函数柯里化定义&quot; class=&quot;headerlink&quot; title=&quot;函数柯里化定义&quot;&gt;&lt;/a&gt;函数柯里化定义&lt;/h3&gt;&lt;p&gt;函数柯里化（function currying）又称部分求值。一个currying的函数首先会接受一些参数，接受了这些参数后，&lt;/p&gt;
&lt;p&gt;该函数并不会立即求值，而是继续返回另外一个函数，刚才传入的参数在函数形成的闭包里被保存起来。待到函数真正需要求值的时候，之前传入的参数都会被一次性用于求值。&lt;/p&gt;
&lt;p&gt;把接受多个参数的函数变换成接受一个单一参数（最初函数的第一个参数）的函数，并且返回接受余下的参数而且返回结果的新函数。&lt;/p&gt;
&lt;p&gt;顾名思义，柯里化其实本身是固定一个可以预期的参数，并返回一个特定的函数，处理批特定的需求。这增加了函数的适用性，但同时也降低了函数的适用范围。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;x,y&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; x + y;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 函数只传入一个参数的时候实现加法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;curry&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;x&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;y&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; x + y;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; add2 = curry(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;add2(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// 2 即curry(1)(1)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h3 id="函数柯里化定义"><a href="#函数柯里化定义" class="headerlink" title="函数柯里化定义"></a>函数柯里化定义</h3><p>函数柯里化（function currying）又称部分求值。一个currying的函数首先会接受一些参数，接受了这些参数后，</p><p>该函数并不会立即求值，而是继续返回另外一个函数，刚才传入的参数在函数形成的闭包里被保存起来。待到函数真正需要求值的时候，之前传入的参数都会被一次性用于求值。</p><p>把接受多个参数的函数变换成接受一个单一参数（最初函数的第一个参数）的函数，并且返回接受余下的参数而且返回结果的新函数。</p><p>顾名思义，柯里化其实本身是固定一个可以预期的参数，并返回一个特定的函数，处理批特定的需求。这增加了函数的适用性，但同时也降低了函数的适用范围。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x,y</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 函数只传入一个参数的时候实现加法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">curry</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">y</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x + y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> add2 = curry(<span class="number">1</span>);</span><br><span class="line">add2(<span class="number">1</span>) <span class="comment">// 2 即curry(1)(1)</span></span><br></pre></td></tr></table></figure><hr><a id="more"></a><h3 id="函数柯里化实践"><a href="#函数柯里化实践" class="headerlink" title="函数柯里化实践"></a>函数柯里化实践</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过以上简单介绍我们大概了解了，函数柯里化基本是在做这么一件事情：只传递给函数一部分参数来调用它，让它返回一个函数去处理剩下的参数。用公式表示就是我们要做的事情其实是</span></span><br><span class="line"></span><br><span class="line">fn(a,b,c,d)=&gt;fn(a)(b)(c)(d)；</span><br><span class="line"></span><br><span class="line">fn(a,b,c,d)=&gt;fn(a，b)(c)(d)；</span><br><span class="line"></span><br><span class="line">fn(a,b,c,d)=&gt;fn(a)(b，c，d)；</span><br><span class="line"></span><br><span class="line">......</span><br><span class="line"></span><br><span class="line"><span class="comment">// 再或者这样：</span></span><br><span class="line"></span><br><span class="line">fn(a,b,c,d)=&gt;fn(a)(b)(c)(d)()；</span><br><span class="line"></span><br><span class="line">fn(a,b,c,d)=&gt;fn(a)；fn(b)；fn(c)；fn(d)；fn()；</span><br></pre></td></tr></table></figure><blockquote><p>通用的函数柯里化版本</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这里需要传入长度</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">curry</span>(<span class="params">fn, length, ary</span>) </span>&#123;</span><br><span class="line">    length = length || fn.length;</span><br><span class="line">    ary = ary || [];<span class="comment">//记录所有传入的参数</span></span><br><span class="line">    <span class="keyword">var</span> slice = <span class="built_in">Array</span>.prototype.slice;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">arguments</span>.length &lt; length) &#123;</span><br><span class="line">            <span class="built_in">Array</span>.prototype.push.apply(ary, slice.call(<span class="built_in">arguments</span>));<span class="comment">//每次把参数合并到ary数组中</span></span><br><span class="line">            <span class="keyword">return</span> curry(fn, length - <span class="built_in">arguments</span>.length, ary)<span class="comment">//把还需传参的长度和已有参数数组传入curry，递归调用</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> fn.apply(<span class="keyword">this</span>, ary.concat(slice.call(<span class="built_in">arguments</span>))); <span class="comment">//调用求职函数，记得把此次传入的参数合并到ary数组再计算</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> total = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> total = <span class="number">0</span>;</span><br><span class="line">        [].slice.call(<span class="built_in">arguments</span>).forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">            total += item;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> total;</span><br><span class="line">    &#125;;</span><br><span class="line"> <span class="keyword">let</span> fn = curry(total, <span class="number">4</span>);</span><br><span class="line"> fn(<span class="number">1</span>)(<span class="number">2</span>)(<span class="number">3</span>)(<span class="number">4</span>);<span class="comment">//10</span></span><br><span class="line"> fn(<span class="number">1</span>,<span class="number">2</span>)(<span class="number">3</span>)(<span class="number">4</span>);<span class="comment">//10</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这里是无参数时开始计算所有的cost</span></span><br><span class="line"><span class="keyword">var</span> currying = <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> args = [];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">arguments</span>.length === <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> fn.apply(<span class="keyword">this</span>, args);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            [].push.apply(args, <span class="built_in">arguments</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">arguments</span>.callee;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> cost = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> money = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>, l = <span class="built_in">arguments</span>.length; i &lt; l; i++)&#123;</span><br><span class="line">            money += <span class="built_in">arguments</span>[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> money;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;());</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> cost = currying(cost);<span class="comment">//转化为currying函数</span></span><br><span class="line"></span><br><span class="line">cost(<span class="number">100</span>);<span class="comment">//未真正求值</span></span><br><span class="line">cost(<span class="number">200</span>);<span class="comment">//未真正求值</span></span><br><span class="line">cost(<span class="number">300</span>);<span class="comment">//未真正求值</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(cost());<span class="comment">//求值并输出：600</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 和toString().valueOf()时计算和是一样的道理</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">num</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> _add = <span class="function"><span class="keyword">function</span>(<span class="params">args</span>)</span>&#123;</span><br><span class="line">        num+=args;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">arguments</span>.callee;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// (function foo(args)&#123;num+=args return foo;&#125;)</span></span><br><span class="line">    <span class="keyword">var</span> _add =(<span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">args</span>)</span>&#123;num+=args; <span class="keyword">return</span> foo;&#125;)</span><br><span class="line">    _add.toString = _add.valueOf = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> num;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> _add;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="函数柯里化的优点"><a href="#函数柯里化的优点" class="headerlink" title="函数柯里化的优点"></a>函数柯里化的优点</h3><ol><li><p>延迟计算 可以传递需要的参数，等到何时想要结果，再一并计算。</p></li><li><p>参数复用 有些参数相同，只需要传递一遍即可，不需要每次都传，太繁琐。</p></li></ol>]]></content:encoded>
      
      <comments>http://mydearest.cn/js%E5%87%BD%E6%95%B0%E6%9F%AF%E9%87%8C%E5%8C%96.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>为什么react和immutable成为了好基友</title>
      <link>http://mydearest.cn/%E4%B8%BA%E4%BB%80%E4%B9%88react%E5%92%8Cimmutable%E6%88%90%E4%B8%BA%E4%BA%86%E5%A5%BD%E5%9F%BA%E5%8F%8B.html</link>
      <guid>http://mydearest.cn/%E4%B8%BA%E4%BB%80%E4%B9%88react%E5%92%8Cimmutable%E6%88%90%E4%B8%BA%E4%BA%86%E5%A5%BD%E5%9F%BA%E5%8F%8B.html</guid>
      <pubDate>Wed, 21 Nov 2018 03:17:20 GMT</pubDate>
      <description>
      
        &lt;p&gt;工作中，React社区推崇搭配一起使用Immutable，就像咖啡牛奶伴侣一样。众所周知React的性能优化我们可以优化组件的嵌套层级，&lt;/p&gt;
&lt;p&gt;避免不必要的重绘，以及shouldComponentUpdate来判别组件是否会因为当前属性(props)和状态(state)变化而导致组件输出变化。&lt;/p&gt;
&lt;p&gt;一提到React，大家第一时间就想到的虚拟DOM(Virtual DOM)和伴随其带来的高性能（在虚拟dom上进行节点的更改最后在反映到真实dom上）。&lt;/p&gt;
&lt;p&gt;但是React提供的是声明式的API(declarative API),好的一方面是让我们编写程序更加方便，但另一方面，却使得我们不太了解内部细节。&lt;/p&gt;
&lt;hr&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>工作中，React社区推崇搭配一起使用Immutable，就像咖啡牛奶伴侣一样。众所周知React的性能优化我们可以优化组件的嵌套层级，</p><p>避免不必要的重绘，以及shouldComponentUpdate来判别组件是否会因为当前属性(props)和状态(state)变化而导致组件输出变化。</p><p>一提到React，大家第一时间就想到的虚拟DOM(Virtual DOM)和伴随其带来的高性能（在虚拟dom上进行节点的更改最后在反映到真实dom上）。</p><p>但是React提供的是声明式的API(declarative API),好的一方面是让我们编写程序更加方便，但另一方面，却使得我们不太了解内部细节。</p><hr><a id="more"></a><h3 id="一致化处理-Reconciliation"><a href="#一致化处理-Reconciliation" class="headerlink" title="一致化处理(Reconciliation)"></a>一致化处理(Reconciliation)</h3><p>React采用的是虚拟DOM，每次属性(props)和状态(state)发生变化的时候，render函数返回不同的元素树，</p><p>React会检测当前返回的元素树和上次渲染的元素树之前的差异，然后找出何如高效的更新UI。即render就执行diff差异再进行重绘。</p><h3 id="shouldComponentUpdate"><a href="#shouldComponentUpdate" class="headerlink" title="shouldComponentUpdate"></a>shouldComponentUpdate</h3><p>默认的shouldComponentUpdate会在props和state发生变化时返回true,表示组件会重新渲染，从而调用render函数。</p><p>当然了在首次渲染的时候和使用forceUpdate的时候，是不会经过shouldComponentUpdate判断。</p><p>合理地编写shouldComponentUpdate函数，从而能避免不必要的一致化处理，使得性能可以极大提高。。我们可以通过</p><p>继承React.PureComponent或者通过引入PureRenderMixin模块来达到目的。但是这也存在一个问题:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 子组件继承PureComponent只会进行浅比较</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListOfWords</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">PureComponent</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;this.props.words.join(',')&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WordAdder</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      words: [<span class="string">'marklar'</span>] <span class="comment">// 复杂类型</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">this</span>.handleClick = <span class="keyword">this</span>.handleClick.bind(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handleClick() &#123;</span><br><span class="line">    <span class="comment">// 当触发点击页面并没有进行重新渲染</span></span><br><span class="line">    <span class="keyword">const</span> words = <span class="keyword">this</span>.state.words;</span><br><span class="line">    words.push(<span class="string">'marklar'</span>);</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;<span class="attr">words</span>: words&#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;button onClick=&#123;<span class="keyword">this</span>.handleClick&#125; /&gt;</span><br><span class="line">        &lt;ListOfWords words=&#123;<span class="keyword">this</span>.state.words&#125; /&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>共享的可变状态是万恶之源</p></blockquote><p>JavaScript 中的对象一般是可变的（Mutable），因为使用了引用赋值，新的对象简单的引用了原始对象，改变新的对象将影响到原始对象。</p><p>如 foo={a: 1}; bar=foo; bar.a=2 你会发现此时 foo.a 也被改成了 2。</p><p>虽然这样做可以节约内存，但当应用复杂后，这就造成了非常大的隐患，Mutable 带来的优点变得得不偿失。</p><p>为了解决这个问题，一般的做法是使用 shallowCopy（浅拷贝）或 deepCopy（深拷贝）来避免被修改，但这样做造成了 CPU 和内存的浪费。</p><p>Immutable 可以很好地解决这些问题。</p><h3 id="Immutable-Data"><a href="#Immutable-Data" class="headerlink" title="Immutable Data"></a>Immutable Data</h3><p>Immutable Data 就是一旦创建，就不能再被更改的数据。对 Immutable 对象的任何修改或添加删除操作都会返回一个新的 Immutable 对象。</p><p>Immutable 实现的原理是 Persistent Data Structure（持久化数据结构），</p><p>也就是使用旧数据创建新数据时，要保证旧数据同时可用且不变。同时为了避免 deepCopy 把所有节点都复制一遍带来的性能损耗，</p><p>Immutable 使用了 Structural Sharing（结构共享），即如果对象树中一个节点发生变化，只修改这个节点和受它影响的父节点，其它节点则进行共享。</p><blockquote><p>Map：键值对集合，对应于 Object，ES6 也有专门的 Map 对象</p></blockquote><blockquote><p>List：有序可重复的列表，对应于 Array</p></blockquote><blockquote><p>Set：无序且不可重复的列表</p></blockquote><p>比较两个Immutable对象是否相同，只需要使用===就可以轻松判别。因此如果React传入的数据是Immutable Data,那么React就能高效地比较前后属性的变化，从而决定shouldComponentUpdate的返回值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 原来的写法</span></span><br><span class="line"><span class="keyword">let</span> foo = &#123;<span class="attr">a</span>: &#123;<span class="attr">b</span>: <span class="number">1</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">let</span> bar = foo;</span><br><span class="line">bar.a.b = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">console</span>.log(foo.a.b);  <span class="comment">// 打印 2</span></span><br><span class="line"><span class="built_in">console</span>.log(foo === bar);  <span class="comment">//  打印 true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 immutable.js 后</span></span><br><span class="line"><span class="keyword">import</span> Immutable <span class="keyword">from</span> <span class="string">'immutable'</span>;</span><br><span class="line">foo = Immutable.fromJS(&#123;<span class="attr">a</span>: &#123;<span class="attr">b</span>: <span class="number">1</span>&#125;&#125;);</span><br><span class="line">bar = foo.setIn([<span class="string">'a'</span>, <span class="string">'b'</span>], <span class="number">2</span>);   <span class="comment">// 使用 setIn 赋值</span></span><br><span class="line"><span class="built_in">console</span>.log(foo.getIn([<span class="string">'a'</span>, <span class="string">'b'</span>]));  <span class="comment">// 使用 getIn 取值，打印 1</span></span><br><span class="line"><span class="built_in">console</span>.log(foo === bar);  <span class="comment">//  打印 false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用  seamless-immutable.js 后</span></span><br><span class="line"><span class="keyword">import</span> SImmutable <span class="keyword">from</span> <span class="string">'seamless-immutable'</span>;</span><br><span class="line">foo = SImmutable(&#123;<span class="attr">a</span>: &#123;<span class="attr">b</span>: <span class="number">1</span>&#125;&#125;)</span><br><span class="line">bar = foo.merge(&#123;<span class="attr">a</span>: &#123; <span class="attr">b</span>: <span class="number">2</span>&#125;&#125;)   <span class="comment">// 使用 merge 赋值</span></span><br><span class="line"><span class="built_in">console</span>.log(foo.a.b);  <span class="comment">// 像原生 Object 一样取值，打印 1</span></span><br><span class="line"><span class="built_in">console</span>.log(foo === bar);  <span class="comment">//  打印 false</span></span><br></pre></td></tr></table></figure><h4 id="Immutable-advantage"><a href="#Immutable-advantage" class="headerlink" title="Immutable-advantage"></a>Immutable-advantage</h4><ol><li>Immutable 降低了 Mutable 带来的复杂度<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">touchAndLog</span>(<span class="params">touchFn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> data = &#123; <span class="attr">key</span>: <span class="string">'value'</span> &#125;;</span><br><span class="line">  touchFn(data);</span><br><span class="line">  <span class="built_in">console</span>.log(data.key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>在不了解touchFn函数的代码的情况下，不知道是否对data进行了修改。而如果data为Immutable对象一切都简单了，会打印value。</p><ol><li>节省内存Immutable.js 使用了 Structure Sharing （结构共享）会尽量复用内存，甚至以前使用的对象也可以再次被复用。没有被引用的对象会被垃圾回收。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="built_in">Map</span> &#125; <span class="keyword">from</span> <span class="string">'immutable'</span>;</span><br><span class="line"><span class="keyword">let</span> a = <span class="built_in">Map</span>(&#123;</span><br><span class="line">  select: <span class="string">'users'</span>,</span><br><span class="line">  filter: <span class="built_in">Map</span>(&#123; <span class="attr">name</span>: <span class="string">'Cam'</span> &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">let</span> b = a.set(<span class="string">'select'</span>, <span class="string">'people'</span>);</span><br><span class="line"></span><br><span class="line">a === b; <span class="comment">// false</span></span><br><span class="line">a.get(<span class="string">'filter'</span>) === b.get(<span class="string">'filter'</span>); <span class="comment">// true</span></span><br><span class="line"><span class="comment">// 上面 a 和 b 共享了没有变化的 filter 节点。</span></span><br></pre></td></tr></table></figure><ol><li><p>Undo/Redo，Copy/Paste，时间旅行等功能</p></li><li><p>并发安全</p></li><li><p>函数式编程</p></li></ol><h4 id="Immutable-disadvantage"><a href="#Immutable-disadvantage" class="headerlink" title="Immutable-disadvantage"></a>Immutable-disadvantage</h4><ol><li><p>需要熟悉新的api</p></li><li><p>引入新的库有大小</p></li><li><p>思维的变化Immutable 中的 Map 和 List 虽对应原生 Object 和 Array，但操作非常不同，比如你要用 map.get(‘key’)而不是 map.key，array.get(0) 而不是 array[0]。</p></li></ol><p>下面给出一些办法来避免类似问题发生：</p><blockquote><p>使用 Flow 或 TypeScript 这类有静态类型检查的工具约定变量命名规则：如所有 Immutable 类型对象以 $$ 开头。使用 Immutable.fromJS 而不是 Immutable.Map 或 Immutable.List 来创建对象，这样可以避免 Immutable 和原生对象间的混用。</p></blockquote><p>另外 Immutable 每次修改都会返回新对象，也很容易忘记赋值。</p><h4 id="两个Immutable对象的比较"><a href="#两个Immutable对象的比较" class="headerlink" title="两个Immutable对象的比较"></a>两个Immutable对象的比较</h4><ol><li><p>=== 全等比较内存地址性能最好</p></li><li><p>Immutable.is() 进行值比较</p></li></ol><p>Immutable.is 比较的是两个对象的 hashCode 或 valueOf（对于 JavaScript 对象）。</p><p>由于 immutable 内部使用了 Trie 数据结构来存储，只要两个对象的 hashCode 相等，值就是一样的。这样的算法避免了深度遍历比较，性能非常好。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = Immutable.Map(&#123;a：<span class="number">1</span>&#125;)</span><br><span class="line"><span class="keyword">let</span> b = Immutable.Map(&#123;a：<span class="number">1</span>&#125;)</span><br><span class="line">a === b <span class="comment">// false </span></span><br><span class="line">Immutable.is(a,b) <span class="comment">// true </span></span><br><span class="line"><span class="comment">// Object.defineProperty() // IE9</span></span><br></pre></td></tr></table></figure><h4 id="与-Object-freeze、const-区别"><a href="#与-Object-freeze、const-区别" class="headerlink" title="与 Object.freeze、const 区别"></a>与 Object.freeze、const 区别</h4><p>Object.freeze 和 ES6 中新加入的 const 都可以达到防止对象被篡改的功能，但它们是 shallowCopy 的。对象层级一深就要特殊处理了。怪不得常量const复杂类型就不行了，直接回答浅拷贝。</p><h4 id="react中使用"><a href="#react中使用" class="headerlink" title="react中使用"></a>react中使用</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; is &#125; <span class="keyword">from</span> <span class="string">'immutable'</span>;</span><br><span class="line"></span><br><span class="line">shouldComponentUpdate: <span class="function">(<span class="params">nextProps = &#123;&#125;, nextState = &#123;&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> thisProps = <span class="keyword">this</span>.props || &#123;&#125;, thisState = <span class="keyword">this</span>.state || &#123;&#125;;</span><br><span class="line">  <span class="comment">// 不清楚层级 直接比较两个对象</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">Object</span>.keys(thisProps).length !== <span class="built_in">Object</span>.keys(nextProps).length ||</span><br><span class="line">      <span class="built_in">Object</span>.keys(thisState).length !== <span class="built_in">Object</span>.keys(nextState).length) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> nextProps) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!is(thisProps[key], nextProps[key])) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> nextState) &#123;</span><br><span class="line">    <span class="keyword">if</span> (thisState[key] !== nextState[key] || !is(thisState[key], nextState[key])) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">diff</span>(<span class="params">obj1,obj2</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> o1 = obj1 <span class="keyword">instanceof</span> <span class="built_in">Object</span>;</span><br><span class="line">    <span class="keyword">var</span> o2 = obj2 <span class="keyword">instanceof</span> <span class="built_in">Object</span>;</span><br><span class="line">    <span class="keyword">if</span>(!o1 || !o2)&#123;<span class="comment">/*  判断不是对象  */</span></span><br><span class="line">        <span class="keyword">return</span> obj1 === obj2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">Object</span>.keys(obj1).length !== <span class="built_in">Object</span>.keys(obj2).length)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">//Object.keys() 返回一个由对象的自身可枚举属性(key值)组成的数组,例如：数组返回下表：let arr = ["a", "b", "c"];console.log(Object.keys(arr))-&gt;0,1,2;</span></span><br><span class="line">        <span class="comment">//即Object.keys只适用于可枚举的属性，而Object.getOwnPropertyNames返回对象自动的全部属性名称。</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> attr <span class="keyword">in</span> obj1)&#123;</span><br><span class="line">        <span class="keyword">var</span> t1 = obj1[attr] <span class="keyword">instanceof</span> <span class="built_in">Object</span>;</span><br><span class="line">        <span class="keyword">var</span> t2 = obj2[attr] <span class="keyword">instanceof</span> <span class="built_in">Object</span>;</span><br><span class="line">        <span class="keyword">if</span>(t1 &amp;&amp; t2)&#123;</span><br><span class="line">            <span class="keyword">return</span> diff(obj1[attr],obj2[attr]);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(obj1[attr] !== obj2[attr])&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'_'</span> <span class="keyword">from</span> <span class="string">'lodash'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Component = React.createClass(&#123;</span><br><span class="line">  getInitialState() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      data: &#123; <span class="attr">times</span>: <span class="number">0</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  handleAdd() &#123;</span><br><span class="line">    <span class="keyword">let</span> data = _.cloneDeep(<span class="keyword">this</span>.state.data);</span><br><span class="line">    data.times = data.times + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123; <span class="attr">data</span>: data &#125;);</span><br><span class="line">    <span class="comment">// 如果上面不做 cloneDeep，下面打印的结果会是已经加 1 后的值。let data = this.state.data 指向同一内存地址</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.state.data.times);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">使用 Immutable 后：</span><br><span class="line"></span><br><span class="line">  getInitialState() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      data: <span class="built_in">Map</span>(&#123; <span class="attr">times</span>: <span class="number">0</span> &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  handleAdd() &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123; <span class="attr">data</span>: <span class="keyword">this</span>.state.data.update(<span class="string">'times'</span>, v =&gt; v + <span class="number">1</span>) &#125;);</span><br><span class="line">    <span class="comment">// 这时的 times 并不会改变</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.state.data.get(<span class="string">'times'</span>));</span><br><span class="line">  &#125;</span><br><span class="line">上面的 handleAdd 可以简写成：</span><br><span class="line"></span><br><span class="line">  handleAdd() &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(<span class="function">(<span class="params">&#123;data&#125;</span>) =&gt;</span> (&#123;</span><br><span class="line">      data: data.update(<span class="string">'times'</span>, v =&gt; v + <span class="number">1</span>) &#125;)</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h4 id="常用api"><a href="#常用api" class="headerlink" title="常用api"></a>常用api</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明</span></span><br><span class="line">Immutable.Map(&#123;<span class="attr">a</span>:<span class="number">1</span>&#125;)</span><br><span class="line">Immutable.Map([<span class="number">1</span>,<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">// 原生js转换为immutable data</span></span><br><span class="line">Immutable.fromJS(&#123;<span class="attr">a</span>:<span class="number">1</span>&#125;) <span class="comment">// immutable的 map</span></span><br><span class="line"></span><br><span class="line">Immutable.fromJS([<span class="number">1</span>,<span class="number">2</span>]) <span class="comment">// immutable的 list</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 从immutableData 回到 JavaScript 对象</span></span><br><span class="line">immutableData.toJS()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断两个immutable数据是否一致</span></span><br><span class="line">Immutable.is(immutableA, immutableB)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断是不是map或List</span></span><br><span class="line">Immutable.Map.isMap(x)</span><br><span class="line"></span><br><span class="line">Immutable.List.isList(x)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象合并(注意是同个类型)</span></span><br><span class="line">immutableMaB = immutableMapA.merge(immutableMaC)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Map的增删改查</span></span><br><span class="line">immutableData.get(<span class="string">'a'</span>) <span class="comment">// &#123;a:1&#125; 得到1。</span></span><br><span class="line"></span><br><span class="line">immutableData.getIn([<span class="string">'a'</span>, <span class="string">'b'</span>]) <span class="comment">// &#123;a:&#123;b:2&#125;&#125; 得到2。访问深层次的key</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 增和改(注意不会改变原来的值，返回新的值原有的基础上扩展出分支)</span></span><br><span class="line">immutableData.set(<span class="string">'a'</span>, <span class="number">2</span>) <span class="comment">// &#123;a:1&#125; 得到1。</span></span><br><span class="line"></span><br><span class="line">immutableData.setIn([<span class="string">'a'</span>, <span class="string">'b'</span>], <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">immutableData.update(<span class="string">'a'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;<span class="keyword">return</span> x+<span class="number">1</span>&#125;)</span><br><span class="line"></span><br><span class="line">immutableData.updateIn([<span class="string">'a'</span>, <span class="string">'b'</span>],<span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;<span class="keyword">return</span> x+<span class="number">1</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删</span></span><br><span class="line">immutableData.delete(<span class="string">'a'</span>)</span><br><span class="line"></span><br><span class="line">immutableData.deleteIn([<span class="string">'a'</span>, <span class="string">'b'</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">// List的增删查改如同Map，不过参数变为数字索引。比如immutableList.set(1, 2)</span></span><br></pre></td></tr></table></figure><p>当然还有现在火热的immer.js，unstated了解一下@_@</p><p><a href="https://www.cnblogs.com/3body/p/6224010.html" target="_blank" rel="noopener">参考文章</a></p>]]></content:encoded>
      
      <comments>http://mydearest.cn/%E4%B8%BA%E4%BB%80%E4%B9%88react%E5%92%8Cimmutable%E6%88%90%E4%B8%BA%E4%BA%86%E5%A5%BD%E5%9F%BA%E5%8F%8B.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>\[1,2,3\]是JSON吗？</title>
      <link>http://mydearest.cn/%5B1,2,3%5D%E6%98%AFJSON%E5%90%97%EF%BC%9F.html</link>
      <guid>http://mydearest.cn/%5B1,2,3%5D%E6%98%AFJSON%E5%90%97%EF%BC%9F.html</guid>
      <pubDate>Wed, 21 Nov 2018 03:17:20 GMT</pubDate>
      <description>
      
        &lt;p&gt;A: “这个接口我传个 JSON 给你，格式是这样的 ‘[1, 2, 3]’”&lt;/p&gt;
&lt;p&gt;B: “等下，这不是数组吗，JSON 应该有键啊，类似这样才行’{ “key”: [1, 2, 3] }’”&lt;/p&gt;
&lt;p&gt;A: “不，这就是 JSON 格式的数据”&lt;/p&gt;
&lt;p&gt;B: “啊，是吗？”
你是否也有这样的疑惑？ wappalyzer chrome网页分析插件&lt;/p&gt;
&lt;hr&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>A: “这个接口我传个 JSON 给你，格式是这样的 ‘[1, 2, 3]’”</p><p>B: “等下，这不是数组吗，JSON 应该有键啊，类似这样才行’{ “key”: [1, 2, 3] }’”</p><p>A: “不，这就是 JSON 格式的数据”</p><p>B: “啊，是吗？”你是否也有这样的疑惑？ wappalyzer chrome网页分析插件</p><hr><a id="more"></a><h2 id="什么是JSON"><a href="#什么是JSON" class="headerlink" title="什么是JSON"></a>什么是JSON</h2><p><strong>JSON(JavaScript Object Notation) 是一种轻量级的数据交换格式。</strong></p><p>它仅仅是一种格式，就好比厨师脑中的食谱，这道菜有什么材料。而从原材料变成成品给顾客食用，这个过程食谱并没有实际参与，只是一个指导作用。</p><p>所以JSON也是不存在于我们的程序中，不存在任何地方，只是一个思维，存在我们脑海里。</p><p>这个思维，就是JSON这种格式应该包含哪些元素。</p><ul><li>“名称/值”对的集合</li><li>值的有序列表</li></ul><blockquote><p>所以”[1,2,3]”是符合JSON格式的数据结构的</p></blockquote><blockquote><p>但不能说[1, 2, 3]是一个JSON，它在javascript中可以被转换为数组，也可以在其他语言中被转换为数组（如果有这种类型）。而之所以只有这两种，是因为大部分现代计算机语言都支持。那[1, 2, undefined, 3]符合JSON格式吗？“既然结构要是计算机语言都支持的，那结构中的值也需要吧，而undefined是javascript独有的，其他语言并没有，所以不符合JSON格式。”</p></blockquote><p>合法的JSON值有以下6种</p><ul><li>string</li><li>number</li><li>boolean</li><li>null</li><li>object</li><li>array</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"person"</span>: &#123;</span><br><span class="line">        <span class="string">"name"</span>: <span class="string">"ltaoo"</span>,</span><br><span class="line">        <span class="string">"age"</span>: <span class="number">18</span>,</span><br><span class="line">        <span class="string">"skills"</span>: [<span class="string">"javascript"</span>, <span class="string">"html"</span>, <span class="string">"css"</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"happy"</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="JS中的JSON"><a href="#JS中的JSON" class="headerlink" title="JS中的JSON"></a>JS中的JSON</h2><p>在JavaScript中，如果在请求接口时要传递数据，我们往往会说“传一个JSON”，从上面已经知道JSON只是一个格式，那我们传递的到底是什么？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一个简单的 post 请求</span></span><br><span class="line"><span class="keyword">const</span> body = &#123;</span><br><span class="line">    name: <span class="string">'ltaoo'</span>,</span><br><span class="line">    age: <span class="number">18</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">fetch(<span class="string">'https://easy-mock.com/mock/5a1d30028e6ddb24964c2d91/business/api/login'</span>, &#123;</span><br><span class="line">    method: <span class="string">'POST'</span>,</span><br><span class="line">    body,</span><br><span class="line">&#125;)</span><br><span class="line">    .then(<span class="function">(<span class="params">res</span>) =&gt;</span> res.json())</span><br><span class="line">    .then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(data);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><blockquote><p>但实际上并没有将参数传递过去，即Headers中并不存在Request Payload，需要将body使用JSON.stringify()方法转换为一个字符串后，才能成功传递。body:JSON.stringify(body) or ‘{“name”: ‘ltaoo’,”age”: 18}’</p></blockquote><p>但两者还是有区别的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> body = &#123;</span><br><span class="line">    name: <span class="string">'ltaoo'</span>,</span><br><span class="line">    skills: <span class="literal">undefined</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(body)); <span class="comment">// &#123;"name":"ltaoo"&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> body = &#123;</span><br><span class="line">    name: <span class="string">'ltaoo'</span>,</span><br><span class="line">    skills: [<span class="literal">undefined</span>],</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(body)); <span class="comment">// &#123;"name":"ltaoo","skills":[null]&#125;。</span></span><br></pre></td></tr></table></figure><h3 id="JSON-parse"><a href="#JSON-parse" class="headerlink" title="JSON.parse"></a>JSON.parse</h3><blockquote><p>JSON.parse() 方法用来解析JSON字符串，构造由字符串描述的JavaScript值或对象。可以用来判断某个字符串是否符合JSON格式</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>JSON是日常开发中最常使用的，但仅限于“会用”，实际上JSON的用途已经不局限在“数据交换”，NoSQL、配置文件也有JSON的身影，深入了解是有必要的，毕竟看起来这么“简单”。</p>]]></content:encoded>
      
      <comments>http://mydearest.cn/%5B1,2,3%5D%E6%98%AFJSON%E5%90%97%EF%BC%9F.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>java -jar与nohup</title>
      <link>http://mydearest.cn/java%20-jar%E4%B8%8Enohup.html</link>
      <guid>http://mydearest.cn/java%20-jar%E4%B8%8Enohup.html</guid>
      <pubDate>Tue, 13 Nov 2018 01:30:14 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;java程序员，经常会遇到这样一个问题，打个jar包，测试或者上线生产，于是乎面临的选择来了，java –jar or nohup？
下面我来扒一扒：&lt;/p&gt;
&lt;h2 id=&quot;java-jar-a-jar-amp&quot;&gt;&lt;a href=&quot;#java-jar-a-jar-amp&quot;
        
      
      </description>
      
      <content:encoded><![CDATA[<p>java程序员，经常会遇到这样一个问题，打个jar包，测试或者上线生产，于是乎面临的选择来了，java –jar or nohup？下面我来扒一扒：</p><h2 id="java-jar-a-jar-amp"><a href="#java-jar-a-jar-amp" class="headerlink" title="java -jar a.jar &amp;"></a>java -jar a.jar &amp;</h2><p>直接启动jar文件，在当前会话进程中开启一个子进程来运行程序，这个子进程会随着会话进程的结束而结束。</p><p>这种情况适合短时间测试用。</p><h2 id="nohup-java-jar-a-jar-amp"><a href="#nohup-java-jar-a-jar-amp" class="headerlink" title="nohup java -jar a.jar &amp;"></a>nohup java -jar a.jar &amp;</h2><p>hangup ：(挂断)，终端退出时会发送 hangup 信号来通知其关闭所有子进程。</p><p>nohup ：(不挂断，忽略挂断信号)。</p><p>nohup 的使用是十分方便的，只需在要处理的命令前加上 nohup 即可，标准输出和标准错误缺省会被重定向到 nohup.out 文件中。一般我们可在结尾加上”&amp;”来将命令同时放入后台运行，也可用”&gt;filename2&gt;&amp;1”来更改缺省的重定向文件名。</p><p>这种情况适合在生产环境长时间运行。</p><h2 id="nodejs应用在linux上运行"><a href="#nodejs应用在linux上运行" class="headerlink" title="nodejs应用在linux上运行"></a>nodejs应用在linux上运行</h2><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><ul><li>forever管理多个站点，每个站点访问量不大，不需要监控。</li><li>supervisor是开发环境用。</li><li>nodemon 是开发环境使用，修改自动重启。</li><li>pm2 网站访问量比较大,需要完整的监控界面。</li></ul><ol><li><p>forever</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">npm install -g forever</span><br><span class="line">forever start index.js -o out.log -e err.log</span><br><span class="line">forever list </span><br><span class="line">forever stop index.js [id]</span><br><span class="line">forever stopall</span><br><span class="line">forever restartall</span><br></pre></td></tr></table></figure></li><li><p>supervisor 热部署</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -g supervisor</span><br><span class="line">supervisor app.js <span class="comment">// 文件有改动会立即重启node模块</span></span><br></pre></td></tr></table></figure></li><li><p>nodemon</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -g nodemon</span><br><span class="line">nodemon app.js</span><br></pre></td></tr></table></figure></li><li><p>nohup</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nohup node index.js &amp;</span><br><span class="line">nohup node index.js &gt; myLog.log <span class="number">2</span>&gt;&amp;<span class="number">1</span> &amp;</span><br></pre></td></tr></table></figure></li></ol><p>nohup问题:</p><p>但是有时候在这一步会有问题，当把终端关闭后，进程会自动被关闭，查看nohup.out可以看到在关闭终端瞬间服务自动关闭。有个操作终端时的细节：当shell中提示了nohup成功后还需要按终端上键盘任意键退回到shell输入命令窗口，然后通过在shell中输入exit来退出终端；而我是每次在nohup执行成功后直接点关闭程序按钮关闭终端。所以这时候会断掉该命令所对应的session，导致nohup对应的进程被通知需要一起shutdown。</p><ol><li>高大上的pm2</li></ol><p>特性：</p><ul><li>内建负载均衡（使用Node cluster 集群模块）</li><li>后台运行</li><li>0秒停机重载，维护升级的时候不需要停机</li><li>具有Ubuntu和CentOS 的启动脚本</li><li>停止不稳定的进程（避免无限循环）</li><li>控制台检测</li><li>提供 HTTP API</li><li>远程控制和实时的接口API ( Nodejs 模块,允许和PM2进程管理器交互 )</li></ul><p>使用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">npm install -g pm2</span><br><span class="line">pm2 start app.js -o out.log -e err.log</span><br><span class="line">pm2 stop app.js</span><br><span class="line">pm2 restart app.js</span><br><span class="line">pm2 list</span><br><span class="line">pm2 descibe [id]</span><br><span class="line">pm2 monit <span class="comment">// 查看cpu和内存使用</span></span><br><span class="line">pm2 logs <span class="comment">// 实时集中log处理</span></span><br><span class="line">pm2 web <span class="comment">// 浏览器查看</span></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://mydearest.cn/java%20-jar%E4%B8%8Enohup.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>实现双向绑定</title>
      <link>http://mydearest.cn/%E5%AE%9E%E7%8E%B0%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A.html</link>
      <guid>http://mydearest.cn/%E5%AE%9E%E7%8E%B0%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A.html</guid>
      <pubDate>Wed, 07 Nov 2018 09:51:45 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;主流的双向绑定方法
1.发布-订阅模式
通过使用 get 和 set 的方式获取数据然后更新数据，其原理就是监听页面中某个具体元素的事件，然后将其最新的值手动 set 到 数据中，同时订阅 model 层的改变，然后触发页面的渲染更新&lt;/p&gt;
&lt;p&gt;2.脏检测
通过对比数据
        
      
      </description>
      
      <content:encoded><![CDATA[<p>主流的双向绑定方法1.发布-订阅模式通过使用 get 和 set 的方式获取数据然后更新数据，其原理就是监听页面中某个具体元素的事件，然后将其最新的值手动 set 到 数据中，同时订阅 model 层的改变，然后触发页面的渲染更新</p><p>2.脏检测通过对比数据是否有变更，来决定是否更新视图。最简单的可以通过定时轮询去检测数据的变动。Angular 只有在指定事件触发时进入脏检测：</p><ul><li>DOM事件，比如用户输入文本点击按钮等（ng-click）</li><li>XHR响应事件浏览器 Location 变更</li><li>Timer事件</li><li>执行 $digest() 或 $apply();</li></ul><p>脏检查的主要原理是在将数据绑定到 View 的时候，就在监听器列表（scope 作用域中的监听队列 watchList）中插入一条监听器，当触发 UI 事件或者 Ajax 请求时，就会触发脏检查（$digest cycle), 在 $digest 流程中，将遍历每个数据变量的 watcher，比较它的新旧值。当新旧值不同时，触发 listener 函数，执行相关的更新逻辑。这个过程将会一直重复，直到所有数据指令的新旧值都相同为止。</p><p>脏检查虽然可以达到实现双向绑定，但是当页面中绑定的 watcher 过多时，就会引发性能问题。所以 angular 在进行 $digest 检测时，会限制循环检查的次数最少2次，最多10次，防止无效的检查。</p><p>3.数据劫持通过 ES5 的 Object.defineProperty() 来劫持数据属性的 getter 和 setter， 在数据变动时触发订阅者（watcher），从而触发相应的监听回调。</p><ul><li>Observer 对数据的所有属性进行监听其 getter 和 setter</li><li>Compile 是一个指令解析器，对 MVVM 实例的所有元素指令进行解析，并渲染成 model 中的绑定数据，当数据进行更新时，也能替换为更新后的值。</li><li>Watcher 作为 Compile 和 Observer 的桥梁，能够订阅数据属性的更新，然后执行相应的监听回调</li><li>Deps 用于存放监听器数组，主要用来保存 Watcher</li><li>Updater 执行更新操作，针对不同的指令进行不同的更新操作，如 v-model, v-class, v-html 等类型的指令。</li><li>MVVM 作为入口函数，整合以上所有的功能。</li></ul><p>Observer 劫持了所有数据属性的 getter 和 setter，当数据发生改变时，就会通知 deps 中所有 watcher 的更新操作，进而触发页面的重新渲染，这是修改 Model 层从而引发 View 层的重新渲染。在 Compile 中监听可输入元素的事件，然后将新值更新到 model 的数据中，这是修改 View 层触发的 Model 层的修改。</p><ul><li>用户名或者邮箱跟github没有关联上， github认为不是你提交的， 不统计。</li><li>fork 的项目， 不统计</li><li>没有在版本库的master【默认分支】上提交</li></ul><p><a href="https://github.com/SunShinewyf/issue-blog/issues/46" target="_blank" rel="noopener">解读</a></p>]]></content:encoded>
      
      <comments>http://mydearest.cn/%E5%AE%9E%E7%8E%B0%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>深浅拷贝</title>
      <link>http://mydearest.cn/%E6%B7%B1%E6%B5%85%E6%8B%B7%E8%B4%9D.html</link>
      <guid>http://mydearest.cn/%E6%B7%B1%E6%B5%85%E6%8B%B7%E8%B4%9D.html</guid>
      <pubDate>Wed, 31 Oct 2018 06:51:28 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;深浅拷贝概念&quot;&gt;&lt;a href=&quot;#深浅拷贝概念&quot; class=&quot;headerlink&quot; title=&quot;深浅拷贝概念&quot;&gt;&lt;/a&gt;深浅拷贝概念&lt;/h2&gt;&lt;p&gt;深拷贝和浅拷贝只针对像 Object, Array 这样的复杂对象（引用类型）的。&lt;/p&gt;
&lt;p&gt;复制引用（
        
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="深浅拷贝概念"><a href="#深浅拷贝概念" class="headerlink" title="深浅拷贝概念"></a>深浅拷贝概念</h2><p>深拷贝和浅拷贝只针对像 Object, Array 这样的复杂对象（引用类型）的。</p><p>复制引用（引用类型）的拷贝方法称之为浅拷贝，也因为直接复制引用类型，导致新旧对象共用一块内存地址，会互相影响。</p><p>深拷贝就是指完全的拷贝一个对象，将原对象的各个属性递归复制下来。这样即使嵌套了对象，两者也相互分离。</p><h2 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> shallowCopy = <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> obj !== <span class="string">'object'</span>) <span class="keyword">return</span>;      <span class="comment">// 只拷贝对象</span></span><br><span class="line">    <span class="keyword">var</span> newObj = obj <span class="keyword">instanceof</span> <span class="built_in">Array</span> ? [] : &#123;&#125;;     <span class="comment">// 根据obj的类型判断是新建一个数组还是对象</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> obj) &#123;      <span class="comment">// 遍历obj，并且判断是obj的属性才拷贝</span></span><br><span class="line">        <span class="keyword">if</span> (obj.hasOwnProperty(key)) &#123;</span><br><span class="line">            newObj[key] = obj[key];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newObj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">a</span>:<span class="number">1</span>, <span class="attr">arr</span>: [<span class="number">2</span>,<span class="number">3</span>] &#125;;</span><br><span class="line"><span class="keyword">var</span> shallowObj = shallowCopy(obj);</span><br><span class="line">shallowObj.arr[<span class="number">1</span>] = <span class="number">5</span>;</span><br><span class="line"><span class="built_in">console</span>.log(obj.arr[<span class="number">1</span>])  <span class="comment">// 5 互相影响 指向了同一块内存地址</span></span><br><span class="line">shallowObj.a = <span class="number">5</span>;</span><br><span class="line"><span class="built_in">console</span>.log(obj.a) <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><h2 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> deepCopy = <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> obj !== <span class="string">'object'</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">var</span> newObj = obj <span class="keyword">instanceof</span> <span class="built_in">Array</span> ? [] : &#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">        <span class="keyword">if</span> (obj.hasOwnProperty(key)) &#123;</span><br><span class="line">            newObj[key] = <span class="keyword">typeof</span> obj[key] === <span class="string">'object'</span> ? deepCopy(obj[key]) : obj[key];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newObj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">a</span>:<span class="number">1</span>, <span class="attr">arr</span>: [<span class="number">2</span>,<span class="number">3</span>] &#125;;</span><br><span class="line"><span class="keyword">var</span> shallowObj = shallowCopy(obj);</span><br><span class="line">shallowObj.arr[<span class="number">1</span>] = <span class="number">5</span>;</span><br><span class="line"><span class="built_in">console</span>.log(obj.arr[<span class="number">1</span>])  <span class="comment">// 3 没有影响 重新拷贝了新数据</span></span><br><span class="line">shallowObj.a = <span class="number">5</span>;</span><br><span class="line"><span class="built_in">console</span>.log(obj.a) <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p>尽管使用深拷贝会完全的克隆一个新对象，不会产生副作用，但是深拷贝因为使用递归，性能会不如浅拷贝，在开发中，还是要根据实际情况进行选择。</p>]]></content:encoded>
      
      <comments>http://mydearest.cn/%E6%B7%B1%E6%B5%85%E6%8B%B7%E8%B4%9D.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>js判断数据类型</title>
      <link>http://mydearest.cn/js%E5%88%A4%E6%96%AD%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.html</link>
      <guid>http://mydearest.cn/js%E5%88%A4%E6%96%AD%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.html</guid>
      <pubDate>Wed, 31 Oct 2018 06:28:15 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;typeof&quot;&gt;&lt;a href=&quot;#typeof&quot; class=&quot;headerlink&quot; title=&quot;typeof&quot;&gt;&lt;/a&gt;typeof&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;typeof一般只能返回如下几个结果：number,boolean,string,
        
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a>typeof</h2><blockquote><p>typeof一般只能返回如下几个结果：number,boolean,string,function,object,undefined字符串</p></blockquote><blockquote><p>对于Array,null等特殊对象使用typeof一律返回object，这正是typeof的局限性。</p></blockquote><blockquote><p>在判断除Object类型的对象时比较方便。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fn = <span class="keyword">new</span> <span class="built_in">Function</span> (<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'return a + b'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">typeof</span> fn <span class="comment">// function</span></span><br></pre></td></tr></table></figure><h2 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h2><blockquote><p>instanceof适用于检测对象，它是基于原型链运作的。</p></blockquote><blockquote><p>instanceof 运算符用来测试一个对象在其原型链中是否存在一个构造函数的 prototype 属性。换种说法就是如果左侧的对象是右侧对象的实例， 则表达式返回true, 否则返回false 。</p></blockquote><blockquote><p>instanceof对基本数据类型检测不起作用，因为基本数据类型没有原型链。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>] <span class="keyword">instanceof</span> <span class="built_in">Array</span> <span class="comment">// true </span></span><br><span class="line">/abc/ <span class="keyword">instanceof</span> <span class="built_in">RegExp</span> <span class="comment">// true </span></span><br><span class="line">(&#123;&#125;) <span class="keyword">instanceof</span> <span class="built_in">Object</span> <span class="comment">// true </span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;) <span class="keyword">instanceof</span> <span class="built_in">Function</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h2 id="Object-prototype-toString-call"><a href="#Object-prototype-toString-call" class="headerlink" title="Object.prototype.toString.call"></a>Object.prototype.toString.call</h2><p>可以检测各种数据类型，推荐使用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.prototype.toString.call([]); <span class="comment">// =&gt; [object Array] </span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(&#123;&#125;); <span class="comment">// =&gt; [object Object] </span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="string">''</span>); <span class="comment">// =&gt; [object String] </span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="keyword">new</span> <span class="built_in">Date</span>()); <span class="comment">// =&gt; [object Date] </span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="number">1</span>); <span class="comment">// =&gt; [object Number] </span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;); <span class="comment">// =&gt; [object Function] </span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="regexp">/test/i</span>); <span class="comment">// =&gt; [object RegExp] </span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="literal">true</span>); <span class="comment">// =&gt; [object Boolean] </span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="literal">null</span>); <span class="comment">// =&gt; [object Null] </span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(); <span class="comment">// =&gt; [object Undefined]</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> isType = <span class="function"><span class="keyword">function</span>(<span class="params"> type </span>)</span>&#123; </span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"> obj </span>)</span>&#123; </span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call( obj ) === <span class="string">'[object '</span>+ type +<span class="string">']'</span>; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> isString = isType( <span class="string">'String'</span> ); </span><br><span class="line"><span class="keyword">var</span> isArray = isType( <span class="string">'Array'</span> ); </span><br><span class="line"><span class="keyword">var</span> isNumber = isType( <span class="string">'Number'</span> );</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log( isArray( [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> ] ) ); <span class="comment">//true</span></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://mydearest.cn/js%E5%88%A4%E6%96%AD%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>js创建对象实现继承</title>
      <link>http://mydearest.cn/js%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1%E5%AE%9E%E7%8E%B0%E7%BB%A7%E6%89%BF.html</link>
      <guid>http://mydearest.cn/js%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1%E5%AE%9E%E7%8E%B0%E7%BB%A7%E6%89%BF.html</guid>
      <pubDate>Wed, 31 Oct 2018 02:21:48 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;今天10月31日，万圣节前夜。希望gf的病早点好，身体健康。&lt;/p&gt;
&lt;h2 id=&quot;创建对象&quot;&gt;&lt;a href=&quot;#创建对象&quot; class=&quot;headerlink&quot; title=&quot;创建对象&quot;&gt;&lt;/a&gt;创建对象&lt;/h2&gt;&lt;figure class=&quot;highlight ja
        
      
      </description>
      
      <content:encoded><![CDATA[<p>今天10月31日，万圣节前夜。希望gf的病早点好，身体健康。</p><h2 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125; <span class="comment">// 字面量 </span></span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>()</span><br><span class="line"><span class="keyword">var</span> obj = <span class="built_in">Object</span>.create(<span class="literal">null</span>) <span class="comment">// 以xx为原型创建对象</span></span><br><span class="line"><span class="keyword">var</span> obj = <span class="built_in">Object</span>.assign(&#123;&#125;)   <span class="comment">// 复制到目标对象</span></span><br></pre></td></tr></table></figure><h3 id="复制一个对象"><a href="#复制一个对象" class="headerlink" title="复制一个对象"></a>复制一个对象</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> copy = <span class="built_in">Object</span>.assign(&#123;&#125;, obj);</span><br><span class="line"><span class="built_in">console</span>.log(copy); <span class="comment">// &#123; a: 1 &#125;</span></span><br></pre></td></tr></table></figure><h3 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h3><p>Object.assign()拷贝的是属性值。假如源对象的属性值是一个指向对象的引用，它也只拷贝那个引用值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj1 = &#123; <span class="attr">a</span>: <span class="number">0</span> , <span class="attr">b</span>: &#123; <span class="attr">c</span>: <span class="number">0</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">let</span> obj2 = <span class="built_in">Object</span>.assign(&#123;&#125;, obj1);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(obj2)); <span class="comment">// &#123; a: 0, b: &#123; c: 0&#125;&#125;</span></span><br><span class="line"></span><br><span class="line">obj1.a = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(obj1)); <span class="comment">// &#123; a: 1, b: &#123; c: 0&#125;&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(obj2)); <span class="comment">// &#123; a: 0, b: &#123; c: 0&#125;&#125;</span></span><br><span class="line"></span><br><span class="line">obj2.a = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(obj1)); <span class="comment">// &#123; a: 1, b: &#123; c: 0&#125;&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(obj2)); <span class="comment">// &#123; a: 2, b: &#123; c: 0&#125;&#125;</span></span><br><span class="line"></span><br><span class="line">obj2.b.c = <span class="number">3</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(obj1)); <span class="comment">// &#123; a: 1, b: &#123; c: 3&#125;&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(obj2)); <span class="comment">// &#123; a: 2, b: &#123; c: 3&#125;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Deep Clone</span></span><br><span class="line">obj1 = &#123; <span class="attr">a</span>: <span class="number">0</span> , <span class="attr">b</span>: &#123; <span class="attr">c</span>: <span class="number">0</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">let</span> obj3 = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(obj1));</span><br><span class="line">obj1.a = <span class="number">4</span>;</span><br><span class="line">obj1.b.c = <span class="number">4</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(obj3)); <span class="comment">// &#123; a: 0, b: &#123; c: 0&#125;&#125;</span></span><br></pre></td></tr></table></figure><h3 id="合并对象"><a href="#合并对象" class="headerlink" title="合并对象"></a>合并对象</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o1 = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> o2 = &#123; <span class="attr">b</span>: <span class="number">2</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> o3 = &#123; <span class="attr">c</span>: <span class="number">3</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = <span class="built_in">Object</span>.assign(o1, o2, o3);</span><br><span class="line"><span class="built_in">console</span>.log(obj); <span class="comment">// &#123; a: 1, b: 2, c: 3 &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(o1);  <span class="comment">// &#123; a: 1, b: 2, c: 3 &#125;, 注意目标对象自身也会改变。</span></span><br></pre></td></tr></table></figure><h3 id="合并相同属性的对象"><a href="#合并相同属性的对象" class="headerlink" title="合并相同属性的对象"></a>合并相同属性的对象</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o1 = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">1</span>, <span class="attr">c</span>: <span class="number">1</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> o2 = &#123; <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">2</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> o3 = &#123; <span class="attr">c</span>: <span class="number">3</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = <span class="built_in">Object</span>.assign(&#123;&#125;, o1, o2, o3);</span><br><span class="line"><span class="built_in">console</span>.log(obj); <span class="comment">// &#123; a: 1, b: 2, c: 3 &#125;</span></span><br></pre></td></tr></table></figure><h2 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h2><p>在一个函数内创建一个空对象，给空对象添加属性和属性值，return这个对象。然后调用这个函数并传入参数来使用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createPerson</span>(<span class="params">name, age, job</span>)</span>&#123; </span><br><span class="line">    <span class="keyword">var</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">    o.name = name;</span><br><span class="line">    o.age = age;</span><br><span class="line">    o.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; alert(<span class="keyword">this</span>.name); &#125;; </span><br><span class="line">    <span class="keyword">return</span> o;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person1 = createPerson(<span class="string">"cosyer"</span>, <span class="number">23</span>); </span><br><span class="line"><span class="built_in">console</span>.log(person1.name) <span class="comment">//cosyer</span></span><br><span class="line"><span class="built_in">console</span>.log(person1.sayName()) <span class="comment">//cosyer</span></span><br></pre></td></tr></table></figure><p>优点：解决了创建多个相似对象的问题缺点：没有解决对象识别的问题（即怎样知道一个对象的类型）</p><h2 id="构造函数模式"><a href="#构造函数模式" class="headerlink" title="构造函数模式"></a>构造函数模式</h2><p>创建一个构造函数，然后用new 创建构造函数的实例。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, job</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name; </span><br><span class="line">    <span class="keyword">this</span>.age = age; </span><br><span class="line">    <span class="keyword">this</span>.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name); </span><br><span class="line">    &#125;; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person(<span class="string">"cosyer"</span>, <span class="number">22</span>); </span><br><span class="line"><span class="built_in">console</span>.log(person1.name) <span class="comment">//cosyer</span></span><br><span class="line"><span class="built_in">console</span>.log(person1.sayName()) <span class="comment">//cosyer</span></span><br></pre></td></tr></table></figure><p>优点：</p><ol><li>子类型构造函数中可向超类型构造函数传递参数。</li><li>方法都在构造函数中定义，对于属性值是引用类型的就可通过在每个实例上重新创建一遍，避免所有实例的该属性值指向同一堆内存地址，一个改其他也跟着改。原始 复杂(引用) 缺点：对于一些可共用的属性方法（比如这边的this.sayName）没必要都在每个实例上重新创建一遍，占用内存。(无法复用)</li></ol><h2 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h2><p>创建一个函数，给函数原型对象赋值。利用函数的prototype属性指向函数的原型对象，从而在原型对象添加所有实例可共享的属性和方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123; &#125;</span><br><span class="line">Person.prototype.name = <span class="string">"cosyer"</span>; </span><br><span class="line">Person.prototype.age = <span class="number">23</span>; </span><br><span class="line">Person.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="keyword">this</span>.name); </span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="built_in">console</span>.log(person1.name) <span class="comment">//cosyer</span></span><br><span class="line"><span class="built_in">console</span>.log(person1.sayName()) <span class="comment">//cosyer</span></span><br></pre></td></tr></table></figure><p>优点：可以让所有对象实例共享它所包含的属性和方法(复用性)。缺点：</p><ol><li>在创建子类型的实例时，不能向超类型的构造函数中传递参数。</li><li>如果包含引用类型值的属性，那一个实例改了这个属性（引用类型值），其他实例也跟着改变。</li></ol><h2 id="组合模式"><a href="#组合模式" class="headerlink" title="组合模式"></a>组合模式</h2><p>构造函数模式用于定义实例属性，而原型模式用于定义方法和共享的属性。简单来说就是属性值是引用类型的就用构造函数模式，方法和属性能共享的就用原型模式，取精去糟。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age</span>)</span>&#123; <span class="comment">//构造函数模式</span></span><br><span class="line">    <span class="keyword">this</span>.name = name; </span><br><span class="line">    <span class="keyword">this</span>.age = age; </span><br><span class="line">    <span class="keyword">this</span>.friends = [<span class="string">"aa"</span>, <span class="string">"bb"</span>]; </span><br><span class="line">&#125;</span><br><span class="line">Person.prototype = &#123;  <span class="comment">//原型模式</span></span><br><span class="line">    <span class="keyword">constructor</span> : Person, </span><br><span class="line">    sayName : function()&#123; </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.hobby = &#123;<span class="attr">exercise</span>:<span class="string">"ball"</span>&#125;; <span class="comment">//原型模式</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person(<span class="string">"cosyer"</span>, <span class="number">23</span>);</span><br><span class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> Person(<span class="string">"cuby"</span>, <span class="number">27</span>)</span><br><span class="line">person1.friends.push(<span class="string">"cc"</span>);   </span><br><span class="line"><span class="built_in">console</span>.log(person1.friends);   <span class="comment">//"aa,bb,cc"</span></span><br><span class="line"><span class="built_in">console</span>.log(person2.friends);   <span class="comment">//"aa,bb"</span></span><br><span class="line">person1.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(<span class="keyword">this</span>.age)&#125;;</span><br><span class="line">person1.sayName();  <span class="comment">//22</span></span><br><span class="line">person2.sayName();  <span class="comment">//cuby</span></span><br><span class="line">person1.hobby.exercise = <span class="string">"running"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(person1.hobby);  <span class="comment">//&#123;exercise: "running"&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(person2.hobby); <span class="comment">//&#123;exercise: "running"&#125;</span></span><br></pre></td></tr></table></figure><h2 id="构造函数继承"><a href="#构造函数继承" class="headerlink" title="构造函数继承"></a>构造函数继承</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">    <span class="keyword">this</span>.colors = [<span class="string">"red"</span>, <span class="string">"blue"</span>, <span class="string">"green"</span>]; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubType</span>(<span class="params"></span>)</span>&#123; <span class="comment">//继承了 SuperType </span></span><br><span class="line">    SuperType.call(<span class="keyword">this</span>); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> instance1 = <span class="keyword">new</span> SubType(); </span><br><span class="line">instance1.colors.push(<span class="string">"black"</span>); </span><br><span class="line"><span class="built_in">console</span>.log(instance1.colors); <span class="comment">//"red,blue,green,black"</span></span><br><span class="line"><span class="keyword">var</span> instance2 = <span class="keyword">new</span> SubType(); </span><br><span class="line"><span class="built_in">console</span>.log(instance2.colors); <span class="comment">//"red,blue,green"</span></span><br></pre></td></tr></table></figure><h2 id="原型链继承"><a href="#原型链继承" class="headerlink" title="原型链继承"></a>原型链继承</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">    <span class="keyword">this</span>.colors = [<span class="string">"red"</span>, <span class="string">"blue"</span>, <span class="string">"green"</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubType</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line">SubType.prototype = <span class="keyword">new</span> SuperType();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> instance1 = <span class="keyword">new</span> SubType();</span><br><span class="line"><span class="keyword">var</span> instance2 = <span class="keyword">new</span> SubType(); </span><br><span class="line"><span class="built_in">console</span>.log(instance1.colors); <span class="comment">//["red", "blue", "green"]</span></span><br><span class="line"><span class="built_in">console</span>.log(instance2.colors);<span class="comment">//["red", "blue", "green"]</span></span><br><span class="line"></span><br><span class="line">instance1.colors.push(<span class="string">"black"</span>); </span><br><span class="line"><span class="built_in">console</span>.log(instance1.colors);<span class="comment">//["red", "blue", "green", "black"]</span></span><br><span class="line"><span class="built_in">console</span>.log(instance2.colors);<span class="comment">//["red", "blue", "green", "black"]</span></span><br></pre></td></tr></table></figure><h2 id="组合继承"><a href="#组合继承" class="headerlink" title="组合继承"></a>组合继承</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span>(<span class="params">name</span>)</span>&#123;  <span class="comment">//父类（构造函数）</span></span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SuperType.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  <span class="comment">//父类的原型添加一个方法</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubType</span>(<span class="params">name, age</span>)</span>&#123;  <span class="comment">//借用构造函数来实现对实例属性的继承 </span></span><br><span class="line">    SuperType.call(<span class="keyword">this</span>, name);    <span class="comment">//继承实例属性 这边继承this.name = name;</span></span><br><span class="line">    <span class="keyword">this</span>.age = age;     <span class="comment">//自己的属性</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SubType.prototype = <span class="keyword">new</span> SuperType();    <span class="comment">//使用原型链实现对原型属性和方法的继承  这边是继承</span></span><br><span class="line">SubType.prototype.constructor = SubType;</span><br><span class="line">SubType.prototype.sayAge = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">    alert(<span class="keyword">this</span>.age); </span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> instance1 = <span class="keyword">new</span> SubType(<span class="string">"cosyer"</span>, <span class="number">23</span>);</span><br><span class="line"><span class="built_in">console</span>.log(instance1.age)   <span class="comment">//23</span></span><br><span class="line"><span class="built_in">console</span>.log(instance1.name)  <span class="comment">//cosyer</span></span><br><span class="line">instance1.sayName(); <span class="comment">//cosyer</span></span><br><span class="line">instance1.sayAge(); <span class="comment">//23</span></span><br></pre></td></tr></table></figure><p><code>Happy Halloween!</code></p>]]></content:encoded>
      
      <comments>http://mydearest.cn/js%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1%E5%AE%9E%E7%8E%B0%E7%BB%A7%E6%89%BF.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>实现jsonp</title>
      <link>http://mydearest.cn/%E5%AE%9E%E7%8E%B0jsonp.html</link>
      <guid>http://mydearest.cn/%E5%AE%9E%E7%8E%B0jsonp.html</guid>
      <pubDate>Tue, 30 Oct 2018 06:08:48 GMT</pubDate>
      <description>
      
        &lt;p&gt;作为常用的跨域解决方案，怎么能不用原生实现一下呢！&lt;/p&gt;
&lt;p&gt;jsonp跨域其实也是JavaScript设计模式中的一种代理模式。
在html页面中通过相应的标签从不同域名下加载静态资源文件是被浏览器允许的，所以我们可以通过这个“犯罪漏洞”来进行跨域。
一般，我们可以动态的创建script标签，再去请求一个带参网址来实现跨域通信。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 实现目标&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;JSONP(url, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  data: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    key1: value1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  callback: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;data&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// data 是服务端返回的数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>作为常用的跨域解决方案，怎么能不用原生实现一下呢！</p><p>jsonp跨域其实也是JavaScript设计模式中的一种代理模式。在html页面中通过相应的标签从不同域名下加载静态资源文件是被浏览器允许的，所以我们可以通过这个“犯罪漏洞”来进行跨域。一般，我们可以动态的创建script标签，再去请求一个带参网址来实现跨域通信。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实现目标</span></span><br><span class="line">JSONP(url, &#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    key1: value1</span><br><span class="line">  &#125;,</span><br><span class="line">  callback: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// data 是服务端返回的数据</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><hr><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> JSONP = <span class="function">(<span class="params">url, jsonpObj</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 属性名 </span></span><br><span class="line">  <span class="keyword">let</span> cbName = <span class="string">"cb"</span> + JSONP.count++</span><br><span class="line">  <span class="comment">// 回调函数 </span></span><br><span class="line">  <span class="keyword">let</span> cbQuery = <span class="string">"JSONP."</span> + cbName</span><br><span class="line">  <span class="keyword">let</span> paramsToQuery = <span class="function"><span class="params">obj</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> query = <span class="string">'?'</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> k <span class="keyword">in</span> obj) &#123;</span><br><span class="line">      <span class="keyword">if</span> (obj.hasOwnProperty(k)) &#123;</span><br><span class="line">        query += <span class="string">`<span class="subst">$&#123;k&#125;</span>=<span class="subst">$&#123;obj[k]&#125;</span>&amp;`</span></span><br><span class="line">      &#125;      </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> query</span><br><span class="line">  &#125;</span><br><span class="line">  JSONP[cbName] = <span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      jsonpObj.callback(data)</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      <span class="keyword">delete</span> JSONP[cbName]</span><br><span class="line">      <span class="built_in">document</span>.body.removeChild(script)</span><br><span class="line">    &#125;   </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> queryStr = paramsToQuery(jsonpObj.data) + <span class="string">'callback='</span> + cbQuery</span><br><span class="line">  <span class="keyword">let</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>)</span><br><span class="line">  script.src = url + <span class="built_in">encodeURIComponent</span>(queryStr)</span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(script)</span><br><span class="line">&#125;</span><br><span class="line">JSONP.count = <span class="number">0</span></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://mydearest.cn/%E5%AE%9E%E7%8E%B0jsonp.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>高逼格的JS代码</title>
      <link>http://mydearest.cn/%E9%AB%98%E9%80%BC%E6%A0%BC%E7%9A%84JS%E4%BB%A3%E7%A0%81.html</link>
      <guid>http://mydearest.cn/%E9%AB%98%E9%80%BC%E6%A0%BC%E7%9A%84JS%E4%BB%A3%E7%A0%81.html</guid>
      <pubDate>Tue, 30 Oct 2018 01:22:25 GMT</pubDate>
      <description>
      
        &lt;p&gt;黑科技JS代码整理 是不是很void 666&lt;/p&gt;
&lt;h3 id=&quot;一行代码实现评级&quot;&gt;&lt;a href=&quot;#一行代码实现评级&quot; class=&quot;headerlink&quot; title=&quot;一行代码实现评级&quot;&gt;&lt;/a&gt;一行代码实现评级&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;★★★★★☆☆☆☆☆&quot;&lt;/span&gt;.slice(&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt; - rate, &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt; - rate);定义一个变量rate是&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;到&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;的值&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;SB、NB、Hello-World&quot;&gt;&lt;a href=&quot;#SB、NB、Hello-World&quot; class=&quot;headerlink&quot; title=&quot;SB、NB、Hello World&quot;&gt;&lt;/a&gt;SB、NB、Hello World&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(!(~+[])+&amp;#123;&amp;#125;)[--[~+&lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;][+[]]*[~+[]] + ~~!+[]]+(&amp;#123;&amp;#125;+[])[[~!+[]]*~+[]]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;([][[]]+[])[+!![]]+([]+&amp;#123;&amp;#125;)[!+[]+!![]]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;([]+[][(![]+[])[!+[]+!![]+!![]]+([]+&amp;#123;&amp;#125;)[+!![]]+(!![]+[])[+!![]]+(!![]+[])[+[]]][([]+&amp;#123;&amp;#125;)[!+[]+!![]+!![]+!![]+!![]]+([]+&amp;#123;&amp;#125;)[+!![]]+([][[]]+[])[+!![]]+(![]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+[]]+([]+&amp;#123;&amp;#125;)[!+[]+!![]+!![]+!![]+!![]]+(!![]+[])[+[]]+([]+&amp;#123;&amp;#125;)[+!![]]+(!![]+[])[+!![]]]((!![]+[])[+!![]]+([][[]]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+!![]]+([]+&amp;#123;&amp;#125;)[!+[]+!![]+!![]+!![]+!![]+!![]+!![]]+(![]+[])[!+[]+!![]]+([]+&amp;#123;&amp;#125;)[+!![]]+([]+&amp;#123;&amp;#125;)[!+[]+!![]+!![]+!![]+!![]]+(+&amp;#123;&amp;#125;+[])[+!![]]+(!![]+[])[+[]]+([][[]]+[])[!+[]+!![]+!![]+!![]+!![]]+([]+&amp;#123;&amp;#125;)[+!![]]+([][[]]+[])[+!![]])())[+[]]+([][[]]+[])[!+[]+!![]+!![]]+(![]+[])[!+[]+!![]]+(![]+[])[!+[]+!![]]+([]+&amp;#123;&amp;#125;)[+!![]]+([]+&amp;#123;&amp;#125;)[!+[]+!![]+!![]+!![]+!![]+!![]+!![]]+[][(![]+[])[!+[]+!![]+!![]]+([]+&amp;#123;&amp;#125;)[+!![]]+(!![]+[])[+!![]]+(!![]+[])[+[]]][([]+&amp;#123;&amp;#125;)[!+[]+!![]+!![]+!![]+!![]]+([]+&amp;#123;&amp;#125;)[+!![]]+([][[]]+[])[+!![]]+(![]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+[]]+([]+&amp;#123;&amp;#125;)[!+[]+!![]+!![]+!![]+!![]]+(!![]+[])[+[]]+([]+&amp;#123;&amp;#125;)[+!![]]+(!![]+[])[+!![]]]((!![]+[])[+!![]]+([][[]]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+!![]]+([]+&amp;#123;&amp;#125;)[!+[]+!![]+!![]+!![]+!![]+!![]+!![]]+([][[]]+[])[+[]]+([][[]]+[])[+!![]]+([][[]]+[])[!+[]+!![]+!![]]+(![]+[])[!+[]+!![]+!![]]+([]+&amp;#123;&amp;#125;)[!+[]+!![]+!![]+!![]+!![]]+(+&amp;#123;&amp;#125;+[])[+!![]]+([]+[][(![]+[])[!+[]+!![]+!![]]+([]+&amp;#123;&amp;#125;)[+!![]]+(!![]+[])[+!![]]+(!![]+[])[+[]]][([]+&amp;#123;&amp;#125;)[!+[]+!![]+!![]+!![]+!![]]+([]+&amp;#123;&amp;#125;)[+!![]]+([][[]]+[])[+!![]]+(![]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+[]]+([]+&amp;#123;&amp;#125;)[!+[]+!![]+!![]+!![]+!![]]+(!![]+[])[+[]]+([]+&amp;#123;&amp;#125;)[+!![]]+(!![]+[])[+!![]]]((!![]+[])[+!![]]+([][[]]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+!![]]+([]+&amp;#123;&amp;#125;)[!+[]+!![]+!![]+!![]+!![]+!![]+!![]]+(![]+[])[!+[]+!![]]+([]+&amp;#123;&amp;#125;)[+!![]]+([]+&amp;#123;&amp;#125;)[!+[]+!![]+!![]+!![]+!![]]+(+&amp;#123;&amp;#125;+[])[+!![]]+(!![]+[])[+[]]+([][[]]+[])[!+[]+!![]+!![]+!![]+!![]]+([]+&amp;#123;&amp;#125;)[+!![]]+([][[]]+[])[+!![]])())[!+[]+!![]+!![]]+([][[]]+[])[!+[]+!![]+!![]])()([][(![]+[])[!+[]+!![]+!![]]+([]+&amp;#123;&amp;#125;)[+!![]]+(!![]+[])[+!![]]+(!![]+[])[+[]]][([]+&amp;#123;&amp;#125;)[!+[]+!![]+!![]+!![]+!![]]+([]+&amp;#123;&amp;#125;)[+!![]]+([][[]]+[])[+!![]]+(![]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+[]]+([]+&amp;#123;&amp;#125;)[!+[]+!![]+!![]+!![]+!![]]+(!![]+[])[+[]]+([]+&amp;#123;&amp;#125;)[+!![]]+(!![]+[])[+!![]]]((!![]+[])[+!![]]+([][[]]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+!![]]+([]+&amp;#123;&amp;#125;)[!+[]+!![]+!![]+!![]+!![]+!![]+!![]]+([][[]]+[])[!+[]+!![]+!![]]+(![]+[])[!+[]+!![]+!![]]+([]+&amp;#123;&amp;#125;)[!+[]+!![]+!![]+!![]+!![]]+(+&amp;#123;&amp;#125;+[])[+!![]]+([]+[][(![]+[])[!+[]+!![]+!![]]+([]+&amp;#123;&amp;#125;)[+!![]]+(!![]+[])[+!![]]+(!![]+[])[+[]]][([]+&amp;#123;&amp;#125;)[!+[]+!![]+!![]+!![]+!![]]+([]+&amp;#123;&amp;#125;)[+!![]]+([][[]]+[])[+!![]]+(![]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+[]]+([]+&amp;#123;&amp;#125;)[!+[]+!![]+!![]+!![]+!![]]+(!![]+[])[+[]]+([]+&amp;#123;&amp;#125;)[+!![]]+(!![]+[])[+!![]]]((!![]+[])[+!![]]+([][[]]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+!![]]+([]+&amp;#123;&amp;#125;)[!+[]+!![]+!![]+!![]+!![]+!![]+!![]]+(![]+[])[!+[]+!![]]+([]+&amp;#123;&amp;#125;)[+!![]]+([]+&amp;#123;&amp;#125;)[!+[]+!![]+!![]+!![]+!![]]+(+&amp;#123;&amp;#125;+[])[+!![]]+(!![]+[])[+[]]+([][[]]+[])[!+[]+!![]+!![]+!![]+!![]]+([]+&amp;#123;&amp;#125;)[+!![]]+([][[]]+[])[+!![]])())[!+[]+!![]+!![]]+([][[]]+[])[!+[]+!![]+!![]])()(([]+&amp;#123;&amp;#125;)[+[]])[+[]]+(!+[]+!![]+!![]+!![]+!![]+!![]+!![]+[])+(!+[]+!![]+!![]+!![]+!![]+!![]+!![]+[]))+([]+&amp;#123;&amp;#125;)[+!![]]+(!![]+[])[+!![]]+(![]+[])[!+[]+!![]]+([][[]]+[])[!+[]+!![]]+[][(![]+[])[!+[]+!![]+!![]]+([]+&amp;#123;&amp;#125;)[+!![]]+(!![]+[])[+!![]]+(!![]+[])[+[]]][([]+&amp;#123;&amp;#125;)[!+[]+!![]+!![]+!![]+!![]]+([]+&amp;#123;&amp;#125;)[+!![]]+([][[]]+[])[+!![]]+(![]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+[]]+([]+&amp;#123;&amp;#125;)[!+[]+!![]+!![]+!![]+!![]]+(!![]+[])[+[]]+([]+&amp;#123;&amp;#125;)[+!![]]+(!![]+[])[+!![]]]((!![]+[])[+!![]]+([][[]]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+!![]]+([]+&amp;#123;&amp;#125;)[!+[]+!![]+!![]+!![]+!![]+!![]+!![]]+([][[]]+[])[+[]]+([][[]]+[])[+!![]]+([][[]]+[])[!+[]+!![]+!![]]+(![]+[])[!+[]+!![]+!![]]+([]+&amp;#123;&amp;#125;)[!+[]+!![]+!![]+!![]+!![]]+(+&amp;#123;&amp;#125;+[])[+!![]]+([]+[][(![]+[])[!+[]+!![]+!![]]+([]+&amp;#123;&amp;#125;)[+!![]]+(!![]+[])[+!![]]+(!![]+[])[+[]]][([]+&amp;#123;&amp;#125;)[!+[]+!![]+!![]+!![]+!![]]+([]+&amp;#123;&amp;#125;)[+!![]]+([][[]]+[])[+!![]]+(![]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+[]]+([]+&amp;#123;&amp;#125;)[!+[]+!![]+!![]+!![]+!![]]+(!![]+[])[+[]]+([]+&amp;#123;&amp;#125;)[+!![]]+(!![]+[])[+!![]]]((!![]+[])[+!![]]+([][[]]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+!![]]+([]+&amp;#123;&amp;#125;)[!+[]+!![]+!![]+!![]+!![]+!![]+!![]]+(![]+[])[!+[]+!![]]+([]+&amp;#123;&amp;#125;)[+!![]]+([]+&amp;#123;&amp;#125;)[!+[]+!![]+!![]+!![]+!![]]+(+&amp;#123;&amp;#125;+[])[+!![]]+(!![]+[])[+[]]+([][[]]+[])[!+[]+!![]+!![]+!![]+!![]]+([]+&amp;#123;&amp;#125;)[+!![]]+([][[]]+[])[+!![]])())[!+[]+!![]+!![]]+([][[]]+[])[!+[]+!![]+!![]])()([][(![]+[])[!+[]+!![]+!![]]+([]+&amp;#123;&amp;#125;)[+!![]]+(!![]+[])[+!![]]+(!![]+[])[+[]]][([]+&amp;#123;&amp;#125;)[!+[]+!![]+!![]+!![]+!![]]+([]+&amp;#123;&amp;#125;)[+!![]]+([][[]]+[])[+!![]]+(![]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+[]]+([]+&amp;#123;&amp;#125;)[!+[]+!![]+!![]+!![]+!![]]+(!![]+[])[+[]]+([]+&amp;#123;&amp;#125;)[+!![]]+(!![]+[])[+!![]]]((!![]+[])[+!![]]+([][[]]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+!![]]+([]+&amp;#123;&amp;#125;)[!+[]+!![]+!![]+!![]+!![]+!![]+!![]]+([][[]]+[])[!+[]+!![]+!![]]+(![]+[])[!+[]+!![]+!![]]+([]+&amp;#123;&amp;#125;)[!+[]+!![]+!![]+!![]+!![]]+(+&amp;#123;&amp;#125;+[])[+!![]]+([]+[][(![]+[])[!+[]+!![]+!![]]+([]+&amp;#123;&amp;#125;)[+!![]]+(!![]+[])[+!![]]+(!![]+[])[+[]]][([]+&amp;#123;&amp;#125;)[!+[]+!![]+!![]+!![]+!![]]+([]+&amp;#123;&amp;#125;)[+!![]]+([][[]]+[])[+!![]]+(![]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+[]]+([]+&amp;#123;&amp;#125;)[!+[]+!![]+!![]+!![]+!![]]+(!![]+[])[+[]]+([]+&amp;#123;&amp;#125;)[+!![]]+(!![]+[])[+!![]]]((!![]+[])[+!![]]+([][[]]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+!![]]+([]+&amp;#123;&amp;#125;)[!+[]+!![]+!![]+!![]+!![]+!![]+!![]]+(![]+[])[!+[]+!![]]+([]+&amp;#123;&amp;#125;)[+!![]]+([]+&amp;#123;&amp;#125;)[!+[]+!![]+!![]+!![]+!![]]+(+&amp;#123;&amp;#125;+[])[+!![]]+(!![]+[])[+[]]+([][[]]+[])[!+[]+!![]+!![]+!![]+!![]]+([]+&amp;#123;&amp;#125;)[+!![]]+([][[]]+[])[+!![]])())[!+[]+!![]+!![]]+([][[]]+[])[!+[]+!![]+!![]])()(([]+&amp;#123;&amp;#125;)[+[]])[+[]]+(!+[]+!![]+[])+(+!![]+[]))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;错误处理的正确方法&quot;&gt;&lt;a href=&quot;#错误处理的正确方法&quot; class=&quot;headerlink&quot; title=&quot;错误处理的正确方法&quot;&gt;&lt;/a&gt;错误处理的正确方法&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    something&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.location.href =&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&quot;http://stackoverflow.com/search?q=[js]+&quot;&lt;/span&gt; +&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        e.message;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 百度版&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    something&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.location.href =&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&quot;https://www.baidu.com/s?wd=&quot;&lt;/span&gt; +&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        e.message;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>黑科技JS代码整理 是不是很void 666</p><h3 id="一行代码实现评级"><a href="#一行代码实现评级" class="headerlink" title="一行代码实现评级"></a>一行代码实现评级</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"★★★★★☆☆☆☆☆"</span>.slice(<span class="number">5</span> - rate, <span class="number">10</span> - rate);定义一个变量rate是<span class="number">1</span>到<span class="number">5</span>的值</span><br></pre></td></tr></table></figure><h3 id="SB、NB、Hello-World"><a href="#SB、NB、Hello-World" class="headerlink" title="SB、NB、Hello World"></a>SB、NB、Hello World</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(!(~+[])+&#123;&#125;)[--[~+<span class="string">""</span>][+[]]*[~+[]] + ~~!+[]]+(&#123;&#125;+[])[[~!+[]]*~+[]]</span><br><span class="line"></span><br><span class="line">([][[]]+[])[+!![]]+([]+&#123;&#125;)[!+[]+!![]]</span><br><span class="line"></span><br><span class="line">([]+[][(![]+[])[!+[]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+(!![]+[])[+!![]]+(!![]+[])[+[]]][([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+([][[]]+[])[+!![]]+(![]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+[]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+(!![]+[])[+[]]+([]+&#123;&#125;)[+!![]]+(!![]+[])[+!![]]]((!![]+[])[+!![]]+([][[]]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+!![]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]+!![]+!![]]+(![]+[])[!+[]+!![]]+([]+&#123;&#125;)[+!![]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+(+&#123;&#125;+[])[+!![]]+(!![]+[])[+[]]+([][[]]+[])[!+[]+!![]+!![]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+([][[]]+[])[+!![]])())[+[]]+([][[]]+[])[!+[]+!![]+!![]]+(![]+[])[!+[]+!![]]+(![]+[])[!+[]+!![]]+([]+&#123;&#125;)[+!![]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]+!![]+!![]]+[][(![]+[])[!+[]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+(!![]+[])[+!![]]+(!![]+[])[+[]]][([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+([][[]]+[])[+!![]]+(![]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+[]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+(!![]+[])[+[]]+([]+&#123;&#125;)[+!![]]+(!![]+[])[+!![]]]((!![]+[])[+!![]]+([][[]]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+!![]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]+!![]+!![]]+([][[]]+[])[+[]]+([][[]]+[])[+!![]]+([][[]]+[])[!+[]+!![]+!![]]+(![]+[])[!+[]+!![]+!![]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+(+&#123;&#125;+[])[+!![]]+([]+[][(![]+[])[!+[]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+(!![]+[])[+!![]]+(!![]+[])[+[]]][([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+([][[]]+[])[+!![]]+(![]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+[]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+(!![]+[])[+[]]+([]+&#123;&#125;)[+!![]]+(!![]+[])[+!![]]]((!![]+[])[+!![]]+([][[]]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+!![]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]+!![]+!![]]+(![]+[])[!+[]+!![]]+([]+&#123;&#125;)[+!![]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+(+&#123;&#125;+[])[+!![]]+(!![]+[])[+[]]+([][[]]+[])[!+[]+!![]+!![]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+([][[]]+[])[+!![]])())[!+[]+!![]+!![]]+([][[]]+[])[!+[]+!![]+!![]])()([][(![]+[])[!+[]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+(!![]+[])[+!![]]+(!![]+[])[+[]]][([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+([][[]]+[])[+!![]]+(![]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+[]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+(!![]+[])[+[]]+([]+&#123;&#125;)[+!![]]+(!![]+[])[+!![]]]((!![]+[])[+!![]]+([][[]]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+!![]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]+!![]+!![]]+([][[]]+[])[!+[]+!![]+!![]]+(![]+[])[!+[]+!![]+!![]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+(+&#123;&#125;+[])[+!![]]+([]+[][(![]+[])[!+[]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+(!![]+[])[+!![]]+(!![]+[])[+[]]][([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+([][[]]+[])[+!![]]+(![]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+[]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+(!![]+[])[+[]]+([]+&#123;&#125;)[+!![]]+(!![]+[])[+!![]]]((!![]+[])[+!![]]+([][[]]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+!![]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]+!![]+!![]]+(![]+[])[!+[]+!![]]+([]+&#123;&#125;)[+!![]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+(+&#123;&#125;+[])[+!![]]+(!![]+[])[+[]]+([][[]]+[])[!+[]+!![]+!![]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+([][[]]+[])[+!![]])())[!+[]+!![]+!![]]+([][[]]+[])[!+[]+!![]+!![]])()(([]+&#123;&#125;)[+[]])[+[]]+(!+[]+!![]+!![]+!![]+!![]+!![]+!![]+[])+(!+[]+!![]+!![]+!![]+!![]+!![]+!![]+[]))+([]+&#123;&#125;)[+!![]]+(!![]+[])[+!![]]+(![]+[])[!+[]+!![]]+([][[]]+[])[!+[]+!![]]+[][(![]+[])[!+[]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+(!![]+[])[+!![]]+(!![]+[])[+[]]][([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+([][[]]+[])[+!![]]+(![]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+[]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+(!![]+[])[+[]]+([]+&#123;&#125;)[+!![]]+(!![]+[])[+!![]]]((!![]+[])[+!![]]+([][[]]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+!![]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]+!![]+!![]]+([][[]]+[])[+[]]+([][[]]+[])[+!![]]+([][[]]+[])[!+[]+!![]+!![]]+(![]+[])[!+[]+!![]+!![]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+(+&#123;&#125;+[])[+!![]]+([]+[][(![]+[])[!+[]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+(!![]+[])[+!![]]+(!![]+[])[+[]]][([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+([][[]]+[])[+!![]]+(![]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+[]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+(!![]+[])[+[]]+([]+&#123;&#125;)[+!![]]+(!![]+[])[+!![]]]((!![]+[])[+!![]]+([][[]]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+!![]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]+!![]+!![]]+(![]+[])[!+[]+!![]]+([]+&#123;&#125;)[+!![]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+(+&#123;&#125;+[])[+!![]]+(!![]+[])[+[]]+([][[]]+[])[!+[]+!![]+!![]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+([][[]]+[])[+!![]])())[!+[]+!![]+!![]]+([][[]]+[])[!+[]+!![]+!![]])()([][(![]+[])[!+[]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+(!![]+[])[+!![]]+(!![]+[])[+[]]][([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+([][[]]+[])[+!![]]+(![]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+[]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+(!![]+[])[+[]]+([]+&#123;&#125;)[+!![]]+(!![]+[])[+!![]]]((!![]+[])[+!![]]+([][[]]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+!![]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]+!![]+!![]]+([][[]]+[])[!+[]+!![]+!![]]+(![]+[])[!+[]+!![]+!![]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+(+&#123;&#125;+[])[+!![]]+([]+[][(![]+[])[!+[]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+(!![]+[])[+!![]]+(!![]+[])[+[]]][([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+([][[]]+[])[+!![]]+(![]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+[]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+(!![]+[])[+[]]+([]+&#123;&#125;)[+!![]]+(!![]+[])[+!![]]]((!![]+[])[+!![]]+([][[]]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+!![]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]+!![]+!![]]+(![]+[])[!+[]+!![]]+([]+&#123;&#125;)[+!![]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+(+&#123;&#125;+[])[+!![]]+(!![]+[])[+[]]+([][[]]+[])[!+[]+!![]+!![]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+([][[]]+[])[+!![]])())[!+[]+!![]+!![]]+([][[]]+[])[!+[]+!![]+!![]])()(([]+&#123;&#125;)[+[]])[+[]]+(!+[]+!![]+[])+(+!![]+[]))</span><br></pre></td></tr></table></figure><h3 id="错误处理的正确方法"><a href="#错误处理的正确方法" class="headerlink" title="错误处理的正确方法"></a>错误处理的正确方法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    something</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="built_in">window</span>.location.href =</span><br><span class="line">        <span class="string">"http://stackoverflow.com/search?q=[js]+"</span> +</span><br><span class="line">        e.message;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 百度版</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    something</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="built_in">window</span>.location.href =</span><br><span class="line">        <span class="string">"https://www.baidu.com/s?wd="</span> +</span><br><span class="line">        e.message;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><a id="more"></a><h3 id="标记区域的范围"><a href="#标记区域的范围" class="headerlink" title="标记区域的范围"></a>标记区域的范围</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[].forEach.call($$(<span class="string">"*"</span>),<span class="function"><span class="keyword">function</span>(<span class="params">a</span>)</span>&#123;</span><br><span class="line">    a.style.outline=<span class="string">"1px solid #"</span>+(~~(<span class="built_in">Math</span>.random()*(<span class="number">1</span>&lt;&lt;<span class="number">24</span>))).toString(<span class="number">16</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 等价于</span></span><br><span class="line"><span class="built_in">Array</span>.prototype.forEach.call(<span class="built_in">document</span>.querySelectorAll(<span class="string">'*'</span>), </span><br><span class="line">dom =&gt; dom.style.outline = <span class="string">`1px solid #<span class="subst">$&#123;<span class="built_in">parseInt</span>(<span class="built_in">Math</span>.random() * </span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="built_in">Math</span>.pow(<span class="number">2</span>,<span class="number">24</span>)).toString(<span class="number">16</span>)&#125;</span>`</span>)</span><br></pre></td></tr></table></figure><h3 id="获取随机字符串"><a href="#获取随机字符串" class="headerlink" title="获取随机字符串"></a>获取随机字符串</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Math</span>.random().toString(<span class="number">16</span>).substring(<span class="number">2</span>) </span><br><span class="line"><span class="built_in">Math</span>.random().toString(<span class="number">36</span>).substring(<span class="number">2</span>)</span><br></pre></td></tr></table></figure><h3 id="这样的判断你能做对吗"><a href="#这样的判断你能做对吗" class="headerlink" title="这样的判断你能做对吗"></a>这样的判断你能做对吗</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">10</span>)[<span class="string">"toString"</span>]() === <span class="string">"10"</span> <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">10.</span>.toString());<span class="comment">//10</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">10.</span>toString());<span class="comment">//SyntaxError: Unexpected token ILLEGAL</span></span><br><span class="line"><span class="comment">// 在JavaScript中，数字后面的"."操作符是的意义是不确定。因为它既可能是一个浮点数的标志，又可能是取一个对象的属性的运算符。但是JavaScript的解释器把他当做了浮点数的标志</span></span><br><span class="line"><span class="comment">// 等价于 </span></span><br><span class="line"><span class="built_in">console</span>.log((<span class="number">10.</span>).toString());</span><br><span class="line"><span class="built_in">console</span>.log((<span class="number">10.</span>)toString())</span><br></pre></td></tr></table></figure><h3 id="匿名函数自执行方法"><a href="#匿名函数自执行方法" class="headerlink" title="匿名函数自执行方法"></a>匿名函数自执行方法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">( <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;() );</span><br><span class="line">( <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125; )();</span><br><span class="line">[ <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;() ];</span><br><span class="line"></span><br><span class="line">~ <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;();</span><br><span class="line">! <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;();</span><br><span class="line">+ <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;();</span><br><span class="line">- <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;();</span><br><span class="line"><span class="keyword">typeof</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;();</span><br><span class="line"><span class="keyword">void</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;();</span><br><span class="line"><span class="keyword">new</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;();</span><br><span class="line"><span class="keyword">new</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;();</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;();</span><br><span class="line"><span class="number">1</span> ^ <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;();</span><br><span class="line"><span class="number">1</span> &gt; <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;();</span><br></pre></td></tr></table></figure><h3 id="终于到-void-666"><a href="#终于到-void-666" class="headerlink" title="终于到 void 666"></a>终于到 void 666</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 以下都是undefined</span></span><br><span class="line"><span class="keyword">var</span> a; </span><br><span class="line"><span class="keyword">var</span> a = <span class="literal">undefined</span> </span><br><span class="line"><span class="keyword">void</span> <span class="number">0</span></span><br><span class="line"><span class="keyword">void</span> <span class="number">666</span></span><br><span class="line"><span class="keyword">void</span>(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">void</span> (<span class="number">0</span>)</span><br></pre></td></tr></table></figure><h3 id="金钱格式化"><a href="#金钱格式化" class="headerlink" title="金钱格式化"></a>金钱格式化</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// api</span></span><br><span class="line">(<span class="number">156589822366</span>).toLocaleString() <span class="comment">// "156,589,822,366"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 正则就完事了</span></span><br><span class="line"><span class="keyword">var</span> test1 = <span class="string">'1234567890'</span></span><br><span class="line"><span class="keyword">var</span> format = test1.replace(<span class="regexp">/\B(?=(\d&#123;3&#125;)+(?!\d))/g</span>, <span class="string">','</span>)</span><br><span class="line"><span class="built_in">console</span>.log(format) <span class="comment">// 1,234,567,890</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 非正则</span></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">formatCash</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> str.split(<span class="string">''</span>).reverse().reduce(<span class="function">(<span class="params">prev, next, index</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> ((index % <span class="number">3</span>) ? next : (next + <span class="string">','</span>)) + prev</span><br><span class="line">       &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(formatCash(<span class="string">'1234567890'</span>)) <span class="comment">// 1,234,567,890</span></span><br></pre></td></tr></table></figure><h3 id="逗号运算符"><a href="#逗号运算符" class="headerlink" title="逗号运算符"></a>逗号运算符</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> b = (a++,<span class="number">99</span>);</span><br><span class="line"><span class="comment">// a 1 b 99</span></span><br></pre></td></tr></table></figure><h3 id="交换两个数的值"><a href="#交换两个数的值" class="headerlink" title="交换两个数的值"></a>交换两个数的值</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 加减运算 缺点也很明显，整型数据溢出，对于32位字符最大表示数字是2147483647，如果是2147483645和2147483646交换就失败了。</span></span><br><span class="line"><span class="keyword">var</span> a=<span class="number">1</span>,b=<span class="number">2</span>;</span><br><span class="line">a += b;</span><br><span class="line">b = a - b;</span><br><span class="line">a -= b;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第三个临时变量</span></span><br><span class="line"><span class="keyword">var</span> a=<span class="number">1</span>,b=<span class="number">2</span>;</span><br><span class="line"><span class="keyword">var</span> temp = a;</span><br><span class="line">a = b;</span><br><span class="line">b= temp;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 位运算</span></span><br><span class="line"><span class="keyword">let</span> a=<span class="number">3</span>,b=<span class="number">4</span>;</span><br><span class="line">a^=b;</span><br><span class="line">b^=a;</span><br><span class="line">a^=b;</span><br><span class="line"></span><br><span class="line"><span class="comment">// es6</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>, b = <span class="number">2</span>;</span><br><span class="line">[a, b] = [b, a];</span><br></pre></td></tr></table></figure><h3 id="JSON数据的深拷贝"><a href="#JSON数据的深拷贝" class="headerlink" title="JSON数据的深拷贝"></a>JSON数据的深拷贝</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;</span><br><span class="line">    a: <span class="number">1</span>,</span><br><span class="line">    b: &#123; <span class="attr">c</span>: <span class="number">1</span>, <span class="attr">d</span>: <span class="number">2</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> b=<span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(a))</span><br><span class="line"><span class="comment">// Number parseInt parseFloat</span></span><br></pre></td></tr></table></figure><h3 id="长度为6值为8的数组"><a href="#长度为6值为8的数组" class="headerlink" title="长度为6值为8的数组"></a>长度为6值为8的数组</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>(<span class="number">6</span>).fill(<span class="number">8</span>)</span><br></pre></td></tr></table></figure><h3 id="argument对象转换成数组对象"><a href="#argument对象转换成数组对象" class="headerlink" title="argument对象转换成数组对象"></a>argument对象转换成数组对象</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// es5 </span></span><br><span class="line"><span class="built_in">Array</span>.prototype.slice.call(&#123;<span class="number">0</span>:<span class="number">1</span>,<span class="number">1</span>:<span class="number">3</span>,<span class="attr">length</span>:<span class="number">2</span>&#125;);</span><br><span class="line"><span class="comment">// es6</span></span><br><span class="line"><span class="built_in">Array</span>.from(&#123;<span class="number">0</span>:<span class="number">1</span>,<span class="number">1</span>:<span class="number">3</span>,<span class="attr">length</span>:<span class="number">2</span>&#125;)</span><br></pre></td></tr></table></figure><h3 id="脚本永不报错"><a href="#脚本永不报错" class="headerlink" title="脚本永不报错"></a>脚本永不报错</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onerror = <span class="function"><span class="keyword">function</span>(<span class="params">m, f, l</span>)</span>&#123; <span class="keyword">return</span> <span class="literal">true</span> &#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://mydearest.cn/%E9%AB%98%E9%80%BC%E6%A0%BC%E7%9A%84JS%E4%BB%A3%E7%A0%81.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>babel的.babelrc配置</title>
      <link>http://mydearest.cn/babel%E7%9A%84.babelrc%E9%85%8D%E7%BD%AE.html</link>
      <guid>http://mydearest.cn/babel%E7%9A%84.babelrc%E9%85%8D%E7%BD%AE.html</guid>
      <pubDate>Mon, 29 Oct 2018 09:09:30 GMT</pubDate>
      <description>
      
        &lt;p&gt;一个基本的.babelrc配置:&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&quot;presets&quot;&lt;/span&gt;: [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;env&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;stage-0&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&quot;plugins&quot;&lt;/span&gt;: [&lt;span class=&quot;string&quot;&gt;&quot;transform-runtime&quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>一个基本的.babelrc配置:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"presets"</span>: [</span><br><span class="line">    <span class="string">"env"</span>,</span><br><span class="line">    <span class="string">"stage-0"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"plugins"</span>: [<span class="string">"transform-runtime"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><a id="more"></a><h3 id="presets-env"><a href="#presets-env" class="headerlink" title="presets env"></a>presets env</h3><p>presets 是babel的一个预设，使用的时候需要安装对应的插件，对应babel-preset-xxx，例如下面的配置，需要npm install babel-preset-env</p><blockquote><p>每年每个 preset 只编译当年批准的内容。 而 babel-preset-env 相当于 es2015 ，es2016 ，es2017 及最新版本。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"presets"</span>: [<span class="string">"env"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="presets-stage"><a href="#presets-stage" class="headerlink" title="presets stage"></a>presets stage</h3><p>stage 代表着ES提案的各个阶段，一共有5个阶段，存在依赖关系。也就是说stage-1是包括stage-0的，以此类推：</p><ul><li>Stage 0 - 稻草人: 只是一个想法，可能是 babel 插件。</li><li>Stage 1 - 提案: 初步尝试。</li><li>Stage 2 - 初稿: 完成初步规范。</li><li>Stage 3 - 候选: 完成规范和浏览器初步实现。</li><li>Stage 4 - 完成: 将被添加到下一年度发布。</li></ul><h3 id="plugins"><a href="#plugins" class="headerlink" title="plugins"></a>plugins</h3><p>presets，是plugins的预设，起到方便设置的作用。如果不采用presets，可以使用plugins<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"plugins"</span>: [<span class="string">"transform-es2015-arrow-functions"</span>] <span class="comment">// 也可以预设babel-preset-es2015</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="string">``</span><span class="string">` </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">### 自定义预设和插件</span></span><br><span class="line"><span class="string">3种方式设置都ok</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>javascript</span><br><span class="line"><span class="string">"plugins"</span>: [<span class="string">"babel-plugin-myPlugin"</span>]</span><br><span class="line"><span class="string">"plugins"</span>: [<span class="string">"myPlugin"</span>]</span><br><span class="line"><span class="string">"plugins"</span>: [<span class="string">"./node_modules/asdf/plugin"</span>]。</span><br><span class="line"><span class="comment">// presets同理。</span></span><br></pre></td></tr></table></figure></p><h3 id="plugins-presets排序"><a href="#plugins-presets排序" class="headerlink" title="plugins/presets排序"></a>plugins/presets排序</h3><ul><li>plugins 会运行在 presets 之前。</li><li>plugins 会从第一个开始顺序执行。</li><li>presets 的顺序则刚好相反(从最后一个逆序执行)。</li></ul><h3 id="babel-polyfill"><a href="#babel-polyfill" class="headerlink" title="babel-polyfill"></a>babel-polyfill</h3><p><code>babel</code>本身只提供预发的转换，当我们使用一些箭头函数这样的新的语法，其实在babel看来，更像是一种语法糖。但是babel不能转义一些ES6、ES7…的新的全局属性，例如 Promise 、新的原生方法如 String.padStart (left-pad) 等。这个时候我们就需要使用babel-polyfill。</p>]]></content:encoded>
      
      <comments>http://mydearest.cn/babel%E7%9A%84.babelrc%E9%85%8D%E7%BD%AE.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>实现trim的3种方法</title>
      <link>http://mydearest.cn/%E5%AE%9E%E7%8E%B0trim%E7%9A%843%E7%A7%8D%E6%96%B9%E6%B3%95.html</link>
      <guid>http://mydearest.cn/%E5%AE%9E%E7%8E%B0trim%E7%9A%843%E7%A7%8D%E6%96%B9%E6%B3%95.html</guid>
      <pubDate>Mon, 29 Oct 2018 07:57:48 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;trim 方法 (字串) (JavaScript) 移除字串前后的空白字元以及行结束字元。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用法
string.trim()&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;递归截取(不推荐)&lt;/p&gt;
&lt;figure class=&quot;highlight
        
      
      </description>
      
      <content:encoded><![CDATA[<p>trim 方法 (字串) (JavaScript) 移除字串前后的空白字元以及行结束字元。</p><ul><li>用法string.trim()</li></ul><ol><li><p>递归截取(不推荐)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">trim</span>(<span class="params">str</span>)</span>&#123;</span><br><span class="line"><span class="comment">// 加入类型判断 </span></span><br><span class="line"><span class="keyword">if</span>(str[<span class="number">0</span>]===<span class="string">' '</span>||str[str.length<span class="number">-1</span>]===<span class="string">' '</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(str[<span class="number">0</span>]===<span class="string">' '</span>)&#123;</span><br><span class="line">      str=str.substring(<span class="number">1</span>,str.length)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(str[str.length<span class="number">-1</span>]===<span class="string">' '</span>)&#123;</span><br><span class="line">      str=str.substring(<span class="number">0</span>,str.length<span class="number">-1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    trim(str)</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(str)</span><br><span class="line">    <span class="keyword">return</span> str</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>2次遍历记录不为空格的索引，最后截取</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">trim</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> start, end <span class="comment">// 开始和结束为止 遍历记录不为空格的索引</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; str.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (str[i] !== <span class="string">' '</span>) &#123;</span><br><span class="line">            start = i</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = str.length - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">if</span> (str[i] !== <span class="string">' '</span>) &#123;</span><br><span class="line">            end = i</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> str.substring(start, end + <span class="number">1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>正则替换</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">trim</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> str.replace(<span class="regexp">/(^\s*)|(\s*$)/g</span>, <span class="string">""</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. value.toString()</span></span><br><span class="line"><span class="comment">// 2. String('123213') </span></span><br><span class="line"><span class="comment">// 3. '' + value</span></span><br></pre></td></tr></table></figure></li></ol>]]></content:encoded>
      
      <comments>http://mydearest.cn/%E5%AE%9E%E7%8E%B0trim%E7%9A%843%E7%A7%8D%E6%96%B9%E6%B3%95.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>正则总结</title>
      <link>http://mydearest.cn/%E6%AD%A3%E5%88%99%E6%80%BB%E7%BB%93.html</link>
      <guid>http://mydearest.cn/%E6%AD%A3%E5%88%99%E6%80%BB%E7%BB%93.html</guid>
      <pubDate>Sun, 14 Oct 2018 14:42:18 GMT</pubDate>
      <description>
      
        &lt;p&gt;创建正则表达式&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; expression = &lt;span class=&quot;regexp&quot;&gt;/pattern/&lt;/span&gt;flags ;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其中的模式（pattern）部分可以是任何简单或复杂的正则表达式，可以包含字符类、限定符、分组、 向前查找以及反向引用。每个正则表达式都可带有一或多个标志（flags），用以标明正则表达式的行为。 正则表达式的匹配模式支持下列 3 个标志。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;g：表示全局（global）模式，即模式将被应用于所有字符串，而非在发现第一个匹配项时立即停止；&lt;/li&gt;
&lt;li&gt;i：表示不区分大小写（case-insensitive）模式，即在确定匹配项时忽略模式与字符串的大小写；&lt;/li&gt;
&lt;li&gt;m：表示多行（multiline）模式，即在到达一行文本末尾时还会继续查找下一行中是否存在与模式匹配的项。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; text = &lt;span class=&quot;string&quot;&gt;&quot;aaa &quot;&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; pattern1 = &lt;span class=&quot;regexp&quot;&gt;/\s$/&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;//匹配字符串末尾的空格 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pattern1.exec(text);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>创建正则表达式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> expression = <span class="regexp">/pattern/</span>flags ;</span><br></pre></td></tr></table></figure><p>其中的模式（pattern）部分可以是任何简单或复杂的正则表达式，可以包含字符类、限定符、分组、 向前查找以及反向引用。每个正则表达式都可带有一或多个标志（flags），用以标明正则表达式的行为。 正则表达式的匹配模式支持下列 3 个标志。</p><ul><li>g：表示全局（global）模式，即模式将被应用于所有字符串，而非在发现第一个匹配项时立即停止；</li><li>i：表示不区分大小写（case-insensitive）模式，即在确定匹配项时忽略模式与字符串的大小写；</li><li>m：表示多行（multiline）模式，即在到达一行文本末尾时还会继续查找下一行中是否存在与模式匹配的项。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> text = <span class="string">"aaa "</span>; </span><br><span class="line"><span class="keyword">var</span> pattern1 = <span class="regexp">/\s$/</span>; <span class="comment">//匹配字符串末尾的空格 </span></span><br><span class="line">pattern1.exec(text);</span><br></pre></td></tr></table></figure><hr><a id="more"></a><p>正则定义了很多特殊意义的字符，有名词，量词，谓词等</p><h2 id="简单字符"><a href="#简单字符" class="headerlink" title="简单字符"></a>简单字符</h2><p>没有特殊意义的字符都是简单字符，简单字符就代表自身，绝大部分字符都是简单字符，举个例子。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/abc/ <span class="comment">// 匹配 abc</span></span><br><span class="line">/<span class="number">123</span>/ <span class="comment">// 匹配 123</span></span><br><span class="line">/-_-<span class="regexp">/ /</span><span class="regexp">/ 匹配 -_-</span></span><br></pre></td></tr></table></figure><h2 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h2><p>\是转义字符，其后面的字符会代表不同的意思，转义字符主要有三个作用：</p><ol><li><p>是为了匹配不方便显示的特殊字符，比如换行，tab符号等</p></li><li><p>正则中预先定义了一些代表特殊意义的字符，比如\w等</p></li><li><p>在正则中某些字符有特殊含义(比如下面说到的)，转义字符可以让其显示自身的含义</p></li></ol><table><thead><tr><th style="text-align:left">常用转义字符</th><th style="text-align:left">意义</th></tr></thead><tbody><tr><td style="text-align:left">\n</td><td style="text-align:left">匹配换行符 （newline）</td></tr><tr><td style="text-align:left">\r</td><td style="text-align:left">匹配回车符 （return）</td></tr><tr><td style="text-align:left">\t</td><td style="text-align:left">匹配制表符，也就是tab键</td></tr><tr><td style="text-align:left">\v</td><td style="text-align:left">匹配垂直制表符</td></tr><tr><td style="text-align:left">\x20</td><td style="text-align:left">20是2位16进制数字，代表对应的字符</td></tr><tr><td style="text-align:left">\u002B</td><td style="text-align:left">002B是4位16进制数字，代表对应的字符</td></tr><tr><td style="text-align:left">\u002B</td><td style="text-align:left">002B是4位16进制数字，代表对应的字符</td></tr><tr><td style="text-align:left">\w</td><td style="text-align:left">匹配任何一个字母或者数字或者下划线 单子字符 (word)</td></tr><tr><td style="text-align:left">\W</td><td style="text-align:left">匹配任何一个字母或者数字或者下划线以外的字符 非单子字符</td></tr><tr><td style="text-align:left">\s</td><td style="text-align:left">匹配空白字符，如空格，tab等 （space）</td></tr><tr><td style="text-align:left">\S</td><td style="text-align:left">匹配非空白字符</td></tr><tr><td style="text-align:left">\d</td><td style="text-align:left">匹配数字字符，0~9 （digit）</td></tr><tr><td style="text-align:left">\D</td><td style="text-align:left">匹配非数字字符</td></tr><tr><td style="text-align:left">\b</td><td style="text-align:left">匹配单词的边界 (boundary)</td></tr><tr><td style="text-align:left">\B</td><td style="text-align:left">匹配非单词边界</td></tr><tr><td style="text-align:left">\</td><td style="text-align:left">匹配\本身</td></tr></tbody></table><h2 id="字符集合"><a href="#字符集合" class="headerlink" title="字符集合"></a>字符集合</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 有时我们需要匹配一类字符，字符集可以实现这个功能，字符集的语法用[]分隔，下面的代码能够匹配a或b或c</span></span><br><span class="line">[abc]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果要表示字符很多，可以使用-表示一个范围内的字符，下面两个功能相同</span></span><br><span class="line">[<span class="number">0123456789</span>]</span><br><span class="line">[<span class="number">0</span><span class="number">-9</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在前面添加^，可表示非的意思，下面的代码能够匹配abc之外的任意字符</span></span><br><span class="line">[^abc]</span><br></pre></td></tr></table></figure><p>其实正则还内置了一些字符集，在上面的转义字符有提到，下面给出内置字符集对应的自定义字符集</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 匹配除了换行符（\n）以外的任意一个字符 = [^\n]</span></span><br><span class="line">\w = [<span class="number">0</span><span class="number">-9</span>a-zA-Z_]</span><br><span class="line">\W = [^<span class="number">0</span><span class="number">-9</span>a-zA-Z_]</span><br><span class="line">\s = [ \t\n\v]</span><br><span class="line">\S = [^ \t\n\v]</span><br><span class="line">\d = [<span class="number">0</span><span class="number">-9</span>]</span><br><span class="line">\D = [^<span class="number">0</span><span class="number">-9</span>]</span><br></pre></td></tr></table></figure><h2 id="量词"><a href="#量词" class="headerlink" title="量词"></a>量词</h2><p>如果需要匹配多次某个字符，正则也提供了量词的功能，正则中的量词有多个，如?、+、*、{n}、{m,n}、{m,}</p><p>{n}匹配n次，比如a{2}，匹配aa</p><p>{m, n}匹配m-n次，优先匹配n次，比如a{1,3}，可以匹配aaa、aa、a</p><p>{m,}匹配m-∞次，优先匹配∞次，比如a{1,}，可以匹配aaaa…</p><p>?匹配0次或1次，优先匹配1次，相当于{0,1}</p><p>+匹配1-n次，优先匹配n次，相当于{1,}</p><p>*匹配0-n次，优先匹配n次，相当于{0,}</p><p>正则默认和人心一样是贪婪的，也就是常说的贪婪模式，凡是表示范围的量词，都优先匹配上限而不是下限</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// a&#123;1, 3&#125; 匹配字符串'aaa'的话，会匹配aaa而不是a</span></span><br><span class="line"><span class="keyword">var</span> text = <span class="string">"aaa"</span>; </span><br><span class="line"><span class="keyword">var</span> pattern1 = <span class="regexp">/a&#123;1,3&#125;/</span>;</span><br><span class="line">pattern1.exec(text); <span class="comment">//["aaa", index: 0, input: "aaa"] // index input为属性</span></span><br></pre></td></tr></table></figure><p>有时候这不是我们想要的结果，可以在量词后面加上?，就可以开启非贪婪模式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> text = <span class="string">"aaa"</span>; </span><br><span class="line"><span class="keyword">var</span> pattern1 = <span class="regexp">/a&#123;1,3&#125;?/</span>;</span><br><span class="line">pattern1.exec(text); <span class="comment">//["a", index: 0, input: "aaa"]</span></span><br></pre></td></tr></table></figure><h2 id="字符边界"><a href="#字符边界" class="headerlink" title="字符边界"></a>字符边界</h2><p>^在[]外表示匹配开头的意思^abc // 可以匹配abc，但是不能匹配aabc</p><p>$表示匹配结尾的意思abc$ // 可以匹配abc，但是不能匹配abcc上面提到的\b表示单词的边界</p><p>\b表示匹配一个词的边界。一个词的边界就是一个词不被另外一个“字”字符跟随的位置或者没有其他“字”字符在其前面的位置。abc\b // 可以匹配 abc ，但是不能匹配 abcc；/\bm/匹配“moon”中得‘m’；/oo\b/并不匹配”moon”中得’oo’，因为’oo’被一个“字”字符’n’紧跟着。/oon\b/匹配”moon”中得’oon’，因为’oon’是这个字符串的结束部分。这样他没有被一个“字”字符紧跟着。/\w\b\w/将不能匹配任何字符串，因为在一个单词中间的字符永远也不可能同时满足没有“字”字符跟随和有“字”字符跟随两种情况。</p><h2 id="选择表达式"><a href="#选择表达式" class="headerlink" title="选择表达式"></a>选择表达式</h2><p>有时我们想匹配x或者y，如果x和y是单个字符，可以使用字符集，[abc]可以匹配a或b或c，如果x和y是多个字符，字符集就无能为力了，此时就要用到分组</p><p>正则中用|来表示分组，a|b表示匹配a或者b的意思</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">123</span>|<span class="number">456</span>|<span class="number">789</span> <span class="comment">// 匹配 123 或 456 或 789</span></span><br></pre></td></tr></table></figure><h2 id="分组与引用"><a href="#分组与引用" class="headerlink" title="分组与引用"></a>分组与引用</h2><p>分组是正则中非常强大的一个功能，可以让上面提到的量词作用于一组字符，而非单个字符，分组的语法是圆括号包裹(xxx)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(abc)&#123;<span class="number">2</span>&#125; <span class="comment">// 匹配abcabc</span></span><br></pre></td></tr></table></figure><p>分组不能放在[]中，分组中还可以使用选择表达式<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">123</span>|<span class="number">456</span>)&#123;<span class="number">2</span>&#125; <span class="comment">// 匹配 123123、456456、123456、456123</span></span><br></pre></td></tr></table></figure></p><p>和分组相关的概念还有一个捕获分组和非捕获分组，分组默认都是捕获的，在分组的(后面添加?:可以让分组变为非捕获分组，非捕获分组可以提高性能和简化逻辑</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'123'</span>.match(<span class="regexp">/(?:123)/</span>) <span class="comment">// 返回 ['123']</span></span><br><span class="line"><span class="string">'123'</span>.match(<span class="regexp">/(123)/</span>)  <span class="comment">// 返回 ['123', '123']</span></span><br><span class="line"><span class="comment">// 和分组相关的另一个概念是引用，比如在匹配html标签时，通常希望&lt;xxx&gt;&lt;/xxx&gt;后面的xxx能够和前面保持一致</span></span><br></pre></td></tr></table></figure><p>引用的语法是\数字，数字代表引用前面第几个捕获分组，注意非捕获分组不能被引用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;([a-z]+)&gt;<span class="xml"><span class="tag">&lt;<span class="name">\</span>/\<span class="attr">1</span>&gt;</span> // 可以匹配 `<span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>` 或 `<span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>`等</span></span><br></pre></td></tr></table></figure><h2 id="预搜索"><a href="#预搜索" class="headerlink" title="预搜索"></a>预搜索</h2><p>如果你想匹配xxx前不能是yyy，或者xxx后不能是yyy，那就要用到预搜索</p><p>js只支持正向预搜索，也就是xxx后面必须是yyy，或者xxx后面不能是yyy</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>(?=<span class="number">2</span>) <span class="comment">// 可以匹配12，不能匹配22</span></span><br><span class="line"><span class="number">1</span>(?!<span class="number">2</span>) <span class="comment">// 可有匹配22，不能匹配12</span></span><br></pre></td></tr></table></figure><h2 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h2><p>默认正则是区分大小写，这可能并不是我们想要的，正则提供了修饰符的功能，修复的语法如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/xxx/gi <span class="comment">// 最后面的g和i就是两个修饰符</span></span><br></pre></td></tr></table></figure><p>g正则遇到第一个匹配的字符就会结束，加上全局修复符，可以让其匹配到结束</p><p>i正则默认是区分大小写的，i可以忽略大小写</p><p>m正则默认情况下，^和$只能匹配字符串的开始和结尾，m修饰符可以让^和$匹配行首和行尾，不理解就看例子</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/jing$/ <span class="comment">// 能够匹配 'yanhaijing，不能匹配 'yanhaijing\n'</span></span><br><span class="line">/jing$/m <span class="comment">// 能够匹配 'yanhaijing， 能够匹配 'yanhaijing\n'</span></span><br><span class="line"></span><br><span class="line">/^jing/ <span class="comment">// 能够匹配 'jing'，不能匹配 '\njing'</span></span><br><span class="line">/^jing/m <span class="comment">// 能够匹配 'jing'，能够匹配 '\njing'</span></span><br></pre></td></tr></table></figure><h2 id="js使用正则表达式的方法"><a href="#js使用正则表达式的方法" class="headerlink" title="js使用正则表达式的方法"></a>js使用正则表达式的方法</h2><p>正则表达式是用于匹配字符串中字符组合的模式。在 JavaScript中，正则表达式也是对象。这些模式被用于 RegExp 的 exec 和 test 方法, 以及 String 的 match、replace、search 和 split 方法</p><table><thead><tr><th style="text-align:left">方法</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">exec</td><td style="text-align:left">一个在字符串中执行查找匹配的RegExp方法，它返回一个数组（未匹配到则返回null）。</td></tr><tr><td style="text-align:left">test</td><td style="text-align:left">一个在字符串中测试是否匹配的RegExp方法，它返回true或false。</td></tr><tr><td style="text-align:left">match</td><td style="text-align:left">一个在字符串中执行查找匹配的String方法，它返回一个数组或者在未匹配到时返回null。</td></tr><tr><td style="text-align:left">search</td><td style="text-align:left">一个在字符串中测试匹配的String方法，它返回匹配到的位置索引，或者在失败时返回-1。</td></tr><tr><td style="text-align:left">replace</td><td style="text-align:left">一个在字符串中执行查找匹配的String方法，并且使用替换字符串替换掉匹配到的子字符串。</td></tr><tr><td style="text-align:left">split</td><td style="text-align:left">一个使用正则表达式或者一个固定字符串分隔一个字符串，并将分隔后的子字符串存储到数组中的String方法。</td></tr></tbody></table><p>当你想要知道在一个字符串中的一个匹配是否被找到，你可以使用test或search方法；想得到更多的信息（但是比较慢）则可以使用exec或match方法。如果你使用exec或match方法并且匹配成功了，那么这些方法将返回一个数组并且更新相关的正则表达式对象的属性和预定义的正则表达式对象（详见下）。如果匹配失败，那么exec方法返回null（也就是false）。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> text = <span class="string">"cat, bat, sat, fat"</span>; <span class="keyword">var</span> pattern1 = <span class="regexp">/.at/</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> matches = pattern1.exec(text);</span><br><span class="line"><span class="built_in">console</span>.log(matches) <span class="comment">//["cat", index: 0, input: "cat, bat, sat, fat"]</span></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://mydearest.cn/%E6%AD%A3%E5%88%99%E6%80%BB%E7%BB%93.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>动手实现redux</title>
      <link>http://mydearest.cn/%E5%8A%A8%E6%89%8B%E5%AE%9E%E7%8E%B0redux.html</link>
      <guid>http://mydearest.cn/%E5%8A%A8%E6%89%8B%E5%AE%9E%E7%8E%B0redux.html</guid>
      <pubDate>Wed, 03 Oct 2018 11:24:18 GMT</pubDate>
      <description>
      
        &lt;p&gt;概念：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个app有一个store，一个store管理着一个全局state&lt;/li&gt;
&lt;li&gt;createStore 传入reducer，返回getState, dispatch, subscribe&lt;/li&gt;
&lt;li&gt;action是一个至少有type这个键的对象，可以写一个creactActioner 函数去return生成action对象&lt;/li&gt;
&lt;li&gt;createStore.dispatch(action) 根据action这个对象去更新state&lt;/li&gt;
&lt;li&gt;dispatch是一个函数，内部有将执行reducer函数&lt;/li&gt;
&lt;li&gt;reducer也是一个函数，传入state,action, 输出一个新的state . (switch case return…)&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>概念：</p><ul><li>一个app有一个store，一个store管理着一个全局state</li><li>createStore 传入reducer，返回getState, dispatch, subscribe</li><li>action是一个至少有type这个键的对象，可以写一个creactActioner 函数去return生成action对象</li><li>createStore.dispatch(action) 根据action这个对象去更新state</li><li>dispatch是一个函数，内部有将执行reducer函数</li><li>reducer也是一个函数，传入state,action, 输出一个新的state . (switch case return…)</li></ul><hr><a id="more"></a><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> = <span class="string">'title'</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span> = <span class="string">"changeTheme"</span> <span class="attr">value</span>=<span class="string">"变成蓝色主题"</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实现createStore 传入reducer</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createStore</span>(<span class="params">reducer</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 存储数据</span></span><br><span class="line">    <span class="keyword">let</span> state = <span class="literal">null</span></span><br><span class="line">    <span class="comment">// 订阅列表</span></span><br><span class="line">    <span class="keyword">const</span> listenerList=[]</span><br><span class="line">    <span class="comment">// 增加订阅</span></span><br><span class="line">    <span class="keyword">const</span> subscribe=<span class="function">(<span class="params">listener</span>)=&gt;</span>listenerList.push(listener)</span><br><span class="line">    <span class="comment">// 返回state</span></span><br><span class="line">    <span class="keyword">const</span> getState=<span class="function"><span class="params">()</span>=&gt;</span>state </span><br><span class="line">    <span class="comment">// dispatch</span></span><br><span class="line">    <span class="keyword">const</span> dispatch=<span class="function">(<span class="params">action</span>)=&gt;</span>&#123;</span><br><span class="line">      <span class="comment">// 新的state</span></span><br><span class="line">      state=reducer(state,action)</span><br><span class="line">      <span class="comment">// 遍历执行</span></span><br><span class="line">      listenerList.forEach(item)=&gt;item()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 初始化state</span></span><br><span class="line">    dispatch(&#123;&#125;)</span><br><span class="line">    <span class="keyword">return</span> &#123;getState,subscribe,dispatch&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现reducer</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params">state,action</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(!state)&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      title:<span class="string">'红色'</span>,</span><br><span class="line">      color:<span class="string">'red'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">switch</span>(action.type)&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'UPDATE_TITLE'</span>:</span><br><span class="line">    <span class="keyword">return</span> &#123;...state,<span class="attr">title</span>:action.title&#125;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'UPDATE_COLOR'</span>:</span><br><span class="line">    <span class="keyword">return</span> &#123;...state,<span class="attr">color</span>:action.color&#125;</span><br><span class="line">    <span class="keyword">default</span>:<span class="keyword">return</span> state</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 传入reducer生成store</span></span><br><span class="line"><span class="keyword">const</span> store =createStore(reducer)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 渲染代码</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">renderDom</span>(<span class="params">state</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> titleDOM = <span class="built_in">document</span>.getElementById(<span class="string">'title'</span>);</span><br><span class="line">  titleDOM.innerHTML = state.title;</span><br><span class="line">  titleDOM.style.color = state.color;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听数据变化重新渲染页面</span></span><br><span class="line">store.subscribe(<span class="function"><span class="params">()</span> =&gt;</span> renderApp(store.getState()));<span class="comment">// 让每次dispatch时都会执行传入的这个函数，渲染页面</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 首次渲染页面</span></span><br><span class="line">renderApp(store.getState());</span><br><span class="line"></span><br><span class="line"><span class="comment">// action</span></span><br><span class="line"><span class="keyword">const</span> updateThemeName = <span class="function"><span class="params">()</span> =&gt;</span> (&#123;</span><br><span class="line">  type: <span class="string">'UPDATE_TITLE'</span>,</span><br><span class="line">  title: <span class="string">'蓝色'</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">const</span> updateThemeColor = <span class="function"><span class="params">()</span> =&gt;</span> (&#123;</span><br><span class="line">  type: <span class="string">'UPDATE_COLOR'</span>,</span><br><span class="line">  color: <span class="string">'blue'</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 绑定事件</span></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'changeTheme'</span>).onclick = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  store.dispatch(updateThemeName());</span><br><span class="line">  store.dispatch(updateThemeColor());</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://mydearest.cn/%E5%8A%A8%E6%89%8B%E5%AE%9E%E7%8E%B0redux.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>toFixed方法注意点</title>
      <link>http://mydearest.cn/toFixed%E6%96%B9%E6%B3%95%E6%B3%A8%E6%84%8F%E7%82%B9.html</link>
      <guid>http://mydearest.cn/toFixed%E6%96%B9%E6%B3%95%E6%B3%A8%E6%84%8F%E7%82%B9.html</guid>
      <pubDate>Fri, 14 Sep 2018 12:33:52 GMT</pubDate>
      <description>
      
        &lt;h3 id=&quot;遇到的问题&quot;&gt;&lt;a href=&quot;#遇到的问题&quot; class=&quot;headerlink&quot; title=&quot;遇到的问题:&quot;&gt;&lt;/a&gt;遇到的问题:&lt;/h3&gt;&lt;p&gt;js的浮点数运算不准确，(a + b).toFixed(2)能解决一部分问题，但并不完美。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;0.1&lt;/span&gt; + &lt;span class=&quot;number&quot;&gt;0.2&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;//0.30000000000000004&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;number&quot;&gt;0.1&lt;/span&gt; + &lt;span class=&quot;number&quot;&gt;0.2&lt;/span&gt;).toFixed(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// 0.30&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;0.815&lt;/span&gt; + &lt;span class=&quot;number&quot;&gt;0.1&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// 0.9149999999999999&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;number&quot;&gt;0.815&lt;/span&gt; + &lt;span class=&quot;number&quot;&gt;0.1&lt;/span&gt;).toFixed(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// 0.91，错误！期望0.92&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// toFixed并不是我们通常理解的“四舍五入”，而是“四舍六入五留双”&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 简单来说就是：四舍六入五考虑，五后非零就进一，五后为零看奇偶，五前为偶应舍去，五前为奇要进一。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;number&quot;&gt;0.225&lt;/span&gt;).toFixed(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// 0.23&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;number&quot;&gt;0.235&lt;/span&gt;).toFixed(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// 0.23，错误！期望0.24&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h3 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题:"></a>遇到的问题:</h3><p>js的浮点数运算不准确，(a + b).toFixed(2)能解决一部分问题，但并不完美。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0.1</span> + <span class="number">0.2</span> <span class="comment">//0.30000000000000004</span></span><br><span class="line">(<span class="number">0.1</span> + <span class="number">0.2</span>).toFixed(<span class="number">2</span>) <span class="comment">// 0.30</span></span><br><span class="line"><span class="number">0.815</span> + <span class="number">0.1</span> <span class="comment">// 0.9149999999999999</span></span><br><span class="line">(<span class="number">0.815</span> + <span class="number">0.1</span>).toFixed(<span class="number">2</span>) <span class="comment">// 0.91，错误！期望0.92</span></span><br><span class="line"><span class="comment">// toFixed并不是我们通常理解的“四舍五入”，而是“四舍六入五留双”</span></span><br><span class="line"><span class="comment">// 简单来说就是：四舍六入五考虑，五后非零就进一，五后为零看奇偶，五前为偶应舍去，五前为奇要进一。</span></span><br><span class="line">(<span class="number">0.225</span>).toFixed(<span class="number">2</span>) <span class="comment">// 0.23</span></span><br><span class="line">(<span class="number">0.235</span>).toFixed(<span class="number">2</span>) <span class="comment">// 0.23，错误！期望0.24</span></span><br></pre></td></tr></table></figure><hr><a id="more"></a><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>网络上有很多种解决方案，可以修正toFixed方法，也可以重新定义四则运算。重新定义四则运算，最为规范，但使用麻烦，故我最终选择了修正toFixed。声明：源码来源于网络，本文只是添加了注释和分析。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 直接替换原型链上的方法，方便使用</span></span><br><span class="line"><span class="built_in">Number</span>.prototype.toFixed = <span class="function"><span class="keyword">function</span> (<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// n为期望保留的位数，超过限定，报错！</span></span><br><span class="line">  <span class="keyword">if</span> (n &gt; <span class="number">20</span> || n &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">RangeError</span>(<span class="string">'toFixed() digits argument must be between 0 and 20'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 获取数字</span></span><br><span class="line">  <span class="keyword">const</span> number = <span class="keyword">this</span>;</span><br><span class="line">  <span class="comment">// 如果是NaN,或者数字过大，直接返回'NaN'或者类似'1e+21'的科学计数法字符串</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">isNaN</span>(number) || number &gt;= <span class="built_in">Math</span>.pow(<span class="number">10</span>, <span class="number">21</span>)) &#123;</span><br><span class="line">    <span class="keyword">return</span> number.toString();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 默认保留整数</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> (n) == <span class="string">'undefined'</span> || n == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">Math</span>.round(number)).toString();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 先获取字符串</span></span><br><span class="line">  <span class="keyword">let</span> result = number.toString();</span><br><span class="line">  <span class="comment">// 获取小数部分</span></span><br><span class="line">  <span class="keyword">const</span> arr = result.split(<span class="string">'.'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 整数的情况，直接在后面加上对应个数的0即可</span></span><br><span class="line">  <span class="keyword">if</span> (arr.length &lt; <span class="number">2</span>) &#123;</span><br><span class="line">    result += <span class="string">'.'</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; i += <span class="number">1</span>) &#123;</span><br><span class="line">      result += <span class="string">'0'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 整数和小数</span></span><br><span class="line">  <span class="keyword">const</span> integer = arr[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">const</span> decimal = arr[<span class="number">1</span>];</span><br><span class="line">  <span class="comment">// 如果已经符合要求位数，直接返回</span></span><br><span class="line">  <span class="keyword">if</span> (decimal.length == n) &#123;</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 如果小于指定的位数，补上</span></span><br><span class="line">  <span class="keyword">if</span> (decimal.length &lt; n) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n - decimal.length; i += <span class="number">1</span>) &#123;</span><br><span class="line">      result += <span class="string">'0'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 如果到这里还没结束，说明原有小数位多于指定的n位</span></span><br><span class="line">  <span class="comment">// 先直接截取对应的位数</span></span><br><span class="line">  result = integer + <span class="string">'.'</span> + decimal.substr(<span class="number">0</span>, n);</span><br><span class="line">  <span class="comment">// 获取后面的一位</span></span><br><span class="line">  <span class="keyword">const</span> last = decimal.substr(n, <span class="number">1</span>);</span><br><span class="line"> <span class="keyword">if</span> (<span class="regexp">/^\d(9)&#123;5,&#125;[89]$/</span>.test(decimal.substr(n))) &#123;</span><br><span class="line">    last = +last + <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 大于等于5统一进一位</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">parseInt</span>(last, <span class="number">10</span>) &gt;= <span class="number">5</span>) &#123;</span><br><span class="line">    <span class="comment">// 转换倍数，转换为整数后，再进行四舍五入</span></span><br><span class="line">    <span class="keyword">const</span> x = <span class="built_in">Math</span>.pow(<span class="number">10</span>, n);</span><br><span class="line">    <span class="comment">// 进一位后，转化还原为小数</span></span><br><span class="line">    result = (<span class="built_in">Math</span>.round((<span class="built_in">parseFloat</span>(result) * x)) + <span class="number">1</span>) / x;</span><br><span class="line">    <span class="comment">// 再确认一遍</span></span><br><span class="line">    result = result.toFixed(n);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://mydearest.cn/toFixed%E6%96%B9%E6%B3%95%E6%B3%A8%E6%84%8F%E7%82%B9.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>人一生必须要去的3个地方</title>
      <link>http://mydearest.cn/%E4%BA%BA%E4%B8%80%E7%94%9F%E5%BF%85%E9%A1%BB%E5%8E%BB%E7%9A%843%E4%B8%AA%E5%9C%B0%E6%96%B9.html</link>
      <guid>http://mydearest.cn/%E4%BA%BA%E4%B8%80%E7%94%9F%E5%BF%85%E9%A1%BB%E5%8E%BB%E7%9A%843%E4%B8%AA%E5%9C%B0%E6%96%B9.html</guid>
      <pubDate>Fri, 14 Sep 2018 12:33:52 GMT</pubDate>
      <description>
      
        &lt;p&gt;通常有人说一个人一生最好经常去三个地方看看，人生感悟会提高一个档次，人生观，价值观乃至世界观，都会有一个质的飞跃。这三个地方就是：托儿所、殡仪馆、监狱。 常去托儿所，看到天真烂漫、童真无邪、活泼可爱的孩子们，会更加的体会到生命的重要和可爱，从而更加珍惜生命，热爱生活，激发出更多积极向上的人生志向。 常去殡仪馆，看到撒手人寰逝去的人们，会感受到，人赤条条来，赤条条去，人为财死，鸟为食亡，是多么的狭隘和自私，心胸会豁然开朗，，不会在为鸡毛蒜皮的小事斤斤计较，退一步海阔天空，让三分心平气和。会更加的领会人生的价值所在，让人生更具异彩。 常去监狱，看到无论是过去高官还是贫民百姓，进到监狱没有了姓名，只有号码，一律囚服，进出报告，极大的限制了人身自由，天高任鸟飞，海阔凭鱼跃的现实已经成为梦中的理想。自古就有人犯王法身无主，因此也就会更加的洁身自好，以人为镜，严于律己。守法度者为幸福，世上本没有绝对的自由，遵守了，习惯了，适应了也就自由了。&lt;/p&gt;
&lt;hr&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>通常有人说一个人一生最好经常去三个地方看看，人生感悟会提高一个档次，人生观，价值观乃至世界观，都会有一个质的飞跃。这三个地方就是：托儿所、殡仪馆、监狱。 常去托儿所，看到天真烂漫、童真无邪、活泼可爱的孩子们，会更加的体会到生命的重要和可爱，从而更加珍惜生命，热爱生活，激发出更多积极向上的人生志向。 常去殡仪馆，看到撒手人寰逝去的人们，会感受到，人赤条条来，赤条条去，人为财死，鸟为食亡，是多么的狭隘和自私，心胸会豁然开朗，，不会在为鸡毛蒜皮的小事斤斤计较，退一步海阔天空，让三分心平气和。会更加的领会人生的价值所在，让人生更具异彩。 常去监狱，看到无论是过去高官还是贫民百姓，进到监狱没有了姓名，只有号码，一律囚服，进出报告，极大的限制了人身自由，天高任鸟飞，海阔凭鱼跃的现实已经成为梦中的理想。自古就有人犯王法身无主，因此也就会更加的洁身自好，以人为镜，严于律己。守法度者为幸福，世上本没有绝对的自由，遵守了，习惯了，适应了也就自由了。</p><hr><a id="more"></a><p>中国的人实在是太多了，人均资源少，而且分配不均，旱死的旱死涝死的涝死。小时候奶奶经常说我爸生下来多么瘦小，为了生存还去卖过血。我爸也是从无到有的打拼。我是努力了，但我拼命努力了么？没有！！！是需要有那种不成功便成仁的决心和坚持到底的毅力。是的，我自己什么都将可以牺牲的！要想得到什么必须付出同等的代价。新中国成立解放了人民，同样也诞生了新的剥削阶级。文革各个组织间的利益冲突。中国还是那个中国，似曾相识的中央集权，人民当家做主恩恩，当好韭菜，接收被剥削收割的命运。</p><p>自古以来的人情社会，不送礼办不成事，贪污落马的大老虎们一批接一批。拉帮结派、结党营私、官官相护。</p><ul><li>退休年龄将来目标是65岁退休，现在国人平均寿命接近75岁，10年能拿回多少退休金？- 养老个人部分退休可以逐年领回，但只算本金，按本国多年通货膨胀率测算，退休时相当于多少实际购买力？</li><li>社保里有些险种可能多数人用不到，比如失业险，多交了很多人也没得益，算下这种会占多少？</li><li>最后，要看是公司单独给员工交满额还是全社会所有公司都交满额。这也有关系？是的，公司是盈利组织，多支付了成本就要想办法收回来。</li></ul><p>近些年的社保制度，要知道以前的公寓都是不交养老保险的。现在他们推向还能拿到不菲的养老金。是谁的缴纳的呢？这样的庞氏骗局能持续多久呢？</p><p>妈妈的胃结石、奶奶的甲亢、爷爷的骨刺。身体健康最重要，讨厌医院里消毒水和中药的味道。这里的氛围代凯莱达。以前一老以为自己有绝症重病，什么后脑勺的突起，坐摩托车时的心悸，不敢去做刺激性的娱乐项目，以前去方特都只是去坐坐旋转木马，有心脏病。这就是我的极限吗？！</p><p>科室真的好赚钱，医生好闲，人到了报告</p><p>努力努力，不想当韭菜了。保护好自己的家人，努力地活下去！！！</p><p>一点精神都没有~早知道去苏宁了，果然还是想啥都干外包公司只能温饱，发财是没有希望的。只能去互联网公司。不是什么病真是太好了，但是要考公务员。可能会离很远。我为了离得近选择了外包公司，处于鄙视链下，学习受限。接私活。可能去sn这种大公司镀个金也是个好选择吧！大平台之间跳转的重要性。</p><p>一天到晚没什么精神，让人好担心。10.3一起煮饭吃了。对菜价什么的也有了大概的了解，生活的丰富多彩。2年不到15k，大城市的高薪真是个诱惑，家里还和我说买车位emmm。</p><ul><li>revenge</li><li>protect</li><li>breakthrough</li><li>life enjoy</li></ul><ol><li>不去做的话永远也做不到。</li><li>要想得到什么，必须付出同等的代价。</li><li>我的钻头可是突破天际的钻头啊！</li></ol>]]></content:encoded>
      
      <comments>http://mydearest.cn/%E4%BA%BA%E4%B8%80%E7%94%9F%E5%BF%85%E9%A1%BB%E5%8E%BB%E7%9A%843%E4%B8%AA%E5%9C%B0%E6%96%B9.html#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
