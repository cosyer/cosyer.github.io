<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>cosyer&#39;s Blog</title>
    <link>http://mydearest.cn/</link>
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>陈宇的博客</description>
    <pubDate>Mon, 11 Mar 2019 17:04:06 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>NodeJSHttp加载静态资源</title>
      <link>http://mydearest.cn/2019/NodeJSHttp%E5%8A%A0%E8%BD%BD%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90.html</link>
      <guid>http://mydearest.cn/2019/NodeJSHttp%E5%8A%A0%E8%BD%BD%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90.html</guid>
      <pubDate>Mon, 11 Mar 2019 16:36:52 GMT</pubDate>
      <description>
      
        &lt;p&gt;问题场景：浏览器向后台发送请求后，后台返回一个html界面。但是在浏览器中没有加载js、css等静态资源，查找原因后发现是Content-Type的原因。浏览器不&lt;/p&gt;
&lt;p&gt;知道css、js等文件的文件格式，无法成功加载静态文件。所以，需要设置正确的文件格式。&lt;/p&gt;
&lt;hr&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>问题场景：浏览器向后台发送请求后，后台返回一个html界面。但是在浏览器中没有加载js、css等静态资源，查找原因后发现是Content-Type的原因。浏览器不</p><p>知道css、js等文件的文件格式，无法成功加载静态文件。所以，需要设置正确的文件格式。</p><hr><a id="more"></a><h2 id="搭建简单的本地服务"><a href="#搭建简单的本地服务" class="headerlink" title="搭建简单的本地服务"></a>搭建简单的本地服务</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);<span class="comment">//引入http模块</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//开启服务，监听8888端口</span></span><br><span class="line"><span class="comment">//端口号最好为6000以上</span></span><br><span class="line"><span class="keyword">var</span> server = http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        req用来接受客户端数据</span></span><br><span class="line"><span class="comment">        res用来向客户端发送服务器数据</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'有客户端连接'</span>);<span class="comment">//创建连接成功显示在后台</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//一参是http请求状态，200连接成功</span></span><br><span class="line">    <span class="comment">//连接成功后向客户端写入头信息</span></span><br><span class="line">    res.writeHeader(<span class="number">200</span>,&#123;</span><br><span class="line">        <span class="string">'content-type'</span> : <span class="string">'text/html;charset="utf-8"'</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    res.write(<span class="string">'这是正文部分'</span>);<span class="comment">//显示给客户端</span></span><br><span class="line">    res.end();</span><br><span class="line"></span><br><span class="line">&#125;).listen(<span class="number">8888</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'服务器开启成功'</span>);</span><br></pre></td></tr></table></figure><h2 id="访问本地站点"><a href="#访问本地站点" class="headerlink" title="访问本地站点"></a>访问本地站点</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);<span class="comment">//引入文件读取模块</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> documentRoot = <span class="string">'E:/PhpProject/html5/websocket/www'</span>;</span><br><span class="line"><span class="comment">//需要访问的文件的存放目录</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> server= http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> url = req.url; </span><br><span class="line">    <span class="comment">//客户端输入的url，例如如果输入localhost:8888/index.html</span></span><br><span class="line">    <span class="comment">//那么这里的url == /index.html </span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> file = documentRoot + url;</span><br><span class="line">    <span class="built_in">console</span>.log(url);</span><br><span class="line">    <span class="comment">//E:/PhpProject/html5/websocket/www/index.html </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    fs.readFile( file , <span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>)</span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        一参为文件路径</span></span><br><span class="line"><span class="comment">        二参为回调函数</span></span><br><span class="line"><span class="comment">            回调函数的一参为读取错误返回的信息，返回空就没有错误</span></span><br><span class="line"><span class="comment">            二参为读取成功返回的文本内容</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">        <span class="keyword">if</span>(err)&#123;</span><br><span class="line">            res.writeHeader(<span class="number">404</span>,&#123;</span><br><span class="line">                <span class="string">'content-type'</span> : <span class="string">'text/html;charset="utf-8"'</span></span><br><span class="line">            &#125;);</span><br><span class="line">            res.write(<span class="string">'&lt;h1&gt;404错误&lt;/h1&gt;&lt;p&gt;你要找的页面不存在&lt;/p&gt;'</span>);</span><br><span class="line">            res.end();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            res.writeHeader(<span class="number">200</span>,&#123;</span><br><span class="line">                <span class="string">'content-type'</span> : <span class="string">'text/html;charset="utf-8"'</span></span><br><span class="line">            &#125;);</span><br><span class="line">            res.write(data);<span class="comment">//将index.html显示在客户端</span></span><br><span class="line">            res.end();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;).listen(<span class="number">8888</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'服务器开启成功'</span>);</span><br></pre></td></tr></table></figure><h2 id="无法加载静态文件"><a href="#无法加载静态文件" class="headerlink" title="无法加载静态文件"></a>无法加载静态文件</h2><h3 id="解决方案一"><a href="#解决方案一" class="headerlink" title="解决方案一"></a>解决方案一</h3><ul><li>手动设置Content-Type<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);<span class="comment">//引入文件读取模块</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> documentRoot = <span class="string">'./dist'</span>;</span><br><span class="line"><span class="comment">//需要访问的文件的存放目录</span></span><br><span class="line"></span><br><span class="line">http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> url = req.url; </span><br><span class="line">    <span class="comment">//客户端输入的url，例如如果输入localhost:8888/index.html</span></span><br><span class="line">    <span class="comment">//那么这里的url == /index.html </span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> file = documentRoot + url;</span><br><span class="line">    <span class="built_in">console</span>.log(file);</span><br><span class="line"></span><br><span class="line">    fs.readFile(file , <span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>)</span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        一参为文件路径</span></span><br><span class="line"><span class="comment">        二参为回调函数</span></span><br><span class="line"><span class="comment">            回调函数的一参为读取错误返回的信息，返回空就没有错误</span></span><br><span class="line"><span class="comment">            二参为读取成功返回的文本内容</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">        <span class="keyword">if</span>(err)&#123;</span><br><span class="line">            res.writeHeader(<span class="number">404</span>,&#123;</span><br><span class="line">                <span class="string">'content-type'</span> : <span class="string">'text/html;charset="utf-8"'</span></span><br><span class="line">            &#125;);</span><br><span class="line">            res.write(<span class="string">'&lt;h1&gt;404错误&lt;/h1&gt;&lt;p&gt;你要找的页面不存在&lt;/p&gt;'</span>);</span><br><span class="line">            res.end();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> type = file.substr(file.lastIndexOf(<span class="string">"."</span>)+<span class="number">1</span>,file.length)</span><br><span class="line">            res.writeHeader(<span class="number">200</span>,&#123;<span class="string">'Content-type'</span>:<span class="string">"text/"</span>+type+<span class="string">';charset="utf-8"'</span>&#125;);<span class="comment">//在这里设置文件类型，告诉浏览器解析方式</span></span><br><span class="line">            <span class="comment">// 根据后缀名判断文件类型不太准确 可以使用mime模块 mime.getType(filePath)</span></span><br><span class="line">            res.write(data);<span class="comment">//将index.html显示在客户端</span></span><br><span class="line">            res.end();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;).listen(<span class="number">8888</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'服务器开启成功'</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// // 手动设置content-type</span></span><br><span class="line"><span class="comment">// http.createServer(function(req,res)&#123;</span></span><br><span class="line"><span class="comment">// var path = req.url;</span></span><br><span class="line"><span class="comment">// console.log("path: "+path)</span></span><br><span class="line"><span class="comment">// if(path == "/")&#123;</span></span><br><span class="line"><span class="comment">// path = "/index.html";</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// sendFile(res,path);</span></span><br><span class="line"><span class="comment">// &#125;).listen(8888)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// function sendFile(res,path)&#123;</span></span><br><span class="line"><span class="comment">//   var path = process.cwd()+'/dist'+path;</span></span><br><span class="line"><span class="comment">// fs.readFile(path,function(err,stdout,stderr)&#123;</span></span><br><span class="line"><span class="comment">// if(!err)&#123;</span></span><br><span class="line"><span class="comment">// var data = stdout;</span></span><br><span class="line"><span class="comment">// var type = path.substr(path.lastIndexOf(".")+1,path.length)</span></span><br><span class="line"><span class="comment">// res.writeHead(200,&#123;'Content-type':"text/"+type+';charset="utf-8"'&#125;);//在这里设置文件类型，告诉浏览器解析方式</span></span><br><span class="line"><span class="comment">// res.write(data);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// res.end();</span></span><br><span class="line"><span class="comment">//   &#125;)</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="解决方案二"><a href="#解决方案二" class="headerlink" title="解决方案二"></a>解决方案二</h3><ul><li>使用mime模块，npm install mime.</li><li>mime.getType(filePath)</li></ul>]]></content:encoded>
      
      <comments>http://mydearest.cn/2019/NodeJSHttp%E5%8A%A0%E8%BD%BD%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>switch的块级作用域</title>
      <link>http://mydearest.cn/2019/switch%E7%9A%84%E5%9D%97%E7%BA%A7%E4%BD%9C%E7%94%A8%E5%9F%9F.html</link>
      <guid>http://mydearest.cn/2019/switch%E7%9A%84%E5%9D%97%E7%BA%A7%E4%BD%9C%E7%94%A8%E5%9F%9F.html</guid>
      <pubDate>Sat, 09 Mar 2019 16:21:30 GMT</pubDate>
      <description>
      
        &lt;p&gt;ES6 或 TS 引入了块级作用域,通过let和const、class等可以定义块级作用域里的变量，块级作用域内的变量不存在变量提升，且存在暂时性死区。常见的if语句，for循环的循环体内都可以定义块级变量。那么switch语句中的块级作用域是什么呢？ 先给出结论：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;switch语句中的块级作用域，在整个switch语句中，而不是对于每一个case生成一个独立的块级作用域。&lt;/code&gt;&lt;/p&gt;
&lt;hr&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>ES6 或 TS 引入了块级作用域,通过let和const、class等可以定义块级作用域里的变量，块级作用域内的变量不存在变量提升，且存在暂时性死区。常见的if语句，for循环的循环体内都可以定义块级变量。那么switch语句中的块级作用域是什么呢？ 先给出结论：</p><p><code>switch语句中的块级作用域，在整个switch语句中，而不是对于每一个case生成一个独立的块级作用域。</code></p><hr><a id="more"></a><p>举个栗子🌰<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> number = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">switch</span>(number)&#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">let</span> name = <span class="string">'cosyer'</span>;</span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">    <span class="built_in">console</span>.log(name)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// cosyer</span></span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> number = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">switch</span>(number)&#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">let</span> name = <span class="string">'cosyer'</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">    <span class="keyword">let</span> name = <span class="string">'yu'</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">   <span class="built_in">console</span>.log(name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Uncaught SyntaxError: Identifier 'name' has already been declared</span></span><br></pre></td></tr></table></figure><h2 id="可能存在的问题"><a href="#可能存在的问题" class="headerlink" title="可能存在的问题"></a>可能存在的问题</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> number = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">switch</span>(number)&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span> : name = <span class="string">'cosyer'</span>; <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// name虽然没有声明，但是给name赋值相当于给全局的window对象复制，也就是window.name = 'cosyer'。</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> number = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">switch</span>(number)&#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">let</span> name = <span class="string">'cosyer'</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">    name = <span class="string">'yu'</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Uncaught ReferenceError: name is not defined</span></span><br></pre></td></tr></table></figure><p>这里虽然case里面定义的块级虽然不会存在变量提升，但是会存在暂时性死区,也就是说如果let name = ‘cosyer’ 没有执行，也就是name定义的过程没有执行，那么name在整个块级作用域内都是不可用的，都是undefined。</p><p>所以尽量不要在case里定义块级变量。</p>]]></content:encoded>
      
      <comments>http://mydearest.cn/2019/switch%E7%9A%84%E5%9D%97%E7%BA%A7%E4%BD%9C%E7%94%A8%E5%9F%9F.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>深入理解instanceof</title>
      <link>http://mydearest.cn/2019/%E6%B7%B1%E5%85%A5%E4%BA%86%E8%A7%A3instanceof.html</link>
      <guid>http://mydearest.cn/2019/%E6%B7%B1%E5%85%A5%E4%BA%86%E8%A7%A3instanceof.html</guid>
      <pubDate>Fri, 08 Mar 2019 13:55:30 GMT</pubDate>
      <description>
      
        &lt;p&gt;在JS中，大家通常用&lt;code&gt;typeof&lt;/code&gt;来判断基本类型，&lt;code&gt;instanceof&lt;/code&gt;来判断引用类型。&lt;/p&gt;
&lt;h2 id=&quot;typeof&quot;&gt;&lt;a href=&quot;#typeof&quot; class=&quot;headerlink&quot; title=&quot;typeof&quot;&gt;&lt;/a&gt;typeof&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;typeof一般只能返回如下几个结果：number,boolean,string,function,object,undefined字符串&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;对于Array,null等特殊对象使用typeof一律返回object，这正是typeof的局限性。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;在判断除Object类型的对象(基本类型)时比较方便。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;instanceof&quot;&gt;&lt;a href=&quot;#instanceof&quot; class=&quot;headerlink&quot; title=&quot;instanceof&quot;&gt;&lt;/a&gt;instanceof&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;object instanceof constructor&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;instanceof 运算符用来测试一个对象在其原型链中是否存在一个构造函数的 prototype 属性。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;换种说法就是左侧的对象是否是右侧对象的实例。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;相关练习&quot;&gt;&lt;a href=&quot;#相关练习&quot; class=&quot;headerlink&quot; title=&quot;相关练习&quot;&gt;&lt;/a&gt;相关练习&lt;/h2&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&#39;123&#39;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; str = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;String&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;123&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;str &lt;span class=&quot;keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>在JS中，大家通常用<code>typeof</code>来判断基本类型，<code>instanceof</code>来判断引用类型。</p><h2 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a>typeof</h2><blockquote><p>typeof一般只能返回如下几个结果：number,boolean,string,function,object,undefined字符串</p></blockquote><blockquote><p>对于Array,null等特殊对象使用typeof一律返回object，这正是typeof的局限性。</p></blockquote><blockquote><p>在判断除Object类型的对象(基本类型)时比较方便。</p></blockquote><h2 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h2><blockquote><p>object instanceof constructor</p></blockquote><blockquote><p>instanceof 运算符用来测试一个对象在其原型链中是否存在一个构造函数的 prototype 属性。</p></blockquote><blockquote><p>换种说法就是左侧的对象是否是右侧对象的实例。</p></blockquote><h2 id="相关练习"><a href="#相关练习" class="headerlink" title="相关练习"></a>相关练习</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'123'</span> <span class="keyword">instanceof</span> <span class="built_in">String</span> <span class="comment">// true</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">'123'</span>)</span><br><span class="line">str <span class="keyword">instanceof</span> <span class="built_in">String</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure><hr><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 都是Object的实例 true</span></span><br><span class="line"><span class="built_in">console</span>.log(&#123;&#125; <span class="keyword">instanceof</span> <span class="built_in">Object</span>)</span><br><span class="line"><span class="built_in">console</span>.log([] <span class="keyword">instanceof</span> <span class="built_in">Array</span>)</span><br><span class="line"><span class="built_in">console</span>.log([] <span class="keyword">instanceof</span> <span class="built_in">Object</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125; <span class="keyword">instanceof</span> <span class="built_in">Function</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125; <span class="keyword">instanceof</span> <span class="built_in">Object</span>)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params"></span>)</span>&#123;&#125; </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">BFoo</span>(<span class="params"></span>)</span>&#123;&#125; </span><br><span class="line">Foo.prototype = <span class="keyword">new</span> BFoo();</span><br><span class="line"><span class="keyword">let</span> foo = <span class="keyword">new</span> Foo();</span><br><span class="line"><span class="built_in">console</span>.log(foo <span class="keyword">instanceof</span> Foo); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(foo <span class="keyword">instanceof</span> BFoo); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span> <span class="keyword">instanceof</span> <span class="built_in">String</span>); <span class="comment">// flase</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span> <span class="keyword">instanceof</span> <span class="built_in">Object</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span> <span class="keyword">instanceof</span> <span class="built_in">Function</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span> <span class="keyword">instanceof</span> <span class="built_in">Object</span>); </span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Function</span> <span class="keyword">instanceof</span> <span class="built_in">Function</span>); </span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Function</span> <span class="keyword">instanceof</span> <span class="built_in">Object</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params"></span>)</span>&#123;&#125; </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">BFoo</span>(<span class="params"></span>)</span>&#123;&#125; </span><br><span class="line">Foo.prototype = <span class="keyword">new</span> BFoo();</span><br><span class="line"><span class="built_in">console</span>.log(Foo <span class="keyword">instanceof</span> <span class="built_in">Function</span>);</span><br><span class="line"><span class="built_in">console</span>.log(Foo <span class="keyword">instanceof</span> Foo);</span><br></pre></td></tr></table></figure><h2 id="instanceof实现"><a href="#instanceof实现" class="headerlink" title="instanceof实现"></a>instanceof实现</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">instance_of</span>(<span class="params">L, R</span>) </span>&#123;<span class="comment">//L 表示左边的object，R 表示右边的constructor</span></span><br><span class="line"> <span class="keyword">const</span> R_P = R.prototype;<span class="comment">// 取 R 的显式原型</span></span><br><span class="line"> L = L.__proto__;<span class="comment">// 取 L 的隐式原型,并且可能会顺着原型链重新赋值</span></span><br><span class="line"> <span class="keyword">while</span> (<span class="literal">true</span>) &#123; </span><br><span class="line">   <span class="keyword">if</span> (L === <span class="literal">null</span>) </span><br><span class="line">     <span class="keyword">return</span> <span class="literal">false</span>; </span><br><span class="line">   <span class="keyword">if</span> (R_P === L)<span class="comment">// 这里重点：严格比较 true </span></span><br><span class="line">     <span class="keyword">return</span> <span class="literal">true</span>; </span><br><span class="line">   L = L.__proto__; </span><br><span class="line"> &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="重点解析"><a href="#重点解析" class="headerlink" title="重点解析"></a>重点解析</h2><p><img src="https://user-images.githubusercontent.com/25027560/37870377-2bc8211a-3007-11e8-92a0-04fa96aabf13.png" alt="原型链"></p><ul><li><p>__proto__ 属性，指向了创建该对象的构造函数的原型</p></li><li><p>所有JS对象都有 __proto__ 属性，除了Object.prototype.__proto__ === null</p></li><li><p>注意Object(),它是由function生成的，所以它的<strong>proto</strong>属性指向了function的构造器Function的原型Function.prototype</p></li><li><p>注意构造器Function,它是唯一一个prototype和<strong>proto</strong>指向相同的对象</p></li><li><p>一般来说，我们日常自行创建的构造器Foo的<strong>proto</strong>属性指向function的构造器Function的原型Function.prototype，但是构造器的原型对象Foo.prototype的<strong>proto</strong>属性是直接指向Object.prototype对象的</p></li></ul>]]></content:encoded>
      
      <comments>http://mydearest.cn/2019/%E6%B7%B1%E5%85%A5%E4%BA%86%E8%A7%A3instanceof.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>深入理解JS的继承</title>
      <link>http://mydearest.cn/2019/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JS%E7%9A%84%E7%BB%A7%E6%89%BF.html</link>
      <guid>http://mydearest.cn/2019/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JS%E7%9A%84%E7%BB%A7%E6%89%BF.html</guid>
      <pubDate>Thu, 07 Mar 2019 15:56:48 GMT</pubDate>
      <description>
      
        &lt;span itemprop=&quot;image&quot; itemscope=&quot;&quot; itemtype=&quot;http://schema.org/ImageObject&quot;&gt;&lt;img itemprop=&quot;url image&quot; src=&quot;https://user-images.githubusercontent.com/25027560/38763933-ac0fdb2a-3fd8-11e8-8510-5e8a2444f49a.png&quot; class=&quot;full-image&quot; alt=&quot;Summary&quot; title=&quot;Summary&quot;&gt;&lt;meta itemprop=&quot;width&quot; content=&quot;auto&quot;&gt;&lt;meta itemprop=&quot;height&quot; content=&quot;auto&quot;&gt;&lt;/span&gt;
&lt;hr&gt;
      
      </description>
      
      <content:encoded><![CDATA[<span itemprop="image" itemscope="" itemtype="http://schema.org/ImageObject"><img itemprop="url image" src="https://user-images.githubusercontent.com/25027560/38763933-ac0fdb2a-3fd8-11e8-8510-5e8a2444f49a.png" class="full-image" alt="Summary" title="Summary"><meta itemprop="width" content="auto"><meta itemprop="height" content="auto"></span><hr><a id="more"></a><h2 id="总览"><a href="#总览" class="headerlink" title="总览"></a>总览</h2><p><img src="https://user-images.githubusercontent.com/25027560/38763933-ac0fdb2a-3fd8-11e8-8510-5e8a2444f49a.png" alt="c5925056-aa27-4b97-9f5d-2ec786ea5125"></p><h2 id="一、借助构造函数"><a href="#一、借助构造函数" class="headerlink" title="一、借助构造函数"></a>一、借助构造函数</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = <span class="string">'parent1'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 将父类的执行上下文指向子类，父类执行时的实例属性都会指向子类</span></span><br><span class="line">  Parent1.call(<span class="keyword">this</span>);<span class="comment">// apply</span></span><br><span class="line">  <span class="keyword">this</span>.type = <span class="string">'child1'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><p>子类没有继承父类的原型方法只继承了父类构造函数中的属性和方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Parent1.prototype.method = (arg) =<span class="built_in">console</span>.log(arg);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> Child1().method); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><h2 id="二、借助原型链"><a href="#二、借助原型链" class="headerlink" title="二、借助原型链"></a>二、借助原型链</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = <span class="string">'parent2'</span>;</span><br><span class="line">  <span class="keyword">this</span>.arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">  <span class="keyword">this</span>.method = (arg) =<span class="built_in">console</span>.log(arg)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.type = <span class="string">'child2'</span></span><br><span class="line">&#125;</span><br><span class="line">Child2.prototype = <span class="keyword">new</span> Parent2();</span><br></pre></td></tr></table></figure><p>原型图如下<img src="https://user-images.githubusercontent.com/25027560/38763935-b449916e-3fd8-11e8-8b76-e12f58c20d27.png" alt="f9311957-d401-4bc0-961b-65f3f49d65ea"></p><h4 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h4><p>引用类型的属性被所有实例共享，实例之间会互相影响</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> c21 = <span class="keyword">new</span> Child2();</span><br><span class="line"><span class="keyword">let</span> c22 = <span class="keyword">new</span> Child2();</span><br><span class="line"></span><br><span class="line">c21.arr.push(<span class="number">4</span>);</span><br><span class="line"><span class="built_in">console</span>.log(c21.arr, c22.arr);</span><br><span class="line"><span class="comment">// 注意，下面是直接给实例添加method属性</span></span><br><span class="line"><span class="comment">// 只是修改了method指针，没有修改原型链上的method方法</span></span><br><span class="line"><span class="comment">// 只有修改引用对象才是真正的修改</span></span><br><span class="line">c21.method = <span class="string">'c21'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(Parent2);</span><br><span class="line"><span class="built_in">console</span>.log(c21, c22);</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/25027560/38763937-bad54c58-3fd8-11e8-9248-1f6b2954daf9.png" alt="c79f3ffe-030d-4753-9f32-361a2dffb9d2"></p><h2 id="三、组合（构造-原型链）"><a href="#三、组合（构造-原型链）" class="headerlink" title="三、组合（构造+原型链）"></a>三、组合（构造+原型链）</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent3</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = <span class="string">'parent3'</span>;</span><br><span class="line">  <span class="keyword">this</span>.arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child3</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  Parent3.call(<span class="keyword">this</span>);</span><br><span class="line">  <span class="keyword">this</span>.type = <span class="string">'child3'</span></span><br><span class="line">&#125;</span><br><span class="line">Child3.prototype = <span class="keyword">new</span> Parent3();</span><br></pre></td></tr></table></figure><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><p>每个实例不会再互相影响</p><h4 id="缺点-2"><a href="#缺点-2" class="headerlink" title="缺点"></a>缺点</h4><p>实例化时，父类被构造了两次，这没有必要call一次，new一次</p><h2 id="四、组合优化一"><a href="#四、组合优化一" class="headerlink" title="四、组合优化一"></a>四、组合优化一</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent4</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = <span class="string">'parent4'</span>;</span><br><span class="line">  <span class="keyword">this</span>.arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child4</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  Parent4.call(<span class="keyword">this</span>);</span><br><span class="line">  <span class="keyword">this</span>.type = <span class="string">'child4'</span></span><br><span class="line">&#125;</span><br><span class="line">Child4.prototype = Parent4.prototype;</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/25027560/38763939-c318a5fe-3fd8-11e8-9581-9e04e57976a4.png" alt="3dcc9c3e-5e1d-45bc-bcb5-72aaea635cc2"></p><h4 id="缺点-3"><a href="#缺点-3" class="headerlink" title="缺点"></a>缺点</h4><p>无法判断实例的构造函数是父类还是子类</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> c41 = <span class="keyword">new</span> Child4();</span><br><span class="line"><span class="keyword">let</span> c42 = <span class="keyword">new</span> Child4();</span><br><span class="line"><span class="built_in">console</span>.log(c41 <span class="keyword">instanceof</span> Child4, c41 <span class="keyword">instanceof</span> Parent4);</span><br><span class="line"><span class="comment">// true true</span></span><br></pre></td></tr></table></figure><p>但其实，构造函数就是父类本身</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(c41.constructor); <span class="comment">// Parent4</span></span><br></pre></td></tr></table></figure><p>很难得才通过<code>Parent4.call(this)</code>改变了构造函数的指向，现在又改回去了？天……不想看下去了行不行，兄dei，坚持一会就是胜利，别打瞌睡</p><p><code>Child4.prototype = Parent4.prototype</code>只是把<code>Child4</code>的<code>prototype</code>属性指针指向了<code>Parent4.prototype</code>这个引用对象而已，实际上<code>Parent4.prototype.constructor = Parent4</code><img src="https://user-images.githubusercontent.com/25027560/38763942-cdc97b40-3fd8-11e8-8f45-c7bdb95f8f5f.png" alt="af779508-30f5-43ea-8af8-ff25a308ccf9"></p><h2 id="五、组合优化二"><a href="#五、组合优化二" class="headerlink" title="五、组合优化二"></a>五、组合优化二</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent5</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = <span class="string">'parent5'</span>;</span><br><span class="line">  <span class="keyword">this</span>.arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child5</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  Parent5.call(<span class="keyword">this</span>);</span><br><span class="line">  <span class="keyword">this</span>.type = <span class="string">'child5'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 组成原型链</span></span><br><span class="line">Child5.prototype = <span class="built_in">Object</span>.create(Parent5.prototype);</span><br></pre></td></tr></table></figure><p>但是，这时候，实例对象的<code>constructor</code>依然是<code>Parent5</code></p><p><img src="https://user-images.githubusercontent.com/25027560/38763943-d3d9703a-3fd8-11e8-92d4-d161a335c80c.png" alt="f611911f-9fc1-4ff8-8da6-eb7874eeb335"></p><p>所以需要重新指定实例对象的构造器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Child5.prototype.constructor = Child5;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> c51 = <span class="keyword">new</span> Child5();</span><br><span class="line"><span class="keyword">let</span> c52 = <span class="keyword">new</span> Parent5();</span><br><span class="line"><span class="built_in">console</span>.log(c51 <span class="keyword">instanceof</span> Child5, c51 <span class="keyword">instanceof</span> Parent5);</span><br><span class="line"><span class="built_in">console</span>.log(c52 <span class="keyword">instanceof</span> Child5, c52 <span class="keyword">instanceof</span> Parent5);</span><br><span class="line"><span class="built_in">console</span>.log(c51.constructor, c52.constructor);</span><br><span class="line"><span class="comment">// true true</span></span><br><span class="line"><span class="comment">// false true</span></span><br><span class="line"><span class="comment">// Child5 Parent5</span></span><br></pre></td></tr></table></figure><h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p><a href="https://mydearest.cn/js%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1%E5%AE%9E%E7%8E%B0%E7%BB%A7%E6%89%BF.html">js创建对象实现继承</a></p>]]></content:encoded>
      
      <comments>http://mydearest.cn/2019/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JS%E7%9A%84%E7%BB%A7%E6%89%BF.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>深入理解JS的类型、值和类型转换</title>
      <link>http://mydearest.cn/2019/ECMAScript%202016%E3%80%812017%E3%80%812018%20%E6%96%B0%E7%89%B9%E6%80%A7%20.html</link>
      <guid>http://mydearest.cn/2019/ECMAScript%202016%E3%80%812017%E3%80%812018%20%E6%96%B0%E7%89%B9%E6%80%A7%20.html</guid>
      <pubDate>Wed, 06 Mar 2019 16:23:52 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/25027560/38468332-c0336d1c-3b76-11e8-93b5-94f73acab1c6.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p><img src="https://user-images.githubusercontent.com/25027560/38468332-c0336d1c-3b76-11e8-93b5-94f73acab1c6.png" alt="image"></p><hr><a id="more"></a><h2 id="一、ECMAScript-2016"><a href="#一、ECMAScript-2016" class="headerlink" title="一、ECMAScript 2016"></a>一、ECMAScript 2016</h2><h3 id="1、Array-prototype-includes"><a href="#1、Array-prototype-includes" class="headerlink" title="1、Array.prototype.includes"></a>1、Array.prototype.includes</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/includes" target="_blank" rel="noopener">Array.prototype.includes() - JavaScript | MDN</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="literal">NaN</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (arr.indexOf(<span class="number">3</span>) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="literal">true</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (arr.includes(<span class="number">3</span>)) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="literal">true</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">arr.indexOf(<span class="literal">NaN</span>)</span><br><span class="line"><span class="comment">// -1  无法识别NaN</span></span><br><span class="line">arr.includes(<span class="literal">NaN</span>);</span><br><span class="line"><span class="comment">// true   可以识别NaN</span></span><br></pre></td></tr></table></figure><h3 id="2、指数（幂）运算符"><a href="#2、指数（幂）运算符" class="headerlink" title="2、指数（幂）运算符 **"></a>2、指数（幂）运算符 **</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="comment">// 8</span></span><br><span class="line"></span><br><span class="line"><span class="number">2</span> ** <span class="number">3</span></span><br><span class="line"><span class="comment">// 8</span></span><br></pre></td></tr></table></figure><h2 id="二、ECMAScript-2017"><a href="#二、ECMAScript-2017" class="headerlink" title="二、ECMAScript 2017"></a>二、ECMAScript 2017</h2><h3 id="1、Object-values"><a href="#1、Object-values" class="headerlink" title="1、Object.values()"></a>1、Object.values()</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/values" target="_blank" rel="noopener">Object.values() - JavaScript | MDN</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">foo</span>: <span class="string">"bar"</span>, <span class="attr">baz</span>: <span class="number">42</span> &#125;;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.values(obj)); <span class="comment">// ['bar', 42]</span></span><br></pre></td></tr></table></figure><h3 id="2、Object-entries"><a href="#2、Object-entries" class="headerlink" title="2、Object.entries()"></a>2、Object.entries()</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/entries" target="_blank" rel="noopener">Object.entries() - JavaScript | MDN</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">foo</span>: <span class="string">'bar'</span>, <span class="attr">baz</span>: <span class="number">42</span> &#125;;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.entries(obj)); <span class="comment">// [ ['foo', 'bar'], ['baz', 42] ]</span></span><br></pre></td></tr></table></figure><h3 id="3、字符串填充-String-padding"><a href="#3、字符串填充-String-padding" class="headerlink" title="3、字符串填充 String padding"></a>3、字符串填充 String padding</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/padStart" target="_blank" rel="noopener">String.prototype.padStart() - JavaScript | MDN</a><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/padEnd" target="_blank" rel="noopener">String.prototype.padEnd() - JavaScript | MDN</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'abc'</span>.padStart(<span class="number">10</span>);         <span class="comment">// "       abc"</span></span><br><span class="line"><span class="string">'abc'</span>.padStart(<span class="number">10</span>, <span class="string">"foo"</span>);  <span class="comment">// "foofoofabc"</span></span><br><span class="line"><span class="string">'abc'</span>.padStart(<span class="number">6</span>,<span class="string">"123465"</span>); <span class="comment">// "123abc"</span></span><br><span class="line"><span class="string">'abc'</span>.padStart(<span class="number">8</span>, <span class="string">"0"</span>);     <span class="comment">// "00000abc"</span></span><br><span class="line"><span class="string">'abc'</span>.padStart(<span class="number">1</span>);          <span class="comment">// "abc"</span></span><br><span class="line"></span><br><span class="line"><span class="string">'abc'</span>.padEnd(<span class="number">10</span>);          <span class="comment">// "abc       "</span></span><br><span class="line"><span class="string">'abc'</span>.padEnd(<span class="number">10</span>, <span class="string">"foo"</span>);   <span class="comment">// "abcfoofoof"</span></span><br><span class="line"><span class="string">'abc'</span>.padEnd(<span class="number">6</span>, <span class="string">"123456"</span>); <span class="comment">// "abc123"</span></span><br><span class="line"><span class="string">'abc'</span>.padEnd(<span class="number">1</span>);           <span class="comment">// "abc"</span></span><br></pre></td></tr></table></figure><p>注意，Emojis和双字节字符会占据两位</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'heart'</span>.padStart(<span class="number">10</span>, <span class="string">"❤️"</span>); <span class="comment">// '❤️❤️❤heart'</span></span><br></pre></td></tr></table></figure><h3 id="4、Object-getOwnPropertyDescriptors"><a href="#4、Object-getOwnPropertyDescriptors" class="headerlink" title="4、Object.getOwnPropertyDescriptors"></a>4、Object.getOwnPropertyDescriptors</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor" target="_blank" rel="noopener">Object.getOwnPropertyDescriptor() - JavaScript | MDN</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.getOwnPropertyDescriptor(obj, prop)</span><br></pre></td></tr></table></figure><p><code>Object.getOwnPropertyDescriptor()</code>方法返回指定对象上一个自有属性对应的属性描述符。（自有属性指的是直接赋予该对象的属性，不需要从原型链上进行查找的属性）</p><h3 id="5、函数参数结尾逗号"><a href="#5、函数参数结尾逗号" class="headerlink" title="5、函数参数结尾逗号"></a>5、函数参数结尾逗号</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">a, b,</span>) </span>&#123;&#125;</span><br><span class="line"><span class="comment">// 注意，参数b后面多了个逗号，不会报语法错误</span></span><br></pre></td></tr></table></figure><h3 id="6、Async-Await"><a href="#6、Async-Await" class="headerlink" title="6、Async/Await"></a>6、Async/Await</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/async_function" target="_blank" rel="noopener">async function - JavaScript | MDN</a></p><h2 id="三、ECMAScript-2018"><a href="#三、ECMAScript-2018" class="headerlink" title="三、ECMAScript 2018"></a>三、ECMAScript 2018</h2><h3 id="1、共享内存与原子操作"><a href="#1、共享内存与原子操作" class="headerlink" title="1、共享内存与原子操作"></a>1、共享内存与原子操作</h3><p>即使有event loop的”伪多线程“和Service Worker的强力增援，但依然掩盖不了JS是单线程的事实。</p><p>共享内存与原子操作，给JS带来了多线程的功能，允许开发人员自行管理内存来开发高性能高并发的程序。</p><p>直到目前为止，我们只能通过<code>postMessage</code>在JS主线程和web worker之间通信，传输数据。</p><h3 id="2、非转义序列的模板字符串"><a href="#2、非转义序列的模板字符串" class="headerlink" title="2、非转义序列的模板字符串"></a>2、非转义序列的模板字符串</h3><p><a href="http://esnext.justjavac.com/proposal/template-literal-revision.html" target="_blank" rel="noopener">非转义序列的模板字符串 | esnext | es6 es7 es2017 es2018 es2019</a></p><h3 id="3、对象展开运算符"><a href="#3、对象展开运算符" class="headerlink" title="3、对象展开运算符"></a>3、对象展开运算符</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123; firstName, age, ...rest &#125; = &#123;</span><br><span class="line">  firstName: <span class="string">'a'</span>,</span><br><span class="line">  age: <span class="number">18</span>,</span><br><span class="line">  a: <span class="number">1</span>,</span><br><span class="line">  b: <span class="number">2</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">firstName; <span class="comment">// 'a',</span></span><br><span class="line">age; <span class="comment">// 18</span></span><br><span class="line">rest;</span><br><span class="line"><span class="comment">// 重点看这里 &#123; a: 1, b: 2 &#125;</span></span><br></pre></td></tr></table></figure><h3 id="4、Promise-prototype-finally"><a href="#4、Promise-prototype-finally" class="headerlink" title="4、Promise.prototype.finally()"></a>4、Promise.prototype.finally()</h3><h3 id="5、异步迭代器"><a href="#5、异步迭代器" class="headerlink" title="5、异步迭代器"></a>5、异步迭代器</h3><p>提供了<code>for-await-of</code>，异步迭代，等待每个promise被resolve再执行下一个</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promises = [</span><br><span class="line">  <span class="keyword">new</span> <span class="built_in">Promise</span>(resolve =resolve(<span class="number">1</span>)),</span><br><span class="line">  <span class="keyword">new</span> <span class="built_in">Promise</span>(resolve =resolve(<span class="number">2</span>)),</span><br><span class="line">  <span class="keyword">new</span> <span class="built_in">Promise</span>(resolve =resolve(<span class="number">3</span>))</span><br><span class="line">];</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// old</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">test1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> obj <span class="keyword">of</span> promises) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(obj);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">test1(); <span class="comment">// </span></span><br><span class="line"><span class="comment">// Promise &#123;&lt;resolved&gt;: 1&#125;</span></span><br><span class="line"><span class="comment">// Promise &#123;&lt;resolved&gt;: 2&#125;</span></span><br><span class="line"><span class="comment">// Promise &#123;&lt;resolved&gt;: 3&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// new</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">test2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> <span class="keyword">await</span> (<span class="keyword">const</span> obj <span class="keyword">of</span> promises) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(obj);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">test2();</span><br><span class="line"><span class="comment">// 1, 2, 3</span></span><br></pre></td></tr></table></figure><h3 id="6、正则表达式相关"><a href="#6、正则表达式相关" class="headerlink" title="6、正则表达式相关"></a>6、正则表达式相关</h3><ul><li><code>dotAll</code> 模式，使 . 可以匹配任意字符</li><li>命名捕获组，可以理解为增加一个引用</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> regex = <span class="regexp">/(\d&#123;4&#125;)-(\d&#123;2&#125;)-(\d&#123;2&#125;)/</span>;</span><br><span class="line"><span class="keyword">const</span> matchers = regex.exec(<span class="string">'2015-01-02'</span>);</span><br><span class="line">matchers[<span class="number">0</span>];    <span class="comment">// 2015-01-02</span></span><br><span class="line">matchers[<span class="number">1</span>];    <span class="comment">// 2015</span></span><br><span class="line">matchers[<span class="number">2</span>];    <span class="comment">// 01</span></span><br><span class="line">matchers[<span class="number">3</span>];    <span class="comment">// 02</span></span><br></pre></td></tr></table></figure><ul><li>反向断言 Lookbehind Assertions</li><li>Unicode转义 Unicode Property Escapes</li></ul>]]></content:encoded>
      
      <comments>http://mydearest.cn/2019/ECMAScript%202016%E3%80%812017%E3%80%812018%20%E6%96%B0%E7%89%B9%E6%80%A7%20.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>深入理解JS的类型、值和类型转换</title>
      <link>http://mydearest.cn/2019/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JS%E7%9A%84%E7%B1%BB%E5%9E%8B%E3%80%81%E5%80%BC%E5%92%8C%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2.html</link>
      <guid>http://mydearest.cn/2019/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JS%E7%9A%84%E7%B1%BB%E5%9E%8B%E3%80%81%E5%80%BC%E5%92%8C%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2.html</guid>
      <pubDate>Tue, 05 Mar 2019 14:44:52 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;一、七种内置类型和常见引用类型&quot;&gt;&lt;a href=&quot;#一、七种内置类型和常见引用类型&quot; class=&quot;headerlink&quot; title=&quot;一、七种内置类型和常见引用类型&quot;&gt;&lt;/a&gt;一、七种内置类型和常见引用类型&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/25027560/37508449-123fc606-292e-11e8-9cf8-9667338b9ac4.png&quot; alt=&quot;精简&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/25027560/37508456-1c2c0648-292e-11e8-94d7-541f20942869.png&quot; alt=&quot;复杂&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="一、七种内置类型和常见引用类型"><a href="#一、七种内置类型和常见引用类型" class="headerlink" title="一、七种内置类型和常见引用类型"></a>一、七种内置类型和常见引用类型</h2><p><img src="https://user-images.githubusercontent.com/25027560/37508449-123fc606-292e-11e8-9cf8-9667338b9ac4.png" alt="精简"></p><p><img src="https://user-images.githubusercontent.com/25027560/37508456-1c2c0648-292e-11e8-94d7-541f20942869.png" alt="复杂"></p><hr><a id="more"></a><h2 id="二、特殊的null"><a href="#二、特殊的null" class="headerlink" title="二、特殊的null"></a>二、特殊的<code>null</code></h2><p>用<code>typeof</code>来检查上述七种类型时，返回的是对应的类型字符串值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="literal">null</span> === <span class="string">'ogject'</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p><code>null</code>是唯一一个用<code>typeof</code>检测会返回<code>object</code>的<strong>基本类型值</strong>（注意‘基本’两字）</p><p>不同的对象在底层都表示为二进制在JavaScript中二进制前三位为0的话都会被判断为object类型null的二进制表示全是0，自然前三位也是0所以 typeof null === “object”</p><h2 id="三、引用类型的子类型：typeof-引用类型-what"><a href="#三、引用类型的子类型：typeof-引用类型-what" class="headerlink" title="三、引用类型的子类型：typeof [引用类型] === what ?"></a>三、引用类型的子类型：typeof [引用类型] === what ?</h2><p>上面的图中虽然列出了七种引用类型，但是<code>typeof ‘引用类型’ === ‘object’</code>一定成立吗？</p><p>不，还有一种情况：<code>typeof ‘某些引用类型’ === ‘function’</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="built_in">Function</span>; <span class="comment">// 'function'</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="keyword">new</span> <span class="built_in">Function</span>(); <span class="comment">// 'function'</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;; <span class="comment">// 'function'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typeof</span> <span class="built_in">Array</span>; <span class="comment">// 'function'</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="built_in">Array</span>(); <span class="comment">// 'object'</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="keyword">new</span> <span class="built_in">Array</span>(); <span class="comment">// 'object'</span></span><br><span class="line"><span class="keyword">typeof</span> []; <span class="comment">// 'object'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typeof</span> <span class="built_in">Boolean</span>; <span class="comment">// "function"</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="built_in">Boolean</span>(); <span class="comment">// "boolean"</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="keyword">new</span> <span class="built_in">Boolean</span>(); <span class="comment">// "object"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typeof</span> <span class="built_in">Math</span>; <span class="comment">// 'object'</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="built_in">Math</span>(); <span class="comment">// Math is not a function</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="keyword">new</span> <span class="built_in">Math</span>(); <span class="comment">// Math is not a constructor</span></span><br></pre></td></tr></table></figure><h3 id="1、引用类型中的函数"><a href="#1、引用类型中的函数" class="headerlink" title="1、引用类型中的函数"></a>1、引用类型中的函数</h3><p>先看前三句，原来typeof除了能判断<code>基本类型</code>和<code>object</code>之外，还能判断<code>function</code>类型，函数也属于对象</p><h3 id="2、引用类型的子类型"><a href="#2、引用类型的子类型" class="headerlink" title="2、引用类型的子类型"></a>2、引用类型的子类型</h3><p>拿<code>Array</code>举例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="built_in">Array</span>; <span class="comment">// 'function'</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="built_in">Array</span>(); <span class="comment">// 'object'</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="keyword">new</span> <span class="built_in">Array</span>(); <span class="comment">// 'object'</span></span><br><span class="line"><span class="keyword">typeof</span> []; <span class="comment">// 'object'</span></span><br></pre></td></tr></table></figure><p><code>Array</code>是个构造函数，所以直接打印出function但构造出来的<code>Array()</code>却又是另一回事了，构造出来的结果是个数组，自然属于引用类型，所以也就打印出了<code>‘object’</code></p><p>构造函数 Array(..) 不要求必须带 new 关键字。不带时，它会被自动补上。 因此 Array(1,2,3) 和 new Array(1,2,3) 的效果是一样的</p><h3 id="3、引用类型中的基本包装类型"><a href="#3、引用类型中的基本包装类型" class="headerlink" title="3、引用类型中的基本包装类型"></a>3、引用类型中的基本包装类型</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="built_in">Boolean</span>; <span class="comment">// "function"</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="built_in">Boolean</span>(); <span class="comment">// "boolean"</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="keyword">new</span> <span class="built_in">Boolean</span>(); <span class="comment">// "object"</span></span><br></pre></td></tr></table></figure><p><code>Boolean</code>是个构造函数，第一句没问题<code>Boolean()</code>直接执行，得出了布尔值，所以得到了<code>‘boolean’</code></p><p>而new出来的是个Boolean对象，具体来说就是：<code>通过构造函数创建出来的是封装了基本类型值的封装对象</code></p><p>这里用<code>String</code>来举个例子吧，看到了吗，一个封装对象<img src="https://user-images.githubusercontent.com/25027560/37508489-350e6e80-292e-11e8-81f2-3124d28d219e.png" alt="封装对象"></p><p>但是，不推荐使用这种封装对象，举个例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="built_in">Boolean</span>(<span class="literal">false</span>);</span><br><span class="line"><span class="keyword">if</span> (!a) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Oops'</span>); <span class="comment">// false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>a是个对象，对象永远是真。</p><h3 id="4、Math到底是什么？"><a href="#4、Math到底是什么？" class="headerlink" title="4、Math到底是什么？"></a>4、Math到底是什么？</h3><p>Math和Global（浏览器中替代为window）都是内置的对象，并不是引用类型的一种</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="built_in">Math</span>; <span class="comment">// 'object'</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="built_in">Math</span>(); <span class="comment">// Math is not a function</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="keyword">new</span> <span class="built_in">Math</span>(); <span class="comment">// Math is not a constructor</span></span><br></pre></td></tr></table></figure><p>既不是函数，也不是构造器。</p><h2 id="四、typeof的安全防范机制"><a href="#四、typeof的安全防范机制" class="headerlink" title="四、typeof的安全防范机制"></a>四、typeof的安全防范机制</h2><p>首先，我们需要知道<code>underfined</code>和<code>undeclared</code>的区别未定义与未声明</p><p>但是，对于typeof来说，这两者都一样，返回的都是underfined</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a;</span><br><span class="line"><span class="keyword">typeof</span> a; <span class="comment">// 'underfined'</span></span><br><span class="line"><span class="keyword">typeof</span> b; <span class="comment">// 'underfined'</span></span><br></pre></td></tr></table></figure><p>很明显，我们知道b就是undeclared（未声明的），但在typeof看来都是一样</p><p>这个特性，可以拿来做些什么呢？</p><p>举个简单的例子，在程序中使用全局变量 DEBUG 作为“调试模式”的开关。在输出调试信 息到控制台之前，我们会检查 DEBUG 变量是否已被声明。顶层的全局变量声明 var DEBUG = true 只在 debug.js 文件中才有，而该文件只在开发和测试时才被加载到浏览器，在生产环 境中不予加载。</p><p>问题是如何在程序中检查全局变量 DEBUG 才不会出现 ReferenceError 错误。这时 typeof 的 安全防范机制就成了我们的好帮手:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这样会抛出错误</span></span><br><span class="line"><span class="keyword">if</span> (DEBUG) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Debugging is starting'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 这样是安全的</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> DEBUG !== <span class="string">'undefined'</span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Debugging is starting'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这不仅对用户定义的变量(比如 DEBUG)有用，对内建的 API 也有帮助:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> atob === <span class="string">"undefined"</span>) &#123;</span><br><span class="line">         atob = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="comment">/*..*/</span> &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="五、值"><a href="#五、值" class="headerlink" title="五、值"></a>五、值</h2><p>这一part引用自<a href="https://yangbo5207.github.io/wutongluo/ji-chu-jin-jie-xi-lie/yi-3001-nei-cun-kong-jian-xiang-jie.html" target="_blank" rel="noopener">一、内存空间详解 · Sample GitBook</a></p><p>JS的执行上下文生成之后，会创建一个叫做变量对象的特殊对象（关于变量对象在我的其他文章中有讲到），JS的基础类型都保存在变量对象中</p><p>严格意义上来说，变量对象也是存放于堆内存中，但是由于变量对象的特殊职能，我们在理解时仍然需要将其于堆内存区分开来。</p><p>但引用数据类型的值是保存在堆内存中的对象。JavaScript不允许直接访问堆内存中的位置，因此我们不能直接操作对象的堆内存空间。在操作对象时，实际上是在操作对象的引用而不是实际的对象。因此，引用类型的值都是按引用访问的。这里的引用，我们可以理解为保存在变量对象中的一个地址，该地址与堆内存的实际值相关联。</p><p><img src="https://user-images.githubusercontent.com/25027560/37508497-409cd7fa-292e-11e8-8bc4-a62effd0f3c8.png" alt="3719a7f3-3915-4719-93d8-7629fa5b47bb"></p><h2 id="六、强制类型转换"><a href="#六、强制类型转换" class="headerlink" title="六、强制类型转换"></a>六、强制类型转换</h2><p>《you don’t know JS》中 第一部分第4章</p><p>类型转换发生在静态类型语言的编译阶段，而强制类型转换则发生在动态类型语言的运行时(runtime)。</p><p>然而在 JavaScript 中通常将它们统称为强制类型转换，我个人则倾向于用“隐式强制类型转换”(implicit coercion)和“显式强制类型转换”(explicit coercion)来区分。</p><h3 id="1、抽象值操作"><a href="#1、抽象值操作" class="headerlink" title="1、抽象值操作"></a>1、抽象值操作</h3><p>介绍显式和隐式强制类型转换之前，我们需要先掌握字符串、数字和布尔值之间类型转换的基本规则</p><p>1️⃣<strong>ToString</strong>toString() 可以被显式调用，或者在需要字符串化时自动调用</p><p>null 转换为 “null”，undefined 转换为 “undefined”，true 转换为 “true”。数字的字符串化则遵循通用规则极小和极大的 数字使用指数形式:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.07 连续乘以七个 1000</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1.07</span> * <span class="number">1000</span> * <span class="number">1000</span> * <span class="number">1000</span> * <span class="number">1000</span> * <span class="number">1000</span> * <span class="number">1000</span> * <span class="number">1000</span>;</span><br><span class="line"><span class="comment">// 七个1000一共21位数字 </span></span><br><span class="line">a.toString(); <span class="comment">// "1.07e21"</span></span><br></pre></td></tr></table></figure><p>数组的默认 toString() 方法经过了重新定义，将所有单元字符串化以后再用 “,” 连接起 来</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"> a.toString(); <span class="comment">// "1,2,3"</span></span><br></pre></td></tr></table></figure><p>2️⃣ <strong>ToNumber</strong>其中 true 转换为 1，false 转换为 0。undefined 转换为 NaN，null 转换为 0。处理失败 时返回 NaN(处理数字常量失败时会产生语法错误)</p><p>3️⃣ <strong>ToBoolean</strong>先看什么是假值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">• undefined</span><br><span class="line">• null</span><br><span class="line">• false</span><br><span class="line">• +0、-0 和 NaN</span><br><span class="line">• &quot;&quot;</span><br></pre></td></tr></table></figure><p>假值的布尔强制类型转换结果为 false。从逻辑上说，假值列表以外的都应该是真值(truth)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="built_in">Boolean</span>(<span class="literal">false</span>);</span><br><span class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> <span class="built_in">Number</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">var</span> c = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">''</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> d1 = <span class="built_in">Boolean</span>( a &amp;&amp; b &amp;&amp; c );</span><br><span class="line"><span class="keyword">var</span> d2 = a &amp;&amp; b &amp;&amp; c;</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/25027560/37508500-49f02fd2-292e-11e8-929b-168ea4309baf.png" alt="63754230-e3da-4363-a04d-cccca7030a15"></p><p>如果假值对象并非封装了假值的对象，那它究竟是什么?值得注意的是，虽然 JavaScript 代码中会出现假值对象，但它实际上并不属于 JavaScript 语言的范畴。浏览器在某些特定情况下，在常规 JavaScript 语法基础上自己创建了一些外来(exotic) 值，这些就是“假值对象”。假值对象看起来和普通对象并无二致(都有属性，等等)，但将它们强制类型转换为布尔 值时结果为 false。</p><p><strong>真值就是假值列表之外的值</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">'false'</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="string">'0'</span>;</span><br><span class="line"><span class="keyword">var</span> c = <span class="string">"''"</span>;</span><br><span class="line"><span class="keyword">var</span> d1 = <span class="built_in">Boolean</span>(a &amp;&amp; b &amp;&amp; c);</span><br><span class="line"><span class="keyword">var</span> d2 = a &amp;&amp; b &amp;&amp; c</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/25027560/37508506-4e686bd8-292e-11e8-881b-81d56ac71281.png" alt="985c49a4-061f-42fe-978c-83f7724d8867"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">"0"</span>;</span><br><span class="line"><span class="keyword">var</span> b = [];</span><br><span class="line"><span class="keyword">var</span> c = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> d = <span class="string">""</span>;</span><br><span class="line"><span class="keyword">var</span> e = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> f = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">var</span> g;</span><br><span class="line"><span class="built_in">Boolean</span>( a ); <span class="comment">// true  特别注意这个，字符串0和空字符串不一样</span></span><br><span class="line"><span class="built_in">Boolean</span>( b ); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Boolean</span>( c ); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Boolean</span>( d ); <span class="comment">// false  和第一个比，空字符串是false</span></span><br><span class="line"><span class="built_in">Boolean</span>( e ); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Boolean</span>( f ); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Boolean</span>( g ); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h3 id="2、显式类型转换"><a href="#2、显式类型转换" class="headerlink" title="2、显式类型转换"></a>2、显式类型转换</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字符串转换</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">42</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="built_in">String</span>(a);</span><br><span class="line"><span class="comment">// 数字转换</span></span><br><span class="line"><span class="keyword">var</span> c = <span class="string">'3.14'</span>;</span><br><span class="line"><span class="keyword">var</span> d = <span class="built_in">Number</span>(c);</span><br><span class="line"><span class="comment">// 布尔值转换</span></span><br><span class="line"><span class="keyword">var</span> e = [];</span><br><span class="line"><span class="keyword">var</span> f = <span class="built_in">Boolean</span>(e)</span><br></pre></td></tr></table></figure><h3 id="3、隐式强制类型转换"><a href="#3、隐式强制类型转换" class="headerlink" title="3、隐式强制类型转换"></a>3、隐式强制类型转换</h3><p>1️⃣字符串和数字之间的隐式转换</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">'42'</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="string">'0'</span>;</span><br><span class="line"><span class="keyword">var</span> c = <span class="number">42</span>;</span><br><span class="line"><span class="keyword">var</span> d = <span class="number">0</span>;</span><br><span class="line">a + b; <span class="comment">// "420" 这个地方，注意一下</span></span><br><span class="line">c + d; <span class="comment">// 42</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log([] + &#123;&#125;); <span class="comment">// [object object]</span></span><br><span class="line"><span class="built_in">console</span>.log(&#123;&#125; + []); <span class="comment">// ?这会是多少呢？</span></span><br></pre></td></tr></table></figure><p>《you don’t know JS 》中5.1.3章节是这样说的</p><p>还有一个坑常被提到(涉及强制类型转换，参见第 4 章)[] + {}; // “[object Object]”{} + []; // 0表面上看 + 运算符根据第一个操作数([] 或 {})的不同会产生不同的结果，实则不然。 第一行代码中，{} 出现在 + 运算符表达式中，因此它被当作一个值(空对象)来处理。第4 章讲过 [] 会被强制类型转换为 “”，而 {} 会被强制类型转换为 “[object Object]”。但在第二行代码中，{} 被当作一个独立的空代码块(不执行任何操作)。代码块结尾不需 要分号，所以这里不存在语法上的问题。最后 + [] 将 [] 显式强制类型转换(参见第 4 章) 为 0。</p><p>但目前的chrome浏览器控制台是这样的<img src="https://user-images.githubusercontent.com/25027560/37508514-5698c8fc-292e-11e8-9220-52136c53d5c4.png" alt="034d7fa4-b144-4028-a346-0a52a3ab7faa"></p><p>{} 其实应该当成一个代码块，而不是一个 Object，当你在console.log使用的时候，{} 被当成了一个 Object<img src="https://user-images.githubusercontent.com/25027560/37509112-ef5b653e-2930-11e8-8456-824fd66271da.png" alt="8c597cc9-d2e2-4a51-ad8c-dd1a25ac27db"></p><p>2️⃣ 隐式强制类型转换为布尔值下面的情况会发生 布尔值隐式强制类型转换。</p><ul><li>(1)if (..)语句中的条件判断表达式。</li><li>(2)for ( .. ; .. ; .. )语句中的条件判断表达式(第二个)。</li><li>(3) while (..) 和 do..while(..) 循环中的条件判断表达式。</li><li>(4)? :中的条件判断表达式。</li><li>(5) 逻辑运算符 ||(逻辑或)和 &amp;&amp;(逻辑与)左边的操作数(作为条件判断表达式)。</li></ul><p>3️⃣ || 与 &amp;&amp;就一句话，理解了就万岁，称之为“操作数选择器”</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a || b;</span><br><span class="line"><span class="comment">// 大致相当于(roughly equivalent to): a ? a : b;</span></span><br><span class="line">a &amp;&amp; b;</span><br><span class="line"><span class="comment">// 大致相当于(roughly equivalent to): a ? b : a;</span></span><br></pre></td></tr></table></figure><h3 id="4、-与"><a href="#4、-与" class="headerlink" title="4、== 与 ==="></a>4、== 与 ===</h3><ul><li>常见的误区是“== 检查值是否相等，=== 检查值和类型是否相等”</li><li>正确的解释是:“== 允许在相等比较中进行强制类型转换，而 === 不允许。</li></ul>]]></content:encoded>
      
      <comments>http://mydearest.cn/2019/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JS%E7%9A%84%E7%B1%BB%E5%9E%8B%E3%80%81%E5%80%BC%E5%92%8C%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>React Refs揭密</title>
      <link>http://mydearest.cn/React%20Refs%E5%92%8CDOM%E6%8F%AD%E5%AF%86.html</link>
      <guid>http://mydearest.cn/React%20Refs%E5%92%8CDOM%E6%8F%AD%E5%AF%86.html</guid>
      <pubDate>Sun, 17 Feb 2019 15:25:48 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;什么是Ref&quot;&gt;&lt;a href=&quot;#什么是Ref&quot; class=&quot;headerlink&quot; title=&quot;什么是Ref&quot;&gt;&lt;/a&gt;什么是Ref&lt;/h2&gt;&lt;p&gt;React的官方介绍是这样的：&lt;/p&gt;
&lt;p&gt;In the typical React dataflow, props are the only way that parent components interact with their children. To modify a child, you re-render it with new props. However, there are a few cases where you need to imperatively modify a child outside of the typical dataflow. The child to be modified could be an instance of a React component, or it could be a DOM element. For both of these cases, React provides an escape hatch.&lt;/p&gt;
&lt;p&gt;其中提到了这几个概念：&lt;/p&gt;
&lt;p&gt;在典型的React数据流理念中，父组件跟子组件的交互都是通过传递属性(properties)实现的。如果父组件需要修改子组件，只需要将新的属性传递给子组件，由子组件来实现具体的绘制逻辑。&lt;/p&gt;
&lt;p&gt;在特殊的情况下，如果你需要命令式(imperatively)的修改子组件，React也提供了应急的处理办法–Ref。&lt;/p&gt;
&lt;p&gt;Ref 既支持修改DOM元素，也支持修改自定义的组件。&lt;/p&gt;
&lt;hr&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="什么是Ref"><a href="#什么是Ref" class="headerlink" title="什么是Ref"></a>什么是Ref</h2><p>React的官方介绍是这样的：</p><p>In the typical React dataflow, props are the only way that parent components interact with their children. To modify a child, you re-render it with new props. However, there are a few cases where you need to imperatively modify a child outside of the typical dataflow. The child to be modified could be an instance of a React component, or it could be a DOM element. For both of these cases, React provides an escape hatch.</p><p>其中提到了这几个概念：</p><p>在典型的React数据流理念中，父组件跟子组件的交互都是通过传递属性(properties)实现的。如果父组件需要修改子组件，只需要将新的属性传递给子组件，由子组件来实现具体的绘制逻辑。</p><p>在特殊的情况下，如果你需要命令式(imperatively)的修改子组件，React也提供了应急的处理办法–Ref。</p><p>Ref 既支持修改DOM元素，也支持修改自定义的组件。</p><hr><a id="more"></a><h2 id="什么是声明式编程-Declarative-Programming"><a href="#什么是声明式编程-Declarative-Programming" class="headerlink" title="什么是声明式编程(Declarative Programming)"></a>什么是声明式编程(Declarative Programming)</h2><p>值得一提的是当中声明式编程(Declarative Programming)和命令式编程(Imperative Programming)的区别。声明式编程的特点是只描述要实现的结果，而不关心如何一步一步实现的，而命令式编程则相反，必须每个步骤都写清楚。我们可以根据语义直观的理解代码的功能是：针对数组的每一个元素，将它的值打印出来。不必关心实现其的细节。而命令式编程必须将每行代码读懂，然后再整合起来理解总体实现的功能。</p><p>React有2个基石设计理念：一个是声明式编程，一个是函数式编程。函数式编程以后有机会再展开讲。声明式编程的特点体现在2方面：</p><p>组件定义的时候，所有的实现逻辑都封装在组件的内部，通过state管理，对外只暴露属性。</p><p>组件使用的时候，组件调用者通过传入不同属性的值来达到展现不同内容的效果。一切效果都是事先定义好的，至于效果是怎么实现的，组件调用者不需要关心。</p><p>因此，在使用React的时候，一般很少需要用到Ref。那么，Ref的使用场景又是什么？</p><h2 id="Ref使用场景"><a href="#Ref使用场景" class="headerlink" title="Ref使用场景"></a>Ref使用场景</h2><p>React官方文档是这么说的：</p><p>There are a few good use cases for refs: Managing focus, text selection, or media playback.Triggering imperative animations.Integrating with third-party DOM libraries. Avoid using refs for anything that can be done declaratively.</p><p>简单理解就是，控制一些DOM原生的效果，如输入框的聚焦效果和选中效果等；触发一些命令式的动画；集成第三方的DOM库。最后还补了一句：如果要实现的功能可以通过声明式的方式实现，就不要借助Ref。</p><p>通常我们会利用 render 方法得到一个 App 组件的实例，然后就可以对它做一些操作。但在组件内，JSX 是不会返回一个组件的实例的，它只是一个ReactElement，只是告诉你，React被挂载的组件应该什么样：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myApp = &lt;App /&gt;</span><br></pre></td></tr></table></figure><p>refs就是由此而生，它是React组件中非常特殊的props， 可以附加到任何一个组件上，从字面意思上看，refs即reference，组件被调用时会创建一个该组件的实例，而refd就会指向这个实例。</p><h2 id="Ref用法"><a href="#Ref用法" class="headerlink" title="Ref用法"></a>Ref用法</h2><p>如果作用在原生的DOM元素上，通过Ref获取的是DOM元素，可以直接操作DOM的API：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomTextInput</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">constructor</span>(props) &#123;    </span><br><span class="line">        <span class="keyword">super</span>(props);        </span><br><span class="line">         <span class="keyword">this</span>.focusTextInput = <span class="keyword">this</span>.focusTextInput.bind(<span class="keyword">this</span>);  </span><br><span class="line">    &#125; </span><br><span class="line">    focusTextInput() &#123;    </span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.myTextInput !== <span class="literal">null</span>) &#123;         </span><br><span class="line">             <span class="keyword">this</span>.textInput.current.focus();    </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    render() &#123;    </span><br><span class="line">         <span class="keyword">return</span> (      </span><br><span class="line">             &lt;div&gt;        </span><br><span class="line">                 &lt;input type=<span class="string">"text"</span> ref=&#123;(ref) =&gt; <span class="keyword">this</span>.myTextInput = ref&#125; /&gt;        </span><br><span class="line">                 &lt;input type=<span class="string">"button"</span> value=<span class="string">"Focus the text input"</span> onClick=&#123;<span class="keyword">this</span>.focusTextInput&#125;/&gt;      </span><br><span class="line">             &lt;<span class="regexp">/div&gt;    </span></span><br><span class="line"><span class="regexp"> </span></span><br><span class="line"><span class="regexp">         );  </span></span><br><span class="line"><span class="regexp">     &#125; </span></span><br><span class="line"><span class="regexp"> &#125;</span></span><br></pre></td></tr></table></figure><p> 如果作用在自定义组件，Ref获取的是组件的实例，可以直接操作组件内的任意方法：</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">AutoFocusTextInput</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">constructor</span>(props) &#123;    </span><br><span class="line">        <span class="keyword">super</span>(props);    </span><br><span class="line">         <span class="keyword">this</span>.textInput = React.createRef();  </span><br><span class="line">    &#125;  </span><br><span class="line">    componentDidMount() &#123;    </span><br><span class="line">        <span class="keyword">this</span>.textInput.current.focusTextInput();  </span><br><span class="line">    &#125;  </span><br><span class="line">    render() &#123;    </span><br><span class="line">        <span class="keyword">return</span> (      </span><br><span class="line">            &lt;CustomTextInput ref=&#123;<span class="keyword">this</span>.textInput&#125; /&gt;    </span><br><span class="line">        );  </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Ref总结"><a href="#Ref总结" class="headerlink" title="Ref总结"></a>Ref总结</h2><p>为了防止内存泄漏，当卸载一个组件时，组件里所有的refs就会变成null。</p><p>值得注意的是，<code>findDOMNode</code> 和 <code>refs</code> 都无法用于无状态组件中。因为，无状态组件挂载时只是方法调用，并没有创建实例。</p><p>对于 React 组件来讲，refs 会指向一个组件类实例，所以可以调用该类定义的任何方法。如果需要访问该组件的真实 DOM ，可以用 ReactDOM 。 findDOMNode来找到 DOM 节点，但并不推荐这样做，因为这大部分情况下都打破了封装性，而且通常都能用更清晰的方法在React中构建代码。</p>]]></content:encoded>
      
      <comments>http://mydearest.cn/React%20Refs%E5%92%8CDOM%E6%8F%AD%E5%AF%86.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>flutter入门</title>
      <link>http://mydearest.cn/flutter%E5%85%A5%E9%97%A8.html</link>
      <guid>http://mydearest.cn/flutter%E5%85%A5%E9%97%A8.html</guid>
      <pubDate>Mon, 24 Dec 2018 17:22:30 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;什么是flutter&quot;&gt;&lt;a href=&quot;#什么是flutter&quot; class=&quot;headerlink&quot; title=&quot;什么是flutter&quot;&gt;&lt;/a&gt;什么是flutter&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Flutter is Google’s mobil
        
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="什么是flutter"><a href="#什么是flutter" class="headerlink" title="什么是flutter"></a>什么是flutter</h2><blockquote><p>Flutter is Google’s mobile UI framework for crafting high-quality native interfaces on iOS and Android in record time. Flutter works with existing code, is used by developers and organizations around the world,and is free and open source.</p></blockquote><h2 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h2><h3 id="下载SDK"><a href="#下载SDK" class="headerlink" title="下载SDK"></a>下载SDK</h3><p><a href="https://flutter.io/docs/development/tools/sdk/archive?tab=macos#macos" target="_blank" rel="noopener">https://flutter.io/docs/development/tools/sdk/archive?tab=macos#macos</a>或者git clone -b beta <a href="https://github.com/flutter/flutter.git" target="_blank" rel="noopener">https://github.com/flutter/flutter.git</a></p><h3 id="镜像"><a href="#镜像" class="headerlink" title="镜像"></a>镜像</h3><p>添加环境变量 .bash_profile<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> ANDROID_HOME=~/Library/Android/sdk</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$&#123;PATH&#125;</span>:<span class="variable">$&#123;ANDROID_HOME&#125;</span>/tools</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$&#123;PATH&#125;</span>:<span class="variable">$&#123;ANDROID_HOME&#125;</span>/platform-tools</span><br><span class="line"><span class="built_in">export</span> PUB_HOSTED_URL=https://pub.flutter-io.cn</span><br><span class="line"><span class="built_in">export</span> FLUTTER_STORAGE_BASE_URL=https://storage.flutter-io.cn</span><br><span class="line"><span class="built_in">export</span> PATH=/Users/chenyu/treasure/flutter/flutter/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure></p><h3 id="运行flutter-doctor查看是否需要安装其它依赖项来完成安装："><a href="#运行flutter-doctor查看是否需要安装其它依赖项来完成安装：" class="headerlink" title="运行flutter doctor查看是否需要安装其它依赖项来完成安装："></a>运行<code>flutter doctor</code>查看是否需要安装其它依赖项来完成安装：</h3><p>该命令检查您的环境并在终端窗口中显示报告。Dart SDK已经在捆绑在Flutter里了，没有必要单独安装Dart。 仔细检查命令行输出以获取可能需要安装的其他软件或进一步需要执行的任务（以粗体显示）</p><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><ol><li><p>在AndroidStudio安装Dart插件。启动studio，搜索flutter，自动安装Dart插件，完成后重启studio。 </p></li><li><p>Android Studio - File - New -New Flutter Project</p></li></ol><h3 id="文件入口"><a href="#文件入口" class="headerlink" title="文件入口"></a>文件入口</h3><p>项目路径下的lib文件夹下的main.dart文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>; <span class="comment">//导包</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span> </span>=&gt; runApp(<span class="keyword">new</span> MyApp());</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="comment">// This widget is the root of your application.</span></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="function">Widget <span class="title">build</span><span class="params">(BuildContext context)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MaterialAp</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://mydearest.cn/flutter%E5%85%A5%E9%97%A8.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>如何用js实现JSON.parse()</title>
      <link>http://mydearest.cn/%E5%A6%82%E4%BD%95%E7%94%A8js%E5%AE%9E%E7%8E%B0JSON.parse().html</link>
      <guid>http://mydearest.cn/%E5%A6%82%E4%BD%95%E7%94%A8js%E5%AE%9E%E7%8E%B0JSON.parse().html</guid>
      <pubDate>Sat, 22 Dec 2018 15:50:52 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;eval&quot;&gt;&lt;a href=&quot;#eval&quot; class=&quot;headerlink&quot; title=&quot;eval&quot;&gt;&lt;/a&gt;eval&lt;/h2&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter
        
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="eval"><a href="#eval" class="headerlink" title="eval"></a>eval</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> json = <span class="string">'&#123;"a":"1", "b":2&#125;'</span>;</span><br><span class="line"><span class="keyword">var</span> obj = <span class="built_in">eval</span>(<span class="string">"("</span> + json + <span class="string">")"</span>);  <span class="comment">// obj 就是 json 反序列化之后得到的对象</span></span><br></pre></td></tr></table></figure><blockquote><p>为什么要加括号呢？因为js中{}通常是表示一个语句块，eval只会计算语句块内的值进行返回。加上括号就变成一个整体的表达式。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log( <span class="built_in">eval</span>(<span class="string">'&#123;&#125;'</span>) );      <span class="comment">// undefind</span></span><br><span class="line"><span class="built_in">console</span>.log( <span class="built_in">eval</span>(<span class="string">'(&#123;&#125;)'</span>) );    <span class="comment">// Object &#123;&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>eval作用域问题<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">eval</span>(<span class="string">'var s=2'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(s);</span><br><span class="line">&#125;</span><br><span class="line">a();                <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(s);     <span class="comment">// 1</span></span><br></pre></td></tr></table></figure></p></blockquote><p>在局部环境使用eval便会创建局部变量。可以显示指定eval调用者来改变上下文环境。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="string">'global'</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">eval</span>(<span class="string">'var s = "local"'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(s);                 <span class="comment">// local</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">eval</span>(<span class="string">'s'</span>));         <span class="comment">// local</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">window</span>.eval(<span class="string">'s'</span>));  <span class="comment">// global</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="对参数json进行校验防止xss漏洞"><a href="#对参数json进行校验防止xss漏洞" class="headerlink" title="对参数json进行校验防止xss漏洞"></a>对参数json进行校验防止xss漏洞</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> rx_one = <span class="regexp">/^[\],:&#123;&#125;\s]*$/</span>;</span><br><span class="line"><span class="keyword">var</span> rx_two = <span class="regexp">/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]&#123;4&#125;)/g</span>;</span><br><span class="line"><span class="keyword">var</span> rx_three = <span class="regexp">/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g</span>;</span><br><span class="line"><span class="keyword">var</span> rx_four = <span class="regexp">/(?:^|:|,)(?:\s*\[)+/g</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (</span><br><span class="line">    rx_one.test(</span><br><span class="line">        json</span><br><span class="line">            .replace(rx_two, <span class="string">"@"</span>)</span><br><span class="line">            .replace(rx_three, <span class="string">"]"</span>)</span><br><span class="line">            .replace(rx_four, <span class="string">""</span>)</span><br><span class="line">    )</span><br><span class="line">) &#123;</span><br><span class="line">    <span class="keyword">var</span> obj = <span class="built_in">eval</span>(<span class="string">"("</span> +json + <span class="string">")"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="递归手动扫描每个字符"><a href="#递归手动扫描每个字符" class="headerlink" title="递归手动扫描每个字符"></a>递归手动扫描每个字符</h2><h2 id="new-Function-函数声明的传参形式"><a href="#new-Function-函数声明的传参形式" class="headerlink" title="new Function 函数声明的传参形式"></a>new Function 函数声明的传参形式</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> add = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">'a, b'</span>, <span class="string">'return a+b;'</span>);</span><br><span class="line"><span class="built_in">console</span>.log( add(<span class="number">2</span>, <span class="number">3</span>) );    <span class="comment">// 5</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> jsonStr = <span class="string">'&#123; "age": 20, "name": "jack" &#125;'</span>,</span><br><span class="line">    json = (<span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">'return '</span> + jsonStr))();</span><br></pre></td></tr></table></figure><h2 id="插入script"><a href="#插入script" class="headerlink" title="插入script"></a>插入script</h2><blockquote><p>模拟jsonP的方式拼接字符串然后以callBack的方式返回。</p></blockquote>]]></content:encoded>
      
      <comments>http://mydearest.cn/%E5%A6%82%E4%BD%95%E7%94%A8js%E5%AE%9E%E7%8E%B0JSON.parse().html#disqus_thread</comments>
    </item>
    
    <item>
      <title>Sass、Less和Stylus区别</title>
      <link>http://mydearest.cn/sass%E3%80%81less%E5%92%8Cstylus%E5%8C%BA%E5%88%AB.html</link>
      <guid>http://mydearest.cn/sass%E3%80%81less%E5%92%8Cstylus%E5%8C%BA%E5%88%AB.html</guid>
      <pubDate>Wed, 19 Dec 2018 15:26:52 GMT</pubDate>
      <description>
      
        &lt;p&gt;在前端界，有三大 CSS 预处理器，分别是 SASS(SCSS), Less, Stylus。
本文便总结下 Sass、Less CSS、Stylus这三个预处理器的区别和各自的基本语法。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我永远喜欢Stylus :&amp;gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;什么是CSS预处理器&quot;&gt;&lt;a href=&quot;#什么是CSS预处理器&quot; class=&quot;headerlink&quot; title=&quot;什么是CSS预处理器&quot;&gt;&lt;/a&gt;什么是CSS预处理器&lt;/h2&gt;&lt;p&gt;CSS 预处理器是一种语言用来为 CSS 增加一些编程的的特性，无需考虑浏览器的兼容性问题，例如你可以在 CSS 中使用变量、简单的程序逻辑、函数等等在编程语言中的一些基本技巧，可以让CSS 更见简洁，适应性更强，代码更直观等诸多好处。&lt;/p&gt;
&lt;h2 id=&quot;基本语法比较&quot;&gt;&lt;a href=&quot;#基本语法比较&quot; class=&quot;headerlink&quot; title=&quot;基本语法比较&quot;&gt;&lt;/a&gt;基本语法比较&lt;/h2&gt;&lt;h3 id=&quot;Sass和Less&quot;&gt;&lt;a href=&quot;#Sass和Less&quot; class=&quot;headerlink&quot; title=&quot;Sass和Less&quot;&gt;&lt;/a&gt;Sass和Less&lt;/h3&gt;&lt;p&gt;首先 Sass 和 Less 都使用的是标准的 CSS 语法，因此如果可以很方便的将已有的 CSS 代码转为预处理器代码，默认 Sass 使用 .scss 扩展名，而 Less 使用 .Less 扩展名。
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* style.scss or style.Less */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;h1&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;color&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;#0982C1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;另一种也是最早的 Sass 语法格式，被称为缩进格式 (Indented Sass) 通常简称 “Sass”，是一种简化格式。它使用 “缩进” 代替 “花括号” 表示属性属于某个选择器，用 “换行” 代替 “分号” 分隔属性，很多人认为这样做比 SCSS 更容易阅读，书写也更快速。缩进格式也可以使用 Sass 的全部功能，只是与 SCSS 相比个别地方采取了不同的表达方式。
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* style.Sass */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;h1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;selector-tag&quot;&gt;color&lt;/span&gt;: &lt;span class=&quot;selector-id&quot;&gt;#0982c1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;而 Stylus 支持的语法要更多样性一点，它默认使用 .styl 的文件扩展名。可以随意地书写。
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* style.styl */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;h1&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;color&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;#0982C1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* 省略花括号 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;h1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;selector-tag&quot;&gt;color&lt;/span&gt;: &lt;span class=&quot;selector-id&quot;&gt;#0982C1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* 省略花括号和分号 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;h1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;selector-tag&quot;&gt;color&lt;/span&gt; &lt;span class=&quot;selector-id&quot;&gt;#0982C1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;hr&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>在前端界，有三大 CSS 预处理器，分别是 SASS(SCSS), Less, Stylus。本文便总结下 Sass、Less CSS、Stylus这三个预处理器的区别和各自的基本语法。</p><blockquote><p>我永远喜欢Stylus :&gt;</p></blockquote><h2 id="什么是CSS预处理器"><a href="#什么是CSS预处理器" class="headerlink" title="什么是CSS预处理器"></a>什么是CSS预处理器</h2><p>CSS 预处理器是一种语言用来为 CSS 增加一些编程的的特性，无需考虑浏览器的兼容性问题，例如你可以在 CSS 中使用变量、简单的程序逻辑、函数等等在编程语言中的一些基本技巧，可以让CSS 更见简洁，适应性更强，代码更直观等诸多好处。</p><h2 id="基本语法比较"><a href="#基本语法比较" class="headerlink" title="基本语法比较"></a>基本语法比较</h2><h3 id="Sass和Less"><a href="#Sass和Less" class="headerlink" title="Sass和Less"></a>Sass和Less</h3><p>首先 Sass 和 Less 都使用的是标准的 CSS 语法，因此如果可以很方便的将已有的 CSS 代码转为预处理器代码，默认 Sass 使用 .scss 扩展名，而 Less 使用 .Less 扩展名。<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* style.scss or style.Less */</span></span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#0982C1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>另一种也是最早的 Sass 语法格式，被称为缩进格式 (Indented Sass) 通常简称 “Sass”，是一种简化格式。它使用 “缩进” 代替 “花括号” 表示属性属于某个选择器，用 “换行” 代替 “分号” 分隔属性，很多人认为这样做比 SCSS 更容易阅读，书写也更快速。缩进格式也可以使用 Sass 的全部功能，只是与 SCSS 相比个别地方采取了不同的表达方式。<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* style.Sass */</span></span><br><span class="line"><span class="selector-tag">h1</span></span><br><span class="line">  <span class="selector-tag">color</span>: <span class="selector-id">#0982c1</span></span><br></pre></td></tr></table></figure></p><p>而 Stylus 支持的语法要更多样性一点，它默认使用 .styl 的文件扩展名。可以随意地书写。<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* style.styl */</span></span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#0982C1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 省略花括号 */</span></span><br><span class="line"><span class="selector-tag">h1</span></span><br><span class="line">  <span class="selector-tag">color</span>: <span class="selector-id">#0982C1</span>;</span><br><span class="line"><span class="comment">/* 省略花括号和分号 */</span></span><br><span class="line"><span class="selector-tag">h1</span></span><br><span class="line">  <span class="selector-tag">color</span> <span class="selector-id">#0982C1</span></span><br></pre></td></tr></table></figure></p><hr><a id="more"></a><h3 id="变量声明"><a href="#变量声明" class="headerlink" title="变量声明"></a>变量声明</h3><ol><li>Sass<blockquote><p>Sass变量必须是以$开头的，然后变量和值之间使用冒号（：）隔开，和css属性是一样的。</p></blockquote></li><li>Less<blockquote><p> Less变量都是用@开头的。</p></blockquote></li><li>Stylus<blockquote><p> Stylus对变量是没有任何约束，可以是以$开头，或者任何的字符，而且与变量之间可以用冒号，空格隔开。</p></blockquote></li></ol><h3 id="嵌套"><a href="#嵌套" class="headerlink" title="嵌套"></a>嵌套</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">section</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">10px</span>;</span><br><span class="line">  nav &#123;</span><br><span class="line">    <span class="selector-tag">height</span>: 25<span class="selector-tag">px</span>;</span><br><span class="line">    <span class="selector-tag">a</span> &#123;</span><br><span class="line">      <span class="attribute">color</span>: <span class="number">#0982C1</span>;</span><br><span class="line">      &amp;:hover &#123;</span><br><span class="line">        <span class="selector-tag">text-decoration</span>: <span class="selector-tag">underline</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">/* 使用“&amp;”符号来引用父选择器。 */</span></span><br></pre></td></tr></table></figure><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: (<span class="number">14px</span>/<span class="number">2</span>);</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50px</span> + <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">80</span> * <span class="number">10%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="颜色函数"><a href="#颜色函数" class="headerlink" title="颜色函数"></a>颜色函数</h3><ul><li><p>Sass</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">lighten($color, 10%); /* 返回的颜色在$color基础上变亮10% */</span><br><span class="line">darken($color, 10%);  /* 返回的颜色在$color基础上变暗10% */</span><br><span class="line">saturate($color, 10%);   /* 返回的颜色在$color基础上饱和度增加10% */</span><br><span class="line">desaturate($color, 10%); /* 返回的颜色在$color基础上饱和度减少10% */</span><br><span class="line">grayscale($color);  /* 返回$color的灰度色*/</span><br><span class="line">complement($color); /* returns complement color of $color */</span><br><span class="line">invert($color);     /* 返回$color的反相色 */</span><br><span class="line">mix($color1, $color2, 50%); /* mix $color1 with $color2 with a weight of 50% */</span><br></pre></td></tr></table></figure></li><li><p>Less</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">lighten</span>(@<span class="keyword">color</span>, <span class="number">10%</span>); <span class="comment">/* 返回的颜色在@color基础上变亮10% */</span></span><br><span class="line"><span class="selector-tag">darken</span>(@<span class="keyword">color</span>, <span class="number">10%</span>);  <span class="comment">/* 返回的颜色在@color基础上变暗10%*/</span></span><br><span class="line"><span class="selector-tag">saturate</span>(@<span class="keyword">color</span>, <span class="number">10%</span>);   <span class="comment">/* 返回的颜色在@color基础上饱和度增加10% */</span></span><br><span class="line"><span class="selector-tag">desaturate</span>(@<span class="keyword">color</span>, <span class="number">10%</span>); <span class="comment">/* 返回的颜色在@color基础上饱和度降低10%*/</span></span><br><span class="line"><span class="selector-tag">spin</span>(@<span class="keyword">color</span>, <span class="number">10</span>);  <span class="comment">/* 返回的颜色在@color基础上色调增加10 */</span></span><br><span class="line"><span class="selector-tag">spin</span>(@<span class="keyword">color</span>, -<span class="number">10</span>); <span class="comment">/* 返回的颜色在@color基础上色调减少10 */</span></span><br><span class="line"><span class="selector-tag">mix</span>(@<span class="keyword">color1</span>, @color2); <span class="comment">/* 返回的颜色是@color1和@color2两者的混合色 */</span></span><br></pre></td></tr></table></figure></li><li><p>Stylus</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">lighten</span>(<span class="selector-tag">color</span>, 10%); <span class="comment">/* 返回的颜色在'color'基础上变亮10% */</span></span><br><span class="line"><span class="selector-tag">darken</span>(<span class="selector-tag">color</span>, 10%);  <span class="comment">/* 返回的颜色在'color'基础上变暗10% */</span></span><br><span class="line"><span class="selector-tag">saturate</span>(<span class="selector-tag">color</span>, 10%);   <span class="comment">/* 返回的颜色在'color'基础上饱和度增加10% */</span></span><br><span class="line"><span class="selector-tag">desaturate</span>(<span class="selector-tag">color</span>, 10%); <span class="comment">/* 返回的颜色在'color'基础上饱和度降低10% */</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="css预处理器处理属性前缀"><a href="#css预处理器处理属性前缀" class="headerlink" title="css预处理器处理属性前缀"></a>css预处理器处理属性前缀</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> @<span class="keyword">mixin</span> border-radius($values) &#123;</span><br><span class="line">  -webkit-border-radius: $values;</span><br><span class="line">     -moz-border-radius: $values;</span><br><span class="line">          border-radius: $values;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  @include border-radius(10px);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="导入-Import"><a href="#导入-Import" class="headerlink" title="导入 (Import)"></a>导入 (Import)</h3><p>很多 CSS 开发者对导入的做法都不太感冒，因为它需要多次的 HTTP 请求。但是在 CSS 预处理器中的导入操作则不同，它只是在语义上包含了不同的文件，但最终结果是一个单一的 CSS 文件，如果你是通过 @ import “file.css”; 导入 CSS 文件，那效果跟普通的 CSS 导入一样。<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* file.&#123;type&#125; */</span></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#EEE</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">import</span> <span class="string">"reset.css"</span>;</span><br><span class="line">@<span class="keyword">import</span> <span class="string">"file.&#123;type&#125;"</span>;</span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#0982C1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>转译出的css<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">import</span> <span class="string">"reset.css"</span>;</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#EEE</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#0982C1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="混合（Mixins）"><a href="#混合（Mixins）" class="headerlink" title="混合（Mixins）"></a>混合（Mixins）</h3><p>Mixins是预处器中的函数。当某段CSS样式经常要用到多个元素中，这样就需要重复的写多次。Mixins是一个公认的选择器，还可以在Mixins中定义变量或者是默认参数。</p><ul><li><p>Sass @mixin声明 @include调用</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">mixin</span> error($borderWidth: <span class="number">2px</span>) &#123;</span><br><span class="line">  border: $borderWidth solid #F00;</span><br><span class="line">  <span class="selector-tag">color</span>: <span class="selector-id">#F00</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.generic-error</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">4px</span>;</span><br><span class="line">  @include error(); //这里调用默认 border: 2px solid #F00;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.login-error</span> &#123;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">12px</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">20px</span>;</span><br><span class="line">  @include error(5px); //这里调用 border:5px solid #F00;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Less</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">.error(@borderWidth: 2px) &#123;</span><br><span class="line">  <span class="selector-tag">border</span>: @<span class="keyword">borderWidth</span> solid #F00;</span><br><span class="line">  <span class="selector-tag">color</span>: <span class="selector-id">#F00</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.generic-error</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">4px</span>;</span><br><span class="line">  .error(); //这里调用默认 border: 2px solid #F00;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.login-error</span> &#123;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">12px</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">20px</span>;</span><br><span class="line">  .error(5px); //这里调用 border:5px solid #F00;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Stylus 像函数一样</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">error(borderWidth= 2px) &#123;</span><br><span class="line">  <span class="selector-tag">border</span>: <span class="selector-tag">borderWidth</span> <span class="selector-tag">solid</span> <span class="selector-id">#F00</span>;</span><br><span class="line">  <span class="selector-tag">color</span>: <span class="selector-id">#F00</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.generic-error</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">4px</span>;</span><br><span class="line">  error(); </span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.login-error</span> &#123;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">12px</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">20px</span>;</span><br><span class="line">  error(5px); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>example Sass3d文本</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">mixin</span> text3d($color) &#123;</span><br><span class="line">  color: $color;</span><br><span class="line">  text-shadow: 1px 1px 0px darken($color, 5%),</span><br><span class="line">               2px 2px 0px darken($color, 10%),</span><br><span class="line">               3px 3px 0px darken($color, 15%),</span><br><span class="line">               4px 4px 0px darken($color, 20%),</span><br><span class="line">               4<span class="selector-tag">px</span> 4<span class="selector-tag">px</span> 2<span class="selector-tag">px</span> <span class="selector-id">#000</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">32pt</span>;</span><br><span class="line">  @include text3d(#0982c1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="继承（Inheritance）"><a href="#继承（Inheritance）" class="headerlink" title="继承（Inheritance）"></a>继承（Inheritance）</h3><p>在多个元素应用相同的样式时，我们在CSS通常都是这样写：<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span>,</span><br><span class="line"><span class="selector-tag">ul</span>,</span><br><span class="line"><span class="selector-tag">ol</span> &#123;</span><br><span class="line">  <span class="comment">/* 样式写在这 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li><p>Sass和Stylus @extend</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.block</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">2px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  @extend .block; /* 继承.block所有样式 */</span><br><span class="line">  <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#EEE</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>LessLESS支持的继承和Sass与Stylus不一样,他不是在选择器上继承，而是将Mixins中的样式嵌套到每个选择器里面。这种方法的缺点就是在每个选择器中会有重复的样式产生。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> <span class="selector-class">.block</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">2px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  .block; /* 继承 '.block'中的样式 */</span><br><span class="line">  <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#EEE</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h3><ul><li><p>Sass</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.mixin</span> (@<span class="keyword">color</span>) when (lightness(@color) &gt; <span class="number">30%</span>) &#123;</span><br><span class="line">    <span class="selector-tag">background-color</span>: <span class="selector-tag">black</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.mixin</span> (@<span class="keyword">color</span>) when (lightness(@color) =&lt;; 30%) &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: white;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Less</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">if</span> lightness($color) &gt; <span class="number">30%</span> &#123;</span><br><span class="line">    <span class="selector-tag">background-color</span>: <span class="selector-tag">black</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="selector-tag">background-color</span>: <span class="selector-tag">white</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Stylus</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">if</span> <span class="selector-tag">lightness</span>(<span class="selector-tag">color</span>) &gt; 30%</span><br><span class="line">    <span class="selector-tag">background-color</span> <span class="selector-tag">black</span></span><br><span class="line"><span class="selector-tag">else</span></span><br><span class="line">    <span class="selector-tag">background-color</span> <span class="selector-tag">white</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="loop"><a href="#loop" class="headerlink" title="loop"></a>loop</h3><ul><li><p>Sass</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">for</span> $i from <span class="number">1px</span> to <span class="number">3px</span> &#123;</span><br><span class="line">    .border-#&#123;i&#125; &#123;</span><br><span class="line">        border: $i solid blue;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Less</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.loop</span>(@<span class="keyword">counter</span>) when (@counter &gt; <span class="number">0</span>)&#123;</span><br><span class="line">    <span class="selector-class">.loop</span>((@<span class="keyword">counter</span> - <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.border-</span>@&#123;<span class="selector-tag">counter</span>&#125; &#123;</span><br><span class="line">        <span class="attribute">border</span>: <span class="number">1px</span> * @counter solid blue;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Stylus</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">for</span> <span class="selector-tag">num</span> <span class="selector-tag">in</span> (1.<span class="selector-class">.3</span>)</span><br><span class="line">    .border-&#123;num&#125;</span><br><span class="line">        <span class="selector-tag">border</span> 1<span class="selector-tag">px</span> * <span class="selector-tag">num</span> <span class="selector-tag">solid</span> <span class="selector-tag">blue</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><ul><li><p>SassSass中不存在什么全局变量.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$color: black;</span><br><span class="line"><span class="selector-class">.scoped</span> &#123;</span><br><span class="line">  $bg: blue;</span><br><span class="line">  $color: white;</span><br><span class="line">  color: $color; /*白色*/</span><br><span class="line">  background-color:$bg;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.unscoped</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>:$color;<span class="comment">/*白色*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>LessLESS中的作用域和其他程序语言中的作用域非常的相同，他首先会查找局部定义的变量，如果没有找到，会像冒泡一样，一级一级往下查找，直到根为止。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@color: black;</span><br><span class="line"><span class="selector-class">.scoped</span> &#123;</span><br><span class="line">  @bg: blue;</span><br><span class="line">  @color: white;</span><br><span class="line">  <span class="selector-tag">color</span>: @<span class="keyword">color</span>; <span class="comment">/*白色*/</span></span><br><span class="line">  <span class="selector-tag">background-color</span>:@<span class="keyword">bg</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.unscoped</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>:@color; <span class="comment">/*黑色*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>StylusStylus虽然起步比较晚，但其作用域的特性和LESS一样，可以支持全局变量和局变量。会向上冒泡查找，直到根为止。</p></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Less 从语言特性的设计到功能的健壮程度和另外两者相比都有一些缺陷，但用 Less 可以满足大多数场景的需求。但相比另外两者，基于 Less 开发类库会复杂得多，实现的代码会比较脏，能实现的功能也会受到 DSL 的制约。比 Stylus 语义更清晰、比 Sass 更接近 CSS 语法，使得刚刚转用 CSS 预编译的开发者能够更平滑地进行切换。Sass 在三者之中历史最久，也吸收了其他两者的一些优点。从功能上来说 Sass 大而全，语义明晰但是代码很容易显得累赘。主项目基于 Ruby 可能也是一部分人不选择它的理由（Less 开始也是基于 Ruby 开发，后来逐渐转到 Less.js 项目中）。Sass 有一个「事实标准」库——Compass，于是对于很多开发者而言省去了选择类库的烦恼，对于提升开发效率也有不小的帮助。Stylus 的语法非常灵活，很多语义都是根据上下文隐含的。基于 Stylus 可以写出非常简洁的代码，但对使用团队的开发素养要求也更高，更需要有良好的开发规范或约定。总的来说，三种预处理器百分之七八十的功能是类似的。Less 适合帮助团队更快地上手预处理代码的开发，而 Sass 和 Stylus 的差异更在于口味。</p>]]></content:encoded>
      
      <comments>http://mydearest.cn/sass%E3%80%81less%E5%92%8Cstylus%E5%8C%BA%E5%88%AB.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>angular7详解</title>
      <link>http://mydearest.cn/angular7%E8%AF%A6%E8%A7%A3.html</link>
      <guid>http://mydearest.cn/angular7%E8%AF%A6%E8%A7%A3.html</guid>
      <pubDate>Tue, 18 Dec 2018 17:36:55 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;开始准备&quot;&gt;&lt;a href=&quot;#开始准备&quot; class=&quot;headerlink&quot; title=&quot;开始准备&quot;&gt;&lt;/a&gt;开始准备&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;安装nodejs&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm -v&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;安装@angular/cli&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm i -g @angular/cli&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;CLI命令建立项目&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ng new ng7demo&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;选择是否加入路由模块以及哪种css预处理器&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;可ctrl+c取消自动安装node_modules，手动进入项目npm install
node-sass安装不上可切换淘宝镜像库或者用cnpm安装&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;npm config set registry &lt;a href=&quot;https://registry.npm.taobao.org&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://registry.npm.taobao.org&lt;/a&gt; 
npm install&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;or &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;npm install -g cnpm 
cnpm install &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;启动项目&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ng serve --open &lt;span class=&quot;comment&quot;&gt;// 自动打开浏览器 http://localhost:4200/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="开始准备"><a href="#开始准备" class="headerlink" title="开始准备"></a>开始准备</h2><ol><li><p>安装nodejs</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm -v</span><br></pre></td></tr></table></figure></li><li><p>安装@angular/cli</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -g @angular/cli</span><br></pre></td></tr></table></figure></li><li><p>CLI命令建立项目</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ng new ng7demo</span><br></pre></td></tr></table></figure></li></ol><p>选择是否加入路由模块以及哪种css预处理器</p><blockquote><p>可ctrl+c取消自动安装node_modules，手动进入项目npm installnode-sass安装不上可切换淘宝镜像库或者用cnpm安装</p><ol><li>npm config set registry <a href="https://registry.npm.taobao.org" target="_blank" rel="noopener">https://registry.npm.taobao.org</a> npm install</li></ol></blockquote><p>or </p><ol><li><p>npm install -g cnpm cnpm install </p></li><li><p>启动项目</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ng serve --open <span class="comment">// 自动打开浏览器 http://localhost:4200/</span></span><br></pre></td></tr></table></figure></li></ol><hr><a id="more"></a><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><h3 id="生成组件"><a href="#生成组件" class="headerlink" title="生成组件"></a>生成组件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 标签app-article 如果不想要或者自定义前缀可在angular.json里修改prefix属性</span><br><span class="line">ng g c article</span><br><span class="line">// 可添加目录</span><br><span class="line">ng g s ./serveices/eventBus</span><br><span class="line">//</span><br></pre></td></tr></table></figure><h3 id="组件引用"><a href="#组件引用" class="headerlink" title="组件引用"></a>组件引用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 标签方式引用</span><br><span class="line">&lt;app-article&gt;&lt;/app-article&gt;</span><br><span class="line">// 属性方式引用</span><br><span class="line">&lt;div app-article&gt;&lt;/div&gt;</span><br><span class="line">// 类方式引用</span><br><span class="line">&lt;div class=&quot;app-article&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// @Component装饰器标识这是一个组件</span><br><span class="line">@Component(&#123;</span><br><span class="line">  //selector: &apos;app-article&apos;,</span><br><span class="line">  //selector: &apos;[app-article]&apos;, //属性方式</span><br><span class="line">    selector: &apos;.app-article&apos;,//类方式</span><br><span class="line">  templateUrl: &apos;./article.component.html&apos;,</span><br><span class="line">  styleUrls: [&apos;./article.component.css&apos;]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="插值表达式"><a href="#插值表达式" class="headerlink" title="插值表达式"></a>插值表达式</h3><p>将业务逻辑中的数据通过插值表达式显示在模板文件，即html页面上，或者将html页面上的事件传输到业务逻辑。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;标题是&#123;&#123;title&#125;&#125;&lt;/p&gt;</span><br></pre></td></tr></table></figure><h3 id="属性绑定"><a href="#属性绑定" class="headerlink" title="属性绑定"></a>属性绑定</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;img [src]=&quot;imgSrc&quot; /&gt;</span><br><span class="line">&lt;input value=&quot;value&quot;</span><br></pre></td></tr></table></figure><h3 id="插值运算-加减乘除-字符串拼接-三元-方法调用"><a href="#插值运算-加减乘除-字符串拼接-三元-方法调用" class="headerlink" title="插值运算 加减乘除/字符串拼接/三元/方法调用"></a>插值运算 加减乘除/字符串拼接/三元/方法调用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;5+3&#125;&#125;,&#123;&#123;5-3&#125;&#125;,&#123;&#123;5*3&#125;&#125;,&#123;&#123;5/3&#125;&#125;,&#123;&#123; &quot;a&quot; + &quot;b&quot;&#125;&#125;,&#123;&#123;true?1:0&#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;button (click)=&quot;showModal(&apos;click&apos;)&quot;&gt;&lt;button&gt;</span><br><span class="line">// 传递事件参数</span><br><span class="line">&lt;input type=&quot;text&quot; (keyup) = &quot;updateContent($event)&quot;/&gt;</span><br><span class="line">// 双向绑定 视图和数据，只要一方发生变化，另一方跟着变化。</span><br><span class="line">// 不需要在代码中手动更新视图，简化开发，增加代码内聚性，代码可读性更强。</span><br><span class="line">&lt;input type=&quot;text&quot; [(ngModel)]=&quot;title&quot;/&gt;</span><br><span class="line">// 为了ngModel能够解析需要引入import &#123;FormsModule&#125; from &quot;@angular/forms&quot;;</span><br></pre></td></tr></table></figure><h3 id="模板指令"><a href="#模板指令" class="headerlink" title="模板指令"></a>模板指令</h3><h4 id="判断指令"><a href="#判断指令" class="headerlink" title="判断指令"></a>判断指令</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;img *ngIf=&quot;imgShow;else #p1&quot;/&gt;</span><br><span class="line">&lt;p #p1&gt;&lt;/p&gt;</span><br></pre></td></tr></table></figure><h4 id="样式指令"><a href="#样式指令" class="headerlink" title="样式指令"></a>样式指令</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;p [ngClass]=&quot;&#123;bg:true&#125;&quot;&gt;这段内容应用的是类样式。&lt;/p&gt;</span><br><span class="line">&lt;p [ngStyle]=&quot;&#123;backgroundColor:pink&#125;&quot;&gt;本段内容样式是内联样式。&lt;/p&gt;</span><br></pre></td></tr></table></figure><h4 id="循环指令"><a href="#循环指令" class="headerlink" title="循环指令"></a>循环指令</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">    &lt;li *ngFor=&quot;let race of raceList; let i = index&quot;&gt;</span><br><span class="line">    &#123;&#123; race.name &#125;&#125;-&#123;&#123; i + 1 &#125;&#125;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure><h3 id="管道符"><a href="#管道符" class="headerlink" title="管道符"></a>管道符</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;currentTime | date: &quot;yyyy-MM-dd HH:mm:ss&quot; &#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="父子组件通信"><a href="#父子组件通信" class="headerlink" title="父子组件通信"></a>父子组件通信</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 输入</span><br><span class="line">&lt;child title=&quot;我的子组件&quot;&gt;&lt;/child&gt;</span><br><span class="line">@Input</span><br><span class="line">public title:string =&quot;&quot;</span><br><span class="line">// 输出</span><br><span class="line">&lt;child title=&quot;我的子组件&quot; #child (follow)=&quot;getFollow($event)&quot;&gt;&lt;/child&gt;</span><br><span class="line">@Output()</span><br><span class="line">public follow = new EventEmitter();</span><br><span class="line">this.follow.emit(&quot;子组件传来的数据&quot;);</span><br></pre></td></tr></table></figure><h3 id="localsStorage"><a href="#localsStorage" class="headerlink" title="localsStorage"></a>localsStorage</h3><h3 id="服务总线"><a href="#服务总线" class="headerlink" title="服务总线"></a>服务总线</h3><ol><li><p>注册服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">ng g s ./services/eventBus</span><br><span class="line">import &#123; Injectable &#125; from &quot;@angular/core&quot;;</span><br><span class="line">import &#123; Observable, Subject &#125; from &quot;rxjs&quot;;</span><br><span class="line">// 服务总线 组件间分享数据</span><br><span class="line">@Injectable(&#123;</span><br><span class="line">  providedIn: &quot;root&quot;</span><br><span class="line">&#125;)</span><br><span class="line">export class EventBusService &#123;</span><br><span class="line">  public eventBus: Subject&lt;string&gt; = new Subject();</span><br><span class="line">  constructor() &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>组件内发射数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.eventBusService.eventBus.next(<span class="string">"child组件发送的数据"</span>);</span><br></pre></td></tr></table></figure></li><li><p>组件接收数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.eventBusService.eventBus.subscribe(<span class="function"><span class="params">arg</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`接收到事件<span class="subst">$&#123;arg&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ol><h3 id="标签变量引用"><a href="#标签变量引用" class="headerlink" title="标签变量引用"></a>标签变量引用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;child title=&quot;我的子组件&quot; #child (follow)=&quot;getFollow($event)&quot;&gt;&lt;/child&gt;</span><br><span class="line">&lt;button (click)=&quot;child.sayHello()&quot;&gt;子组件说话&lt;/button&gt;</span><br></pre></td></tr></table></figure><h3 id="组件注册"><a href="#组件注册" class="headerlink" title="组件注册"></a>组件注册</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">import &#123; BrowserModule &#125; from &apos;@angular/platform-browser&apos;;</span><br><span class="line">import &#123; NgModule &#125; from &apos;@angular/core&apos;;</span><br><span class="line"></span><br><span class="line">import &#123; AppRoutingModule &#125; from &apos;./app-routing.module&apos;;</span><br><span class="line">import &#123; AppComponent &#125; from &apos;./app.component&apos;;</span><br><span class="line"></span><br><span class="line">@NgModule(&#123;</span><br><span class="line">  declarations: [</span><br><span class="line">    AppComponent</span><br><span class="line">  ],</span><br><span class="line">  imports: [</span><br><span class="line">    BrowserModule,</span><br><span class="line">    AppRoutingModule</span><br><span class="line">  ],</span><br><span class="line">  providers: [],</span><br><span class="line">  bootstrap: [AppComponent]</span><br><span class="line">&#125;)</span><br><span class="line">export class AppModule &#123; &#125;</span><br><span class="line">// import部分是模块以及装饰器的引入。</span><br><span class="line">// declarations部分是声明模块的内部成员。</span><br><span class="line">// imports部分是导入其它模块。</span><br><span class="line">// providers指定应用程序根级别需要使用的service。</span><br><span class="line">// bootstrap是app启动的根组件。</span><br><span class="line">// export控制将那些内部成员暴露给外部使用。</span><br></pre></td></tr></table></figure><h3 id="路由导航"><a href="#路由导航" class="headerlink" title="路由导航"></a>路由导航</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">import &#123; NgModule &#125; from &apos;@angular/core&apos;;</span><br><span class="line">import &#123; Routes, RouterModule &#125; from &apos;@angular/router&apos;;</span><br><span class="line">import &#123; ChildComponent &#125; from &quot;./child/child.component&quot;;</span><br><span class="line">import &#123; BrotherComponent &#125; from &quot;./brother/brother.component&quot;;</span><br><span class="line"></span><br><span class="line">const routes: Routes = [&#123;</span><br><span class="line">  path: &apos;&apos;,</span><br><span class="line">  component: ChildComponent</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">  path: &apos;brother&apos;,</span><br><span class="line">  component: BrotherComponent</span><br><span class="line">&#125;];</span><br><span class="line"></span><br><span class="line">@NgModule(&#123;</span><br><span class="line">  imports: [RouterModule.forRoot(routes)],</span><br><span class="line">  exports: [RouterModule]</span><br><span class="line">&#125;)</span><br><span class="line">export class AppRoutingModule &#123; &#125;</span><br><span class="line">```</span><br></pre></td></tr></table></figure><!--RouterOutlet 相当于一个占位符,在Angular中根据路由状态动态插入视图。--><p><a [routerlink]="['/']">child</a><br><a [routerlink]="['/brother']">brother</a></p><p><router-outlet></router-outlet><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">### http服务</span><br></pre></td></tr></table></figure></p><p>// app.module.tsimport { HttpModule } from ‘@angular/http’;import { HttpClientModule } from ‘@angular/common/http’;// servicesimport { Headers } from ‘@angular/http’;import { HttpClient, HttpResponse } from ‘@angular/common/http’;</p><p>this.httpClient.request(UserService.METHOD_POST, url, options).subscribe((data)=&gt;{});<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## ng7的新特性</span><br></pre></td></tr></table></figure></p><p>// angular.json“budgets”: [    {        “type”: “initial”,        “maximumWarning”: “2mb”,        “maximumError”: “5mb”    }]// 这个配置适用于打包文件限制 ng build –prod // 打包生成生产环境时如果包大于2MB,那么CLI工具会提示waning,如果大于5MB,中断打包。<code>`</code></p>]]></content:encoded>
      
      <comments>http://mydearest.cn/angular7%E8%AF%A6%E8%A7%A3.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>大漠穷秋angular7讲座</title>
      <link>http://mydearest.cn/%E5%A4%A7%E6%BC%A0%E7%A9%B7%E7%A7%8Bangular7%E8%AE%B2%E5%BA%A7.html</link>
      <guid>http://mydearest.cn/%E5%A4%A7%E6%BC%A0%E7%A9%B7%E7%A7%8Bangular7%E8%AE%B2%E5%BA%A7.html</guid>
      <pubDate>Fri, 14 Dec 2018 01:29:25 GMT</pubDate>
      <description>
      
        &lt;p&gt;h5 132合法标签
大而全的angular
emmm一上午要讲基础–还都是基本例子基本都见过&lt;/p&gt;
&lt;h3 id=&quot;编译器&quot;&gt;&lt;a href=&quot;#编译器&quot; class=&quot;headerlink&quot; title=&quot;编译器&quot;&gt;&lt;/a&gt;编译器&lt;/h3&gt;&lt;p&gt;集成开发环境@angular/cli&lt;/p&gt;
&lt;h3 id=&quot;模板引擎&quot;&gt;&lt;a href=&quot;#模板引擎&quot; class=&quot;headerlink&quot; title=&quot;模板引擎&quot;&gt;&lt;/a&gt;模板引擎&lt;/h3&gt;&lt;h2 id=&quot;组件库&quot;&gt;&lt;a href=&quot;#组件库&quot; class=&quot;headerlink&quot; title=&quot;组件库&quot;&gt;&lt;/a&gt;组件库&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;datagrid&lt;/li&gt;
&lt;li&gt;tree z-tree&lt;/li&gt;
&lt;li&gt;datepicker&lt;/li&gt;
&lt;li&gt;formvalid
ng2-admin 
比较接地气&lt;/li&gt;
&lt;li&gt;JHipster&lt;/li&gt;
&lt;li&gt;&lt;p&gt;nicefish&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;生成组件&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ng g c User&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm install -g @angular/cli&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>h5 132合法标签大而全的angularemmm一上午要讲基础–还都是基本例子基本都见过</p><h3 id="编译器"><a href="#编译器" class="headerlink" title="编译器"></a>编译器</h3><p>集成开发环境@angular/cli</p><h3 id="模板引擎"><a href="#模板引擎" class="headerlink" title="模板引擎"></a>模板引擎</h3><h2 id="组件库"><a href="#组件库" class="headerlink" title="组件库"></a>组件库</h2><ul><li>datagrid</li><li>tree z-tree</li><li>datepicker</li><li>formvalidng2-admin 比较接地气</li><li>JHipster</li><li><p>nicefish</p></li><li><p>生成组件</p><blockquote><p>ng g c User</p></blockquote></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @angular/cli</span><br></pre></td></tr></table></figure><hr><a id="more"></a><p>我的看法(好用程度)stylus&gt;less&gt;sass</p><ul><li>人类的本质就是复读机</li><li>学习本就是一个不断抄袭、模仿、联系、创新的过程。</li><li>就这么个意思还是学习了语法绑定，自己说服自己。会语法基本就能做东西，深入才是重点。大佬自己都说angular慢0.0，基本都会涵盖demo的内容实现业务开发。</li></ul><h2 id="第一天感受"><a href="#第一天感受" class="headerlink" title="第一天感受"></a>第一天感受</h2><p>大佬上午讲了js的发展历史，下午讲了ng的基础语法、环境搭建等特性。比较基础的demo示例，比较低端，以前就做过。有点小失望。</p><p>优化记录</p><ol><li>index.js 2.4M</li><li>七牛云的图片域名被回收了</li></ol><h2 id="qs-stringify和JSON-stringify"><a href="#qs-stringify和JSON-stringify" class="headerlink" title="qs.stringify和JSON.stringify"></a>qs.stringify和JSON.stringify</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;<span class="attr">name</span>:<span class="string">'hehe'</span>,<span class="attr">age</span>:<span class="number">10</span>&#125;;</span><br><span class="line"> qs.stringify(a)</span><br><span class="line"><span class="comment">// 'name=hehe&amp;age=10'</span></span><br><span class="line"><span class="built_in">JSON</span>.stringify(a)</span><br><span class="line"><span class="comment">// '&#123;"name":"hehe","age":10&#125;'</span></span><br></pre></td></tr></table></figure><p>wp php建站 主题模板 响应式插件 资讯门户站加载慢，angular这种大而全的框架很不错，但是我永远喜欢react.jpg😁</p>]]></content:encoded>
      
      <comments>http://mydearest.cn/%E5%A4%A7%E6%BC%A0%E7%A9%B7%E7%A7%8Bangular7%E8%AE%B2%E5%BA%A7.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>css高度坍塌和判断横竖屏</title>
      <link>http://mydearest.cn/css%E9%AB%98%E5%BA%A6%E5%9D%8D%E5%A1%8C%E5%92%8C%E5%88%A4%E6%96%AD%E6%A8%AA%E7%AB%96%E5%B1%8F.html</link>
      <guid>http://mydearest.cn/css%E9%AB%98%E5%BA%A6%E5%9D%8D%E5%A1%8C%E5%92%8C%E5%88%A4%E6%96%AD%E6%A8%AA%E7%AB%96%E5%B1%8F.html</guid>
      <pubDate>Sat, 08 Dec 2018 06:51:48 GMT</pubDate>
      <description>
      
        &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;1.01^365=37.8&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;两个盒子，一个下边距20px，一个上边距50px，最后为两个盒子之间的距离为多少 50px
解决:根据W3C的标准，在页面中元素都一个隐含的属性叫做Block FormattingContext
简称BFC，该属性可以设置打开或者关闭，默认是关闭的。&lt;/p&gt;
&lt;hr&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote class="blockquote-center"><p>1.01^365=37.8</p></blockquote><p>两个盒子，一个下边距20px，一个上边距50px，最后为两个盒子之间的距离为多少 50px解决:根据W3C的标准，在页面中元素都一个隐含的属性叫做Block FormattingContext简称BFC，该属性可以设置打开或者关闭，默认是关闭的。</p><hr><a id="more"></a><h3 id="css高度坍塌"><a href="#css高度坍塌" class="headerlink" title="css高度坍塌"></a>css高度坍塌</h3><h4 id="当开启元素的BFC以后，元素将会具有如下的特性："><a href="#当开启元素的BFC以后，元素将会具有如下的特性：" class="headerlink" title="当开启元素的BFC以后，元素将会具有如下的特性："></a>当开启元素的BFC以后，元素将会具有如下的特性：</h4><ol><li>父元素的垂直外边距不会和子元素重叠</li><li>开启BFC的元素不会被浮动元素所覆盖</li><li>开启BFC的元素可以包含浮动的子元素</li></ol><h4 id="如何开启元素的BFC"><a href="#如何开启元素的BFC" class="headerlink" title="如何开启元素的BFC"></a>如何开启元素的BFC</h4><ol><li>设置元素浮动(不推荐)</li></ol><ul><li>使用这种方式开启，虽然可以撑开父元素，但是会导致父元素的宽度丢失，而且使用这种方式也会导致下边的元素上移，不能解决问题</li></ul><ol><li>设置元素绝对定位(不推荐)</li><li>设置元素为inline-block(不推荐)</li></ol><ul><li>可以解决问题，但是会导致宽度丢失，不推荐使用这种方式</li></ul><ol><li>将元素的overflow设置为一个非visible的值（aotu hidden）推荐方式：将overflow设置为hidden是副作用最小的开启BFC的方式。overflow: hidden;</li></ol><p>但是在IE6及以下的浏览器中并不支持BFC，所以使用这种方式不能兼容IE6。在IE6中虽然没有BFC，但是具有另一个隐含的属性叫做hasLayout，该属性的作用和BFC类似，所在IE6浏览器可以通过开hasLayout来解决该问题开启方式很多，我们直接使用一种副作用最小的：直接将元素的zoom设置为1即可。</p><blockquote><p>zoom表示放大的意思，后边跟着一个数值，写几就将元素放大几倍zoom:1表示不放大元素，但是通过该样式可以开启hasLayoutzoom这个样式，只在IE中支持，其他浏览器都不支持。</p></blockquote><h3 id="设备旋转监听"><a href="#设备旋转监听" class="headerlink" title="设备旋转监听"></a>设备旋转监听</h3><ul><li><p>事件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Listen for orientation changes</span></span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">"orientationchange"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Announce the new orientation number</span></span><br><span class="line">    alert(<span class="built_in">window</span>.orientation);</span><br><span class="line"></span><br><span class="line">&#125;, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure></li><li><p>媒体查询</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">media</span> all and (orientation: portrait) &#123;</span><br><span class="line">  <span class="selector-tag">body</span> <span class="selector-tag">div</span> &#123;<span class="attribute">background</span>: red;&#125; </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">@<span class="keyword">media</span> all and (orientation: landscape) &#123; </span><br><span class="line">  <span class="selector-tag">body</span> <span class="selector-tag">div</span> &#123;<span class="attribute">background</span>: blue; &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>resize方法可以用resize事件来判断。用innerWidth ， innerHeight，可以检索得到屏幕大小。依据宽和高的大小比较判断，宽小于高为竖屏，宽大与高就是横屏。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> updateOrientation = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> orientation = (<span class="built_in">window</span>.innerWidth &gt; <span class="built_in">window</span>.innerHeight) ? <span class="string">'landscape'</span> : <span class="string">'portrait'</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> init = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        updateOrientation();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//监听resize事件</span></span><br><span class="line">        <span class="built_in">window</span>.addEventListener(<span class="string">'resize'</span>,updateOrientation,<span class="literal">false</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">'DOMContentLoaded'</span>,init,<span class="literal">false</span>);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure></li></ul>]]></content:encoded>
      
      <comments>http://mydearest.cn/css%E9%AB%98%E5%BA%A6%E5%9D%8D%E5%A1%8C%E5%92%8C%E5%88%A4%E6%96%AD%E6%A8%AA%E7%AB%96%E5%B1%8F.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>使用命令行激活windows10专业版</title>
      <link>http://mydearest.cn/%E4%BD%BF%E7%94%A8%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%BF%80%E6%B4%BBwindows10%E4%B8%93%E4%B8%9A%E7%89%88.html</link>
      <guid>http://mydearest.cn/%E4%BD%BF%E7%94%A8%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%BF%80%E6%B4%BBwindows10%E4%B8%93%E4%B8%9A%E7%89%88.html</guid>
      <pubDate>Sun, 02 Dec 2018 17:29:48 GMT</pubDate>
      <description>
      
        &lt;p&gt;以管理员的身份运行cmd&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;先卸载密钥&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;slmgr.vbs /upk&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;此时弹出窗口显未“已成功卸载了产品密钥”。&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;安装密钥&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;slmgr /ipk W269N-WFGWX-YVC9B-4J6C9-T83GX&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;弹出窗口提示：“成功的安装了产品密钥”。&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;设置计算机名&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;slmgr /skms cosyer的个人电脑&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;弹出窗口提示：“密钥管理服务计算机名成功的设置为cosyer的个人电脑”。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>以管理员的身份运行cmd</p><ol><li>先卸载密钥<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">slmgr.vbs /upk</span><br></pre></td></tr></table></figure></li></ol><ul><li>此时弹出窗口显未“已成功卸载了产品密钥”。</li></ul><ol><li>安装密钥<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">slmgr /ipk W269N-WFGWX-YVC9B-4J6C9-T83GX</span><br></pre></td></tr></table></figure></li></ol><ul><li>弹出窗口提示：“成功的安装了产品密钥”。</li></ul><ol><li>设置计算机名<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">slmgr /skms cosyer的个人电脑</span><br></pre></td></tr></table></figure></li></ol><ul><li>弹出窗口提示：“密钥管理服务计算机名成功的设置为cosyer的个人电脑”。</li></ul><hr><a id="more"></a><ol><li>激活密钥<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">slmgr /ato</span><br></pre></td></tr></table></figure></li></ol><ul><li>此时将弹出窗口提示：“成功的激活了产品”。</li></ul><p>如果第4步未能成功地激活，则重复执行第3步、第4步，且将第3步的语句修改为以下几个之一，需要一个一个进行尝试。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">“slmgr /skms 110.noip.me”</span><br><span class="line">“slmgr /skms kms.lotro.cc”</span><br><span class="line">“slmgr /skms mhd.kmdns.net”</span><br><span class="line">“slmgr /skms xykz.f3322.org”</span><br><span class="line">“slmgr /skms 106.186.25.239”</span><br><span class="line">“slmgr /skms 3rss.vicp.net:20439”</span><br><span class="line">“slmgr /skms 45.78.3.223”</span><br><span class="line">“slmgr /skms kms.chinancce.com”</span><br><span class="line">“slmgr /skms kms.didichuxing.com”</span><br><span class="line">“slmgr /skms skms.ddns.net”</span><br><span class="line">“slmgr /skms franklv.ddns.net”</span><br><span class="line">“slmgr /skms 192.168.2.8”</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://mydearest.cn/%E4%BD%BF%E7%94%A8%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%BF%80%E6%B4%BBwindows10%E4%B8%93%E4%B8%9A%E7%89%88.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>chrome插件扩展程序开发指南</title>
      <link>http://mydearest.cn/chrome%E6%8F%92%E4%BB%B6%E6%89%A9%E5%B1%95%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97.html</link>
      <guid>http://mydearest.cn/chrome%E6%8F%92%E4%BB%B6%E6%89%A9%E5%B1%95%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97.html</guid>
      <pubDate>Mon, 26 Nov 2018 06:30:10 GMT</pubDate>
      <description>
      
        &lt;h3 id=&quot;什么是chrome-extensions&quot;&gt;&lt;a href=&quot;#什么是chrome-extensions&quot; class=&quot;headerlink&quot; title=&quot;什么是chrome extensions&quot;&gt;&lt;/a&gt;什么是chrome extensions&lt;/h3&gt;&lt;p&gt;Chrome Extensions，中文名叫 “Chrome浏览器扩展程序”。引用官方文档的描述，翻译一下就是 “可以修改和增强浏览器功能的 H5 小程序”。
它的入口在浏览器窗口的右上角，地址栏的最右边&lt;/p&gt;
&lt;hr&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h3 id="什么是chrome-extensions"><a href="#什么是chrome-extensions" class="headerlink" title="什么是chrome extensions"></a>什么是chrome extensions</h3><p>Chrome Extensions，中文名叫 “Chrome浏览器扩展程序”。引用官方文档的描述，翻译一下就是 “可以修改和增强浏览器功能的 H5 小程序”。它的入口在浏览器窗口的右上角，地址栏的最右边</p><hr><a id="more"></a><h3 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h3><h4 id="manifest-json"><a href="#manifest-json" class="headerlink" title="manifest.json"></a>manifest.json</h4><p>manifest.json 是整个插件扩展程序中最重要的一个描述文件，这个 json 格式的文件包含了你整个扩展程序的一些重要描述，比如 “扩展程序名称”、“扩展程序图标”、“权限申请” 等。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  // Required</span><br><span class="line">  "manifest_version": 2, // manifest 版本号，这里都写 2 就好了，从 Google Chrome 18 开始，就开始升级到 2 版本了</span><br><span class="line">  "name": "My Extension",</span><br><span class="line">  "version": "1.0.0", // 扩展程序版本，这个是自定义的，建议参考 semver 规范(http://semver.org/)</span><br><span class="line"></span><br><span class="line">  // Recommended</span><br><span class="line">  "default_locale": "zh", // 默认语言，具体可以看 i18n 文档(https://developer.chrome.com/extensions/i18n)</span><br><span class="line">  "description": "A plain text description", // 项目描述</span><br><span class="line">  "icons": &#123; // icon，不同的位置支持不同大小的 icon，具体看文档(https://developer.chrome.com/extensions/manifest/icons)</span><br><span class="line">    "128": "icons/icon_128.png",</span><br><span class="line">    "48": "icons/icon_48.png",</span><br><span class="line">    "16": "icons/icon_16.png"</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  // Pick one (or none)</span><br><span class="line">  "browser_action": &#123; // 多数都是使用这个，插件扩展程序针对的是浏览器行为（图标是在地址栏外面）</span><br><span class="line">    "default_icon": "icons/24.png", // 最佳大小为19*19，地址栏上的插件扩展程序的 icon（一般作为主入口）</span><br><span class="line">    "default_popup": "popup.html", // 点击插件扩展程序 icon 后弹出来的窗口的主页面 html</span><br><span class="line">    "default_title": "extentsions demo" // 当鼠标放到扩展程序图标上时显示的文字</span><br><span class="line">  &#125;,</span><br><span class="line">  "page_action": &#123; // 插件扩展程序针对的是页面行为（图标是在地址栏里面的）</span><br><span class="line">    ...</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  // Optional</span><br><span class="line">  "author": ...,</span><br><span class="line">  "automation": ...,</span><br><span class="line">  "background": &#123;</span><br><span class="line">    // Recommended</span><br><span class="line">    "persistent": false</span><br><span class="line">  &#125;,</span><br><span class="line">  "background": &#123;</span><br><span class="line">    "scripts": ["eventPage.js"],</span><br><span class="line">    "persistent": false</span><br><span class="line">  &#125;,</span><br><span class="line">  "chrome_settings_overrides": &#123;...&#125;,</span><br><span class="line">  "chrome_ui_overrides": &#123;</span><br><span class="line">    "bookmarks_ui": &#123;</span><br><span class="line">      "remove_bookmark_shortcut": true,</span><br><span class="line">      "remove_button": true</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  "chrome_url_overrides": &#123;...&#125;,</span><br><span class="line">  "commands": &#123;...&#125;,</span><br><span class="line">  "content_capabilities": ...,</span><br><span class="line">  "content_scripts": [&#123;...&#125;],</span><br><span class="line">  "content_security_policy": "policyString",</span><br><span class="line">  "converted_from_user_script": ...,</span><br><span class="line">  "current_locale": ...,</span><br><span class="line">  "declarative_net_request": ...,</span><br><span class="line">  "devtools_page": "devtools.html",</span><br><span class="line">  "event_rules": [&#123;...&#125;],</span><br><span class="line">  "externally_connectable": &#123;</span><br><span class="line">    "matches": ["*://*.example.com/*"]</span><br><span class="line">  &#125;,</span><br><span class="line">  "file_browser_handlers": [...],</span><br><span class="line">  "file_system_provider_capabilities": &#123;</span><br><span class="line">    "configurable": true,</span><br><span class="line">    "multiple_mounts": true,</span><br><span class="line">    "source": "network"</span><br><span class="line">  &#125;,</span><br><span class="line">  "homepage_url": "http://path/to/homepage",</span><br><span class="line">  "import": [&#123;"id": "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"&#125;],</span><br><span class="line">  "incognito": "spanning, split, or not_allowed",</span><br><span class="line">  "input_components": ...,</span><br><span class="line">  "key": "publicKey",</span><br><span class="line">  "minimum_chrome_version": "versionString",</span><br><span class="line">  "nacl_modules": [...],</span><br><span class="line">  "oauth2": ...,</span><br><span class="line">  "offline_enabled": true,</span><br><span class="line">  "omnibox": &#123;</span><br><span class="line">    "keyword": "aString"</span><br><span class="line">  &#125;,</span><br><span class="line">  "optional_permissions": ["tabs"],</span><br><span class="line">  "options_page": "options.html",</span><br><span class="line">  "options_ui": &#123;</span><br><span class="line">    "chrome_style": true,</span><br><span class="line">    "page": "options.html"</span><br><span class="line">  &#125;,</span><br><span class="line">  "permissions": ["tabs"],</span><br><span class="line">  "platforms": ...,</span><br><span class="line">  "plugins": [...],</span><br><span class="line">  "requirements": &#123;...&#125;,</span><br><span class="line">  "sandbox": [...],</span><br><span class="line">  "short_name": "Short Name",</span><br><span class="line">  "signature": ...,</span><br><span class="line">  "spellcheck": ...,</span><br><span class="line">  "storage": &#123;</span><br><span class="line">    "managed_schema": "schema.json"</span><br><span class="line">  &#125;,</span><br><span class="line">  "system_indicator": ...,</span><br><span class="line">  "tts_engine": &#123;...&#125;,</span><br><span class="line">  "update_url": "http://path/to/updateInfo.xml",</span><br><span class="line">  "version_name": "aString",</span><br><span class="line">  "web_accessible_resources": [...]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="学做一个demo"><a href="#学做一个demo" class="headerlink" title="学做一个demo"></a>学做一个demo</h4><ol><li><p>manifestjson(该文本文件需要用UTF8字符集保存)</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"第一个Chrome插件"</span>,</span><br><span class="line">  <span class="attr">"manifest_version"</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"1.0"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">"我的第一个Chrome插件，还不错吧"</span>,</span><br><span class="line">  <span class="attr">"browser_action"</span>: &#123;</span><br><span class="line">    <span class="attr">"default_icon"</span>: <span class="string">"1.png"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"content_scripts"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"matches"</span>: [<span class="string">"https://www.baidu.com/"</span>],</span><br><span class="line">      <span class="attr">"js"</span>: [<span class="string">"test.js"</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>test.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alert(<span class="string">"Hello World"</span>);</span><br><span class="line"><span class="built_in">document</span>.body.style.backgroundColor=<span class="string">"gray"</span>;</span><br></pre></td></tr></table></figure></li></ol><p>content_scripts是运行在打开页面的脚本，可以拿到整个页面的DOM对象，所以可以利用该脚本对页面进行操作。</p><ol><li><p>添加图片1.png</p></li><li><p>打开chrome，打开菜单，找到扩展程序选项更多工具&gt;扩展程序路径下。点击加载已解压的扩展程序，添加文件夹就OK啦！</p></li></ol><h3 id="常用api"><a href="#常用api" class="headerlink" title="常用api"></a>常用api</h3><ul><li>bookmarks: 书签管理接口，可以对浏览器的书签进行增删改查等管理</li><li>tabs: 标签管理接口，可以对浏览器的标签进行增删改查等管理</li><li>contextMenus: 右键菜单管理</li><li>cookies: 浏览器 cookie 的管理</li><li>notifications: 消息通知</li><li>desktopCapture: 可针对 “窗口” 或者 ”标签“ 的截图接口</li><li>i18n: 国际化（多语言支持）</li></ul><h3 id="程序发布和分享"><a href="#程序发布和分享" class="headerlink" title="程序发布和分享"></a>程序发布和分享</h3><p>打包扩展程序，第一次打包只需要设置根目录，打包完成后会生成.crx和.pem密钥文件(版本的迭代需要此文件，否则则会生成新的程序文件)，将.crx文件发给其他人拖入扩展程序页面即可安装。</p><h3 id="发布到chrome商店"><a href="#发布到chrome商店" class="headerlink" title="发布到chrome商店"></a>发布到chrome商店</h3><p>当一切准备就绪，就可以准备发布上线了，Chrome 有个官方的插件扩展程序市场，还自带了发布和更新等一体化管理的流程，非常方便。传送门：<a href="https://chrome.google.com/webstore/developer/dashboard" target="_blank" rel="noopener">Chrome商店dashboard</a></p><p>注意，上传的是 zip 而不是生成的 crx 文件，具体参考：<a href="https://developer.chrome.com/webstore/publish" target="_blank" rel="noopener">https://developer.chrome.com/webstore/publish</a></p><h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3><ol><li>引入外部 js 时报 Refused to load the script 的问题<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"https://code.jquery.com/jquery-3.2.1.min.js"</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ol><p>解决方案：修改 content_security_policy，把对应的域名加上去即可，比如以上的问题可以解决：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"content_security_policy"</span>: <span class="string">"https://code.jquery.com"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>以上表示允许 <a href="https://code.jquery.com" target="_blank" rel="noopener">https://code.jquery.com</a> 域名下的外部 js 的引入。</p><ol><li>Chrome 插件扩展程序是开源的方式安装的，可以去安装目录通过扩展程序 ID 来找到源码。正常情况下，Chrome 插件扩展程序的默认安装目录如下：</li></ol></blockquote><ul><li>Windows XP：C:\Documents and Settings\用户名\Local Settings\Application Data\Google\Chrome\User Data\Default\Extensions</li><li>Windows7：C:\Users\用户名\AppData\Local\Google\Chrome\User Data\Default\Extensions</li><li>Mac：~/Library/Application Support/Google/Chrome/Default/Extensions</li><li>Ubuntu：~/.config/google-chrome/Default/Extensions如果在这些不同操作系统中的默认安装位置没找到插件，那么还有一种方法可以查询到。</li></ul><p>地址栏访问 chrome:version找到 “个人资料路径”，该路径下的 extensions 文件夹就是 Chrome 插件扩展程序的安装路径了安装路径下的插件扩展程序，是以 ID 为目录区分的地址栏访问 chrome://extensions/，可以查看每个插件扩展程序的 ID</p><h3 id="高级教程-学做一个书签管理插件"><a href="#高级教程-学做一个书签管理插件" class="headerlink" title="高级教程-学做一个书签管理插件"></a>高级教程-学做一个书签管理插件</h3><p><a href="">项目地址</a></p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://developer.chrome.com/extensions/overview" target="_blank" rel="noopener">官方文档</a></p>]]></content:encoded>
      
      <comments>http://mydearest.cn/chrome%E6%8F%92%E4%BB%B6%E6%89%A9%E5%B1%95%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>helloPHP</title>
      <link>http://mydearest.cn/helloPHP.html</link>
      <guid>http://mydearest.cn/helloPHP.html</guid>
      <pubDate>Mon, 26 Nov 2018 06:30:10 GMT</pubDate>
      <description>
      
        &lt;p&gt;1年以前我就浅学过PHP，用&lt;code&gt;thinkPHP&lt;/code&gt;框架开发起来确实比较轻松快捷流水化。最近闲来无事，再次回顾学习下这个世界上最好的语言。&lt;/p&gt;
&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;PHP 是一种创建动态交互性站点的强有力的服务器端脚本语言。&lt;/p&gt;
&lt;h2 id=&quot;语法&quot;&gt;&lt;a href=&quot;#语法&quot; class=&quot;headerlink&quot; title=&quot;语法&quot;&gt;&lt;/a&gt;语法&lt;/h2&gt;&lt;p&gt;PHP 脚本在服务器上执行，然后将纯 HTML 结果发送回浏览器。&lt;/p&gt;
&lt;p&gt;PHP 脚本可以放在文档中的任何位置。&lt;/p&gt;
&lt;p&gt;PHP 脚本以 &amp;lt;?php 开始，以 ?&amp;gt; 结束。很多语言的语法都相类似。&lt;/p&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;html&amp;gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;body&amp;gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;?php&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;Hello World!&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 单行注释&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;多行注释&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;?&amp;gt;&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/body&amp;gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>1年以前我就浅学过PHP，用<code>thinkPHP</code>框架开发起来确实比较轻松快捷流水化。最近闲来无事，再次回顾学习下这个世界上最好的语言。</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>PHP 是一种创建动态交互性站点的强有力的服务器端脚本语言。</p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p>PHP 脚本在服务器上执行，然后将纯 HTML 结果发送回浏览器。</p><p>PHP 脚本可以放在文档中的任何位置。</p><p>PHP 脚本以 &lt;?php 开始，以 ?&gt; 结束。很多语言的语法都相类似。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt; </span><br><span class="line">&lt;html&gt; </span><br><span class="line">&lt;body&gt; </span><br><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="keyword">echo</span> <span class="string">"Hello World!"</span>;</span><br><span class="line"><span class="comment">// 单行注释</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">多行注释</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">?&gt;</span> </span><br><span class="line">&lt;/body&gt; </span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><hr><a id="more"></a><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><ul><li><p>变量以 $ 符号开始，后面跟着变量的名称</p></li><li><p>变量名必须以字母或者下划线字符开始</p></li><li><p>变量名只能包含字母数字字符以及下划线（A-z、0-9 和 _ ）</p></li><li><p>变量名不能包含空格</p></li><li><p>变量名是区分大小写的（$y 和 $Y 是两个不同的变量）</p></li></ul><blockquote><p>同js一样PHP也是弱类型脚本语言不需要声明变量的数据类型</p></blockquote><h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><ol><li>local 局部</li><li>global 全局</li><li>static 静态</li><li>parameter 参数</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">$x=<span class="number">5</span>; <span class="comment">// 全局变量 </span></span><br><span class="line">$z=<span class="number">5</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myTest</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    $y=<span class="number">10</span>; <span class="comment">// 局部变量 </span></span><br><span class="line">    <span class="keyword">global</span> $x,$z; <span class="comment">// 函数内部访问全局变量需要加global关键字</span></span><br><span class="line">    $z=$x+$z;</span><br><span class="line">    <span class="comment">// 一样的效果$GLOBALS['z']=$GLOBALS['x']+$GLOBALS['z'];</span></span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line">myTest(); </span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;p&gt;测试函数外变量:&lt;p&gt;"</span>; </span><br><span class="line"><span class="keyword">echo</span> <span class="string">"变量 x 为: $x"</span>; </span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>; </span><br><span class="line"><span class="keyword">echo</span> <span class="string">"变量 y 为: $y"</span>; </span><br><span class="line"><span class="keyword">echo</span> $z; <span class="comment">// 10</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>当一个函数完成时，它的所有变量通常都会被删除。所以当需要时可以声明静态变量</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myTest</span><span class="params">($y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> $x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">echo</span> $x,$y; <span class="comment">// 参数变量</span></span><br><span class="line">    $x++;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">myTest(<span class="number">1</span>);</span><br><span class="line">myTest(<span class="number">2</span>);</span><br><span class="line">myTest(<span class="number">3</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="输出echo和print"><a href="#输出echo和print" class="headerlink" title="输出echo和print"></a>输出echo和print</h3><p>echo 和 print 区别:</p><ul><li>echo - 可以输出一个或多个字符串</li><li>print - 只允许输出一个字符串，返回值总为 1<blockquote><p>echo 输出的速度比 print 快， echo 没有返回值，print有返回值1。</p></blockquote></li></ul><h3 id="语句加分号"><a href="#语句加分号" class="headerlink" title="语句加分号"></a>语句加分号</h3><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><ol><li>String（字符串）</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">$txt1=<span class="string">"Hello"</span>; </span><br><span class="line">$txt2=<span class="string">"World"</span>; </span><br><span class="line"><span class="keyword">echo</span> $txt1 . <span class="string">" "</span> . $txt2;  <span class="comment">// "Hello world"</span></span><br><span class="line"><span class="keyword">echo</span> strlen(<span class="string">"Hello World!"</span>); <span class="comment">// 返回长度</span></span><br><span class="line"><span class="keyword">echo</span> strpos(<span class="string">"Hello World!"</span>,<span class="string">"World"</span>); <span class="comment">// 返回索引和js indexOf很像</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><ol><li>Integer（整型）</li><li>Float（浮点型）</li><li>Boolean（布尔型）</li><li>Array（数组）<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$cars=<span class="keyword">array</span>(<span class="string">"Volvo"</span>,<span class="string">"BMW"</span>,<span class="string">"Toyota"</span>);</span><br><span class="line"><span class="keyword">echo</span> count($cars);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">// 数组遍历</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$cars=<span class="keyword">array</span>(<span class="string">"Volvo"</span>,<span class="string">"BMW"</span>,<span class="string">"Toyota"</span>);</span><br><span class="line">$arrlength=count($cars);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span>($x=<span class="number">0</span>;$x&lt;$arrlength;$x++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> $cars[$x];</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">// 关联数组 object？</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$age=<span class="keyword">array</span>(<span class="string">"Peter"</span>=&gt;<span class="string">"35"</span>,<span class="string">"Ben"</span>=&gt;<span class="string">"37"</span>,<span class="string">"Joe"</span>=&gt;<span class="string">"43"</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"Peter is "</span> . $age[<span class="string">'Peter'</span>] . <span class="string">" years old."</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">// 遍历关联数组</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$age=<span class="keyword">array</span>(<span class="string">"Peter"</span>=&gt;<span class="string">"35"</span>,<span class="string">"Ben"</span>=&gt;<span class="string">"37"</span>,<span class="string">"Joe"</span>=&gt;<span class="string">"43"</span>);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">foreach</span>($age <span class="keyword">as</span> $x=&gt;$x_value)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"Key="</span> . $x . <span class="string">", Value="</span> . $x_value;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li></ol><p>数组排序函数</p><ul><li>sort() - 对数组进行升序排列</li><li>rsort() - 对数组进行降序排列</li><li>asort() - 根据关联数组的值，对数组进行升序排列</li><li>ksort() - 根据关联数组的键，对数组进行升序排列</li><li>arsort() - 根据关联数组的值，对数组进行降序排列</li><li>krsort() - 根据关联数组的键，对数组进行降序排列</li></ul><ol><li>Object（对象）使用class关键字声明类对象。类是可以包含属性和方法的结构。</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  <span class="keyword">var</span> $color;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($color=<span class="string">"green"</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;color = $color;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">what_color</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;color;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><ol><li>NULL（空值）<blockquote><p>PHP var_dump() 函数返回变量的数据类型和值：</p></blockquote><h3 id="常量的声明"><a href="#常量的声明" class="headerlink" title="常量的声明"></a>常量的声明</h3>define()函数 <blockquote><p>define(“slogan”, “hello”);该函数有三个参数:</p></blockquote></li></ol><ul><li>name：必选参数，常量名称，即标志符。</li><li>value：必选参数，常量的值。</li><li>case_insensitive ：可选参数，如果设置为 TRUE，该常量则大小写不敏感。默认是大小写敏感的。</li></ul><h3 id="if…elseif…-else-语句"><a href="#if…elseif…-else-语句" class="headerlink" title="if…elseif….else 语句"></a>if…elseif….else 语句</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$t=date(<span class="string">"H"</span>);</span><br><span class="line"><span class="keyword">if</span> ($t&lt;<span class="string">"10"</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"Have a good morning!"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">elseif</span> ($t&lt;<span class="string">"20"</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"Have a good day!"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"Have a good night!"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="超级全局变量"><a href="#超级全局变量" class="headerlink" title="超级全局变量"></a>超级全局变量</h3><ul><li>$GLOBALS(超级全局变量组)</li><li>$_SERVER(包含了诸如头信息(header)、路径(path)、以及脚本位置(script locations)等等信息的数组)</li><li>$_REQUEST(用于收集HTML表单提交的数据)</li><li>$_POST(用于收集HTML表单提交的数据,method设置为post)</li><li>$_GET(用于收集HTML表单提交的数据,method设置为get,也可以收集URL中发送的数据)</li><li>$_FILES</li><li>$_ENV</li><li>$_COOKIE</li><li>$_SESSION</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$x=<span class="keyword">array</span>(<span class="string">"one"</span>,<span class="string">"two"</span>,<span class="string">"three"</span>);</span><br><span class="line"><span class="keyword">foreach</span> ($x <span class="keyword">as</span> $value)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> $value . <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="魔术常量-预定义常量"><a href="#魔术常量-预定义常量" class="headerlink" title="魔术常量(预定义常量)"></a>魔术常量(预定义常量)</h3><ul><li><strong>LINE</strong>(当前行号)</li><li><strong>FILE</strong>(文件的完整路径和文件名)</li><li><strong>DIR</strong>(文件所在目录)</li><li><strong>FUNCTION</strong>(函数内部返回函数名)</li><li><strong>CLASS</strong>(类内部返回类名)</li><li><strong>TRAIT</strong>(Trait 名包括其被声明的作用区域)从基类继承的成员被插入的 SayWorld Trait 中的 MyHelloWorld 方法所覆盖。其行为 MyHelloWorld 类中定义的方法一致。优先顺序是当前类中的方法会覆盖 trait 方法，而 trait 方法又覆盖了基类中的方法。</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'Hello '</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">trait</span> SayWorld &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">parent</span>::sayHello();</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'World!'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyHelloWorld</span> <span class="keyword">extends</span> <span class="title">Base</span> </span>&#123;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">SayWorld</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">$o = <span class="keyword">new</span> MyHelloWorld();</span><br><span class="line">$o-&gt;sayHello(); <span class="comment">// Hello World</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>METHOD</strong>(返回方法定义时的名称)</li><li><strong>NAMESPACE</strong>(当前的命名空间名称)</li></ul><ol><li>用户编写的代码与PHP内部的类/函数/常量或第三方类/函数/常量之间的名字冲突。</li><li>为很长的标识符名称(通常是为了缓解第一类问题而定义的)创建一个别名（或简短）的名称，提高源代码的可读性。</li></ol><h3 id="php获取下拉菜单的数据"><a href="#php获取下拉菜单的数据" class="headerlink" title="php获取下拉菜单的数据"></a>php获取下拉菜单的数据</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$q = <span class="keyword">isset</span>($_GET[<span class="string">'q'</span>])? htmlspecialchars($_GET[<span class="string">'q'</span>]) : <span class="string">''</span>;</span><br><span class="line"><span class="keyword">if</span>($q) &#123;</span><br><span class="line">        <span class="keyword">if</span>($q ==<span class="string">'BAIDU'</span>) &#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">'百度&lt;br&gt;http://www.baidu.com'</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>($q ==<span class="string">'GOOGLE'</span>) &#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">'Google 搜索&lt;br&gt;http://www.google.com'</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>($q ==<span class="string">'TAOBAO'</span>) &#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">'淘宝&lt;br&gt;http://www.taobao.com'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;form action=<span class="string">""</span> method=<span class="string">"get"</span>&gt; </span><br><span class="line">    &lt;select name=<span class="string">"q"</span>&gt;</span><br><span class="line">    &lt;option value=<span class="string">""</span>&gt;选择一个站点:&lt;/option&gt;</span><br><span class="line">    &lt;option value=<span class="string">"BAIDU"</span>&gt;Runoob&lt;/option&gt;</span><br><span class="line">    &lt;option value=<span class="string">"GOOGLE"</span>&gt;Google&lt;/option&gt;</span><br><span class="line">    &lt;option value=<span class="string">"TAOBAO"</span>&gt;Taobao&lt;/option&gt;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">"提交"</span>&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="获取当前时间"><a href="#获取当前时间" class="headerlink" title="获取当前时间"></a>获取当前时间</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//设置默认当前时区</span></span><br><span class="line">date_default_timezone_set(<span class="string">'PRC'</span>);</span><br><span class="line"><span class="keyword">echo</span> date(<span class="string">'Y-m-d H:i:s'</span>,time());</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="文件引入"><a href="#文件引入" class="headerlink" title="文件引入"></a>文件引入</h3><blockquote><p>include 和 require 的区别</p><ul><li>require 一般放在 PHP 文件的最前面，程序在执行前就会先导入要引用的文件；</li><li>include 一般放在程序的流程控制中，当程序执行时碰到才会引用，简化程序的执行流程。</li><li>require 引入的文件有错误时，执行会中断，并返回一个致命错误；</li><li>include 引入的文件有错误时，会继续执行，并返回一个警告。</li></ul></blockquote><h3 id="打开文件"><a href="#打开文件" class="headerlink" title="打开文件"></a>打开文件</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$file = fopen(<span class="string">"test.txt"</span>,<span class="string">"r"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取文件每一行，直到文件结尾</span></span><br><span class="line"><span class="keyword">while</span>(!feof($file))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> fgets($file). <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">    <span class="comment">//  逐个字符echo fgetc($file);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fclose($file);</span><br></pre></td></tr></table></figure><h3 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"upload_file.php"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"file"</span>&gt;</span>文件名：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"file"</span> <span class="attr">id</span>=<span class="string">"file"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">name</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">header(<span class="string">"Content-Type: text/html;charset=utf-8"</span>);</span><br><span class="line"><span class="comment">// 允许上传的图片后缀</span></span><br><span class="line">$allowedExts = <span class="keyword">array</span>(<span class="string">"gif"</span>, <span class="string">"jpeg"</span>, <span class="string">"jpg"</span>, <span class="string">"png"</span>, <span class="string">"PNG"</span>);</span><br><span class="line">$temp = explode(<span class="string">"."</span>, $_FILES[<span class="string">"file"</span>][<span class="string">"name"</span>]);</span><br><span class="line"><span class="keyword">echo</span> $_FILES[<span class="string">"file"</span>][<span class="string">"size"</span>];</span><br><span class="line">$extension = end($temp);     <span class="comment">// 获取文件后缀名</span></span><br><span class="line"><span class="keyword">if</span> ((($_FILES[<span class="string">"file"</span>][<span class="string">"type"</span>] == <span class="string">"image/gif"</span>)</span><br><span class="line">|| ($_FILES[<span class="string">"file"</span>][<span class="string">"type"</span>] == <span class="string">"image/jpeg"</span>)</span><br><span class="line">|| ($_FILES[<span class="string">"file"</span>][<span class="string">"type"</span>] == <span class="string">"image/jpg"</span>)</span><br><span class="line">|| ($_FILES[<span class="string">"file"</span>][<span class="string">"type"</span>] == <span class="string">"image/pjpeg"</span>)</span><br><span class="line">|| ($_FILES[<span class="string">"file"</span>][<span class="string">"type"</span>] == <span class="string">"image/x-png"</span>)</span><br><span class="line">|| ($_FILES[<span class="string">"file"</span>][<span class="string">"type"</span>] == <span class="string">"image/png"</span>))</span><br><span class="line">&amp;&amp; ($_FILES[<span class="string">"file"</span>][<span class="string">"size"</span>] &lt; <span class="number">204800</span>)   <span class="comment">// 小于 200 kb</span></span><br><span class="line">&amp;&amp; in_array($extension, $allowedExts))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> ($_FILES[<span class="string">"file"</span>][<span class="string">"error"</span>] &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"错误：: "</span> . $_FILES[<span class="string">"file"</span>][<span class="string">"error"</span>] . <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"上传文件名: "</span> . $_FILES[<span class="string">"file"</span>][<span class="string">"name"</span>] . <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"文件类型: "</span> . $_FILES[<span class="string">"file"</span>][<span class="string">"type"</span>] . <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"文件大小: "</span> . ($_FILES[<span class="string">"file"</span>][<span class="string">"size"</span>] / <span class="number">1024</span>) . <span class="string">" kB&lt;br&gt;"</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"文件临时存储的位置: "</span> . $_FILES[<span class="string">"file"</span>][<span class="string">"tmp_name"</span>] . <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 判断当期目录下的 upload 目录是否存在该文件</span></span><br><span class="line">        <span class="comment">// 如果没有 upload 目录，你需要创建它，upload 目录权限为 777</span></span><br><span class="line">        <span class="keyword">if</span> (file_exists(<span class="string">"upload/"</span> . $_FILES[<span class="string">"file"</span>][<span class="string">"name"</span>]))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">echo</span> $_FILES[<span class="string">"file"</span>][<span class="string">"name"</span>] . <span class="string">" 文件已经存在。 "</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 如果 upload 目录不存在该文件则将文件上传到 upload 目录下</span></span><br><span class="line">            move_uploaded_file($_FILES[<span class="string">"file"</span>][<span class="string">"tmp_name"</span>], <span class="string">"upload/"</span> . $_FILES[<span class="string">"file"</span>][<span class="string">"name"</span>]);</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"文件存储在: "</span> . <span class="string">"upload/"</span> . $_FILES[<span class="string">"file"</span>][<span class="string">"name"</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"非法的文件格式"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="设置cookie-必须写在html之前"><a href="#设置cookie-必须写在html之前" class="headerlink" title="设置cookie(必须写在html之前)"></a>设置cookie(必须写在html之前)</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">setcookie(<span class="string">"user"</span>, <span class="string">"cosyer"</span>, time()+<span class="number">3600</span>); <span class="comment">// 1小时后过期</span></span><br><span class="line"><span class="keyword">echo</span> $_COOKIE[<span class="string">"user"</span>]; <span class="comment">// (isset($_COOKIE["user"])判断是否设置了cookie</span></span><br><span class="line"><span class="comment">// 删除setcookie("user", "", time()-3600);设置成过去的时点</span></span><br></pre></td></tr></table></figure><h3 id="存储session"><a href="#存储session" class="headerlink" title="存储session"></a>存储session</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">session_start();</span><br><span class="line"><span class="comment">// 存储 session 数据</span></span><br><span class="line">$_SESSION[<span class="string">'views'</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="comment">// 释放 session 数据</span></span><br><span class="line"><span class="comment">// unset($_SESSION['views']);</span></span><br><span class="line"><span class="comment">// 清空所有数据</span></span><br><span class="line"><span class="comment">// session_destroy();</span></span><br></pre></td></tr></table></figure><h3 id="php发送email"><a href="#php发送email" class="headerlink" title="php发送email"></a>php发送email</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_REQUEST[<span class="string">'email'</span>])) &#123; <span class="comment">// 如果接收到邮箱参数则发送邮件</span></span><br><span class="line">    <span class="comment">// 发送邮件</span></span><br><span class="line">    $email = $_REQUEST[<span class="string">'email'</span>] ;</span><br><span class="line">    $subject = $_REQUEST[<span class="string">'subject'</span>] ;</span><br><span class="line">    $message = $_REQUEST[<span class="string">'message'</span>] ;</span><br><span class="line">    mail(<span class="string">"someone@example.com"</span>, $subject,</span><br><span class="line">    $message, <span class="string">"From:"</span> . $email);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"邮件发送成功"</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123; <span class="comment">// 如果没有邮箱参数则显示表单</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;form method='post' action='mailform.php'&gt;</span></span><br><span class="line"><span class="string">    Email: &lt;input name='email' type='text'&gt;&lt;br&gt;</span></span><br><span class="line"><span class="string">    Subject: &lt;input name='subject' type='text'&gt;&lt;br&gt;</span></span><br><span class="line"><span class="string">    Message:&lt;br&gt;</span></span><br><span class="line"><span class="string">    &lt;textarea name='message' rows='15' cols='40'&gt;</span></span><br><span class="line"><span class="string">    &lt;/textarea&gt;&lt;br&gt;</span></span><br><span class="line"><span class="string">    &lt;input type='submit'&gt;</span></span><br><span class="line"><span class="string">    &lt;/form&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h3><blockquote><p>die(“文件不存在”);</p></blockquote><h3 id="异常处理-同-try-catch-new-Exception"><a href="#异常处理-同-try-catch-new-Exception" class="headerlink" title="异常处理 同 try catch new Exception()"></a>异常处理 同 try catch new Exception()</h3>]]></content:encoded>
      
      <comments>http://mydearest.cn/helloPHP.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>webapck4零配置了解一下</title>
      <link>http://mydearest.cn/webpack4%E9%9B%B6%E9%85%8D%E7%BD%AE%E4%BA%86%E8%A7%A3%E4%B8%80%E4%B8%8B.html</link>
      <guid>http://mydearest.cn/webpack4%E9%9B%B6%E9%85%8D%E7%BD%AE%E4%BA%86%E8%A7%A3%E4%B8%80%E4%B8%8B.html</guid>
      <pubDate>Mon, 26 Nov 2018 01:55:40 GMT</pubDate>
      <description>
      
        &lt;p&gt;webpack4 最主要的卖点便是零配置，要想成为一位webpack配置工程师怎么能不开始了解呢？话不多说，让我们开始体验 webpack 4 的一些特性。&lt;/p&gt;
&lt;h3 id=&quot;entry-和-output&quot;&gt;&lt;a href=&quot;#entry-和-output&quot; class=&quot;headerlink&quot; title=&quot;entry 和 output&quot;&gt;&lt;/a&gt;entry 和 output&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;创建空目录，初始化配置&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mkdir webpack4-quickstart&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt;  webpack4-quickstart&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm init -xyz&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;安装相关依赖&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm i webpack --save-dev&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm i webpack-cli --save-dev&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;webpack： 即 webpack 核心库。它提供了很多 API, 通过 Node.js 脚本中 require(‘webpack’) 的方式来使用 webpack。&lt;/li&gt;
&lt;li&gt;webpack-cli：是 webpack 的命令行工具。webpack 4 之前命令行工具是集成在 webpack 包中的，4.0 开始 webpack 包本身不再集成 cli。&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;package.json添加构建命令&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;scripts&quot;&lt;/span&gt;:&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;build&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;webpack&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>webpack4 最主要的卖点便是零配置，要想成为一位webpack配置工程师怎么能不开始了解呢？话不多说，让我们开始体验 webpack 4 的一些特性。</p><h3 id="entry-和-output"><a href="#entry-和-output" class="headerlink" title="entry 和 output"></a>entry 和 output</h3><ol><li><p>创建空目录，初始化配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir webpack4-quickstart</span><br><span class="line"><span class="built_in">cd</span>  webpack4-quickstart</span><br><span class="line">npm init -xyz</span><br></pre></td></tr></table></figure></li><li><p>安装相关依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm i webpack --save-dev</span><br><span class="line">npm i webpack-cli --save-dev</span><br></pre></td></tr></table></figure></li></ol><ul><li>webpack： 即 webpack 核心库。它提供了很多 API, 通过 Node.js 脚本中 require(‘webpack’) 的方式来使用 webpack。</li><li>webpack-cli：是 webpack 的命令行工具。webpack 4 之前命令行工具是集成在 webpack 包中的，4.0 开始 webpack 包本身不再集成 cli。</li></ul><ol><li>package.json添加构建命令<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>:&#123;</span><br><span class="line">    <span class="string">"build"</span>:<span class="string">"webpack"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><hr><a id="more"></a><ul><li>如果直接开始运行<code>npm run build</code>会因为缺少指定的默认目录的文件导致抛出错误</li><li><p>添加入口文件 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ./src/index.js</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"hello world"</span>)</span><br></pre></td></tr></table></figure></li><li><p>再执行<code>npm run build</code>，则默认生成了’./dist/main.js’文件</p></li></ul><h3 id="development和production模式"><a href="#development和production模式" class="headerlink" title="development和production模式"></a>development和production模式</h3><p>在webpack 4 以前，拥有2份配置文件是webpack项目常见的情况，一个常规的项目配置可能是这样的：</p><blockquote><p>一份开发环境的配置，用来配置 dev server 和其他的一些东西一份生产环境的配置，配置一些 UglifyJSPlugin、sourcemaps 等等但是在webpack 4中，我们可以通过设置命令行参数production和development来区分环境：</p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">  "dev": "webpack --mode development",</span><br><span class="line">  "build": "webpack --mode production"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分别执行<code>npm run dev</code>和<code>npm run build</code>会发现第二种执行的代码被压缩了。</p><blockquote><p>Development mode 则是在速度上进行了优化，只不过不会提供压缩功能。Production mode 可以实现各种优化，包括 代码压缩、tree-shaking…</p></blockquote><h3 id="脚本中覆盖默认的入口和出口"><a href="#脚本中覆盖默认的入口和出口" class="headerlink" title="脚本中覆盖默认的入口和出口"></a>脚本中覆盖默认的入口和出口</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">  "dev": "webpack --mode development ./entry/index.js --output ./output/main.js",</span><br><span class="line">  "build": "webpack --mode production ./entry/index.js --output ./output/main.js"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="babel插件配置es6-gt-es5"><a href="#babel插件配置es6-gt-es5" class="headerlink" title="babel插件配置es6-&gt;es5"></a>babel插件配置es6-&gt;es5</h3><ol><li><p>插件依赖</p><blockquote><p>babel-corebabel-loaderbabel-preset-env 编译 ES6 -&gt; ES5 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i babel-core babel-loader babel-preset-env --save-dev</span><br></pre></td></tr></table></figure></blockquote></li><li><p>通过<code>./babelrc</code>来配置相关插件</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"presets"</span>:[</span><br><span class="line">        <span class="string">"env"</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>2种方式来配置<code>babel-loader</code></p><blockquote><p>webpack.config.js配置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">        use: &#123;</span><br><span class="line">          loader: <span class="string">"babel-loader"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></blockquote></li></ol><blockquote><p>脚本命令配置 –module-bind<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">    "dev": "webpack --mode development --module-bind js=babel-loader",</span><br><span class="line">    "build": "webpack --mode production --module-bind js=babel-loader"</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p></blockquote><p>这里只是简单的介绍，想要详细的了解webpack4的新特性请访问<a href="https://github.com/cosyer/webpack4" target="_blank" rel="noopener">github地址</a>。</p>]]></content:encoded>
      
      <comments>http://mydearest.cn/webpack4%E9%9B%B6%E9%85%8D%E7%BD%AE%E4%BA%86%E8%A7%A3%E4%B8%80%E4%B8%8B.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>实现前端路由</title>
      <link>http://mydearest.cn/%E5%AE%9E%E7%8E%B0%E5%89%8D%E7%AB%AF%E8%B7%AF%E7%94%B1.html</link>
      <guid>http://mydearest.cn/%E5%AE%9E%E7%8E%B0%E5%89%8D%E7%AB%AF%E8%B7%AF%E7%94%B1.html</guid>
      <pubDate>Sat, 24 Nov 2018 03:44:48 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;现代的前端框架react/vue/angular都有路由router的概念，通过手写实现可以帮助我们更好地了解它的工作原理。&lt;/p&gt;
&lt;h3 id=&quot;实现路由的2种方式&quot;&gt;&lt;a href=&quot;#实现路由的2种方式&quot; class=&quot;headerlink&quot; title=&quot;实现路由
        
      
      </description>
      
      <content:encoded><![CDATA[<p>现代的前端框架react/vue/angular都有路由router的概念，通过手写实现可以帮助我们更好地了解它的工作原理。</p><h3 id="实现路由的2种方式"><a href="#实现路由的2种方式" class="headerlink" title="实现路由的2种方式"></a>实现路由的2种方式</h3><ol><li>hash模式</li><li>history模式</li></ol><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><p>hash: 地址栏会多出一个#号，对url造成影响，在某些场景下如微信支付有坑。history: 兼容性差，直接访问汇报400，需要服务器做处理。</p><h3 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h3><p>hash基于hashchange，而history则基于pushState和popState</p><h3 id="hash模式"><a href="#hash模式" class="headerlink" title="hash模式"></a>hash模式</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">  &lt;title&gt;Document&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">  &lt;style&gt;</span></span><br><span class="line"><span class="regexp">    body &#123;</span></span><br><span class="line"><span class="regexp">      margin: 0;</span></span><br><span class="line"><span class="regexp">      padding: 0;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    #login, #index &#123;</span></span><br><span class="line"><span class="regexp">      width: 100%;</span></span><br><span class="line"><span class="regexp">      height: 100%;</span></span><br><span class="line"><span class="regexp">      display: none;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    #login &#123;</span></span><br><span class="line"><span class="regexp">      background: #f5f5f5;</span></span><br><span class="line"><span class="regexp">      display: block;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    #index &#123;</span></span><br><span class="line"><span class="regexp">      background: #aaddff;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>style&gt;</span><br><span class="line">&lt;<span class="regexp">/head&gt;</span></span><br><span class="line"><span class="regexp">&lt;body&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;!--登录页--&gt;</span></span><br><span class="line"><span class="regexp">&lt;div id="login" class="component"&gt;</span></span><br><span class="line"><span class="regexp">  &lt;input type="button" onclick="hashPush('index?id=1')" value="登陆"&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--首页--&gt;</span><br><span class="line">&lt;div id=<span class="string">"index"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"component"</span>&gt;</span><br><span class="line">  &lt;input type=<span class="string">"button"</span> onclick=<span class="string">"hashPush('login?key=2',&#123;data:'params data'&#125;)"</span> value=<span class="string">"退出登陆"</span>&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="comment">// 全局变量</span></span><br><span class="line">  <span class="keyword">var</span> params = &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 页面跳转</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">hashPush</span>(<span class="params">url, param</span>) </span>&#123;</span><br><span class="line">    location.hash = <span class="string">"#"</span> + url</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 解析url</span></span><br><span class="line">    <span class="keyword">let</span> questionIndex = url.indexOf(<span class="string">"?"</span>)</span><br><span class="line">    <span class="keyword">let</span> path = url</span><br><span class="line">    <span class="keyword">if</span> (questionIndex &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">      path = url.substr(<span class="number">0</span>, questionIndex)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (param) &#123;</span><br><span class="line">      params[path] = param</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 监听hash的变动</span></span><br><span class="line">  <span class="built_in">window</span>.addEventListener(<span class="string">'hashchange'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> url = location.hash.slice(<span class="number">1</span>) || <span class="string">"index"</span></span><br><span class="line">    <span class="comment">// 解析url</span></span><br><span class="line">    <span class="keyword">let</span> questionIndex = url.indexOf(<span class="string">"?"</span>)</span><br><span class="line">    <span class="keyword">let</span> path, query</span><br><span class="line">    <span class="keyword">if</span> (questionIndex &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">      path = url.substr(<span class="number">0</span>, questionIndex)</span><br><span class="line">      <span class="keyword">let</span> queryString = url.substr(questionIndex + <span class="number">1</span>)</span><br><span class="line">      <span class="keyword">let</span> queryArray = queryString.split(<span class="string">"&amp;"</span>)</span><br><span class="line">      <span class="keyword">let</span> queryObject = &#123;&#125;</span><br><span class="line">      queryArray.map(<span class="function"><span class="params">str</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> equalIndex = str.indexOf(<span class="string">"="</span>)</span><br><span class="line">        <span class="keyword">if</span> (equalIndex &gt; <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="keyword">let</span> key = str.substr(<span class="number">0</span>, equalIndex)</span><br><span class="line">          <span class="keyword">let</span> value = str.substr(equalIndex + <span class="number">1</span>)</span><br><span class="line">          queryObject[key] = value</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">      query = queryObject</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      path = url</span><br><span class="line">      query = &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'接收到url传递的参数'</span>, query)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'直接用params传递的参数'</span>, params[path])</span><br><span class="line">    setVisible(path)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 显示跟路由地址对应的内容，隐藏其他内容</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">setVisible</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> components = <span class="built_in">Array</span>.from(<span class="built_in">document</span>.body.querySelectorAll(<span class="string">".component"</span>))</span><br><span class="line">    components.map(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (item.id === url) &#123;</span><br><span class="line">        <span class="comment">// console.log('显示',item.id)</span></span><br><span class="line">        item.style.display = <span class="string">'block'</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// console.log('隐藏',item.id)</span></span><br><span class="line">        item.style.display = <span class="string">'none'</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>html&gt;</span><br></pre></td></tr></table></figure><h3 id="history模式-需要服务器环境"><a href="#history模式-需要服务器环境" class="headerlink" title="history模式(需要服务器环境)"></a>history模式(需要服务器环境)</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">  &lt;title&gt;Document&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">  &lt;style&gt;</span></span><br><span class="line"><span class="regexp">    body &#123;</span></span><br><span class="line"><span class="regexp">      margin: 0;</span></span><br><span class="line"><span class="regexp">      padding: 0;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    #login, #index &#123;</span></span><br><span class="line"><span class="regexp">      width: 100%;</span></span><br><span class="line"><span class="regexp">      height: 100%;</span></span><br><span class="line"><span class="regexp">      display: none;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    #login &#123;</span></span><br><span class="line"><span class="regexp">      background: #f5f5f5;</span></span><br><span class="line"><span class="regexp">      display: block;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    #index &#123;</span></span><br><span class="line"><span class="regexp">      background: #aaddff;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>style&gt;</span><br><span class="line">&lt;<span class="regexp">/head&gt;</span></span><br><span class="line"><span class="regexp">&lt;body&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;!--登录页--&gt;</span></span><br><span class="line"><span class="regexp">&lt;div id="login" class="component"&gt;</span></span><br><span class="line"><span class="regexp">  &lt;input type="button" onclick="historyPush('index')" value="登陆"&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--首页--&gt;</span><br><span class="line">&lt;div id=<span class="string">"index"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"component"</span>&gt;</span><br><span class="line">  &lt;input type=<span class="string">"button"</span> onclick=<span class="string">"historyPush('login',&#123;data:'params data'&#125;)"</span> value=<span class="string">"退出登陆"</span>&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="comment">// 全局变量</span></span><br><span class="line">  <span class="keyword">var</span> params = &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 页面跳转</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">historyPush</span>(<span class="params">url, param</span>) </span>&#123;</span><br><span class="line">    history.pushState(param, <span class="string">'我是页面标题'</span>, url)</span><br><span class="line">    <span class="keyword">if</span> (param) &#123;</span><br><span class="line">      params[url] = param</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 监听前进后退</span></span><br><span class="line">  <span class="built_in">window</span>.addEventListener(<span class="string">'popstate'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// e.state 就是pushState 的时候，传的第一个参数</span></span><br><span class="line">    <span class="keyword">let</span> url = state.target.location.pathName</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'接收到传递的参数'</span>, e.state)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'直接用params传递的参数'</span>, params[path])</span><br><span class="line">    setVisible(path)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 显示跟路由地址对应的内容，隐藏其他内容</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">setVisible</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> components = <span class="built_in">Array</span>.from(<span class="built_in">document</span>.body.querySelectorAll(<span class="string">".component"</span>))</span><br><span class="line">    components.map(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (item.id === url) &#123;</span><br><span class="line">        <span class="comment">// console.log('显示',item.id)</span></span><br><span class="line">        item.style.display = <span class="string">'block'</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// console.log('隐藏',item.id)</span></span><br><span class="line">        item.style.display = <span class="string">'none'</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>html&gt;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://mydearest.cn/%E5%AE%9E%E7%8E%B0%E5%89%8D%E7%AB%AF%E8%B7%AF%E7%94%B1.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>js函数柯里化</title>
      <link>http://mydearest.cn/js%E5%87%BD%E6%95%B0%E6%9F%AF%E9%87%8C%E5%8C%96.html</link>
      <guid>http://mydearest.cn/js%E5%87%BD%E6%95%B0%E6%9F%AF%E9%87%8C%E5%8C%96.html</guid>
      <pubDate>Thu, 22 Nov 2018 01:25:48 GMT</pubDate>
      <description>
      
        &lt;h3 id=&quot;函数柯里化定义&quot;&gt;&lt;a href=&quot;#函数柯里化定义&quot; class=&quot;headerlink&quot; title=&quot;函数柯里化定义&quot;&gt;&lt;/a&gt;函数柯里化定义&lt;/h3&gt;&lt;p&gt;函数柯里化（function currying）又称部分求值。一个currying的函数首先会接受一些参数，接受了这些参数后，&lt;/p&gt;
&lt;p&gt;该函数并不会立即求值，而是继续返回另外一个函数，刚才传入的参数在函数形成的闭包里被保存起来。待到函数真正需要求值的时候，之前传入的参数都会被一次性用于求值。&lt;/p&gt;
&lt;p&gt;把接受多个参数的函数变换成接受一个单一参数（最初函数的第一个参数）的函数，并且返回接受余下的参数而且返回结果的新函数。&lt;/p&gt;
&lt;p&gt;顾名思义，柯里化其实本身是固定一个可以预期的参数，并返回一个特定的函数，处理批特定的需求。这增加了函数的适用性，但同时也降低了函数的适用范围。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;x,y&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; x + y;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 函数只传入一个参数的时候实现加法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;curry&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;x&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;y&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; x + y;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; add2 = curry(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;add2(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// 2 即curry(1)(1)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h3 id="函数柯里化定义"><a href="#函数柯里化定义" class="headerlink" title="函数柯里化定义"></a>函数柯里化定义</h3><p>函数柯里化（function currying）又称部分求值。一个currying的函数首先会接受一些参数，接受了这些参数后，</p><p>该函数并不会立即求值，而是继续返回另外一个函数，刚才传入的参数在函数形成的闭包里被保存起来。待到函数真正需要求值的时候，之前传入的参数都会被一次性用于求值。</p><p>把接受多个参数的函数变换成接受一个单一参数（最初函数的第一个参数）的函数，并且返回接受余下的参数而且返回结果的新函数。</p><p>顾名思义，柯里化其实本身是固定一个可以预期的参数，并返回一个特定的函数，处理批特定的需求。这增加了函数的适用性，但同时也降低了函数的适用范围。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x,y</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 函数只传入一个参数的时候实现加法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">curry</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">y</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x + y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> add2 = curry(<span class="number">1</span>);</span><br><span class="line">add2(<span class="number">1</span>) <span class="comment">// 2 即curry(1)(1)</span></span><br></pre></td></tr></table></figure><hr><a id="more"></a><h3 id="函数柯里化实践"><a href="#函数柯里化实践" class="headerlink" title="函数柯里化实践"></a>函数柯里化实践</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过以上简单介绍我们大概了解了，函数柯里化基本是在做这么一件事情：只传递给函数一部分参数来调用它，让它返回一个函数去处理剩下的参数。用公式表示就是我们要做的事情其实是</span></span><br><span class="line"></span><br><span class="line">fn(a,b,c,d)=&gt;fn(a)(b)(c)(d)；</span><br><span class="line"></span><br><span class="line">fn(a,b,c,d)=&gt;fn(a，b)(c)(d)；</span><br><span class="line"></span><br><span class="line">fn(a,b,c,d)=&gt;fn(a)(b，c，d)；</span><br><span class="line"></span><br><span class="line">......</span><br><span class="line"></span><br><span class="line"><span class="comment">// 再或者这样：</span></span><br><span class="line"></span><br><span class="line">fn(a,b,c,d)=&gt;fn(a)(b)(c)(d)()；</span><br><span class="line"></span><br><span class="line">fn(a,b,c,d)=&gt;fn(a)；fn(b)；fn(c)；fn(d)；fn()；</span><br></pre></td></tr></table></figure><blockquote><p>通用的函数柯里化版本</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这里需要传入长度</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">curry</span>(<span class="params">fn, length, ary</span>) </span>&#123;</span><br><span class="line">    length = length || fn.length;</span><br><span class="line">    ary = ary || [];<span class="comment">//记录所有传入的参数</span></span><br><span class="line">    <span class="keyword">var</span> slice = <span class="built_in">Array</span>.prototype.slice;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">arguments</span>.length &lt; length) &#123;</span><br><span class="line">            <span class="built_in">Array</span>.prototype.push.apply(ary, slice.call(<span class="built_in">arguments</span>));<span class="comment">//每次把参数合并到ary数组中</span></span><br><span class="line">            <span class="keyword">return</span> curry(fn, length - <span class="built_in">arguments</span>.length, ary)<span class="comment">//把还需传参的长度和已有参数数组传入curry，递归调用</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> fn.apply(<span class="keyword">this</span>, ary.concat(slice.call(<span class="built_in">arguments</span>))); <span class="comment">//调用求职函数，记得把此次传入的参数合并到ary数组再计算</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> total = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> total = <span class="number">0</span>;</span><br><span class="line">        [].slice.call(<span class="built_in">arguments</span>).forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">            total += item;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> total;</span><br><span class="line">    &#125;;</span><br><span class="line"> <span class="keyword">let</span> fn = curry(total, <span class="number">4</span>);</span><br><span class="line"> fn(<span class="number">1</span>)(<span class="number">2</span>)(<span class="number">3</span>)(<span class="number">4</span>);<span class="comment">//10</span></span><br><span class="line"> fn(<span class="number">1</span>,<span class="number">2</span>)(<span class="number">3</span>)(<span class="number">4</span>);<span class="comment">//10</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这里是无参数时开始计算所有的cost</span></span><br><span class="line"><span class="keyword">var</span> currying = <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> args = [];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">arguments</span>.length === <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> fn.apply(<span class="keyword">this</span>, args);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            [].push.apply(args, <span class="built_in">arguments</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">arguments</span>.callee;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> cost = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> money = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>, l = <span class="built_in">arguments</span>.length; i &lt; l; i++)&#123;</span><br><span class="line">            money += <span class="built_in">arguments</span>[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> money;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;());</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> cost = currying(cost);<span class="comment">//转化为currying函数</span></span><br><span class="line"></span><br><span class="line">cost(<span class="number">100</span>);<span class="comment">//未真正求值</span></span><br><span class="line">cost(<span class="number">200</span>);<span class="comment">//未真正求值</span></span><br><span class="line">cost(<span class="number">300</span>);<span class="comment">//未真正求值</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(cost());<span class="comment">//求值并输出：600</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 和toString().valueOf()时计算和是一样的道理</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">num</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> _add = <span class="function"><span class="keyword">function</span>(<span class="params">args</span>)</span>&#123;</span><br><span class="line">        num+=args;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">arguments</span>.callee;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// (function foo(args)&#123;num+=args return foo;&#125;)</span></span><br><span class="line">    <span class="keyword">var</span> _add =(<span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">args</span>)</span>&#123;num+=args; <span class="keyword">return</span> foo;&#125;)</span><br><span class="line">    _add.toString = _add.valueOf = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> num;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> _add;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="为了减少函数传参，同时将一些固定参数私有化"><a href="#为了减少函数传参，同时将一些固定参数私有化" class="headerlink" title="为了减少函数传参，同时将一些固定参数私有化"></a>为了减少函数传参，同时将一些固定参数私有化</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">curry</span>(<span class="params">func</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> l = func.length;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">curried</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> args = [].slice.call(<span class="built_in">arguments</span>);</span><br><span class="line">    <span class="keyword">if</span> (args.length &lt; <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> argtsInner = [].slice.call(<span class="built_in">arguments</span>);</span><br><span class="line">        <span class="keyword">return</span> curried.apply(<span class="keyword">this</span>, arrs.concat(argtsInner))</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> func.apply(<span class="keyword">this</span>, args)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span> (<span class="params">a, b, c</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">console</span>.log([a, b, c])</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> curried = curry(f);</span><br><span class="line">curried(<span class="number">1</span>)(<span class="number">2</span>)(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><h3 id="函数柯里化的优点"><a href="#函数柯里化的优点" class="headerlink" title="函数柯里化的优点"></a>函数柯里化的优点</h3><ol><li><p>延迟计算 可以传递需要的参数，等到何时想要结果，再一并计算。</p></li><li><p>参数复用 有些参数相同，只需要传递一遍即可，不需要每次都传，太繁琐。</p></li></ol>]]></content:encoded>
      
      <comments>http://mydearest.cn/js%E5%87%BD%E6%95%B0%E6%9F%AF%E9%87%8C%E5%8C%96.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>\[1,2,3\]是JSON吗？</title>
      <link>http://mydearest.cn/%5B1,2,3%5D%E6%98%AFJSON%E5%90%97%EF%BC%9F.html</link>
      <guid>http://mydearest.cn/%5B1,2,3%5D%E6%98%AFJSON%E5%90%97%EF%BC%9F.html</guid>
      <pubDate>Wed, 21 Nov 2018 03:17:20 GMT</pubDate>
      <description>
      
        &lt;p&gt;A: “这个接口我传个 JSON 给你，格式是这样的 ‘[1, 2, 3]’”&lt;/p&gt;
&lt;p&gt;B: “等下，这不是数组吗，JSON 应该有键啊，类似这样才行’{ “key”: [1, 2, 3] }’”&lt;/p&gt;
&lt;p&gt;A: “不，这就是 JSON 格式的数据”&lt;/p&gt;
&lt;p&gt;B: “啊，是吗？”
你是否也有这样的疑惑？ wappalyzer chrome网页分析插件&lt;/p&gt;
&lt;hr&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>A: “这个接口我传个 JSON 给你，格式是这样的 ‘[1, 2, 3]’”</p><p>B: “等下，这不是数组吗，JSON 应该有键啊，类似这样才行’{ “key”: [1, 2, 3] }’”</p><p>A: “不，这就是 JSON 格式的数据”</p><p>B: “啊，是吗？”你是否也有这样的疑惑？ wappalyzer chrome网页分析插件</p><hr><a id="more"></a><h2 id="什么是JSON"><a href="#什么是JSON" class="headerlink" title="什么是JSON"></a>什么是JSON</h2><p><strong>JSON(JavaScript Object Notation) 是一种轻量级的数据交换格式。</strong></p><p>它仅仅是一种格式，就好比厨师脑中的食谱，这道菜有什么材料。而从原材料变成成品给顾客食用，这个过程食谱并没有实际参与，只是一个指导作用。</p><p>所以JSON也是不存在于我们的程序中，不存在任何地方，只是一个思维，存在我们脑海里。</p><p>这个思维，就是JSON这种格式应该包含哪些元素。</p><ul><li>“名称/值”对的集合</li><li>值的有序列表</li></ul><blockquote><p>所以”[1,2,3]”是符合JSON格式的数据结构的</p></blockquote><blockquote><p>但不能说[1, 2, 3]是一个JSON，它在javascript中可以被转换为数组，也可以在其他语言中被转换为数组（如果有这种类型）。而之所以只有这两种，是因为大部分现代计算机语言都支持。那[1, 2, undefined, 3]符合JSON格式吗？“既然结构要是计算机语言都支持的，那结构中的值也需要吧，而undefined是javascript独有的，其他语言并没有，所以不符合JSON格式。”</p></blockquote><p>合法的JSON值有以下6种</p><ul><li>string</li><li>number</li><li>boolean</li><li>null</li><li>object</li><li>array</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"person"</span>: &#123;</span><br><span class="line">        <span class="string">"name"</span>: <span class="string">"ltaoo"</span>,</span><br><span class="line">        <span class="string">"age"</span>: <span class="number">18</span>,</span><br><span class="line">        <span class="string">"skills"</span>: [<span class="string">"javascript"</span>, <span class="string">"html"</span>, <span class="string">"css"</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"happy"</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="JS中的JSON"><a href="#JS中的JSON" class="headerlink" title="JS中的JSON"></a>JS中的JSON</h2><p>在JavaScript中，如果在请求接口时要传递数据，我们往往会说“传一个JSON”，从上面已经知道JSON只是一个格式，那我们传递的到底是什么？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一个简单的 post 请求</span></span><br><span class="line"><span class="keyword">const</span> body = &#123;</span><br><span class="line">    name: <span class="string">'ltaoo'</span>,</span><br><span class="line">    age: <span class="number">18</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">fetch(<span class="string">'https://easy-mock.com/mock/5a1d30028e6ddb24964c2d91/business/api/login'</span>, &#123;</span><br><span class="line">    method: <span class="string">'POST'</span>,</span><br><span class="line">    body,</span><br><span class="line">&#125;)</span><br><span class="line">    .then(<span class="function">(<span class="params">res</span>) =&gt;</span> res.json())</span><br><span class="line">    .then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(data);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><blockquote><p>但实际上并没有将参数传递过去，即Headers中并不存在Request Payload，需要将body使用JSON.stringify()方法转换为一个字符串后，才能成功传递。body:JSON.stringify(body) or ‘{“name”: ‘ltaoo’,”age”: 18}’</p></blockquote><p>但两者还是有区别的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> body = &#123;</span><br><span class="line">    name: <span class="string">'ltaoo'</span>,</span><br><span class="line">    skills: <span class="literal">undefined</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(body)); <span class="comment">// &#123;"name":"ltaoo"&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> body = &#123;</span><br><span class="line">    name: <span class="string">'ltaoo'</span>,</span><br><span class="line">    skills: [<span class="literal">undefined</span>],</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(body)); <span class="comment">// &#123;"name":"ltaoo","skills":[null]&#125;。</span></span><br></pre></td></tr></table></figure><h3 id="JSON-parse"><a href="#JSON-parse" class="headerlink" title="JSON.parse"></a>JSON.parse</h3><blockquote><p>JSON.parse() 方法用来解析JSON字符串，构造由字符串描述的JavaScript值或对象。可以用来判断某个字符串是否符合JSON格式</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>JSON是日常开发中最常使用的，但仅限于“会用”，实际上JSON的用途已经不局限在“数据交换”，NoSQL、配置文件也有JSON的身影，深入了解是有必要的，毕竟看起来这么“简单”。</p>]]></content:encoded>
      
      <comments>http://mydearest.cn/%5B1,2,3%5D%E6%98%AFJSON%E5%90%97%EF%BC%9F.html#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
