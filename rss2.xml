<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>cosyer&#39;s Blog</title>
    <link>http://mydearest.cn/</link>
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>陈宇的博客</description>
    <pubDate>Sun, 15 Mar 2020 15:30:07 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>Angular组件通讯</title>
      <link>http://mydearest.cn/2020/Angular%E7%BB%84%E4%BB%B6%E9%80%9A%E8%AE%AF.html</link>
      <guid>http://mydearest.cn/2020/Angular%E7%BB%84%E4%BB%B6%E9%80%9A%E8%AE%AF.html</guid>
      <pubDate>Sun, 15 Mar 2020 14:54:18 GMT</pubDate>
      <description>
      
        &lt;p&gt;组件通讯，意在不同的指令和组件之间共享信息。&lt;/p&gt;
&lt;h2 id=&quot;父-gt-子-input&quot;&gt;&lt;a href=&quot;#父-gt-子-input&quot; class=&quot;headerlink&quot; title=&quot;父-&amp;gt;子 input&quot;&gt;&lt;/a&gt;父-&amp;gt;子 input&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// parent.html&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;child [content]=&amp;quot;i&amp;quot;&amp;gt;&amp;lt;/child&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// child.ts&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@Input() content:string;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;子-gt-父-output&quot;&gt;&lt;a href=&quot;#子-gt-父-output&quot; class=&quot;headerlink&quot; title=&quot;子=&amp;gt;父 output&quot;&gt;&lt;/a&gt;子=&amp;gt;父 output&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// parent.html&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;child (changeNumber)=&amp;quot;changeNumber($event)&amp;quot;&amp;gt;&amp;lt;/child&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// child.ts&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@Output() changeNumber: EventEmitter&amp;lt;number&amp;gt; = new EventEmitter();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;this.changeNumber(1);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>组件通讯，意在不同的指令和组件之间共享信息。</p><h2 id="父-gt-子-input"><a href="#父-gt-子-input" class="headerlink" title="父-&gt;子 input"></a>父-&gt;子 input</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// parent.html</span><br><span class="line">&lt;child [content]=&quot;i&quot;&gt;&lt;/child&gt;</span><br><span class="line"></span><br><span class="line">// child.ts</span><br><span class="line">@Input() content:string;</span><br></pre></td></tr></table></figure><h2 id="子-gt-父-output"><a href="#子-gt-父-output" class="headerlink" title="子=&gt;父 output"></a>子=&gt;父 output</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// parent.html</span><br><span class="line">&lt;child (changeNumber)=&quot;changeNumber($event)&quot;&gt;&lt;/child&gt;</span><br><span class="line"></span><br><span class="line">// child.ts</span><br><span class="line">@Output() changeNumber: EventEmitter&lt;number&gt; = new EventEmitter();</span><br><span class="line"></span><br><span class="line">this.changeNumber(1);</span><br></pre></td></tr></table></figure><hr><a id="more"></a><h2 id="子获取父实例"><a href="#子获取父实例" class="headerlink" title="子获取父实例"></a>子获取父实例</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// child.ts</span><br><span class="line">import &#123; Component, Input, EventEmitter, Output,Host,Inject,forwardRef &#125; from &apos;@angular/core&apos;;</span><br><span class="line"></span><br><span class="line">constructor( @Host() @Inject(forwardRef(() =&gt; ParentPage)) app: ParentPage) &#123;</span><br><span class="line">    app.content // 获取父实例的参数</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="父获取子实例"><a href="#父获取子实例" class="headerlink" title="父获取子实例"></a>父获取子实例</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@ViewChild(ChildPage) child:ChildPage;</span><br><span class="line"></span><br><span class="line">this.child.content //获取子实例的参数</span><br></pre></td></tr></table></figure><h2 id="service-公共的"><a href="#service-公共的" class="headerlink" title="service 公共的"></a>service 公共的</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// parent.ts</span><br><span class="line">import&#123;myService&#125;from &apos;../child/myService&apos;</span><br><span class="line"></span><br><span class="line">实例化 service.i++;</span><br><span class="line"></span><br><span class="line">// child.ts</span><br><span class="line">service.i</span><br></pre></td></tr></table></figure><p>记得在app.module.ts 加上providers</p><h2 id="EventEmitter-eventbus"><a href="#EventEmitter-eventbus" class="headerlink" title="EventEmitter(eventbus)"></a>EventEmitter(eventbus)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// eventbus.service.ts</span><br><span class="line">import &#123;Component,Injectable,EventEmitter&#125; from &apos;@angular/core&apos;;</span><br><span class="line">@Injectable()</span><br><span class="line">export class myService &#123;</span><br><span class="line">    change: EventEmitter&lt;number&gt;;</span><br><span class="line"></span><br><span class="line">    constructor()&#123;</span><br><span class="line">        this.change = new EventEmitter();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// parent.ts</span><br><span class="line">service.change.emit(&apos;123&apos;);</span><br><span class="line"></span><br><span class="line">// child.ts</span><br><span class="line">service.change.subscribe((value:string)=&gt;&#123;&#125;)</span><br></pre></td></tr></table></figure><h2 id="订阅"><a href="#订阅" class="headerlink" title="订阅"></a>订阅</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">// service</span><br><span class="line">import &#123; Injectable &#125; from &apos;@angular/core&apos;;</span><br><span class="line">import &#123; Subject &#125; from &apos;rxjs/Subject&apos;;</span><br><span class="line"></span><br><span class="line">@Injectable()</span><br><span class="line">export class myService &#123;</span><br><span class="line"></span><br><span class="line">    private Source = new Subject&lt;any&gt;();</span><br><span class="line">    Status$ = this.Source.asObservable();</span><br><span class="line">    StatusMission(message: any) &#123;</span><br><span class="line">        this.Source.next(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">// parent.ts</span><br><span class="line">this.service.StatusMission(&apos;123&apos;);</span><br><span class="line"></span><br><span class="line">// child.ts</span><br><span class="line">this.subscription = service.Status$.subscribe(message =&gt; &#123;&#125;);</span><br><span class="line"></span><br><span class="line">ngOnDestroy() &#123;</span><br><span class="line">    this.subscription.unsubscribe();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上七种组件与组件的通讯方式，可以选择应用于适合的场景。</p><p>顺带介绍下重载当前路由，在Angular中，当点击当前路由的链接时，默认是忽略的。</p><h2 id="糟糕的解决方案"><a href="#糟糕的解决方案" class="headerlink" title="糟糕的解决方案"></a>糟糕的解决方案</h2><ol><li>跳出去，再跳回来。</li><li>让浏览器刷新整个页面。然而目前我们可以通过 <code>onSameUrlNavigation</code> 来解决这个问题。</li></ol><p><code>onSameUrlNavigation</code> 有两个值’reload’和’ignore’。默认为’ignore’。</p><ul><li><p>定义当路由器收到一个导航到当前 URL 的请求时应该怎么做。 默认情况下，路由器将会忽略这次导航。但这样会阻止类似于 “刷新” 按钮的特性。 使用该选项可以配置导航到当前 URL 时的行为。</p></li><li><p>路由启动配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app.routing.module.ts</span></span><br><span class="line">imports: [RouterModule.forRoot(routes, &#123;<span class="attr">onSameUrlNavigation</span>: <span class="string">'reload'</span>&#125;)]</span><br></pre></td></tr></table></figure></li></ul><p><code>reload</code>并不会真正的执行加载工作，它只是重新触发了路由上的events事件循环。也可以动态配置reload<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.router.onSameUrlNavigation = <span class="string">'reload'</span>;</span><br><span class="line"><span class="keyword">this</span>.router.navigateByUrl(<span class="keyword">this</span>.router.url).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.router.onSameUrlNavigation = <span class="string">'ignore'</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><ul><li>Route配置一系列的路由事件在何种情况下应该被触发，此时我们需要配置 runGuardsAndResolvers 选项，它有3个可选值。</li></ul><ol><li><p>paramsChange 只有当参数变化时才重新启动，例如 ‘article/:id’，参数指的就是这里的id。</p></li><li><p>paramsOrQueryParamsChange 当参数或查询参数变化时重新启动。例如：’article/:category?limit=10，参数指 ‘category’，查询参数指’limit’；</p></li><li><p>always 无论何种情况都重新启动</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> routes: Routes = [</span><br><span class="line">   &#123;</span><br><span class="line">       path: <span class="string">'article/:id'</span>,</span><br><span class="line">       component: ArticleComponent,</span><br><span class="line">       runGuardsAndResolvers: <span class="string">'paramsChange'</span>,</span><br><span class="line">   &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ul><li>组件中处理路由事件<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">ArticleComponent</span> <span class="title">implement</span> <span class="title">OnInit</span>, <span class="title">OnDestroy</span> </span>&#123;</span><br><span class="line">   subscription: Subscription;</span><br><span class="line">   <span class="keyword">constructor</span>(private router: Router) &#123; &#125;</span><br><span class="line">   ngOnInit() &#123;</span><br><span class="line">       <span class="keyword">this</span>.subscription = <span class="keyword">this</span>.router.events.pipe(</span><br><span class="line">           filter(<span class="function"><span class="params">event</span> =&gt;</span> event instanceOf NavigationEnd)</span><br><span class="line">       ).subscribe(<span class="function"><span class="params">_</span> =&gt;</span> &#123;...&#125;) <span class="comment">// 执行业务操作</span></span><br><span class="line">   &#125;</span><br><span class="line">   ngOnDestroy() &#123;</span><br><span class="line">       <span class="keyword">this</span>.subscription.unsubscribe(); <span class="comment">// 不要忘记处理手动订阅</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content:encoded>
      
      <comments>http://mydearest.cn/2020/Angular%E7%BB%84%E4%BB%B6%E9%80%9A%E8%AE%AF.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>javascript设计模式</title>
      <link>http://mydearest.cn/2019/javascript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F.html</link>
      <guid>http://mydearest.cn/2019/javascript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F.html</guid>
      <pubDate>Tue, 17 Dec 2019 17:15:46 GMT</pubDate>
      <description>
      
        &lt;p&gt;如果从作用上来划分，JavaScript设计模式大概分为五种设计类型：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;创建型设计模式&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;结构型设计模式&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;行为型设计模式&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;技巧型设计模式&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;架构型设计模式&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;简单工厂模式&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;外观模式&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;模板方法模式&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;链模式&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;同步模块&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;工厂方法模式&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;适配器模式&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;观察者模式&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;委托模式&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;异步模块模式&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;抽象工厂模式&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;代理模式&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;状态模式&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;数据访问对象模式&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Widget模式&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;建造者模式&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;装饰者模式&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;策略模式&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;节流模式&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;MVC模式&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;原型模式&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;桥接模式&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;职责连模式&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;简单模板模式&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;MVP模式&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;单例模式&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;组合模式&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;命令模式&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;惰性模式&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;MVVM模式&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;享元模式&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;访问者模式&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;参与者模式&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;中介者模式&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;等待者模式&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;备忘录模式&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;迭代器模式&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;解释器模式&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>如果从作用上来划分，JavaScript设计模式大概分为五种设计类型：</p><table><thead><tr><th style="text-align:left">创建型设计模式</th><th style="text-align:left">结构型设计模式</th><th style="text-align:left">行为型设计模式</th><th style="text-align:left">技巧型设计模式</th><th style="text-align:left">架构型设计模式</th></tr></thead><tbody><tr><td style="text-align:left">简单工厂模式</td><td style="text-align:left">外观模式</td><td style="text-align:left">模板方法模式</td><td style="text-align:left">链模式</td><td style="text-align:left">同步模块</td></tr><tr><td style="text-align:left">工厂方法模式</td><td style="text-align:left">适配器模式</td><td style="text-align:left">观察者模式</td><td style="text-align:left">委托模式</td><td style="text-align:left">异步模块模式</td></tr><tr><td style="text-align:left">抽象工厂模式</td><td style="text-align:left">代理模式</td><td style="text-align:left">状态模式</td><td style="text-align:left">数据访问对象模式</td><td style="text-align:left">Widget模式</td></tr><tr><td style="text-align:left">建造者模式</td><td style="text-align:left">装饰者模式</td><td style="text-align:left">策略模式</td><td style="text-align:left">节流模式</td><td style="text-align:left">MVC模式</td></tr><tr><td style="text-align:left">原型模式</td><td style="text-align:left">桥接模式</td><td style="text-align:left">职责连模式</td><td style="text-align:left">简单模板模式</td><td style="text-align:left">MVP模式</td></tr><tr><td style="text-align:left">单例模式</td><td style="text-align:left">组合模式</td><td style="text-align:left">命令模式</td><td style="text-align:left">惰性模式</td><td style="text-align:left">MVVM模式</td></tr><tr><td style="text-align:left"></td><td style="text-align:left">享元模式</td><td style="text-align:left">访问者模式</td><td style="text-align:left">参与者模式</td><td style="text-align:left"></td></tr><tr><td style="text-align:left"></td><td style="text-align:left"></td><td style="text-align:left">中介者模式</td><td style="text-align:left">等待者模式</td><td style="text-align:left"></td></tr><tr><td style="text-align:left"></td><td style="text-align:left"></td><td style="text-align:left">备忘录模式</td><td style="text-align:left"></td><td style="text-align:left"></td></tr><tr><td style="text-align:left"></td><td style="text-align:left"></td><td style="text-align:left">迭代器模式</td><td style="text-align:left"></td><td style="text-align:left"></td></tr><tr><td style="text-align:left"></td><td style="text-align:left"></td><td style="text-align:left">解释器模式</td><td style="text-align:left"></td></tr></tbody></table><hr><a id="more"></a><h2 id="第-33-章-异国战场-参与者模式"><a href="#第-33-章-异国战场-参与者模式" class="headerlink" title="第 33 章 异国战场-参与者模式"></a>第 33 章 异国战场-参与者模式</h2><ul><li>参与者模式：在特定的作用域中执行给定的函数,并将参数原封不动地传递。</li></ul><h3 id="事件绑定方法"><a href="#事件绑定方法" class="headerlink" title="事件绑定方法"></a>事件绑定方法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> A = &#123;</span><br><span class="line">    event: &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 事件模块（事件绑定方法）</span></span><br><span class="line">A.event.on = <span class="function"><span class="keyword">function</span> (<span class="params">dom, type, fn</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 绑定 w3c 标准事件</span></span><br><span class="line">    <span class="keyword">if</span> (dom.addEventListener) &#123;</span><br><span class="line">        dom.addEventListener(type, fn, <span class="literal">false</span>);</span><br><span class="line">    <span class="comment">// 绑定 ie 标准事件</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (dom.attachEvent) &#123;</span><br><span class="line">        dom.attachEvent(<span class="string">'on'</span> + type, fn);</span><br><span class="line">    <span class="comment">// 绑定 dom 事件</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        dom[<span class="string">'on'</span> + type] = fn;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*上面存在的问题， addEventListener 没有办法在回调函数中传递参数， 做如下的修改*/</span></span><br><span class="line">A.event.on2 = <span class="function"><span class="keyword">function</span> (<span class="params">dom, tyoe, fn, data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (dom.addEventListener) &#123;</span><br><span class="line">        dom.addEventListener(type, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">            <span class="comment">// 在dom环境中调用fn,并传递事件对象以及参数</span></span><br><span class="line">            fn.call(dom, e, data)</span><br><span class="line">        &#125;, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// .............</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>通过 call 和 apply 方法使我们在特定作用域中执行某个函数并传入参数。</p><h3 id="实现-bind-方法"><a href="#实现-bind-方法" class="headerlink" title="实现 bind 方法"></a>实现 bind 方法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 上面的方法确实是解决了参数传递的问题， 但是引发了一个新的问题</span></span><br><span class="line"><span class="comment">* 新的问题就是添加的是匿名函数导致事件回调函数不能移除了</span></span><br><span class="line"><span class="comment">* 为了解决这个问题， 就引入了bind 闭包</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="keyword">let</span> bind = <span class="function"><span class="keyword">function</span> (<span class="params">fn, context</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 闭包返回新函数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 对 fn 装饰并返回</span></span><br><span class="line">        <span class="keyword">return</span> fn.apply(context, <span class="built_in">arguments</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对于bind 方法的测试</span></span><br><span class="line"><span class="keyword">let</span> demoObj = &#123;</span><br><span class="line">    title: <span class="string">'这是一个例子'</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> demoFn = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.title)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> bindFn = bind(demoFn, demoObj);</span><br><span class="line">demoFn();               <span class="comment">// undefined</span></span><br><span class="line">bindFn();               <span class="comment">// '这是一个例子'</span></span><br></pre></td></tr></table></figure><p>bindFn返回了结果，因为 bindFn 在执行时 demoObj 参与了进来并提供了作用域。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 实际应用</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="keyword">let</span> button = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'button'</span>)[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">let</span> p = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'p'</span>)[<span class="number">0</span>];</span><br><span class="line"><span class="comment">// 输出参数和 this 对象</span></span><br><span class="line"><span class="keyword">let</span> demoFn = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>, <span class="keyword">this</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当没有传入参与对象式 浏览器下 this 指向 Window</span></span><br><span class="line"><span class="keyword">let</span> bindFn = bind(demoFn);</span><br><span class="line">button.addEventListener(<span class="string">'click'</span>, bindFn); <span class="comment">// [MouseEvent]  Window</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 传入button this 指向了button</span></span><br><span class="line">bindFn = bind(demoFn, button); <span class="comment">// [MouseEvent] &lt;button&gt;按钮&lt;/button&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 传入P this 指向了P</span></span><br><span class="line">bindFn = bind(demoFn, p); <span class="comment">// [MouseEvent] &lt;p&gt;p&lt;/p&gt;</span></span><br><span class="line"></span><br><span class="line">button.removeEventListener(<span class="string">'click'</span>, bindFn)</span><br></pre></td></tr></table></figure><p>不使用实现的 bind 方法，我们也可以用原生的 bind</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> bindFN = demoFn.bind()</span><br></pre></td></tr></table></figure><h3 id="函数柯里化"><a href="#函数柯里化" class="headerlink" title="函数柯里化"></a>函数柯里化</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 第一个需求是添加事件和移除事件已经成功了</span></span><br><span class="line"><span class="comment">* 第二个需求就是函数添加额外的自定义参数</span></span><br><span class="line"><span class="comment">* 这个时候就需要借助于函数柯里化了</span></span><br><span class="line"><span class="comment">* 函数柯里化： 根据传递的参数不同， 让一个函数存在多种状态， 处理的是函数。</span></span><br><span class="line"><span class="comment">* */</span></span><br></pre></td></tr></table></figure><p>函数柯里化（function currying）又称部分求值。一个函数首先会接受一些参数，接受了这些参数后，</p><p>该函数并不会立即求值，而是继续返回另外一个函数，刚才传入的参数在函数形成的闭包里被保存起来。待到函数真正需要求值的时候，之前传入的参数都会被一次性用于求值。</p><p>把接受多个参数的函数变换成接受一个单一参数（最初函数的第一个参数）的函数，并且返回接受余下的参数而且返回结果的新函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> curry = <span class="function"><span class="keyword">function</span> (<span class="params">fn</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 缓存数组的 slice 方法</span></span><br><span class="line">    <span class="keyword">let</span> Slice = [].slice;</span><br><span class="line">    <span class="comment">// 从第二个参数开始截取</span></span><br><span class="line">    <span class="keyword">let</span> args = Slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="comment">// 闭包返回新函数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// arguments 类数组 转化为数组</span></span><br><span class="line">        <span class="keyword">let</span> addArgs = Slice.call(<span class="built_in">arguments</span>),</span><br><span class="line">            <span class="comment">// 拼接参数</span></span><br><span class="line">            allArgs = args.concat(addArgs);</span><br><span class="line">            <span class="comment">// 返回新函数</span></span><br><span class="line">        <span class="keyword">return</span> fn.apply(<span class="literal">null</span>, allArgs);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 柯里化的测试</span></span><br><span class="line"><span class="keyword">let</span> add = <span class="function"><span class="keyword">function</span> (<span class="params">num1, num2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> num1 + num2;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> add5 = <span class="function"><span class="keyword">function</span> (<span class="params">num</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> add(<span class="number">5</span>, num)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(add(<span class="number">1</span>, <span class="number">2</span>));          <span class="comment">// 3</span></span><br><span class="line"><span class="built_in">console</span>.log(add5(<span class="number">6</span>));           <span class="comment">// 11</span></span><br><span class="line"></span><br><span class="line">add5 = curry(add, <span class="number">5</span>);</span><br><span class="line"><span class="built_in">console</span>.log(add5(<span class="number">6</span>));           <span class="comment">// 11</span></span><br><span class="line"><span class="keyword">let</span> add7and8 = curry(add, <span class="number">7</span>, <span class="number">8</span>);</span><br><span class="line"><span class="built_in">console</span>.log(add7and8());        <span class="comment">// 15</span></span><br></pre></td></tr></table></figure><p>对 add 方法的多态扩展不需要再声明函数了。</p><h3 id="通过柯里化重写-bind"><a href="#通过柯里化重写-bind" class="headerlink" title="通过柯里化重写 bind"></a>通过柯里化重写 bind</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 通过柯里化重写bind</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="keyword">let</span> bind = <span class="function"><span class="keyword">function</span> (<span class="params">fn, context</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> Slice = <span class="built_in">Array</span>.prototype.slice,</span><br><span class="line">        args = Slice.call(<span class="built_in">arguments</span>, <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> addArgs = Slice.call(<span class="built_in">arguments</span>),</span><br><span class="line">            allArgs = addArgs.concat(args);</span><br><span class="line">        <span class="keyword">return</span> fn.apply(context, allArgs);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">let</span> demoData1 = &#123;</span><br><span class="line">    text: <span class="string">'这是第一组数据'</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> demoData2 = &#123;</span><br><span class="line">    text: <span class="string">'这是第二组数据'</span></span><br><span class="line">&#125;;</span><br><span class="line">bindFn = bind(demoFn, button, demoData1); <span class="comment">// [MouseEvent, Object] &lt;button&gt;按钮&lt;/button&gt;</span></span><br><span class="line">bindFn = bind(demoFn, button, demoData1, demoData2); <span class="comment">// [MouseEvent, Object, Object] &lt;button&gt;按钮&lt;/button&gt;</span></span><br></pre></td></tr></table></figure><p>以之前的 button 为例，我们现在能在回调函数中获取传递的自定义的数据了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> bindFn = demoFn.bind(button, demoData1); <span class="comment">// [Object, MouseEvent] &lt;button&gt;按钮&lt;/button&gt; 事件对象放后面的</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 为了浏览器兼容性的实现， 我们需要给未提供bind方法的浏览器添加bind方法</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">Function</span>.prototype.bind === <span class="literal">undefined</span>) &#123;</span><br><span class="line">    <span class="built_in">Function</span>.prototype.bind = <span class="function"><span class="keyword">function</span> (<span class="params">context</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> Slice = <span class="built_in">Array</span>.prototype.slice,</span><br><span class="line">            args = Slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> addArgs = Slice.call(<span class="built_in">arguments</span>),</span><br><span class="line">                allArgs = args.concat(addArgs);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.apply(context, allArgs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>对于函数绑定，将函数以函数指针（函数名的方式传递），使函数在被绑定对象上的作用域中执行，可以顺利访问到对象内部的数据。缺点会消耗更多的内存执行速度会稍慢。比较常用于事件，setTimeout等异步逻辑的回调函数。</p><p>对于函数柯里化则是将接受多个参数的函数转化成接受一部分参数的新函数，余下的参数保存下来。当调用式传入的参数和保存的参数一起执行。因为要保存参数到闭包内，所以同样也会多消耗些资源。</p><h2 id="第-34-章-入场模式-等待者模式"><a href="#第-34-章-入场模式-等待者模式" class="headerlink" title="第 34 章  入场模式-等待者模式"></a>第 34 章  入场模式-等待者模式</h2><ul><li><p>等待者模式: 通过对多个异步进程进行监听，来触发未来的动作。(构建简易Promise对象，实现状态机)</p></li><li><p>场景: 不能确定先后的异步逻辑，但需要等待所有异步逻辑的完成。所有成功后执行成功回调，有一个失败就执行失败的回调函数。</p></li></ul><p>不需要实时监听所有异步逻辑是否完成，只需要监听注册的异步逻辑的状态发生改变时，对所有的异步逻辑的状态进行一次确认迭代。</p><h3 id="接口拆分"><a href="#接口拆分" class="headerlink" title="接口拆分"></a>接口拆分</h3><p>一个等待者对象内部定义了3个数组，分别存储监听对象，成功回调和失败回调；1个监控对象的类，有2个属性（成功状态和失败状态），2个方法（成功和失败方法）；私有方法_exec来处理成功或失败的回调；3个共有方法接口：when（监听异步逻辑）、done（添加成功回调）、fail（添加失败回调）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 等待者对象</span></span><br><span class="line"><span class="keyword">var</span> Waiter = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 注册了等待对象容器</span></span><br><span class="line">    <span class="keyword">var</span> dfd = [] ;</span><br><span class="line">    <span class="comment">// 成功回调方法容器</span></span><br><span class="line">    <span class="keyword">var</span> doneArr = [] ;</span><br><span class="line">    <span class="comment">// 失败回调方法容器</span></span><br><span class="line">    <span class="keyword">var</span> failArr = [] ;</span><br><span class="line">    <span class="comment">// 缓存Array方法slice</span></span><br><span class="line">    <span class="keyword">var</span> _slice = <span class="built_in">Array</span>.prototype.slice;</span><br><span class="line">    <span class="comment">// 保存当前等待者对象</span></span><br><span class="line">    <span class="keyword">var</span> that = <span class="keyword">this</span> ;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 监控对象类</span></span><br><span class="line">    <span class="keyword">var</span> Primise = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 监控对象是否解决成功状态</span></span><br><span class="line">        <span class="keyword">this</span>.resolved = <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">// 监控对象是否解决失败状态</span></span><br><span class="line">        <span class="keyword">this</span>.rejected = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 监控对象类原型方法</span></span><br><span class="line">    Primise.prototype = &#123;</span><br><span class="line">        <span class="comment">// 解决成功</span></span><br><span class="line">        resolve : <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;,</span><br><span class="line">        <span class="comment">// 解决失败</span></span><br><span class="line">        reject : <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建监控对象</span></span><br><span class="line">    that.Deferred = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Primise() ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 回调执行方法</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">_exec</span>(<span class="params">arr</span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 监控异步方法 参数：监控对象</span></span><br><span class="line">    that.when = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 解决成功回调函数添加方法</span></span><br><span class="line">    that.done = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 解决失败回调函数添加方法</span></span><br><span class="line">    that.fail = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="监控对象类原型方法"><a href="#监控对象类原型方法" class="headerlink" title="监控对象类原型方法"></a>监控对象类原型方法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">Primise.prototype = &#123;</span><br><span class="line">    <span class="comment">// 解决成功</span></span><br><span class="line">    resolve : <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 设置当前监控对象解决成功</span></span><br><span class="line">        <span class="keyword">this</span>.resolved = <span class="literal">true</span> ;</span><br><span class="line">        <span class="comment">// 如果没有监控对象则取消执行</span></span><br><span class="line">        <span class="keyword">if</span>(!dfd.length) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 遍历所有注册了的监控对象</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = dfd.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="comment">// 如果有任意一个监控对象没有被解决或者解决失败则返回</span></span><br><span class="line">            <span class="keyword">if</span>(dfd[i] &amp;&amp; !dfd[i].resolved || dfd[i].rejected) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 清除监控对象 成功了就不需要再监控</span></span><br><span class="line">            dfd.splice(i, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 执行解决成功回调方法</span></span><br><span class="line">        _exec(doneArr);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 解决失败</span></span><br><span class="line">    reject : <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 设置当前监控对象解决失败</span></span><br><span class="line">        <span class="keyword">this</span>.rejected = <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">// 如果没有监控对象则取消执行</span></span><br><span class="line">        <span class="keyword">if</span>(!dfd.length) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 清除所有监控对象</span></span><br><span class="line">        dfd.splice(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">// 执行解决成功回调方法</span></span><br><span class="line">        _exec(failArr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="回调执行方法"><a href="#回调执行方法" class="headerlink" title="回调执行方法"></a>回调执行方法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_exec</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> len = arr.length;</span><br><span class="line">    <span class="comment">// 遍历回调数组执行回调</span></span><br><span class="line">    <span class="keyword">for</span>(; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 执行回调函数</span></span><br><span class="line">            arr[i] &amp;&amp; arr[i]();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(e) &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="监控异步方法-参数：监控对象"><a href="#监控异步方法-参数：监控对象" class="headerlink" title="监控异步方法 参数：监控对象"></a>监控异步方法 参数：监控对象</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">that.when = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 设置监控对象</span></span><br><span class="line">    dfd = _slice.call(<span class="built_in">arguments</span>);</span><br><span class="line">    <span class="comment">// 获取监控对象数组长度</span></span><br><span class="line">    <span class="keyword">var</span> i = dfd.length;</span><br><span class="line">    <span class="comment">// 向前遍历监控对象，最后一个监控对象的索引值为length-1</span></span><br><span class="line">    <span class="keyword">for</span>(--i; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="comment">// 如果不存在监控对象，或者监控对象已经解决，或者不是监控对象</span></span><br><span class="line">        <span class="keyword">if</span>(!dfd[i] || dfd[i].resolved || dfd[i].rejected || !dfd[i] <span class="keyword">instanceof</span> Primise) &#123;</span><br><span class="line">            <span class="comment">// 清理内存，清除当前监控对象</span></span><br><span class="line">            dfd.splice(i, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 返回等待者对象</span></span><br><span class="line">    <span class="keyword">return</span> that;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="解决成功回调函数添加方法"><a href="#解决成功回调函数添加方法" class="headerlink" title="解决成功回调函数添加方法"></a>解决成功回调函数添加方法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">that.done = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 向成功回调函数容器中添加回调方法</span></span><br><span class="line">    doneArr = doneArr.concat(_slice.call(<span class="built_in">arguments</span>));</span><br><span class="line">    <span class="comment">// 返回等待者对象</span></span><br><span class="line">    <span class="keyword">return</span> that;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="解决失败回调函数添加方法"><a href="#解决失败回调函数添加方法" class="headerlink" title="解决失败回调函数添加方法"></a>解决失败回调函数添加方法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">that.fail = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 向失败回调函数容器中添加回调方法</span></span><br><span class="line">    failArr = failArr.concat(_slice.call(<span class="built_in">arguments</span>));</span><br><span class="line">    <span class="comment">// 返回等待者对象</span></span><br><span class="line">    <span class="keyword">return</span> that;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个等待者对象</span></span><br><span class="line"><span class="keyword">var</span> waiter = <span class="keyword">new</span> Waiter();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一个彩蛋，3秒停止</span></span><br><span class="line"><span class="keyword">var</span> first = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 创建监听对象</span></span><br><span class="line">    <span class="keyword">var</span> dtd = waiter.Deferred();</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'first finish'</span>);</span><br><span class="line">        <span class="comment">// 发布解决成功问题</span></span><br><span class="line">        dtd.resolve();</span><br><span class="line">        <span class="comment">// 发布解决失败问题</span></span><br><span class="line">        <span class="comment">// dtd.reject();</span></span><br><span class="line">    &#125;, <span class="number">3000</span>) ;</span><br><span class="line">    <span class="comment">// 返回监听对象</span></span><br><span class="line">    <span class="keyword">return</span> dtd;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二个彩蛋，6秒后停止</span></span><br><span class="line"><span class="keyword">var</span> second = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 创建简体你对象</span></span><br><span class="line">    <span class="keyword">var</span> dtd = waiter.Deferred();</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'second finish'</span>);</span><br><span class="line">        <span class="comment">// 发布解决成功消息</span></span><br><span class="line">        dtd.resolve();</span><br><span class="line">        <span class="comment">// 发布解决失败问题</span></span><br><span class="line">        <span class="comment">// dtd.reject();</span></span><br><span class="line">    &#125;, <span class="number">6000</span>);</span><br><span class="line">    <span class="comment">// 返回监控对象</span></span><br><span class="line">    <span class="keyword">return</span> dtd;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听两个彩蛋的工作状态，并执行相应的成功回调函数与失败回调函数</span></span><br><span class="line">waiter</span><br><span class="line">    <span class="comment">// 监听两个彩蛋</span></span><br><span class="line">    .when(first, second)</span><br><span class="line">    <span class="comment">// 添加成功回调函数</span></span><br><span class="line">    .done(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'success'</span>);</span><br><span class="line">    &#125;, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'success again'</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// 添加失败回调函数</span></span><br><span class="line">    .fail(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'fail'</span>);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 封装get请求</span></span><br><span class="line"><span class="keyword">var</span> ajaxGet = <span class="function"><span class="keyword">function</span>(<span class="params">url, success, fail</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">    <span class="comment">// 创建监测对象</span></span><br><span class="line">    <span class="keyword">var</span> dtd = waiter.Deferred();</span><br><span class="line">    xhr.onload = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 请求成功</span></span><br><span class="line">        <span class="keyword">if</span>(xhr.status &gt;= <span class="number">200</span> &amp;&amp; xhr.status &lt; <span class="number">300</span> || xhr.status == <span class="number">304</span>) &#123;</span><br><span class="line">            success &amp;&amp; success() ;</span><br><span class="line">        <span class="comment">// 请求失败 </span></span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            dtd.reject() ;</span><br><span class="line">            fail &amp;&amp; fail() ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; ;</span><br><span class="line">    xhr.open(<span class="string">'get'</span>, url, <span class="literal">true</span>);</span><br><span class="line">    xhr.send(<span class="literal">null</span>);</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">// 长轮询</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> <span class="title">getAjaxData</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 保存当前函数</span></span><br><span class="line">    <span class="keyword">var</span> fn = <span class="built_in">arguments</span>.callee;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        $.get(<span class="string">'./test.php'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'轮询一次'</span>);</span><br><span class="line">            <span class="comment">// 再一次执行轮询</span></span><br><span class="line">            fn();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;, <span class="number">5000</span>);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><p>等待者模式适合用于处理比较耗时的操作比如定时器操作、异步请求等。等待者模式提供了抽象非阻塞的解决方案。通过创建 Promise 对象，对应状态变化返回响应，同时监听这些响应信息，并为之提供相应的回调，根据状态执行相应的回调方法。</p>]]></content:encoded>
      
      <comments>http://mydearest.cn/2019/javascript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>事件机制</title>
      <link>http://mydearest.cn/2019/%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F.html</link>
      <guid>http://mydearest.cn/2019/%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F.html</guid>
      <pubDate>Sun, 24 Nov 2019 14:26:18 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;事件机制的核心就是发布-订阅模式。维护一个对象，对象的 key 存的是事件 type，对应的 value 为触发相应 type 的回调函数，即 listeners，然后 trigger 时遍历通知，即 forEach 进行回调执行。&lt;/p&gt;
&lt;figure class=&quot;h
        
      
      </description>
      
      <content:encoded><![CDATA[<p>事件机制的核心就是发布-订阅模式。维护一个对象，对象的 key 存的是事件 type，对应的 value 为触发相应 type 的回调函数，即 listeners，然后 trigger 时遍历通知，即 forEach 进行回调执行。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EventTarget</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">this</span>.listener = [];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 监听事件</span></span><br><span class="line">    on(type, callback) &#123;</span><br><span class="line">        <span class="comment">// 如果是第一次监听该事件，则初始化数组</span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>.listeners[type]) <span class="keyword">this</span>.listeners[type] = [];</span><br><span class="line">        <span class="keyword">this</span>.listeners[type].push(callback);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 只监听一次</span></span><br><span class="line">    once(type, callback) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>.listeners[type]) <span class="keyword">this</span>.listeners[type] = [];</span><br><span class="line">        <span class="comment">// once 只触发一次，触发后 off 即可 回调函数加上标识</span></span><br><span class="line">        callback._once = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">this</span>.listeners[type].push(callback); </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 取消监听</span></span><br><span class="line">    off(type, callback) &#123;</span><br><span class="line">        <span class="keyword">const</span> listeners = <span class="keyword">this</span>.listeners[type];</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(listeners)) &#123;</span><br><span class="line">            <span class="comment">// filter 返回新的数组，会每次对 this.listeners[type] 分配新的空间</span></span><br><span class="line">            <span class="comment">// this.listeners[type] = listeners.filter(l =&gt; l !== callback);</span></span><br><span class="line">            <span class="comment">// 根据 type 取消对应的回调</span></span><br><span class="line">            <span class="keyword">const</span> index = listeners.indexOf(callback);</span><br><span class="line">            <span class="comment">// 用 splice 要好些，直接操作原数组</span></span><br><span class="line">            <span class="keyword">this</span>.listeners[type].splice(index, <span class="number">1</span>);</span><br><span class="line">            <span class="comment">// 如果回调为空，删除对该事件的监听</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.listeners[type].length === <span class="number">0</span>) <span class="keyword">delete</span> <span class="keyword">this</span>.listeners[type];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 执行 扳机社</span></span><br><span class="line">    trigger(event) &#123;</span><br><span class="line">        <span class="comment">// type 为必传属性</span></span><br><span class="line">        <span class="keyword">const</span> &#123; type &#125; = event;</span><br><span class="line">        <span class="keyword">if</span> (!type) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'没有要触发的事件！'</span>);</span><br><span class="line">        <span class="comment">// 判断是否之前对该事件进行监听了</span></span><br><span class="line">        <span class="keyword">const</span> listeners = <span class="keyword">this</span>.listeners[type];</span><br><span class="line">        <span class="keyword">if</span> (!listeners) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">`没有对象监听 <span class="subst">$&#123;type&#125;</span> 事件！`</span>);</span><br><span class="line">        <span class="keyword">if</span> (!event.target) event.target = <span class="keyword">this</span>;</span><br><span class="line">        listeners.forEach(<span class="function"><span class="params">l</span> =&gt;</span> &#123;</span><br><span class="line">            l(event);</span><br><span class="line">            <span class="comment">// 如果通过 once 监听，执行一次后取消</span></span><br><span class="line">            <span class="keyword">if</span> (l._once) <span class="keyword">this</span>.off(type, l);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleMessage</span>(<span class="params">event</span>) </span>&#123; <span class="built_in">console</span>.log(<span class="string">`message received: <span class="subst">$&#123; event.message &#125;</span>`</span>); &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleMessage2</span>(<span class="params">event</span>) </span>&#123; <span class="built_in">console</span>.log(<span class="string">`message2 received: <span class="subst">$&#123; event.message &#125;</span>`</span>); &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> target = <span class="keyword">new</span> EventTarget();</span><br><span class="line"></span><br><span class="line">target.on(<span class="string">'message'</span>, handleMessage);</span><br><span class="line">target.on(<span class="string">'message'</span>, handleMessage2);</span><br><span class="line">target.trigger(&#123; <span class="attr">type</span>: <span class="string">'message'</span>, <span class="attr">message</span>: <span class="string">'hello custom event'</span> &#125;); <span class="comment">// 打印 message，message2</span></span><br><span class="line"></span><br><span class="line">target.off(<span class="string">'message'</span>, handleMessage);</span><br><span class="line">target.trigger(&#123; <span class="attr">type</span>: <span class="string">'message'</span>, <span class="attr">message</span>: <span class="string">'off the event'</span> &#125;); <span class="comment">// 只打印 message2</span></span><br><span class="line"></span><br><span class="line">target.once(<span class="string">'words'</span>, handleMessage);</span><br><span class="line">target.trigger(&#123; <span class="attr">type</span>: <span class="string">'words'</span>, <span class="attr">message</span>: <span class="string">'hello2 once event'</span> &#125;); <span class="comment">// 打印 words</span></span><br><span class="line">target.trigger(&#123; <span class="attr">type</span>: <span class="string">'words'</span>, <span class="attr">message</span>: <span class="string">'hello2 once event'</span> &#125;); <span class="comment">// 报错：没有对象监听 words 事件！</span></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://mydearest.cn/2019/%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>关于requestAnimationFrame</title>
      <link>http://mydearest.cn/2019/%E5%85%B3%E4%BA%8ErequestAnimationFrame.html</link>
      <guid>http://mydearest.cn/2019/%E5%85%B3%E4%BA%8ErequestAnimationFrame.html</guid>
      <pubDate>Sun, 22 Sep 2019 04:24:48 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;在JS中，我们可以使用 &lt;code&gt;setTimeout&lt;/code&gt; 和 &lt;code&gt;setIntarval&lt;/code&gt; 实现动画，但是 H5 的出现，让我们又多了两种实现动画的方式，分别是 CSS 动画（&lt;code&gt;transition&lt;/code&gt;、&lt;code&gt;an
        
      
      </description>
      
      <content:encoded><![CDATA[<p>在JS中，我们可以使用 <code>setTimeout</code> 和 <code>setIntarval</code> 实现动画，但是 H5 的出现，让我们又多了两种实现动画的方式，分别是 CSS 动画（<code>transition</code>、<code>animation</code>）和 H5的<code>canvas</code> 实现。除此以外，H5还提供了一个专门用于请求动画的API，让 DOM 动画、canvas动画、svg动画、webGL动画等有一个专门的刷新机制。</p><h3 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h3><p><code>requestAnimationFrame</code> 方法会告诉浏览器希望执行动画并请求浏览器在下一次重绘之前调用回调函数来更新动画。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.requestAnimationFrame(callback)</span><br></pre></td></tr></table></figure><ul><li>callback：下一次重绘之前更新动画帧所调用的函数，<strong>callback仅有一个参数，为DOMHighResTimeStamp参数，表示requestAnimationFrame()开始执行回调函数的时刻。</strong></li><li>返回值：一个 long 类型整数，唯一标志元组在列表中的位置，你可以传这个值给<code>cancelAnimationFrame()</code> 以取消动画。</li></ul><p>在使用和实现上， <code>requestAnimationFrame</code> 与 <code>setTimeout</code> 类似。举个例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">let</span> rafId = <span class="literal">null</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 回调函数</span></span><br><span class="line"><span class="comment"> * @param time requestAnimationFrame 调用该函数时，自动传入的一个时间</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">requestAnimation</span>(<span class="params">time</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(time); <span class="comment">// 打印执行requestAnimation函数的时刻</span></span><br><span class="line">  <span class="comment">// 动画没有执行完，则递归渲染</span></span><br><span class="line">  <span class="keyword">if</span> (count &lt; <span class="number">5</span>) &#123;</span><br><span class="line">    count++;</span><br><span class="line">    <span class="comment">// 渲染下一帧</span></span><br><span class="line">    rafId = <span class="built_in">window</span>.requestAnimationFrame(requestAnimation);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 渲染第一帧</span></span><br><span class="line"><span class="built_in">window</span>.requestAnimationFrame(requestAnimation);</span><br></pre></td></tr></table></figure><h3 id="2-怎样执行"><a href="#2-怎样执行" class="headerlink" title="2.怎样执行"></a>2.怎样执行</h3><ul><li>首先判断 <code>document.hidden</code> 属性是否可见（true），可见状态下才能继续执行以下步骤</li><li>浏览器清空上一轮的动画函数</li><li><code>requestAnimationFrame</code> 将回调函数追加到动画帧请求回调函数列表的末尾<strong>注意：当执行 requestAnimationFrame(callback)的时候，不会立即调用 callback 回调函数，只是将其放入回调函数队列而已，同时注意，每个 callback回调函数都有一个 cancelled 标志符，初始值为 false，并对外不可见。</strong></li><li>当页面可见并且动画帧请求callback<strong>回调函数列表</strong>不为空时，浏览器会<strong>定期</strong>将这些回调函数加入到浏览器 UI 线程的队列中（<strong>由系统来决定回调函数的执行时机</strong>）。当浏览器执行这些 callback 回调函数的时候，会判断每个元组的 callback 的cancelled标志符，只有 <strong>cancelled 为 false</strong> 时，才执行callback回调函数。</li></ul><h3 id="3-优点"><a href="#3-优点" class="headerlink" title="3. 优点"></a>3. 优点</h3><ol><li><code>requestAnimationFrame</code> 自带<strong>函数节流</strong>功能，采用<strong>系统时间间隔</strong>，保持最佳绘制效率，不会因为间隔时间的过短，造成过度绘制，增加页面开销，也不会因为间隔时间过长，造成动画卡顿，不流程，影响页面美观。浏览器的重绘频率一般会和显示器的刷新率保持同步。大多数采用 W3C规范，浏览器的渲染页面的标准频率也为 60 FPS（frames/per second）即每秒重绘60次，<strong>requestAnimationFrame的基本思想是 让页面重绘的频率和刷新频率保持同步</strong>，即每 1000ms / 60 = <strong>16.7ms</strong>执行一次。通过 <code>requestAnimationFrame</code> 调用回调函数引起的页面重绘或回流的时间间隔和显示器的刷新时间间隔相同。所以  <code>requestAnimationFrame</code>  不需要像 <code>setTimeout</code> 那样传递时间间隔，而是浏览器通过系统获取并使用显示器刷新频率。例如在某些高频事件（resize，scroll 等）中，使用 <code>requestAnimationFrame</code> 可以防止在一个刷新间隔内发生多次函数执行，这样保证了流程度，也节省了开销</li><li>另外，该函数的<strong>延时效果是精确的</strong>，没有<code>setTimeout</code>或<code>setInterval</code>不准的情况（JS是单线程的，<code>setTimeout</code> 任务被放进异步队列中，只有当主线程上的任务执行完以后，才会去检查该队列的任务是否需要开始执行，造成时间延时）。<code>setTimeout</code><strong>的执行只是在内存中对图像属性进行改变，这个改变必须要等到下次浏览器重绘时才会被更新到屏幕上</strong>。如果和屏幕刷新步调不一致，就可能导致中间某些帧的操作被跨越过去，直接更新下下一帧的图像。即 <strong>掉帧</strong>使用  <code>requestAnimationFrame</code> 执行动画，最大优势是<strong>能保证回调函数在屏幕每一次刷新间隔中只被执行一次</strong>，这样就不会引起丢帧，动画也就不会卡顿</li><li><p>节省资源，节省开销在之前介绍<code>requestAnimationFrame</code>执行过程，我们知道只有当页面激活的状态下，页面刷新任务才会开始，才执行 <code>requestAnimationFrame</code>，当页面隐藏或最小化时，会被暂停，页面显示，会继续执行。<strong>节省了 CPU 开销</strong>。<strong>注意：当页面被隐藏或最小化时，定时器<code>setTimeout</code>仍在后台执行动画任务，此时刷新动画是完全没有意义的（实际上 FireFox/Chrome 浏览器对定时器做了优化：页面闲置时，如果时间间隔小于 1000ms，则停止定时器，与<code>requestAnimationFrame</code>行为类似。如果时间间隔&gt;=1000ms，定时器依然在后台执行）</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在浏览器开发者工具的Console页执行下面代码。</span></span><br><span class="line"><span class="comment">// 当开始输出count后，切换浏览器tab页，再切换回来，可以发现打印的值从离开前的值继续输出</span></span><br><span class="line"><span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">requestAnimation</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (count &lt; <span class="number">100</span>) &#123;</span><br><span class="line">            count++;</span><br><span class="line">            <span class="built_in">console</span>.log(count);</span><br><span class="line">            requestAnimationFrame(requestAnimation);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">requestAnimationFrame(requestAnimation);</span><br></pre></td></tr></table></figure></li><li><p>能够在动画流刷新之后执行，即<strong>上一个动画流会完整执行</strong></p></li></ol><h3 id="4-实现"><a href="#4-实现" class="headerlink" title="4. 实现"></a>4. 实现</h3><p>我们可以使用 <code>requestAnimationFrame</code> 实现<code>setInterval</code>及 <code>setTimeout</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// setInterval实现</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setInterval</span>(<span class="params">callback, interval</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> timer</span><br><span class="line">    <span class="keyword">const</span> now = <span class="built_in">Date</span>.now</span><br><span class="line">    <span class="keyword">let</span> startTime = now()</span><br><span class="line">    <span class="keyword">let</span> endTime = startTime</span><br><span class="line">    <span class="keyword">const</span> loop = () =&#123;</span><br><span class="line">        timer = <span class="built_in">window</span>.requestAnimationFrame(loop)</span><br><span class="line">        endTime = now()</span><br><span class="line">        <span class="keyword">if</span> (endTime - startTime &gt;= interval) &#123;</span><br><span class="line">            startTime = endTime = now()</span><br><span class="line">            callback(timer)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    timer = <span class="built_in">window</span>.requestAnimationFrame(loop)</span><br><span class="line">    <span class="keyword">return</span> timer</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">0</span></span><br><span class="line">setInterval(timer =&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a)</span><br><span class="line">    a++</span><br><span class="line">    <span class="keyword">if</span> (a === <span class="number">3</span>) <span class="built_in">window</span>.cancelAnimationFrame(timer)</span><br><span class="line">&#125;, <span class="number">1000</span>)</span><br><span class="line"><span class="comment">// 0</span></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 2</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// setTimeout 实现</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setTimeout</span>(<span class="params">callback, interval</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> timer</span><br><span class="line">    <span class="keyword">const</span> now = <span class="built_in">Date</span>.now</span><br><span class="line">    <span class="keyword">let</span> startTime = now()</span><br><span class="line">    <span class="keyword">let</span> endTime = startTime</span><br><span class="line">    <span class="keyword">const</span> loop = () =&#123;</span><br><span class="line">        timer = <span class="built_in">window</span>.requestAnimationFrame(loop)</span><br><span class="line">        endTime = now()</span><br><span class="line">        <span class="keyword">if</span> (endTime - startTime &gt;= interval) &#123;</span><br><span class="line">            callback(timer)</span><br><span class="line">            <span class="built_in">window</span>.cancelAnimationFrame(timer)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    timer = <span class="built_in">window</span>.requestAnimationFrame(loop)</span><br><span class="line">    <span class="keyword">return</span> timer</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">0</span></span><br><span class="line">setTimeout(timer =&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a)</span><br><span class="line">    a++</span><br><span class="line">&#125;, <span class="number">1000</span>)</span><br><span class="line"><span class="comment">// 0</span></span><br></pre></td></tr></table></figure><h3 id="5-参考"><a href="#5-参考" class="headerlink" title="5. 参考"></a>5. 参考</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/requestAnimationFrame" target="_blank" rel="noopener">MDN</a></p>]]></content:encoded>
      
      <comments>http://mydearest.cn/2019/%E5%85%B3%E4%BA%8ErequestAnimationFrame.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>git相关问题场景和命令</title>
      <link>http://mydearest.cn/2019/git%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98%E5%9C%BA%E6%99%AF%E5%92%8C%E5%91%BD%E4%BB%A4.html</link>
      <guid>http://mydearest.cn/2019/git%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98%E5%9C%BA%E6%99%AF%E5%92%8C%E5%91%BD%E4%BB%A4.html</guid>
      <pubDate>Fri, 20 Sep 2019 16:51:40 GMT</pubDate>
      <description>
      
        &lt;h3 id=&quot;一、必备知识点&quot;&gt;&lt;a href=&quot;#一、必备知识点&quot; class=&quot;headerlink&quot; title=&quot;一、必备知识点&quot;&gt;&lt;/a&gt;一、必备知识点&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://cdn.mydearest.cn/blog/images/git.png&quot; alt=&quot;git&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h3 id="一、必备知识点"><a href="#一、必备知识点" class="headerlink" title="一、必备知识点"></a>一、必备知识点</h3><p><img src="http://cdn.mydearest.cn/blog/images/git.png" alt="git"></p><hr><a id="more"></a><h4 id="仓库"><a href="#仓库" class="headerlink" title="仓库"></a>仓库</h4><ol><li><strong>Remote:</strong> 远程主仓库；</li><li><strong>Repository：</strong> 本地仓库；</li><li><strong>Index：</strong> Git追踪树,暂存区；</li><li><strong>workspace：</strong> 本地工作区（即你编辑器的代码）</li></ol><h3 id="二、git-add-提交到暂存区，出错怎么办"><a href="#二、git-add-提交到暂存区，出错怎么办" class="headerlink" title="二、git add 提交到暂存区，出错怎么办"></a>二、git add 提交到暂存区，出错怎么办</h3><p>一般代码提交流程为：<strong>工作区</strong> -<code>git status</code> 查看状态 -<code>git add .</code> 将所有修改加入<strong>暂存区</strong>-<code>git commit -m &quot;提交描述&quot;</code> 将代码提交到 <strong>本地仓库</strong> -<code>git push</code> 将本地仓库代码更新到 <strong>远程仓库</strong></p><h4 id="场景1：工作区"><a href="#场景1：工作区" class="headerlink" title="场景1：工作区"></a>场景1：工作区</h4><p>当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令<code>git checkout -- file</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 丢弃工作区的修改</span></span><br><span class="line">git checkout -- <span class="xml"><span class="tag">&lt;<span class="name">文件名</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h4 id="场景2：暂存区"><a href="#场景2：暂存区" class="headerlink" title="场景2：暂存区"></a>场景2：暂存区</h4><p>当你不但改乱了工作区某个文件的内容，还 <code>git add</code> 添加到了暂存区时，想丢弃修改，分两步，第一步用命令 <code>git reset HEAD file</code>，就回到了场景1，第二步按场景1操作。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset HEAD &lt;文件名<span class="comment">// 把暂存区的修改撤销掉（unstage），重新放回工作区。</span></span><br></pre></td></tr></table></figure><h3 id="三、git-commit-提交到本地仓库，出错怎么办？"><a href="#三、git-commit-提交到本地仓库，出错怎么办？" class="headerlink" title="三、git commit 提交到本地仓库，出错怎么办？"></a>三、git commit 提交到本地仓库，出错怎么办？</h3><h4 id="1-提交信息出错"><a href="#1-提交信息出错" class="headerlink" title="1. 提交信息出错"></a>1. 提交信息出错</h4><p>更改 commit 信息</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit --amend -m“新提交消息”</span><br></pre></td></tr></table></figure><h4 id="2-漏提交"><a href="#2-漏提交" class="headerlink" title="2. 漏提交"></a>2. 漏提交</h4><p>commit 时，遗漏提交部分更新，有两种解决方案：</p><ul><li>方案一：再次 commit<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m“提交消息”</span><br></pre></td></tr></table></figure></li></ul><p>  此时，git 上会出现两次 commit</p><ul><li>方案二：遗漏文件提交到之前 commit 上<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add missed-file <span class="comment">// missed-file 为遗漏提交文件</span></span><br><span class="line">git commit --amend --no-edit</span><br></pre></td></tr></table></figure></li></ul><p>  <code>--no-edit</code> 表示提交消息不会更改，在 git 上仅为一次提交</p><h4 id="3-提交错误文件，回退到上一个-commit-版本，再-commit"><a href="#3-提交错误文件，回退到上一个-commit-版本，再-commit" class="headerlink" title="3. 提交错误文件，回退到上一个 commit 版本，再 commit"></a>3. 提交错误文件，回退到上一个 commit 版本，再 commit</h4><h5 id="git-reset"><a href="#git-reset" class="headerlink" title="git reset"></a>git reset</h5><p>删除指定的 commit</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 修改版本库，保留暂存区，保留工作区</span></span><br><span class="line"><span class="comment">// 将版本库软回退1个版本，软回退表示将本地版本库的头指针全部重置到指定版本，且将这次提交之后的所有变更都移动到暂存区。</span></span><br><span class="line">git reset --soft HEAD~<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改版本库，修改暂存区，修改工作区</span></span><br><span class="line"><span class="comment">// 将版本库回退1个版本，不仅仅是将本地版本库的头指针全部重置到指定版本，也会重置暂存区，并且会将工作区代码也回退到这个版本</span></span><br><span class="line">git reset --hard HEAD~<span class="number">1</span></span><br><span class="line"><span class="comment">// git版本回退，回退到特定的commit_id版本，可以通过git log查看提交历史，以便确定要回退到哪个版本(commit 之后的即为ID);</span></span><br><span class="line">git reset --hard commit_id</span><br></pre></td></tr></table></figure><h5 id="git-revert"><a href="#git-revert" class="headerlink" title="git revert"></a>git revert</h5><p>撤销 某次操作，此次操作之前和之后的commit和history都会保留，并且把这次撤销</p><p>作为一次最新的提交</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 撤销前一次 commit</span></span><br><span class="line">git revert HEAD</span><br><span class="line"><span class="comment">// 撤销前前一次 commit</span></span><br><span class="line">git revert HEAD^</span><br><span class="line"><span class="comment">// (比如：fa042ce57ebbe5bb9c8db709f719cec2c58ee7ff）撤销指定的版本，撤销也会作为一次提交进行保存。</span></span><br><span class="line">git revert commit</span><br></pre></td></tr></table></figure><p><code>git revert</code>是提交一个新的版本，将需要<code>revert</code>的版本的内容再反向修改回去，版本会递增，不影响之前提交的内容</p><h5 id="git-revert-和-git-reset-的区别"><a href="#git-revert-和-git-reset-的区别" class="headerlink" title="git revert 和 git reset 的区别"></a><code>git revert</code> 和 <code>git reset</code> 的区别</h5><ul><li><code>git revert</code>是用一次新的commit来回滚之前的commit，<code>git reset</code>是直接删除指定的commit。</li><li>在回滚这一操作上看，效果差不多。但是在日后继续merge以前的老版本时有区别。因为<code>git revert</code>是用一次逆向的commit“中和”之前的提交，因此日后合并老的branch时，导致这部分改变不会再次出现，但是<code>git reset</code>是之间把某些commit在某个branch上删除，因而和老的branch再次merge时，这些被回滚的commit应该还会被引入。</li><li><code>git reset</code> 是把HEAD向后移动了一下，而<code>git revert</code>是HEAD继续前进，只是新的commit的内容和要revert的内容正好相反，能够抵消要被revert的内容。</li></ul><h3 id="四、常用命令"><a href="#四、常用命令" class="headerlink" title="四、常用命令"></a>四、常用命令</h3><h4 id="1-初始开发-git-操作流程"><a href="#1-初始开发-git-操作流程" class="headerlink" title="1. 初始开发 git 操作流程"></a>1. 初始开发 git 操作流程</h4><ul><li>克隆最新主分支项目代码 <code>git clone 地址</code></li><li>创建本地分支 <code>git branch 分支名</code></li><li>查看本地分支 <code>git branch</code></li><li>查看远程分支 <code>git branch -a</code></li><li>切换分支  <code>git checkout 分支名</code> (一般修改未提交则无法切换，大小写问题经常会有，可强制切换  <code>git checkout 分支名 -f</code>  非必须慎用)</li><li>将本地分支推送到远程分支 <code>git push &lt;远程仓库&lt;本地分支&gt;:&lt;远程分支&gt;</code></li></ul><h4 id="2-git-fetch"><a href="#2-git-fetch" class="headerlink" title="2. git fetch"></a>2. git fetch</h4><p>将某个远程主机的更新，全部/分支 取回本地（此时之更新了Repository）它取回的代码对你本地的开发代码没有影响，如需彻底更新需合并或使用<code>git pull</code></p><h4 id="3-git-pull"><a href="#3-git-pull" class="headerlink" title="3. git pull"></a>3. git pull</h4><p>拉取远程主机某分支的更新，再与本地的指定分支合并（相当与fetch加上了合并分支功能的操作）</p><h4 id="4-git-push"><a href="#4-git-push" class="headerlink" title="4. git push"></a>4. git push</h4><p>将本地分支的更新，推送到远程主机，其命令格式与<code>git pull</code>相似</p><h4 id="5-分支操作"><a href="#5-分支操作" class="headerlink" title="5. 分支操作"></a>5. 分支操作</h4><ul><li>使用 Git 下载指定分支命令为：<code>git clone -b 分支名仓库地址</code></li><li>拉取远程新分支 <code>git checkout -b serverfix origin/serverfix</code></li><li>合并本地分支 <code>git merge hotfix</code>：(将 hotfix 分支合并到当前分支)</li><li>合并远程分支 <code>git merge origin/serverfix</code></li><li>删除本地分支 <code>git branch -d hotfix</code>：(删除本地 hotfix 分支)</li><li>删除远程分支 <code>git push origin --delete serverfix</code></li><li>上传新命名的本地分支：<code>git push origin newName</code>;</li><li>创建新分支：<code>git branch branchName</code>：(创建名为 branchName 的本地分支)</li><li>切换到新分支：<code>git checkout branchName</code>：(切换到 branchName 分支)</li><li>创建并切换分支：<code>git checkout -b branchName</code>：(相当于以上两条命令的合并)</li><li>查看本地分支：<code>git branch</code></li><li>查看远程仓库所有分支：<code>git branch -a</code></li><li>本地分支重命名： <code>git branch -m oldName newName</code></li><li>重命名远程分支对应的本地分支：<code>git branch -m oldName newName</code></li><li>把修改后的本地分支与远程分支关联：<code>git branch --set-upstream-to origin/newName</code></li></ul><h3 id="五、优化操作"><a href="#五、优化操作" class="headerlink" title="五、优化操作"></a>五、优化操作</h3><h4 id="1-拉取代码-pull-–rebase"><a href="#1-拉取代码-pull-–rebase" class="headerlink" title="1. 拉取代码 pull –rebase"></a>1. 拉取代码 pull –rebase</h4><p>在团队协作过程中，假设你和你的同伴在本地中分别有各自的新提交，而你的同伴先于你 <code>push</code> 了代码到远程分支上，所以你必须先执行 <code>git pull</code> 来获取同伴的提交，然后才能<code>push</code> 自己的提交到远程分支。</p><p>而按照 Git 的默认策略，如果远程分支和本地分支之间的提交线图有分叉的话（即不是 fast-forwarded），Git 会执行一次 <code>merge</code> 操作，因此产生一次没意义的提交记录，从而造成了像上图那样的混乱。</p><p>其实在 pull 操作的时候，，使用 <code>git pull --rebase</code>选项即可很好地解决上述问题。 加上 <code>--rebase</code> 参数的作用是，提交线图有分叉的话，Git 会 rebase 策略来代替默认的 merge 策略。</p><p>假设提交线图在执行 pull 前是这样的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">      A---B---C  remotes/origin/master</span><br><span class="line">     /</span><br><span class="line">D---E---F---G  master</span><br></pre></td></tr></table></figure><p>如果是执行 <code>git pull</code> 后，提交线图会变成这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">      A---B---C remotes/origin/master</span><br><span class="line">     /         \</span><br><span class="line">D---E---F---G---H master</span><br></pre></td></tr></table></figure><p>结果多出了 <code>H</code> 这个没必要的提交记录。如果是执行 <code>git pull --rebase</code> 的话，提交线图就会变成这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">            remotes/origin/master</span><br><span class="line">                |</span><br><span class="line">D---E---A---B---C---F&apos;---G&apos;  master</span><br></pre></td></tr></table></figure><p><code>F</code> <code>G</code> 两个提交通过 <code>rebase</code> 方式重新拼接在 <code>C</code> 之后，多余的分叉去掉了，目的达到。</p><h5 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h5><p>大多数时候，使用 <code>git pull --rebase</code>是为了使提交线图更好看，从而方便 code review。</p><p>不过，如果你对使用 git 还不是十分熟练的话，我的建议是 <code>git pull --rebase</code>多练习几次之后再使用，因为 <strong>rebase 在 git 中，算得上是『危险行为』</strong>。</p><p>另外，还需注意的是，使用 <code>git pull --rebase</code>比直接 pull 容易导致冲突的产生，如果预期冲突比较多的话，建议还是直接 pull。</p><p>注意：git pull = git fetch + git mergegit pull –rebase = git fetch + git rebase</p><h4 id="2-合代码-merge-–no-ff"><a href="#2-合代码-merge-–no-ff" class="headerlink" title="2. 合代码 merge –no-ff"></a>2. 合代码 merge –no-ff</h4><p>上述的 <code>git pull --rebase</code> 策略目的是修整提交线图，使其形成一条直线，而即将要用到的 <code>git merge --no-ff &lt;branch-name&gt;</code> 策略偏偏是反行其道，刻意地弄出提交线图分叉出来。</p><p>假设你在本地准备合并两个分支，而刚好这两个分支是 fast-forwarded 的，那么直接合并后你得到一个直线的提交线图，当然这样没什么坏处，但如果你想更清晰地告诉你同伴：<strong>这一系列的提交都是为了实现同一个目的</strong>，那么你可以刻意地将这次提交内容弄成一次提交线图分叉。</p><p>执行 <code>git merge --no-ff &lt;branch-name&gt;</code> 的结果大概会是这样的：</p><p><img src="http://cdn.mydearest.cn/blog/images/git-chain1.png" alt="git merge --no-ff"></p><p>中间的分叉线路图很清晰的显示这些提交都是为了实现 <strong>complete adjusting user domains and tags</strong></p><h5 id="更进一步"><a href="#更进一步" class="headerlink" title="更进一步"></a>更进一步</h5><p>往往我的习惯是，在合并分支之前（假设要在本地将 feature 分支合并到 dev 分支），会先检查 feature 分支是否『部分落后』于<strong>远程 dev 分支</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git checkout dev</span><br><span class="line">git pull # 更新 dev 分支</span><br><span class="line">git log feature..dev</span><br></pre></td></tr></table></figure><p>如果没有输出任何提交信息的话，即表示 feature 对于 dev 分支是 up-to-date 的。如果有输出的话而马上执行了 <code>git merge --no-ff</code> 的话，提交线图会变成这样：</p><p><img src="http://cdn.mydearest.cn/blog/images/git-chain2.png" alt="git-merge"></p><p>所以这时在合并前，通常我会先执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout feature</span><br><span class="line">git rebase dev</span><br></pre></td></tr></table></figure><p>这样就可以将 feature 重新拼接到更新了的 dev 之后，然后就可以合并了，最终得到一个干净舒服的提交线图。</p><p><strong>再次提醒：像之前提到的，rebase 是『危险行为』，建议你足够熟悉 git 时才这么做，否则的话是得不偿失啊。</strong></p><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p>使用 <code>git pull --rebase</code> 和 <code>git merge --no-ff</code> 其实和直接使用 <code>git pull</code> <code>git merge</code> 得到的代码应该是一样。</p><p>使用 <code>git pull --rebase</code> 主要是为是将提交约线图平坦化，而 <code>git merge --no-ff</code> 则是刻意制造分叉。</p><h3 id="六、SSH"><a href="#六、SSH" class="headerlink" title="六、SSH"></a>六、SSH</h3><h4 id="1-查看是否生成了-SSH-公钥"><a href="#1-查看是否生成了-SSH-公钥" class="headerlink" title="1. 查看是否生成了 SSH 公钥"></a>1. 查看是否生成了 SSH 公钥</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ cd ~/.ssh</span><br><span class="line">$ ls</span><br><span class="line">id_rsa      id_rsa.pub      known_hosts</span><br></pre></td></tr></table></figure><p>其中 id_rsa 是私钥，id_rsa.pub 是公钥。</p><h4 id="2-如果没有那就开始生成，设置全局的user-name与user-email"><a href="#2-如果没有那就开始生成，设置全局的user-name与user-email" class="headerlink" title="2. 如果没有那就开始生成，设置全局的user.name与user.email"></a>2. 如果没有那就开始生成，设置全局的user.name与user.email</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git config --list <span class="comment">// 查看是否设置了user.name与user.email，没有的话，去设置</span></span><br><span class="line"><span class="comment">// 设置全局的user.name与user.email</span></span><br><span class="line">git config --global user.name <span class="string">"XX"</span></span><br><span class="line">git config --global user.email <span class="string">"XX"</span></span><br></pre></td></tr></table></figure><h4 id="3-输入-ssh-keygen-即可（或ssh-keygen-t-rsa-C-quot-email-quot-）"><a href="#3-输入-ssh-keygen-即可（或ssh-keygen-t-rsa-C-quot-email-quot-）" class="headerlink" title="3. 输入 ssh-keygen 即可（或ssh-keygen -t rsa -C &quot;email&quot;）"></a>3. 输入 ssh-keygen 即可（或<code>ssh-keygen -t rsa -C &quot;email&quot;</code>）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen</span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file in which to save the key (/Users/schacon/.ssh/id_rsa):</span><br><span class="line">Enter passphrase (empty for no passphrase):</span><br><span class="line">Enter same passphrase again:</span><br><span class="line">Your identification has been saved in /Users/schacon/.ssh/id_rsa.</span><br><span class="line">Your public key has been saved in /Users/schacon/.ssh/id_rsa.pub.</span><br><span class="line">The key fingerprint is:</span><br></pre></td></tr></table></figure><h4 id="4-生成之后获取公钥内容，输入-cat-ssh-id-rsa-pub-即可，-复制-ssh-rsa-一直到-local这一整段内容"><a href="#4-生成之后获取公钥内容，输入-cat-ssh-id-rsa-pub-即可，-复制-ssh-rsa-一直到-local这一整段内容" class="headerlink" title="4. 生成之后获取公钥内容，输入 cat ~/.ssh/id_rsa.pub 即可， 复制 ssh-rsa 一直到 .local这一整段内容"></a>4. 生成之后获取公钥内容，输入 cat ~/.ssh/id_rsa.pub 即可， 复制 ssh-rsa 一直到 .local这一整段内容</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ cat ~/.ssh/id_rsa.pub</span><br><span class="line">ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAklOUpkDHrfHY17SbrmTIpNLTGK9Tjom/BWDSU</span><br><span class="line">GPl+nafzlHDTYW7hdI4yZ5ew18JH4JW9jbhUFrviQzM7xlELEVf4h9lFX5QVkbPppSwg0cda3</span><br><span class="line">Pbv7kOdJ/MTyBlWXFCR+HAo3FXRitBqxiX1nKhXpHAZsMciLq8V6RjsNAQwdsdMFvSlVK/7XA</span><br><span class="line">t3FaoJoAsncM1Q9x5+3V0Ww68/eIFmb1zuUFljQJKprrX88XypNDvjYNby6vw/Pb0rwert/En</span><br><span class="line">mZ+AW4OZPnTPI89ZPmVMLuayrD2cE86Z/il8b+gw3r3+1nKatmIkjn2so1d01QraTlMqVSsbx</span><br><span class="line">NrRFi9wrf+M7Q== schacon@agadorlaptop.local</span><br></pre></td></tr></table></figure><h4 id="5-打开-GitLab-或者-GitHub，点击头像，找到设置页"><a href="#5-打开-GitLab-或者-GitHub，点击头像，找到设置页" class="headerlink" title="5. 打开 GitLab 或者 GitHub，点击头像，找到设置页"></a>5. 打开 GitLab 或者 GitHub，点击头像，找到设置页</h4><h4 id="6-左侧找到-SSH-keys-按钮并点击，输入刚刚复制的公钥即可"><a href="#6-左侧找到-SSH-keys-按钮并点击，输入刚刚复制的公钥即可" class="headerlink" title="6. 左侧找到 SSH keys 按钮并点击，输入刚刚复制的公钥即可"></a>6. 左侧找到 SSH keys 按钮并点击，输入刚刚复制的公钥即可</h4><h3 id="七、暂存"><a href="#七、暂存" class="headerlink" title="七、暂存"></a>七、暂存</h3><p><code>git stash</code> 可用来暂存当前正在进行的工作，比如想 pull 最新代码又不想 commit ， 或者另为了修改一个紧急的 bug ，先 stash，使返回到自己上一个 commit,，改完 bug 之后再 stash pop , 继续原来的工作；</p><ul><li>添加缓存栈： <code>git stash</code> ;</li><li>查看缓存栈： <code>git stash list</code> ;</li><li>推出缓存栈： <code>git stash pop</code> ;</li><li>取出特定缓存内容： <code>git stash apply stash@{1}</code> ;</li></ul><h3 id="八、文件名过长错误"><a href="#八、文件名过长错误" class="headerlink" title="八、文件名过长错误"></a>八、文件名过长错误</h3><p>Filename too long warning: Clone succeeded, but checkout failed.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --system core.longpaths true</span><br></pre></td></tr></table></figure><h3 id="九、邮箱和用户名"><a href="#九、邮箱和用户名" class="headerlink" title="九、邮箱和用户名"></a>九、邮箱和用户名</h3><h4 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config user.name</span><br><span class="line"></span><br><span class="line">git config user.email</span><br></pre></td></tr></table></figure><h4 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;username&quot;</span><br><span class="line"></span><br><span class="line">git config --global user.email &quot;email&quot;</span><br></pre></td></tr></table></figure><h3 id="十、-gitignore-更新后生效："><a href="#十、-gitignore-更新后生效：" class="headerlink" title="十、.gitignore 更新后生效："></a>十、.gitignore 更新后生效：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git rm -r --cached .</span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;.gitignore is now working”</span><br></pre></td></tr></table></figure><h3 id="十一、同步Github-fork-出来的分支"><a href="#十一、同步Github-fork-出来的分支" class="headerlink" title="十一、同步Github fork 出来的分支"></a>十一、同步Github fork 出来的分支</h3><p>1、配置remote，指向原始仓库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add upstream https://github.com/cosyer/jelly.git</span><br></pre></td></tr></table></figure><p>2、上游仓库获取到分支，及相关的提交信息，它们将被保存在本地的 upstream/master 分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git fetch upstream</span><br><span class="line"># remote: Counting objects: 75, done.</span><br><span class="line"># remote: Compressing objects: 100% (53/53), done.</span><br><span class="line"># remote: Total 62 (delta 27), reused 44 (delta 9)</span><br><span class="line"># Unpacking objects: 100% (62/62), done.</span><br><span class="line"># From https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY</span><br><span class="line"># * [new branch] master -upstream/master</span><br></pre></td></tr></table></figure><p>3、切换到本地的 master 分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout master</span><br><span class="line"># Switched to branch &apos;master&apos;</span><br></pre></td></tr></table></figure><p>4、把 upstream/master 分支合并到本地的 master 分支，本地的 master 分支便跟上游仓库保持同步了，并且没有丢失本地的修改。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">git merge upstream/master</span><br><span class="line"># Updating a422352..5fdff0f</span><br><span class="line"># Fast-forward</span><br><span class="line"># README | 9 -------</span><br><span class="line"># README.md | 7 ++++++</span><br><span class="line"># 2 files changed, 7 insertions(+), 9 deletions(-)</span><br><span class="line"># delete mode 100644 README</span><br><span class="line"># create mode 100644 README.md</span><br></pre></td></tr></table></figure><p>5、上传到自己的远程仓库中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push</span><br></pre></td></tr></table></figure><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>本文参考了 <a href="http://hungyuhei.github.io/2012/08/07/better-git-commit-graph-using-pull---rebase-and-merge---no-ff.html" target="_blank" rel="noopener">洁癖者用 Git：pull –rebase 和 merge –no-ff</a></p>]]></content:encoded>
      
      <comments>http://mydearest.cn/2019/git%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98%E5%9C%BA%E6%99%AF%E5%92%8C%E5%91%BD%E4%BB%A4.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>npm总结</title>
      <link>http://mydearest.cn/2019/npm%E6%80%BB%E7%BB%93.html</link>
      <guid>http://mydearest.cn/2019/npm%E6%80%BB%E7%BB%93.html</guid>
      <pubDate>Tue, 17 Sep 2019 16:17:31 GMT</pubDate>
      <description>
      
        &lt;h3 id=&quot;一-package-json-解读&quot;&gt;&lt;a href=&quot;#一-package-json-解读&quot; class=&quot;headerlink&quot; title=&quot;一. package.json 解读&quot;&gt;&lt;/a&gt;一. package.json 解读&lt;/h3&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;hello world&quot;&lt;/span&gt;, &lt;span class=&quot;comment&quot;&gt;// 项目名称&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&quot;version&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;0.0.1&quot;&lt;/span&gt;, &lt;span class=&quot;comment&quot;&gt;// 版本号：大版本.次要版本.小版本&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&quot;author&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;张三&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&quot;description&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;第一个node.js程序&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&quot;keywords&quot;&lt;/span&gt;:[&lt;span class=&quot;string&quot;&gt;&quot;node.js&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;javascript&quot;&lt;/span&gt;], &lt;span class=&quot;comment&quot;&gt;// 关键词，有助于 npm search 发现&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&quot;repository&quot;&lt;/span&gt;: &amp;#123; &lt;span class=&quot;comment&quot;&gt;// 存储库，指定代码所在位置（如果git repo在GitHub上，那么该npm docs 命令将能够找到文件位置。）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;string&quot;&gt;&quot;type&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;git&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;string&quot;&gt;&quot;url&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;https://path/to/url&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&quot;license&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;MIT&quot;&lt;/span&gt;, &lt;span class=&quot;comment&quot;&gt;// 指定包许可证，详细可见[SPDX许可证ID的完整列表](https://spdx.org/licenses/)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&quot;engines&quot;&lt;/span&gt;: &amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;node&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;0.10.x&quot;&lt;/span&gt;&amp;#125;, &lt;span class=&quot;comment&quot;&gt;// 指定该模块运行的平台，可以指定 node 版本、npm 版本等&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&quot;bugs&quot;&lt;/span&gt;:&amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;url&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;http://path/to/bug&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;email&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;bug@example.com&quot;&lt;/span&gt;&amp;#125;, &lt;span class=&quot;comment&quot;&gt;// 项目问题跟踪器的URL和应报告问题的电子邮件地址。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&quot;contributors&quot;&lt;/span&gt;:[&amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;name&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;李四&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;email&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;lisi@example.com&quot;&lt;/span&gt;&amp;#125;],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;bin&quot;&lt;/span&gt;: &amp;#123; &lt;span class=&quot;comment&quot;&gt;// 指定内部命令对应的可执行文件的位置，在 scripts 中就可以简写&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	&lt;span class=&quot;string&quot;&gt;&quot;webpack&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;./bin/webpack.js&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  	&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;main&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;lib/webpack.js&quot;&lt;/span&gt;, &lt;span class=&quot;comment&quot;&gt;// 指定加载的模块入口文件，require(&#39;moduleName&#39;)就会加载这个文件。这个字段的默认值是模块根目录下面的index.js。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;config&quot;&lt;/span&gt; : &amp;#123; &lt;span class=&quot;string&quot;&gt;&quot;port&quot;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&quot;8080&quot;&lt;/span&gt; &amp;#125;, &lt;span class=&quot;comment&quot;&gt;// 用于添加命令行的环境变量（用户在运行 scripts 命令时，就默认在脚本文件中添加 process.env.npm_package_config_port，用户可以通过 npm config set foo:port 80 命令更改这个值）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&quot;scripts&quot;&lt;/span&gt;: &amp;#123; &lt;span class=&quot;comment&quot;&gt;// 指定运行脚本的 npm 命令行缩写&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;string&quot;&gt;&quot;start&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;node index.js&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;peerDependencies&quot;&lt;/span&gt;: &amp;#123; &lt;span class=&quot;comment&quot;&gt;// 指定项目安装必须一起安装的模块及其版本号，（注意：从 npm 3.0 开始，peerDependencies不会再默认安装）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	&lt;span class=&quot;string&quot;&gt;&quot;chai&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;1.x&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  	&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&quot;dependencies&quot;&lt;/span&gt;: &amp;#123; &lt;span class=&quot;comment&quot;&gt;// 指定项目运行所依赖的模块&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;string&quot;&gt;&quot;express&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;latest&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;string&quot;&gt;&quot;mongoose&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;~3.8.3&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;string&quot;&gt;&quot;handlebars-runtime&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;~1.0.12&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;string&quot;&gt;&quot;express3-handlebars&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;~0.5.0&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;string&quot;&gt;&quot;MD5&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;~1.2.0&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&quot;devDependencies&quot;&lt;/span&gt;: &amp;#123; &lt;span class=&quot;comment&quot;&gt;// 指定项目开发所需要的模块&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;string&quot;&gt;&quot;bower&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;~1.2.8&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;string&quot;&gt;&quot;grunt&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;~0.4.1&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;string&quot;&gt;&quot;grunt-contrib-concat&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;~0.3.0&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;string&quot;&gt;&quot;grunt-contrib-jshint&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;~0.7.2&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;string&quot;&gt;&quot;grunt-contrib-uglify&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;~0.2.7&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;string&quot;&gt;&quot;grunt-contrib-clean&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;~0.5.0&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;string&quot;&gt;&quot;browserify&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;2.36.1&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;string&quot;&gt;&quot;grunt-browserify&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;~1.3.0&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;browser&quot;&lt;/span&gt;: &amp;#123; &lt;span class=&quot;comment&quot;&gt;// 指定该模板供浏览器使用的版本&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  		&lt;span class=&quot;string&quot;&gt;&quot;tipso&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;./node_modules/tipso/src/tipso.js&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;preferGlobal&quot;&lt;/span&gt;: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;comment&quot;&gt;// 表示当用户不将该模块安装为全局模块时（即不用–global参数），要不要显示警告，表示该模块的本意就是安装为全局模块。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;package.json&lt;/code&gt; 在 node 和 npm 环节都要使用，node 在调用 &lt;code&gt;require&lt;/code&gt; 的时候去查找模块，会按照一个次序去查找，&lt;code&gt;package.json&lt;/code&gt; 会是查找中的一个环节。npm 用的就比较多，其中的 &lt;code&gt;dependencies&lt;/code&gt; 字段就是本模块的依赖的模块清单。每次&lt;code&gt;npm update&lt;/code&gt;的时候，npm会自动的把依赖到的模块也下载下来。当&lt;code&gt;npm install&lt;/code&gt; 本模块的时候，会把这里提到的模块都一起下载下来。通过package.json,就可以管理好模块的依赖关系。&lt;/p&gt;
&lt;p&gt;关于更多规范，请看官方&lt;a href=&quot;https://docs.npmjs.com/files/package.json.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;npm-package.json&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h3 id="一-package-json-解读"><a href="#一-package-json-解读" class="headerlink" title="一. package.json 解读"></a>一. package.json 解读</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="string">"name"</span>: <span class="string">"hello world"</span>, <span class="comment">// 项目名称</span></span><br><span class="line"><span class="string">"version"</span>: <span class="string">"0.0.1"</span>, <span class="comment">// 版本号：大版本.次要版本.小版本</span></span><br><span class="line"><span class="string">"author"</span>: <span class="string">"张三"</span>,</span><br><span class="line"><span class="string">"description"</span>: <span class="string">"第一个node.js程序"</span>,</span><br><span class="line"><span class="string">"keywords"</span>:[<span class="string">"node.js"</span>,<span class="string">"javascript"</span>], <span class="comment">// 关键词，有助于 npm search 发现</span></span><br><span class="line"><span class="string">"repository"</span>: &#123; <span class="comment">// 存储库，指定代码所在位置（如果git repo在GitHub上，那么该npm docs 命令将能够找到文件位置。）</span></span><br><span class="line"><span class="string">"type"</span>: <span class="string">"git"</span>,</span><br><span class="line"><span class="string">"url"</span>: <span class="string">"https://path/to/url"</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">"license"</span>:<span class="string">"MIT"</span>, <span class="comment">// 指定包许可证，详细可见[SPDX许可证ID的完整列表](https://spdx.org/licenses/)</span></span><br><span class="line"><span class="string">"engines"</span>: &#123;<span class="string">"node"</span>: <span class="string">"0.10.x"</span>&#125;, <span class="comment">// 指定该模块运行的平台，可以指定 node 版本、npm 版本等</span></span><br><span class="line"><span class="string">"bugs"</span>:&#123;<span class="string">"url"</span>:<span class="string">"http://path/to/bug"</span>,<span class="string">"email"</span>:<span class="string">"bug@example.com"</span>&#125;, <span class="comment">// 项目问题跟踪器的URL和应报告问题的电子邮件地址。</span></span><br><span class="line"><span class="string">"contributors"</span>:[&#123;<span class="string">"name"</span>:<span class="string">"李四"</span>,<span class="string">"email"</span>:<span class="string">"lisi@example.com"</span>&#125;],</span><br><span class="line">    <span class="string">"bin"</span>: &#123; <span class="comment">// 指定内部命令对应的可执行文件的位置，在 scripts 中就可以简写</span></span><br><span class="line">    <span class="string">"webpack"</span>: <span class="string">"./bin/webpack.js"</span></span><br><span class="line">  &#125;,</span><br><span class="line">    <span class="string">"main"</span>: <span class="string">"lib/webpack.js"</span>, <span class="comment">// 指定加载的模块入口文件，require('moduleName')就会加载这个文件。这个字段的默认值是模块根目录下面的index.js。</span></span><br><span class="line">    <span class="string">"config"</span> : &#123; <span class="string">"port"</span> : <span class="string">"8080"</span> &#125;, <span class="comment">// 用于添加命令行的环境变量（用户在运行 scripts 命令时，就默认在脚本文件中添加 process.env.npm_package_config_port，用户可以通过 npm config set foo:port 80 命令更改这个值）</span></span><br><span class="line"><span class="string">"scripts"</span>: &#123; <span class="comment">// 指定运行脚本的 npm 命令行缩写</span></span><br><span class="line"><span class="string">"start"</span>: <span class="string">"node index.js"</span></span><br><span class="line">&#125;,</span><br><span class="line">    <span class="string">"peerDependencies"</span>: &#123; <span class="comment">// 指定项目安装必须一起安装的模块及其版本号，（注意：从 npm 3.0 开始，peerDependencies不会再默认安装）</span></span><br><span class="line">    <span class="string">"chai"</span>: <span class="string">"1.x"</span></span><br><span class="line">  &#125;,</span><br><span class="line"><span class="string">"dependencies"</span>: &#123; <span class="comment">// 指定项目运行所依赖的模块</span></span><br><span class="line"><span class="string">"express"</span>: <span class="string">"latest"</span>,</span><br><span class="line"><span class="string">"mongoose"</span>: <span class="string">"~3.8.3"</span>,</span><br><span class="line"><span class="string">"handlebars-runtime"</span>: <span class="string">"~1.0.12"</span>,</span><br><span class="line"><span class="string">"express3-handlebars"</span>: <span class="string">"~0.5.0"</span>,</span><br><span class="line"><span class="string">"MD5"</span>: <span class="string">"~1.2.0"</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">"devDependencies"</span>: &#123; <span class="comment">// 指定项目开发所需要的模块</span></span><br><span class="line"><span class="string">"bower"</span>: <span class="string">"~1.2.8"</span>,</span><br><span class="line"><span class="string">"grunt"</span>: <span class="string">"~0.4.1"</span>,</span><br><span class="line"><span class="string">"grunt-contrib-concat"</span>: <span class="string">"~0.3.0"</span>,</span><br><span class="line"><span class="string">"grunt-contrib-jshint"</span>: <span class="string">"~0.7.2"</span>,</span><br><span class="line"><span class="string">"grunt-contrib-uglify"</span>: <span class="string">"~0.2.7"</span>,</span><br><span class="line"><span class="string">"grunt-contrib-clean"</span>: <span class="string">"~0.5.0"</span>,</span><br><span class="line"><span class="string">"browserify"</span>: <span class="string">"2.36.1"</span>,</span><br><span class="line"><span class="string">"grunt-browserify"</span>: <span class="string">"~1.3.0"</span>,</span><br><span class="line">&#125;,</span><br><span class="line">    <span class="string">"browser"</span>: &#123; <span class="comment">// 指定该模板供浏览器使用的版本</span></span><br><span class="line">  <span class="string">"tipso"</span>: <span class="string">"./node_modules/tipso/src/tipso.js"</span></span><br><span class="line">&#125;,</span><br><span class="line">    <span class="string">"preferGlobal"</span>: <span class="literal">true</span>, <span class="comment">// 表示当用户不将该模块安装为全局模块时（即不用–global参数），要不要显示警告，表示该模块的本意就是安装为全局模块。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>package.json</code> 在 node 和 npm 环节都要使用，node 在调用 <code>require</code> 的时候去查找模块，会按照一个次序去查找，<code>package.json</code> 会是查找中的一个环节。npm 用的就比较多，其中的 <code>dependencies</code> 字段就是本模块的依赖的模块清单。每次<code>npm update</code>的时候，npm会自动的把依赖到的模块也下载下来。当<code>npm install</code> 本模块的时候，会把这里提到的模块都一起下载下来。通过package.json,就可以管理好模块的依赖关系。</p><p>关于更多规范，请看官方<a href="https://docs.npmjs.com/files/package.json.html" target="_blank" rel="noopener">npm-package.json</a></p><hr><a id="more"></a><h3 id="二-版本号规范"><a href="#二-版本号规范" class="headerlink" title="二. 版本号规范"></a>二. 版本号规范</h3><ul><li><strong>指定版本</strong>：比如<code>1.2.2</code>，遵循“大版本.次要版本.小版本”的格式规定，安装时只安装指定版本。</li><li><strong>波浪号（tilde）+指定版本</strong>：比如<code>~1.2.2</code>，表示安装1.2.x的最新版本（不低于1.2.2），但是不安装1.3.x，也就是说安装时不改变大版本号和次要版本号。</li><li><strong>插入号（caret）+指定版本</strong>：比如ˆ1.2.2，表示安装1.x.x的最新版本（不低于1.2.2），但是不安装2.x.x，也就是说安装时不改变大版本号。<strong>需要注意的是，如果大版本号为0，则插入号的行为与波浪号相同，这是因为此时处于开发阶段，即使是次要版本号变动，也可能带来程序的不兼容。</strong></li><li><strong>latest</strong>：安装最新版本。</li></ul><h3 id="三-npm-install-与-npm-update"><a href="#三-npm-install-与-npm-update" class="headerlink" title="三. npm install 与 npm update"></a>三. npm install 与 <strong>npm update</strong></h3><ul><li>如果本地 <code>node_modules</code> 已安装，再次执行 <code>install</code> 不会更新包版本, 执行 <code>update</code> 才会更新; 而如果本地 <code>node_modules</code> 为空时，执行 <code>install/update</code> 都会直接安装更新包;</li><li><code>npm update</code> 总是会把包更新到符合 <code>package.json</code> 中指定的 semver(语义化版本) 的<strong>最新</strong>版本号——本例中符合 <code>^1.8.0</code> 的最新版本为 <code>1.15.0</code></li><li>一旦给定 <code>package.json</code>, 无论后面执行 <code>npm install</code> 还是 <code>update</code>, <code>package.json</code> 中的 webpack 版本一直顽固地保持 一开始的 <code>^1.8.0</code> 岿然不动</li></ul><h3 id="四-npm-i-与-npm-install"><a href="#四-npm-i-与-npm-install" class="headerlink" title="四. npm i 与 npm install"></a>四. npm i 与 <strong>npm install</strong></h3><p>实际使用的区别点主要如下：</p><ul><li>用<code>npm i</code>安装的模块无法用<code>npm uninstall</code>删除，用<code>npm un</code>才卸载掉</li><li><code>npm i</code>会帮助检测与当前 node 版本最匹配的 npm 包版本号，并匹配出来相互依赖的 npm 包应该提升的版本号</li><li>部分 npm 包在当前 node 版本下无法使用，必须使用建议版本</li><li>安装报错时 install 肯定会出现 <code>npm-debug.log</code>  文件，<code>npm i</code>不一定</li></ul><h3 id="五-npm-devDependencies-与-dependencies"><a href="#五-npm-devDependencies-与-dependencies" class="headerlink" title="五. npm devDependencies 与 dependencies"></a>五. npm devDependencies 与 dependencies</h3><p><code>--save-dev</code></p><p>或</p><p><code>—save</code></p><p>首先需要说明的是 Dependencies一词的中文意思是依赖和附属的意思，而dev则是 develop（开发）的简写。</p><p>所以它们的区别在 package.json 文件里面体现出来的就是，使用 <code>--save-dev</code> 安装的 插件，被写入到 devDependencies 域里面去，而使用 <code>—save</code> 安装的插件，则是被写入到 dependencies 区块里面去。</p><p>那 package.json 文件里面的 devDependencies  和 dependencies 对象有什么<strong>区别</strong>呢？</p><p><strong>devDependencies  里面的插件只用于开发环境，不用于生产环境，而 dependencies  是需要发布到生产环境的</strong>。</p><p>比如我们写一个项目要依赖于jQuery，没有这个包的依赖运行就会报错，这时候就把这个依赖写入dependencies</p><h3 id="六-全局安装与本地安装"><a href="#六-全局安装与本地安装" class="headerlink" title="六. 全局安装与本地安装"></a>六. 全局安装与本地安装</h3><p>通过 <code>-g</code> 来安装的包，将包安装成全局可用的可执行命令。</p><h4 id="1-全局安装，-将包安装成全局可用的可执行命令"><a href="#1-全局安装，-将包安装成全局可用的可执行命令" class="headerlink" title="1. 全局安装， 将包安装成全局可用的可执行命令"></a>1. 全局安装， 将包安装成全局可用的可执行命令</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 全局安装 babel-cli</span></span><br><span class="line">babel app.js</span><br></pre></td></tr></table></figure><h4 id="2-本地安装"><a href="#2-本地安装" class="headerlink" title="2. 本地安装"></a>2. 本地安装</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 本地安装 babel-cli</span></span><br><span class="line">node_modules/.bin/babel app.js</span><br></pre></td></tr></table></figure><h4 id="3-修改全局安装默认路径"><a href="#3-修改全局安装默认路径" class="headerlink" title="3. 修改全局安装默认路径"></a>3. 修改全局安装默认路径</h4><ul><li><p>设置自定义的全局安装路径</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm config set prefix <span class="string">"/usr/local/npm"</span> <span class="comment">// 自定义的全局安装路径</span></span><br><span class="line">npm config set cache <span class="string">"/usr/local/npm"</span> <span class="comment">// 自定义的全局安装路径</span></span><br></pre></td></tr></table></figure></li><li><p>设置环境变量切到  ~/.bash_profile 文件中配置路径：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GNPM_PATH=<span class="regexp">/usr/</span>local/npm</span><br><span class="line"><span class="keyword">export</span> GNPM_PATH</span><br><span class="line"><span class="keyword">export</span> PATH=$PATH:$GNPM_PATH/bin  <span class="comment">// 将 /usr/local/npm/bin 追加到 PATH 变量中</span></span><br><span class="line"><span class="keyword">export</span> NODE_PATH=$PATH:$GNPM_PATH/lib/node_modules <span class="comment">// 指定 NODE_PATH 变量</span></span><br></pre></td></tr></table></figure></li></ul><p>  操作系统中都会有一个<code>PATH</code>环境变量，想必大家都知道，当系统调用一个命令的时候，就会在PATH变量中注册的路径中寻找，如果注册的路径中有就调用，否则就提示命令没找到。  而 <code>NODE_PATH</code> 就是<code>NODE</code>中用来 <strong>寻找模块所提供的路径注册环境变量</strong> 。我们可以使用上面的方法指定<code>NODE_PATH</code> 环境变量。  使用 <code>npm config list</code> 查看配置</p><h3 id="七-npm-包命令"><a href="#七-npm-包命令" class="headerlink" title="七. npm 包命令"></a>七. npm 包命令</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">npm list -g --depth <span class="number">0</span> <span class="comment">// 查看全局安装过的包 -g:全局的安装包 list：已安装的node包 –depth 0：深度0</span></span><br><span class="line">npm view &lt;packageName<span class="comment">// 查看npm服务器中包版本号 </span></span><br><span class="line">npm info &lt;packageName<span class="comment">// npm服务器更多信息，更多版本号</span></span><br><span class="line">npm ls &lt;packageName<span class="comment">// 本地包</span></span><br><span class="line">npm ls &lt;packageName-g <span class="comment">// 全局安装包</span></span><br><span class="line">npm docs <span class="comment">// 打开包git目录</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意：npm build 与 npm start 是项目中常用的命令，注意它们有什么不同</span></span><br><span class="line">npm start [--<span class="xml"><span class="tag">&lt;<span class="name">args</span>&gt;</span>] // 在 package.json 文件中定义的 "scripts" 对象中查找 "start" 属性，执行该属性定义的命令，如果没有定义，默认执行 node server.js 命令</span></span><br><span class="line">npm build [&lt;package-folder&gt;] // 其中，&lt;package-folder为其根目录中包含一个 package.json 文件的文件夹，这是由 npm link 命令和 npm install 命令组成的管道命令，通常在安装过程中被调用。如果想要直接运行它，则运行 npm run build</span><br></pre></td></tr></table></figure><p>还有其他的 钩子命令，具体项目中我还没用到，你可以自行了解。</p><p>package.json 中 scripts 常用命令：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 删除目录</span></span><br><span class="line"><span class="string">"clean"</span>: <span class="string">"rimraf dist/*"</span>,</span><br><span class="line"></span><br><span class="line"><span class="comment">// 本地搭建一个 HTTP 服务</span></span><br><span class="line"><span class="string">"serve"</span>: <span class="string">"http-server -p 9090 dist/"</span>,</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打开浏览器</span></span><br><span class="line"><span class="string">"open:dev"</span>: <span class="string">"opener http://localhost:9090"</span>,</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实时刷新</span></span><br><span class="line"> <span class="string">"livereload"</span>: <span class="string">"live-reload --port 9091 dist/"</span>,</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构建 HTML 文件</span></span><br><span class="line"><span class="string">"build:html"</span>: <span class="string">"jade index.jade dist/index.html"</span>,</span><br><span class="line"></span><br><span class="line"><span class="comment">// 只要 CSS 文件有变动，就重新执行构建</span></span><br><span class="line"><span class="string">"watch:css"</span>: <span class="string">"watch 'npm run build:css' assets/styles/"</span>,</span><br><span class="line"></span><br><span class="line"><span class="comment">// 只要 HTML 文件有变动，就重新执行构建</span></span><br><span class="line"><span class="string">"watch:html"</span>: <span class="string">"watch 'npm run build:html' assets/html"</span>,</span><br><span class="line"></span><br><span class="line"><span class="comment">// 部署到 Amazon S3</span></span><br><span class="line"><span class="string">"deploy:prod"</span>: <span class="string">"s3-cli sync ./dist/ s3://example-com/prod-site/"</span>,</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构建 favicon</span></span><br><span class="line"><span class="string">"build:favicon"</span>: <span class="string">"node scripts/favicon.js"</span>,</span><br></pre></td></tr></table></figure><h3 id="八-简写形式"><a href="#八-简写形式" class="headerlink" title="八. 简写形式"></a>八. 简写形式</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm start   <span class="comment">// 是 npm run start 的简写</span></span><br><span class="line">npm stop    <span class="comment">// 是 npm run stop 的简写</span></span><br><span class="line">npm test    <span class="comment">// 是 npm run test 的简写</span></span><br><span class="line">npm restart <span class="comment">// 是 npm run stop &amp;&amp; npm run restart &amp;&amp; npm run start 的简写</span></span><br></pre></td></tr></table></figure><h3 id="九-process"><a href="#九-process" class="headerlink" title="九. process"></a>九. process</h3><p>我们可以通过环境变量<code>process.env</code>对象，拿到 npm 所有的配置变量。其中 npm 脚本可以通过<code>npm_config_</code>前缀，拿到 npm 的配置变量。通过<code>npm_package_</code>前缀，拿到<code>package.json</code>里面的字段。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(process.env.npm_package_name); <span class="comment">// chejianer</span></span><br><span class="line"><span class="built_in">console</span>.log(process.env.npm_package_version); <span class="comment">// 1.0.0</span></span><br><span class="line"><span class="built_in">console</span>.log(process.env); <span class="comment">// ...</span></span><br></pre></td></tr></table></figure><p>对于 <strong>全局模式安装的包（通过 -g 来安装的包，将包安装成全局可用的可执行命令，并不意味着任何地方都可以通过 require() 来引用它）</strong>：它会通过 bin 字段配置，将实际脚本链接到 Node 可执行目录下，例如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"bin"</span>: &#123;</span><br><span class="line">  <span class="string">"webpack"</span>: <span class="string">"./bin/webpack.js"</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>通过全局安装的包都安装到一个统一的目录下，可以通过以下方式获得:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">path.resolve(process.execPath, <span class="string">".."</span>, <span class="string">".."</span>, <span class="string">"lib"</span>, <span class="string">"node_modules"</span>) </span><br><span class="line"><span class="comment">// 例如：/usr/local/lib/node_modules</span></span><br></pre></td></tr></table></figure><h3 id="一零-npm-发布包"><a href="#一零-npm-发布包" class="headerlink" title="一零. npm 发布包"></a>一零. npm 发布包</h3><ul><li><strong>创建一个空文件</strong>：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// lib/index.js</span></span><br><span class="line">exports.sayHello = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Hello An!"</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li><strong>运行：<code>npm init</code></strong></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">package name: (<span class="built_in">module</span>) hello-an</span><br><span class="line">version: (<span class="number">1.0</span><span class="number">.0</span>) <span class="number">0.1</span><span class="number">.0</span></span><br><span class="line">description: a hello-an package</span><br><span class="line">entry point: (hello.js) </span><br><span class="line">test command: </span><br><span class="line">git repository: </span><br><span class="line">keywords: hello an</span><br><span class="line">author: sisterAn</span><br><span class="line">license: (ISC) MIT</span><br><span class="line">About to write to /Users/lianran777/Study/node/chejianer_node/<span class="built_in">module</span>/package.json:</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"hello-an"</span>,</span><br><span class="line">  <span class="string">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="string">"description"</span>: <span class="string">"a hello-an package"</span>,</span><br><span class="line">  <span class="string">"main"</span>: <span class="string">"hello.js"</span>,</span><br><span class="line">  <span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"keywords"</span>: [</span><br><span class="line">    <span class="string">"hello"</span>,</span><br><span class="line">    <span class="string">"an"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"author"</span>: <span class="string">"sisterAn"</span>,</span><br><span class="line">  <span class="string">"license"</span>: <span class="string">"MIT"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Is <span class="keyword">this</span> OK? (yes)</span><br></pre></td></tr></table></figure><ul><li><strong>注册 npm 包仓库账号</strong></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm adduser</span><br></pre></td></tr></table></figure><ul><li><strong>上传包</strong></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm publish . <span class="comment">// package.json 所在目录</span></span><br></pre></td></tr></table></figure><p>在这个过程中，npm 会将目录打包成一个存档文件，然后上传到官方源仓库中</p><ul><li><strong>管理包权限</strong></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm owner add &lt;user[&lt;@scope&gt;/]&lt;pkg&gt;</span><br><span class="line">npm owner rm &lt;user[&lt;@scope&gt;/]&lt;pkg&gt;</span><br><span class="line">npm owner ls [&lt;@scope&gt;/]&lt;pkg&gt;</span><br></pre></td></tr></table></figure><p>在自己的项目中安装包 <code>npm install</code>，通过 <code>npm ls</code> 分析模块路径找到的所有包，并生成依赖树。</p>]]></content:encoded>
      
      <comments>http://mydearest.cn/2019/npm%E6%80%BB%E7%BB%93.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>浏览器兼容问题总结</title>
      <link>http://mydearest.cn/2019/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%85%BC%E5%AE%B9%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93.html</link>
      <guid>http://mydearest.cn/2019/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%85%BC%E5%AE%B9%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93.html</guid>
      <pubDate>Sat, 31 Aug 2019 17:07:30 GMT</pubDate>
      <description>
      
        &lt;ol&gt;
&lt;li&gt;&lt;p&gt;png24位的图片在iE6浏览器上出现背景，解决方案是做成PNG8.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;浏览器默认的margin和padding不同。解决方案是加一个全局的*{margin:0;padding:0;}来统一&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;IE6双边距bug:块属性标签float后，又有横行的margin情况下，在ie6显示margin比设置的大。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;浮动ie产生的双倍距离 #box{ float:left; width:10px; margin:0 0 0 10px;}&lt;/p&gt;
&lt;p&gt;这种情况之下IE会产生20px的距离，解决方案是在float的标签样式控制中加入 &lt;em&gt;display:inline;将其转化为行内属性。(&lt;/em&gt;这个符号只有ie6会识别)&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.bb&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;background-color&lt;/span&gt;:red;&lt;span class=&quot;comment&quot;&gt;/*所有识别*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;background-color&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;#00deff&lt;/span&gt;\&lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;/*IE6、7、8识别*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    +background-color:#a200ff;/*IE6、7识别*/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    _&lt;span class=&quot;selector-tag&quot;&gt;background-color&lt;/span&gt;:&lt;span class=&quot;selector-id&quot;&gt;#1e0bd1&lt;/span&gt;;&lt;span class=&quot;comment&quot;&gt;/*IE6识别*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
      
      </description>
      
      <content:encoded><![CDATA[<ol><li><p>png24位的图片在iE6浏览器上出现背景，解决方案是做成PNG8.</p></li><li><p>浏览器默认的margin和padding不同。解决方案是加一个全局的*{margin:0;padding:0;}来统一</p></li><li><p>IE6双边距bug:块属性标签float后，又有横行的margin情况下，在ie6显示margin比设置的大。</p></li></ol><p>浮动ie产生的双倍距离 #box{ float:left; width:10px; margin:0 0 0 10px;}</p><p>这种情况之下IE会产生20px的距离，解决方案是在float的标签样式控制中加入 <em>display:inline;将其转化为行内属性。(</em>这个符号只有ie6会识别)</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.bb</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>:red;<span class="comment">/*所有识别*/</span></span><br><span class="line">    <span class="attribute">background-color</span>:<span class="number">#00deff</span>\<span class="number">9</span>; <span class="comment">/*IE6、7、8识别*/</span></span><br><span class="line">    +background-color:#a200ff;/*IE6、7识别*/</span><br><span class="line">    _<span class="selector-tag">background-color</span>:<span class="selector-id">#1e0bd1</span>;<span class="comment">/*IE6识别*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><a id="more"></a><ol><li><p>IE下,可以使用获取常规属性的方法来获取自定义属性,也可以使用getAttribute()获取自定义属性;Firefox下,只能使用getAttribute()获取自定义属性。解决方法:统一通过getAttribute()获取自定义属性。</p></li><li><p>IE下,even对象有x,y属性,但是没有pageX,pageY属性;Firefox下,event对象有pageX,pageY属性,但是没有x,y属性。</p></li><li><p>Chrome 中文界面下默认会将小于 12px 的文本强制按照 12px 显示,可通过加入 CSS 属性 -webkit-text-size-adjust: none; </p></li><li><p>超链接访问过后hover样式就不出现了 被点击访问过的超链接样式不在具有hover和active了解决方法是改变CSS属性的排列顺序:</p></li></ol><p>L-V-H-A :  a:link {} a:visited {} a:hover {} a:active {}</p><ol><li>样式初始化</li></ol><ul><li><p>因为浏览器的兼容问题，不同浏览器对有些标签的默认值是不同的，如果没对CSS初始化往往会出现浏览器之间的页面显示差异。</p></li><li><p>初始化样式会对SEO有一定的影响，但鱼和熊掌不可兼得，但力求影响最小的情况下初始化。</p></li></ul><p>最简单的初始化方法： * {padding: 0; margin: 0;} （强烈不建议）<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span>, <span class="selector-tag">h1</span>, <span class="selector-tag">h2</span>, <span class="selector-tag">h3</span>, <span class="selector-tag">h4</span>, <span class="selector-tag">h5</span>, <span class="selector-tag">h6</span>, <span class="selector-tag">hr</span>, <span class="selector-tag">p</span>, <span class="selector-tag">blockquote</span>, <span class="selector-tag">dl</span>, <span class="selector-tag">dt</span>, <span class="selector-tag">dd</span>, <span class="selector-tag">ul</span>, <span class="selector-tag">ol</span>, <span class="selector-tag">li</span>, <span class="selector-tag">pre</span>, <span class="selector-tag">form</span>, <span class="selector-tag">fieldset</span>, <span class="selector-tag">legend</span>, <span class="selector-tag">button</span>, <span class="selector-tag">input</span>, <span class="selector-tag">textarea</span>, <span class="selector-tag">th</span>, <span class="selector-tag">td</span> &#123; <span class="attribute">margin</span>:<span class="number">0</span>; <span class="attribute">padding</span>:<span class="number">0</span>; &#125;</span><br><span class="line"><span class="selector-tag">body</span>, <span class="selector-tag">button</span>, <span class="selector-tag">input</span>, <span class="selector-tag">select</span>, <span class="selector-tag">textarea</span> &#123; <span class="attribute">font</span>:<span class="number">12px</span>/<span class="number">1.5</span>tahoma, arial, \<span class="number">5</span>b8b\<span class="number">4</span>f53; &#125;</span><br><span class="line"><span class="selector-tag">h1</span>, <span class="selector-tag">h2</span>, <span class="selector-tag">h3</span>, <span class="selector-tag">h4</span>, <span class="selector-tag">h5</span>, <span class="selector-tag">h6</span>&#123; <span class="attribute">font-size</span>:<span class="number">100%</span>; &#125;</span><br><span class="line"><span class="selector-tag">address</span>, <span class="selector-tag">cite</span>, <span class="selector-tag">dfn</span>, <span class="selector-tag">em</span>, <span class="selector-tag">var</span> &#123; <span class="attribute">font-style</span>:normal; &#125;</span><br><span class="line"><span class="selector-tag">code</span>, <span class="selector-tag">kbd</span>, <span class="selector-tag">pre</span>, <span class="selector-tag">samp</span> &#123; <span class="attribute">font-family</span>:couriernew, courier, monospace; &#125;</span><br><span class="line"><span class="selector-tag">small</span>&#123; <span class="attribute">font-size</span>:<span class="number">12px</span>; &#125;</span><br><span class="line"><span class="selector-tag">ul</span>, <span class="selector-tag">ol</span> &#123; <span class="attribute">list-style</span>:none; &#125;</span><br><span class="line"><span class="selector-tag">a</span> &#123; <span class="attribute">text-decoration</span>:none; &#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123; <span class="attribute">text-decoration</span>:underline; &#125;</span><br><span class="line"><span class="selector-tag">sup</span> &#123; <span class="attribute">vertical-align</span>:text-top; &#125;</span><br><span class="line"><span class="selector-tag">sub</span>&#123; <span class="attribute">vertical-align</span>:text-bottom; &#125;</span><br><span class="line"><span class="selector-tag">legend</span> &#123; <span class="attribute">color</span>:<span class="number">#000</span>; &#125;</span><br><span class="line"><span class="selector-tag">fieldset</span>, <span class="selector-tag">img</span> &#123; <span class="attribute">border</span>:<span class="number">0</span>; &#125;</span><br><span class="line"><span class="selector-tag">button</span>, <span class="selector-tag">input</span>, <span class="selector-tag">select</span>, <span class="selector-tag">textarea</span> &#123; <span class="attribute">font-size</span>:<span class="number">100%</span>; &#125;</span><br><span class="line"><span class="selector-tag">table</span> &#123; <span class="attribute">border-collapse</span>:collapse; <span class="attribute">border-spacing</span>:<span class="number">0</span>; &#125;</span><br></pre></td></tr></table></figure></p><ol><li>CSS里的visibility属性有个collapse属性值是干嘛用的？在不同浏览器下以后什么区别？</li></ol><p>对于普通元素visibility:collapse;会将元素完全隐藏,不占据页面布局空间,与display:none;表现相同.如果目标元素为table,visibility:collapse;将table隐藏,但是会占据页面布局空间.仅在Firefox下起作用,IE会显示元素,Chrome会将元素隐藏,但是占据空间.</p><ol><li><p>让页面里的字体变清晰，变细用CSS怎么做？-webkit-font-smoothing: antialiased;</p></li><li><p>display:inline-block 什么时候会显示间隙？移除空格、使用margin负值、使用font-size:0、letter-spacing、word-spacing</p></li></ol>]]></content:encoded>
      
      <comments>http://mydearest.cn/2019/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%85%BC%E5%AE%B9%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>租房须知</title>
      <link>http://mydearest.cn/2019/%E7%A7%9F%E6%88%BF%E9%A1%BB%E7%9F%A5.html</link>
      <guid>http://mydearest.cn/2019/%E7%A7%9F%E6%88%BF%E9%A1%BB%E7%9F%A5.html</guid>
      <pubDate>Sun, 18 Aug 2019 14:07:31 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;文档目的&quot;&gt;&lt;a href=&quot;#文档目的&quot; class=&quot;headerlink&quot; title=&quot;文档目的&quot;&gt;&lt;/a&gt;文档目的&lt;/h2&gt;&lt;p&gt;希望这篇文档能够帮助到北上广深杭等租房漂泊的同学在找房的时候规避一些明显的问题。&lt;/p&gt;
&lt;p&gt;这里枚举了一些常见问题，适当参考文档作出一个判断，或许可以减少租客和房东都不开心的情况的出现，并节约时间。&lt;/p&gt;
&lt;p&gt;作为租客，即使在预算并不充裕，或者稍低于目标区域平均价格的时候，也可以找到靠谱的房子，只要策略得当。&lt;/p&gt;
&lt;p&gt;希望看过文档的同学可以少遇到居住不舒服的房子，至少，不要遇到居住那么不舒服的房子 :D&lt;/p&gt;
&lt;hr&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="文档目的"><a href="#文档目的" class="headerlink" title="文档目的"></a>文档目的</h2><p>希望这篇文档能够帮助到北上广深杭等租房漂泊的同学在找房的时候规避一些明显的问题。</p><p>这里枚举了一些常见问题，适当参考文档作出一个判断，或许可以减少租客和房东都不开心的情况的出现，并节约时间。</p><p>作为租客，即使在预算并不充裕，或者稍低于目标区域平均价格的时候，也可以找到靠谱的房子，只要策略得当。</p><p>希望看过文档的同学可以少遇到居住不舒服的房子，至少，不要遇到居住那么不舒服的房子 :D</p><hr><a id="more"></a><h2 id="租房要点"><a href="#租房要点" class="headerlink" title="租房要点"></a>租房要点</h2><p><strong>一般原则：</strong></p><ul><li>尽量提前进行房源的寻找，不要等到房子到期、或者旺季（财年结束跳槽季、毕业季、实习季）的时候进行。</li><li>尽量寻找直租房屋，不推荐经过“转交”的房源，除非你对转手房源的人信得过。</li><li>寻找房源前，请确定清楚预算和期望居住的区域，提高找房效率，避免无意义时间浪费。</li></ul><p><strong>特殊情况下的一般推荐策略：</strong> </p><h3 id="如果租房者时间紧迫"><a href="#如果租房者时间紧迫" class="headerlink" title="如果租房者时间紧迫"></a>如果租房者时间紧迫</h3><ul><li>不太介意暂时没有独立的空间，请优先在公司群、公司或高校BBS、同学群中进行询问，看看是否有人愿意同你分享房子或者信息，相对知根知底的同事、同学比陌生人靠谱的概率大的多。</li><li>请在本地寻找当地相对最大最正规的中介连锁。</li><li>如果行李不多，部分青旅可以扛几天。（12年有同事这么经历过）</li></ul><h3 id="如果一定要和中介打交道"><a href="#如果一定要和中介打交道" class="headerlink" title="如果一定要和中介打交道"></a>如果一定要和中介打交道</h3><p>如果有可能，尽可能不要租中介的房子，尤其是市场占有率低的小中介，可能发生以下问题：</p><ol><li>代理人中途跑路或以各种各样的方式进行诈骗。</li><li>合约到期后，以各种手段侵占押金。</li><li>屋内财务不翼而飞。</li></ol><p><strong>黑名单：</strong></p><p>开来营，活跃于回龙观，霍营，龙泽地区，从2011年开始行骗至今，据不完全统计已有数百人上当受骗，其本人依靠骗来的钱财，购置了一处房产，买了一辆50多w的豪车，雇佣了保镖以及打手数人。被骗人员多次报警，起诉，均无果，任由开来营继续逍遥法外。</p><h3 id="有幸遇到房东直租"><a href="#有幸遇到房东直租" class="headerlink" title="有幸遇到房东直租"></a>有幸遇到房东直租</h3><p>“好”房东很重要，如果感觉气场不和，请不要将就，对双方都不好。</p><ul><li>因为供暖排水门锁证件等偶发的琐事产生沟通的时候，房东与你于之前的租客进行对比“之前租客都没问题”，请小心，推荐和爽快的人沟通，可以避免下面的许多问题（房子质量好同样可以大概率避免问题）。</li><li><strong>不要急于交定金/押金，多数是套路</strong>（房源确实抢手的时期，房东靠谱，交全款也没事）</li><li>去现场看房子的时候，如果房子很破，屋内东西乱丢，99%是二房东或者刚买来专门用来出租的屋子，请多留意屋子中的排水和保暖问题。</li><li>靠谱房东，在你看房子的时候，多数会主动跟你沟通和妥协：“这个灯不好，我下午给你换了”对比“这个将就一下也能用”好坏立辨，但也请判别是否是专业中介，只说不做的那种…</li></ul><h3 id="期望合租的房客"><a href="#期望合租的房客" class="headerlink" title="期望合租的房客"></a>期望合租的房客</h3><p>不论是为了节约租房成本，控制房租在个人经济支出比重，还是考虑有个互相照应、结识新朋友，来到大城市的前期，合租是个不错的选择。</p><ul><li>你单枪匹马，屋子已经有其他房客入住<ul><li>尽可能了解到对方是从事什么职业，以及是否为常住人员。避免和经常流动的人员同住，发生潜在的安全隐患以及财物损失。</li><li>尽可能了解房屋基础安全设施是否到位<ul><li>是否存在老化的煤气管道、开关，房东是否愿意修理或者更换，或者允许租客修理替换。</li><li>是否存在随处可见的烟头。</li><li>是否存在同住房客随意带陌生人留宿的现象</li></ul></li></ul></li><li>你和小伙伴组队租房<ul><li>大家觉得都OK最重要</li><li>其他参考上面的事项</li></ul></li></ul><h3 id="相对靠谱的房子来源"><a href="#相对靠谱的房子来源" class="headerlink" title="相对靠谱的房子来源"></a>相对靠谱的房子来源</h3><p>任何一个平台、渠道信息量大之后，难免出现“有效信息质量下降”，诸如赶某网、5某网、搜某网、豆某小组等网站，上面的中介&amp;伪装成中介的骗子居多，如使用该渠道，请仔细辨别：</p><ul><li>请优先使用校园论坛、朋友介绍、公司BBS、熟人IM社群等信息，但是同样需要仔细辨别信息真实程度。</li><li>除了主动或者被动（被相关信息网站标记）显示是中介的，包含以下信息大概率为二房东：<ul><li>对标题做过特别优化等内容、发布内容格式特别“规范化”，例如：五道口地铁附近三室一厅朝南房主直急租月付季付当面可谈（巴不得内容全部在标题中体现）。</li><li>房子照片可以在其他非租房信息发布的地方被搜到，多数为效果图、设计图等。推荐使用搜索引擎以图搜图来判别。<ul><li>同一手机号码发布多条不在同一地点的房源，基本是骗子类型的中介。</li><li>张贴满大街的广告并非一般房东所为，一般为二房东或者小中介。</li></ul></li><li>黑中介的特点无非是：<ul><li><strong>广泛投放性价比高出市场对信息</strong>：在各种分类信息网站或者论坛投放大量描述红红绿绿、价格远低于市场价、描述看起来很好、效果图惊艳的房子。</li><li><strong>避免直接与客户进行沟通露馅</strong>：打电话联系他们，会被对方草草挂掉，然后短信回复你，告知你一个公司的所在地，让你来公司办理入住业务。</li><li><strong>在看房之前急于促成租房合同</strong>：去公司之后，一个劲保证你想要住的地方绝对有房子，先签合同会有专人带你看房。交完佣金之后，可能会给你一套破烂到不行的房子。</li><li><strong>电话里沟通过的房子在带看的时候进行更换</strong>：电话里沟通好的房子，见面后告知刚被出租出去，恰好有另外一个惊喜的房子在等待你；在你不满意时，就带你去一个别的小区（不是你原计划居住的小区），带你去的小区往往是居住条件不好，房子多没人住的小区。同时，房东会因为找中介给佣金而提高房价。</li><li>这样你用高价住了破房子还甩给了黑中介一笔佣金。</li></ul></li></ul></li></ul><h3 id="可能被夸大描述的信息"><a href="#可能被夸大描述的信息" class="headerlink" title="可能被夸大描述的信息"></a>可能被夸大描述的信息</h3><p>在签合同入住之前，请客观对房子进行评价，对房屋信息做到眼见为实，而不是轻信描述信息。</p><ul><li>大</li><li>安静</li><li>朝向南</li><li>有某设施</li><li>低时间成本</li><li>超高的性价比</li></ul><p>展开描述一下：</p><ul><li>房子的平米数据很漂亮，但是有的二房东可以把一个70平米的房子拆成4个25平米的房子租出去。</li><li>建议在房子内多待一阵，计划长租可以白天晚上都去房子里看看，街道、邻居是否过分喧哗。</li><li>朝向这个是玄学、西南向的房子不太好住。</li><li>带阳台、带窗户。注意，“带”和“带有用的”是两回事。</li><li>离地铁 5～10 分钟，可能需要特别的大长腿，或者步幅特别快。</li></ul><p>总之，基本上除了地方可以勉强信一下，其他信息在眼见为实之前基本不要轻信。</p><ul><li>如果是中介，不要相信不要中介费，羊毛出在羊身上。</li><li>如果找中介，请找靠谱中介。所谓靠谱，就是必须至少十几家以上连锁，店面名字你听说过。不然貌似省下来的中介费，最终很有可能会从诸如说你破坏东西扣除或者赖着不给你的押金、签合同时突然增加的卫生费（丫才不给你打扫）等等方式找回来。为了省心，请选靠谱中介。</li><li>如果不确定中介是否靠谱，可以搜中介名称+骗子，然后自行鉴定。</li><li>提前至少两周开始找房子，多打电话，中介一律屏蔽（不然烦死你）。多看房，找到房东之后看房本。合同一定要签，不要犯傻。</li><li>如果和中介签合同，尤其不是靠谱中介，合同的每一个字都要看，不要相信他所说的话，合同他都有不承认的时候。</li><li>永远不要信，我是房东，我出差在外面，请转账给我老婆。</li><li><strong>签合同的小技巧</strong>合同中约定（例如必需水电的故障需要3日内修好，或者说好给你个衣柜之类）的内容房东有时会拒绝执行，在签署合同的时候，首先一切以合同为准，其次在约定中补充<em>如果不能满足允许房客随时退房，押金不得以任何理由扣留，已经交的租金按日计算返还</em>，一般会比较有效。</li></ul><h3 id="签订合同前建议获取的信息"><a href="#签订合同前建议获取的信息" class="headerlink" title="签订合同前建议获取的信息"></a>签订合同前建议获取的信息</h3><ul><li>先了解和你沟通的出租人<strong>是否有权利出租该房屋</strong>。<ul><li>必须验明房东产权证，验看出租人的身份证是否与产权证一致。</li><li>代替家人（公公／婆婆／表亲）进行房屋出租的“房东”，是否为戏精租客扮演的二房东，如果是真的亲戚代理房东进行出租，如果出了问题，她能代理和解决么。</li><li>尽量不要和房东朋友（基友／闺蜜）代理房东出租房屋产生合作，减少不必要麻烦。</li></ul></li><li>租客是否有权再次出租、转租房屋，如果是房东一般不允许出租，转租也是比较抵触的。</li><li>房东是否能提供或者办理《房屋租赁许可证》，一般建议到当地街道派出所进行办理，对房东也是一种保护，不过这个会牵扯到一些额外的费用，许多房东会回避掉。<ul><li>该许可证也可能会因为特殊原因没有，如回迁房。</li></ul></li><li>查看房屋的实际使用条件与状况<ul><li>房子的实际使用面积是否能够接受</li><li>房子的隔音效果是否能接受（邻居、街道）</li><li>房子的家具是否有严重的气味（装修、家具、环境等因素）</li><li>窗户是否严密，开关是否正常（漏风）</li><li>如果阳台没有包裹，建议不要租，会有蚊虫、灰尘，以及保暖隐患。</li><li>如果周围有工地和马路，不要租，会很喧哗，特殊情况，会喧哗到很晚。</li><li>如果是老房子，房屋下水（洗手池/马桶/地漏）有问题，不要租，轻则影响自己，重则淹了楼下。</li><li>如果是老房子，门锁有问题，房东含糊换锁或者不可以换锁的话，不要租。</li><li>附加：电梯的使用（搬家/购置东西）</li><li>如果缺少的东西，房东是否能补齐</li><li>有条件的话，最好可以试住一到两天。检查的时候看不出问题，住进去潜在问题就会出来。</li></ul></li><li>简单了解治安状况<ul><li>小区、单元是否有门禁系统、或者物业保安值守。</li><li>一般距离地铁越近的小区，流动性越大，距离地铁有十几分钟的走路时间的小区可能是不错的选择（共享单车、顺风车）。</li></ul></li><li>房子周围设施是否相对方便<ul><li>交通措施是否过度单一或者匮乏</li><li>是否有社区医疗应急（附近有大医院可忽略）</li><li>附近吃喝的地方多吗（依赖外卖、自己做饭可忽略）</li><li>便利店、超市、购物中心是否存在，如果购置东西并非全部依赖在线，需要考虑线下购物的便利性。</li><li>如果只是为了距离上班地点近，可以舍弃一些或者全部</li></ul></li><li><strong>针对在上海的同学们：</strong> 需要提前和与你签协议的人沟通，是否能办理居住证，办理居住证对于希望常驻上海的同学来说很重要，因为有些东西（买车买房小孩上学之类）是要看居住证的年限的。建议将<em>必须要办理居住证，否则随时可退房</em>作为补充条款写入。</li><li><strong>针对有小孩的同学们</strong> 提前和房东沟通可否办理租住手续（官方），现在租住同权，如果租住的是学区房小孩可以在该学区上学，但是有的时候一些自己有小孩的房东可能会拒绝。</li><li>明确公用的基础设施的使用和维修：对于群租的同学来说，<strong>卫生间（热水器，洗衣机），厨房（煤气灶、冰箱、微波炉）</strong>很可能是公用的，当公用的设施损坏以后，维修的责任需要在合同中厘清，并且规定维修时间，以防止房东或者二房东推脱责任，或者拖延不予维修。</li></ul><h3 id="明确费用"><a href="#明确费用" class="headerlink" title="明确费用"></a>明确费用</h3><p>明确以下费用由谁承担，可以注明数字时间的费用建议进行备注说明。</p><ul><li>水费<ul><li>是否分冷水/热水/清洁用水，如果区分单独确定费用。</li><li>比如北京热水涨价汹涌，问清楚价格，和充值方式（特别远的话，使用的话，多充值一点）。</li><li>热水可能以非常长的时间为缴纳周期，入住时，确保热水费用之前房东和中介是正常缴纳的。（遇到过几年没缴纳过热水费的自如房子）</li></ul></li><li>电费<ul><li>缴费方式，自己交电卡，有无电卡，还是代缴，价格。</li><li>是否为商用电（部分住宅是商用电）</li></ul></li><li>煤气费<ul><li>酒店公寓可能没有煤气，不存在煤气费一说。</li><li>如果依赖此项目，优先查看。</li><li>煤气费可能以非常长的时间为缴纳周期，入住时，确保煤气费用之前房东和中介是正常缴纳的。（遇到过几年没缴纳过煤气费的自如房子）</li></ul></li><li>电话费<ul><li>有的房子不存在此项，但是有的房子会是和房东手机绑定一起的。</li><li>如果是合租的人绑定手机，那么要查看单子缴费是月度/季度/年度。</li></ul></li><li>电视费用<ul><li>即使你不使用这个设备，这个费用也要询问的，以免账单突然多出一年费用。</li></ul></li><li>卫生费</li><li>物业费</li><li>网费</li><li>供暖费<ul><li>仅限北方，明确暖气费谁来承担，到了冬天才发现合同上未见说明。租金是承担了暖气费的标准的价格，但是却要自己交。以及暖气片存在位置会不会和合租人员产生缴费分歧。</li></ul></li><li>维修费和附带影响<ul><li>房东仓促做防水，防水坏掉了，楼下水漫金山，要维修，你可能要一半个月不能用卫生间。</li><li>年代久远的空调因漏气/坏件，还要租客你承担费用的情况，另外如果是发生在南方冬天…</li><li>灯泡这类易耗品最好也问下，一年不到，不知道是质量问题还是电压，换了4/5个，直到换了LED灯</li></ul></li><li>损坏赔偿<ul><li>如果存在某些情况，这个时候赔偿是补新，还是几倍价格，还是如何，确认清楚</li></ul></li><li>另外需要查看是否有欠费<ul><li>曾经遇到欠费600多的煤气费的业主出国，居委会三天两头上门找</li></ul></li><li>租赁期间对房屋修缮<ul><li>房屋以及附属设备出现问题或者故障，由谁维护，费用由谁承担</li></ul></li></ul><h3 id="租金支付"><a href="#租金支付" class="headerlink" title="租金支付"></a>租金支付</h3><ul><li>租金由出租人收取，是承租人使用房屋的对价;</li><li>物业管理费则由物业管理公司收取，是物业公司以自己的经营活动为所有业主、租户提供服务所收取的费用，二者不是一个法律关系，不能混为一谈。</li><li>但如双方在合同中对于此项无具体约定，则出租人无权要求承租人支付物业管理费。</li><li>签订租赁合同时要仔细阅读合同条款，对于模糊内容要详加询问，并落实于字面。<ul><li>在双方签订《房屋租赁合同》时最好将屋内所有物品详列一份清单，作为其合同附件收好。</li><li>如果可能多复印一份，我和舍友租房子，结果都找不到合同了。</li><li>合同明确租期内，房东是否可以涨价</li><li>合同明确押金以及押金退换方式（<strong>这里是深水区</strong>）</li><li>留意退房时卫生的字眼，比如“退房时房屋没有打扫干净，要扣200押金”。退房时的卫生要做到什么程度，要和房东提前明确，最好留录音和租房前的房屋照片。避免退房时被恶心房东刁难。</li></ul></li><li>如果万一不可避免地与奇葩房东发生冲突，可以参考以下维权案例<ul><li><a href="https://g.leaskh.com/2014/11/13/DIY-打官司-目录/" target="_blank" rel="noopener">DIY 打官司</a></li></ul></li></ul><h3 id="退房退租"><a href="#退房退租" class="headerlink" title="退房退租"></a>退房退租</h3><ul><li>不管出于什么原因，请尽早至少半个月，推荐一个月，和房东说明，以免耽误房东再次转租，影响自己的押金和人品。</li><li>在退房前，如果钥匙丢失，不能如数退还给房东。建议尽可能配一把钥匙。以免房东以影响安全的名义要你换锁。其实就是变相要扣押金，不要给他开口的机会。</li></ul>]]></content:encoded>
      
      <comments>http://mydearest.cn/2019/%E7%A7%9F%E6%88%BF%E9%A1%BB%E7%9F%A5.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>webpack</title>
      <link>http://mydearest.cn/2019/webpack.html</link>
      <guid>http://mydearest.cn/2019/webpack.html</guid>
      <pubDate>Sun, 18 Aug 2019 06:37:40 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;谈谈你对webpack的看法&quot;&gt;&lt;a href=&quot;#谈谈你对webpack的看法&quot; class=&quot;headerlink&quot; title=&quot;谈谈你对webpack的看法&quot;&gt;&lt;/a&gt;谈谈你对webpack的看法&lt;/h2&gt;&lt;p&gt;webpack是一个模块打包工具，可以使用它管理项目中的模块依赖，并编译输出模块所需的静态文件。它可以很好地管理、打包开发中所用到的HTML,CSS,JavaScript和静态文件（图片，字体）等，让开发更高效。对于不同类型的依赖，webpack有对应的模块加载器，而且会分析模块间的依赖关系，最后合并生成优化的静态资源。&lt;/p&gt;
&lt;h2 id=&quot;webpack的基本功能和工作原理？&quot;&gt;&lt;a href=&quot;#webpack的基本功能和工作原理？&quot; class=&quot;headerlink&quot; title=&quot;webpack的基本功能和工作原理？&quot;&gt;&lt;/a&gt;webpack的基本功能和工作原理？&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;代码转换：TypeScript 编译成 JavaScript、SCSS 编译成 CSS 等等&lt;/li&gt;
&lt;li&gt;文件优化：压缩 JavaScript、CSS、HTML 代码，压缩合并图片等&lt;/li&gt;
&lt;li&gt;代码分割：提取多个页面的公共代码、提取首屏不需要执行部分的代码让其异步加载&lt;/li&gt;
&lt;li&gt;模块合并：在采用模块化的项目有很多模块和文件，需要构建功能把模块分类合并成一个文件&lt;/li&gt;
&lt;li&gt;自动刷新：监听本地源代码的变化，自动构建，刷新浏览器&lt;/li&gt;
&lt;li&gt;代码校验：在代码被提交到仓库前需要检测代码是否符合规范，以及单元测试是否通过&lt;/li&gt;
&lt;li&gt;自动发布：更新完代码后，自动构建出线上发布代码并传输给发布系统。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;webpack构建过程&quot;&gt;&lt;a href=&quot;#webpack构建过程&quot; class=&quot;headerlink&quot; title=&quot;webpack构建过程&quot;&gt;&lt;/a&gt;webpack构建过程&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;从entry里配置的module开始递归解析entry依赖的所有module&lt;/li&gt;
&lt;li&gt;每找到一个module，就会根据配置的loader去找对应的转换规则&lt;/li&gt;
&lt;li&gt;对module进行转换后，再解析出当前module依赖的module&lt;/li&gt;
&lt;li&gt;这些模块会以entry为单位分组，一个entry和其所有依赖的module被分到一个组Chunk&lt;/li&gt;
&lt;li&gt;最后webpack会把所有Chunk转换成文件输出&lt;/li&gt;
&lt;li&gt;在整个流程中webpack会在恰当的时机执行plugin里定义的逻辑&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;webpack打包原理&quot;&gt;&lt;a href=&quot;#webpack打包原理&quot; class=&quot;headerlink&quot; title=&quot;webpack打包原理&quot;&gt;&lt;/a&gt;webpack打包原理&lt;/h2&gt;&lt;h2 id=&quot;将所有依赖打包成一个bundle-js，通过代码分割成单元片段按需加载&quot;&gt;&lt;a href=&quot;#将所有依赖打包成一个bundle-js，通过代码分割成单元片段按需加载&quot; class=&quot;headerlink&quot; title=&quot;将所有依赖打包成一个bundle.js，通过代码分割成单元片段按需加载&quot;&gt;&lt;/a&gt;将所有依赖打包成一个bundle.js，通过代码分割成单元片段按需加载&lt;/h2&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="谈谈你对webpack的看法"><a href="#谈谈你对webpack的看法" class="headerlink" title="谈谈你对webpack的看法"></a>谈谈你对webpack的看法</h2><p>webpack是一个模块打包工具，可以使用它管理项目中的模块依赖，并编译输出模块所需的静态文件。它可以很好地管理、打包开发中所用到的HTML,CSS,JavaScript和静态文件（图片，字体）等，让开发更高效。对于不同类型的依赖，webpack有对应的模块加载器，而且会分析模块间的依赖关系，最后合并生成优化的静态资源。</p><h2 id="webpack的基本功能和工作原理？"><a href="#webpack的基本功能和工作原理？" class="headerlink" title="webpack的基本功能和工作原理？"></a>webpack的基本功能和工作原理？</h2><ul><li>代码转换：TypeScript 编译成 JavaScript、SCSS 编译成 CSS 等等</li><li>文件优化：压缩 JavaScript、CSS、HTML 代码，压缩合并图片等</li><li>代码分割：提取多个页面的公共代码、提取首屏不需要执行部分的代码让其异步加载</li><li>模块合并：在采用模块化的项目有很多模块和文件，需要构建功能把模块分类合并成一个文件</li><li>自动刷新：监听本地源代码的变化，自动构建，刷新浏览器</li><li>代码校验：在代码被提交到仓库前需要检测代码是否符合规范，以及单元测试是否通过</li><li>自动发布：更新完代码后，自动构建出线上发布代码并传输给发布系统。</li></ul><h2 id="webpack构建过程"><a href="#webpack构建过程" class="headerlink" title="webpack构建过程"></a>webpack构建过程</h2><ul><li>从entry里配置的module开始递归解析entry依赖的所有module</li><li>每找到一个module，就会根据配置的loader去找对应的转换规则</li><li>对module进行转换后，再解析出当前module依赖的module</li><li>这些模块会以entry为单位分组，一个entry和其所有依赖的module被分到一个组Chunk</li><li>最后webpack会把所有Chunk转换成文件输出</li><li>在整个流程中webpack会在恰当的时机执行plugin里定义的逻辑</li></ul><h2 id="webpack打包原理"><a href="#webpack打包原理" class="headerlink" title="webpack打包原理"></a>webpack打包原理</h2><h2 id="将所有依赖打包成一个bundle-js，通过代码分割成单元片段按需加载"><a href="#将所有依赖打包成一个bundle-js，通过代码分割成单元片段按需加载" class="headerlink" title="将所有依赖打包成一个bundle.js，通过代码分割成单元片段按需加载"></a>将所有依赖打包成一个bundle.js，通过代码分割成单元片段按需加载</h2><a id="more"></a><h2 id="什么是webpack，与gulp-grunt有什么区别"><a href="#什么是webpack，与gulp-grunt有什么区别" class="headerlink" title="什么是webpack，与gulp,grunt有什么区别"></a>什么是webpack，与gulp,grunt有什么区别</h2><ul><li>webpack是一个模块打包工具，可以递归地打包项目中的所有模块，最终生成几个打包后的文件。</li><li>区别：webpack支持代码分割，模块化（AMD,CommonJ,ES2015），全局分析</li></ul><h2 id="什么是entry-output"><a href="#什么是entry-output" class="headerlink" title="什么是entry,output?"></a>什么是entry,output?</h2><ul><li>entry 入口，告诉webpack要使用哪个模块作为构建项目的起点，默认为./src/index.js</li><li>output 出口，告诉webpack在哪里输出它打包好的代码以及如何命名，默认为./dist</li></ul><h2 id="什么是loader，plugins"><a href="#什么是loader，plugins" class="headerlink" title="什么是loader，plugins?"></a>什么是loader，plugins?</h2><ul><li>loader是用来告诉webpack如何转换某一类型的文件，并且引入到打包出的文件中。</li><li>plugins(插件)作用更大，可以打包优化，资源管理和注入环境变量</li></ul><h2 id="什么是bundle-chunk-module"><a href="#什么是bundle-chunk-module" class="headerlink" title="什么是bundle,chunk,module?"></a>什么是bundle,chunk,module?</h2><p>bundle是webpack打包出来的文件，chunk是webpack在进行模块的依赖分析的时候，代码分割出来的代码块。module是开发中的单个模块</p><h2 id="如何自动生成webpack配置？"><a href="#如何自动生成webpack配置？" class="headerlink" title="如何自动生成webpack配置？"></a>如何自动生成webpack配置？</h2><p>可以用一些官方脚手架</p><ul><li>webpack-cli</li><li>vue-cli</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 首先安装</span></span><br><span class="line">npm install -g @vue/cli</span><br><span class="line"><span class="comment">// 新建项目hello</span></span><br><span class="line">vue create hello</span><br></pre></td></tr></table></figure><p>nuxt-cli<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 确保安装了npx,npx在npm5.2.0默认安装了</span></span><br><span class="line"><span class="comment">// 新建项目hello</span></span><br><span class="line">npx create-nuxt-app hello</span><br></pre></td></tr></table></figure></p><h2 id="webpack如何配置单页面和多页面的应用程序？"><a href="#webpack如何配置单页面和多页面的应用程序？" class="headerlink" title="webpack如何配置单页面和多页面的应用程序？"></a>webpack如何配置单页面和多页面的应用程序？</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 单个页面</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: <span class="string">'./path/to/my/entry/file.js'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 多页面应用程序</span></span><br><span class="line"><span class="built_in">module</span>.entrys = &#123;</span><br><span class="line">    entry: &#123;</span><br><span class="line">        pageOne: <span class="string">'./src/pageOne/index.js'</span>,</span><br><span class="line">        pageTwo: <span class="string">'./src/pageTwo/index.js'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="几个常见的loader"><a href="#几个常见的loader" class="headerlink" title="几个常见的loader"></a>几个常见的loader</h2><ul><li>file-loader：把文件输出到一个文件夹中，在代码中通过相对 URL 去引用输出的文件</li><li>url-loader：和 file-loader 类似，但是能在文件很小的情况下以 base64 的方式把文件内容注入到代码中去</li><li>source-map-loader：加载额外的 Source Map 文件，以方便断点调试</li><li>image-loader：加载并且压缩图片文件</li><li>babel-loader：把 ES6 转换成 ES5</li><li>css-loader：加载 CSS，支持模块化、压缩、文件导入等特性</li><li>style-loader：把 CSS 代码注入到 JavaScript 中，通过 DOM 操作去加载 CSS。</li><li>eslint-loader：通过 ESLint 检查 JavaScript 代码</li></ul><h2 id="几个常见的plugin"><a href="#几个常见的plugin" class="headerlink" title="几个常见的plugin"></a>几个常见的plugin</h2><ul><li>define-plugin：定义环境变量</li><li>terser-webpack-plugin：通过TerserPlugin压缩ES6代码</li><li>html-webpack-plugin 为html文件中引入的外部资源，可以生成创建html入口文件</li><li>mini-css-extract-plugin：分离css文件</li><li>clean-webpack-plugin：删除打包文件</li><li>happypack：实现多线程加速编译</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> UglifyJSPlugin = <span class="built_in">require</span>(<span class="string">'uglifyjs-webpack-plugin'</span>);</span><br><span class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line"><span class="keyword">var</span> ExtractTextPlugin = <span class="built_in">require</span>(<span class="string">"extract-text-webpack-plugin"</span>);</span><br><span class="line"><span class="keyword">var</span> providePlugin = <span class="keyword">new</span> webpack.ProvidePlugin(&#123;<span class="attr">$</span>: <span class="string">'jquery'</span>, <span class="attr">jQuery</span>: <span class="string">'jquery'</span>, <span class="string">'window.jQuery'</span>: <span class="string">'jquery'</span>&#125;);</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: &#123;</span><br><span class="line">        index: <span class="string">'./src/js/index.js'</span>,</span><br><span class="line">        goodsInfo: <span class="string">'./src/js/goodsInfo.js'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    output: &#123;</span><br><span class="line">        filename: <span class="string">'[name].js'</span>,</span><br><span class="line">        path: __dirname + <span class="string">'/out'</span>,</span><br><span class="line">        publicPath: <span class="string">'http://localhost:8080/out'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            &#123;<span class="attr">test</span>: <span class="regexp">/.js$/</span>, <span class="attr">use</span>: [<span class="string">'babel-loader'</span>]&#125;,</span><br><span class="line">            <span class="comment">// // &#123;test: /.css$/, use: ['style-loader','css-loader']&#125;,</span></span><br><span class="line">            <span class="comment">// &#123;</span></span><br><span class="line">            <span class="comment">//     test: /.css$/,</span></span><br><span class="line">            <span class="comment">//     use: ExtractTextPlugin.extract(&#123;</span></span><br><span class="line">            <span class="comment">//       fallback: "style-loader",</span></span><br><span class="line">            <span class="comment">//       use: "css-loader"</span></span><br><span class="line">            <span class="comment">//     &#125;)</span></span><br><span class="line">            <span class="comment">// &#125;,</span></span><br><span class="line">            &#123;<span class="attr">test</span>: <span class="regexp">/.jpg|png|gif|svg$/</span>, <span class="attr">use</span>: [<span class="string">'url-loader?limit=8192&amp;name=./[name].[ext]'</span>]&#125;, </span><br><span class="line">            &#123;<span class="attr">test</span>: <span class="regexp">/.less$/</span>, <span class="attr">use</span>: [<span class="string">'style-loader'</span>, <span class="string">'css-loader'</span>, <span class="string">'less-loader'</span>]&#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> UglifyJSPlugin(),</span><br><span class="line">        <span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class="line">            name: <span class="string">"commons"</span>,</span><br><span class="line">            filename: <span class="string">"commons.js"</span>,</span><br><span class="line">            minChunks:<span class="number">2</span>&#125;),  </span><br><span class="line">        <span class="keyword">new</span> ExtractTextPlugin(<span class="string">"[name].css"</span>), </span><br><span class="line">        providePlugin     </span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://mydearest.cn/2019/webpack.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>成为优秀程序员的建议</title>
      <link>http://mydearest.cn/2019/%E6%88%90%E4%B8%BA%E4%BC%98%E7%A7%80%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E5%BB%BA%E8%AE%AE.html</link>
      <guid>http://mydearest.cn/2019/%E6%88%90%E4%B8%BA%E4%BC%98%E7%A7%80%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E5%BB%BA%E8%AE%AE.html</guid>
      <pubDate>Sat, 17 Aug 2019 17:21:18 GMT</pubDate>
      <description>
      
        &lt;h3 id=&quot;1-善用google⭐&quot;&gt;&lt;a href=&quot;#1-善用google⭐&quot; class=&quot;headerlink&quot; title=&quot;1. 善用google⭐&quot;&gt;&lt;/a&gt;1. 善用google⭐&lt;/h3&gt;&lt;p&gt;作为一名程序员，你要知道如何搜索问题的答案。学会有效的使用google，你将节省大量开发时间。  &lt;/p&gt;
&lt;h3 id=&quot;2-谨慎承诺超额交付⭐&quot;&gt;&lt;a href=&quot;#2-谨慎承诺超额交付⭐&quot; class=&quot;headerlink&quot; title=&quot;2. 谨慎承诺超额交付⭐&quot;&gt;&lt;/a&gt;2. 谨慎承诺超额交付⭐&lt;/h3&gt;&lt;p&gt;让你的团队知道一项任务需要三周的时间，并在两周内完成，这比让他们知道相反的情况要好。通过谨慎承诺和超额交付，你会建立信任。&lt;/p&gt;
&lt;h3 id=&quot;3-善待产品设计人员，他们是你的朋友&quot;&gt;&lt;a href=&quot;#3-善待产品设计人员，他们是你的朋友&quot; class=&quot;headerlink&quot; title=&quot;3. 善待产品设计人员，他们是你的朋友&quot;&gt;&lt;/a&gt;3. 善待产品设计人员，他们是你的朋友&lt;/h3&gt;&lt;p&gt;产品设计人员为用户的痛点提供解决方案。向他们学习，团结一致地构建有效的产品。&lt;/p&gt;
&lt;h3 id=&quot;4-找到一名导师&quot;&gt;&lt;a href=&quot;#4-找到一名导师&quot; class=&quot;headerlink&quot; title=&quot;4. 找到一名导师&quot;&gt;&lt;/a&gt;4. 找到一名导师&lt;/h3&gt;&lt;p&gt;找到一个可以学习和借鉴的人。如果你需要技术指导，&lt;a href=&quot;https://codingcoach.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Coding Coach&lt;/a&gt;会是一个不错的地方。&lt;/p&gt;
&lt;h3 id=&quot;5-成为一名导师&quot;&gt;&lt;a href=&quot;#5-成为一名导师&quot; class=&quot;headerlink&quot; title=&quot;5. 成为一名导师&quot;&gt;&lt;/a&gt;5. 成为一名导师&lt;/h3&gt;&lt;p&gt;做一个别人可以学习和借鉴的人。你可以尝试在&lt;a href=&quot;https://codingcoach.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Coding Coach&lt;/a&gt;成为别人的导师。&lt;/p&gt;
&lt;h3 id=&quot;6-写些有用的评论&quot;&gt;&lt;a href=&quot;#6-写些有用的评论&quot; class=&quot;headerlink&quot; title=&quot;6. 写些有用的评论&quot;&gt;&lt;/a&gt;6. 写些有用的评论&lt;/h3&gt;&lt;p&gt;写下有用的回答而不是问为什么，mark和灌水也没什么意思。&lt;/p&gt;
&lt;hr&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h3 id="1-善用google⭐"><a href="#1-善用google⭐" class="headerlink" title="1. 善用google⭐"></a>1. 善用google⭐</h3><p>作为一名程序员，你要知道如何搜索问题的答案。学会有效的使用google，你将节省大量开发时间。  </p><h3 id="2-谨慎承诺超额交付⭐"><a href="#2-谨慎承诺超额交付⭐" class="headerlink" title="2. 谨慎承诺超额交付⭐"></a>2. 谨慎承诺超额交付⭐</h3><p>让你的团队知道一项任务需要三周的时间，并在两周内完成，这比让他们知道相反的情况要好。通过谨慎承诺和超额交付，你会建立信任。</p><h3 id="3-善待产品设计人员，他们是你的朋友"><a href="#3-善待产品设计人员，他们是你的朋友" class="headerlink" title="3. 善待产品设计人员，他们是你的朋友"></a>3. 善待产品设计人员，他们是你的朋友</h3><p>产品设计人员为用户的痛点提供解决方案。向他们学习，团结一致地构建有效的产品。</p><h3 id="4-找到一名导师"><a href="#4-找到一名导师" class="headerlink" title="4. 找到一名导师"></a>4. 找到一名导师</h3><p>找到一个可以学习和借鉴的人。如果你需要技术指导，<a href="https://codingcoach.io/" target="_blank" rel="noopener">Coding Coach</a>会是一个不错的地方。</p><h3 id="5-成为一名导师"><a href="#5-成为一名导师" class="headerlink" title="5. 成为一名导师"></a>5. 成为一名导师</h3><p>做一个别人可以学习和借鉴的人。你可以尝试在<a href="https://codingcoach.io/" target="_blank" rel="noopener">Coding Coach</a>成为别人的导师。</p><h3 id="6-写些有用的评论"><a href="#6-写些有用的评论" class="headerlink" title="6. 写些有用的评论"></a>6. 写些有用的评论</h3><p>写下有用的回答而不是问为什么，mark和灌水也没什么意思。</p><hr><a id="more"></a><h3 id="7-合理的命名变量和函数名"><a href="#7-合理的命名变量和函数名" class="headerlink" title="7. 合理的命名变量和函数名"></a>7. 合理的命名变量和函数名</h3><p>函数和变量应该准确地表示它们的用途，因此myCoolFunction不是一个好名字。</p><h3 id="8-给自己放个假"><a href="#8-给自己放个假" class="headerlink" title="8. 给自己放个假"></a>8. 给自己放个假</h3><p>我们都需要时间来缓解压力。去一个你一直想去的地方放个假。你的大脑和同事都会感谢你的。</p><h3 id="9-删除无用代码⭐"><a href="#9-删除无用代码⭐" class="headerlink" title="9. 删除无用代码⭐"></a>9. 删除无用代码⭐</h3><p>没有理由积累更多技术债务。</p><h3 id="10-学会阅读代码⭐"><a href="#10-学会阅读代码⭐" class="headerlink" title="10. 学会阅读代码⭐"></a>10. 学会阅读代码⭐</h3><p>阅读代码是一项非常宝贵的被低估的技能。</p><h3 id="11-找到健康工作和生活平衡点"><a href="#11-找到健康工作和生活平衡点" class="headerlink" title="11. 找到健康工作和生活平衡点"></a>11. 找到健康工作和生活平衡点</h3><p>结束一周的工作之后，周末放松一下。关闭工作通知，删除手机上的应用程序。</p><h3 id="12-只安排必要的会议"><a href="#12-只安排必要的会议" class="headerlink" title="12. 只安排必要的会议"></a>12. 只安排必要的会议</h3><p>能用邮件解决的就没必要开会，如果非要开，也应该让会议简短高效。</p><h3 id="13-结对编程"><a href="#13-结对编程" class="headerlink" title="13. 结对编程"></a>13. 结对编程</h3><p>结对编程可以让你同时扮演老师和学生的角色。</p><h3 id="14-写好邮件"><a href="#14-写好邮件" class="headerlink" title="14. 写好邮件"></a>14. 写好邮件</h3><p>邮件的内容应该简洁而清晰，抓住重点。没人会想看你的四页邮件，兄弟。</p><h3 id="15-加入社区⭐"><a href="#15-加入社区⭐" class="headerlink" title="15. 加入社区⭐"></a>15. 加入社区⭐</h3><p>和志同道合的人在一起会激励你走出低谷。</p><h3 id="16-清理你的分支⭐"><a href="#16-清理你的分支⭐" class="headerlink" title="16. 清理你的分支⭐"></a>16. 清理你的分支⭐</h3><p>清理你的版本控制分支，就像在你的岳父母来访之前清理你的房子一样。如果你不再需要，请删掉它，不删留着过年啊。</p><h3 id="17-接纳萌新"><a href="#17-接纳萌新" class="headerlink" title="17. 接纳萌新"></a>17. 接纳萌新</h3><p>包容点，不要告诉别人不够好，不能进入这个行业，每个人都是有价值。</p><h3 id="18-活到老学到老"><a href="#18-活到老学到老" class="headerlink" title="18. 活到老学到老"></a>18. 活到老学到老</h3><p>你选择了一个需要不断学习的职业，学会爱上它。</p><h3 id="19-永不言弃"><a href="#19-永不言弃" class="headerlink" title="19. 永不言弃"></a>19. 永不言弃</h3><p>这并不容易，但是我们都是从同一个地方开始，你也能做到。  </p><h3 id="20-敢于接受有挑战性的任务⭐"><a href="#20-敢于接受有挑战性的任务⭐" class="headerlink" title="20. 敢于接受有挑战性的任务⭐"></a>20. 敢于接受有挑战性的任务⭐</h3><p>如果任务没有挑战，它就不会帮助你成长。</p><h3 id="21-项目开始前明确需求⭐"><a href="#21-项目开始前明确需求⭐" class="headerlink" title="21. 项目开始前明确需求⭐"></a>21. 项目开始前明确需求⭐</h3><p>在开撸之前，你应该了解验收标准，这将为你节省时间和痛苦。</p><h3 id="22-工欲善其事，必先利其器⭐"><a href="#22-工欲善其事，必先利其器⭐" class="headerlink" title="22. 工欲善其事，必先利其器⭐"></a>22. 工欲善其事，必先利其器⭐</h3><p>拥有一套你熟悉的工具，了解哪些工具服务于哪些目的，以及项目何时可以从使用这些工具中获益。</p><h3 id="23-我们需要建设性的批评"><a href="#23-我们需要建设性的批评" class="headerlink" title="23. 我们需要建设性的批评"></a>23. 我们需要建设性的批评</h3><p>向信任的同事和朋友寻求建设性的批评，它将帮助你更优秀。 </p><h3 id="24-保持开放思维⭐"><a href="#24-保持开放思维⭐" class="headerlink" title="24. 保持开放思维⭐"></a>24. 保持开放思维⭐</h3><p>技术在变化，而且变化得很快。不要反对新技术，学习它，然后形成自己的观点。 </p><h3 id="25-保持在技术前沿，不要掉队⭐"><a href="#25-保持在技术前沿，不要掉队⭐" class="headerlink" title="25. 保持在技术前沿，不要掉队⭐"></a>25. 保持在技术前沿，不要掉队⭐</h3><p>通过关注出版物，博客，播客和科技新闻，及时了解最新的科技新闻。</p><h3 id="26-专注于解决问题⭐"><a href="#26-专注于解决问题⭐" class="headerlink" title="26. 专注于解决问题⭐"></a>26. 专注于解决问题⭐</h3><p>锻炼自己解决问题的能力，强大的解决问题的能力能够帮助你应付一切，专注于解决问题的方法。</p><h3 id="27-保持谦虚⭐"><a href="#27-保持谦虚⭐" class="headerlink" title="27. 保持谦虚⭐"></a>27. 保持谦虚⭐</h3><p>三人行必有我师，无论你什么头衔，什么公司，都要保持谦逊。</p><h3 id="28-不光要代码写的好，PPT也要讲得好"><a href="#28-不光要代码写的好，PPT也要讲得好" class="headerlink" title="28. 不光要代码写的好，PPT也要讲得好"></a>28. 不光要代码写的好，PPT也要讲得好</h3><p>学习如何吸引你的听众，并给出有效的演示。</p><h3 id="29-选型如买菜，也要货比三家⭐"><a href="#29-选型如买菜，也要货比三家⭐" class="headerlink" title="29.  选型如买菜，也要货比三家⭐"></a>29.  选型如买菜，也要货比三家⭐</h3><p>给自己更多选择，在开展工作前，调研尽可能多的解决方案。</p><h3 id="30-找到自己的定位⭐"><a href="#30-找到自己的定位⭐" class="headerlink" title="30. 找到自己的定位⭐"></a>30. 找到自己的定位⭐</h3><p>科技产业也有很多分类，找到你最感兴趣的领域，并成为一名专家。</p><h3 id="31-养成好习惯⭐"><a href="#31-养成好习惯⭐" class="headerlink" title="31. 养成好习惯⭐"></a>31. 养成好习惯⭐</h3><p>试着建立一致的、健康的习惯，比如保持专注，合理安排时间，出席会议，从最重要的任务开始。这可能需要一些时间来适应，但从长远来看是值得的。</p><h3 id="32-学会debug⭐"><a href="#32-学会debug⭐" class="headerlink" title="32. 学会debug⭐"></a>32. 学会debug⭐</h3><p>探索浏览器调试器工具。学习使用IDE调试的细节。通过学习最有效的调试问题和跟踪错误的方法，再困难的bug也能搞定。</p><h3 id="33-锻炼你现有的技能⭐"><a href="#33-锻炼你现有的技能⭐" class="headerlink" title="33. 锻炼你现有的技能⭐"></a>33. 锻炼你现有的技能⭐</h3><p>并不是说你已经掌握了一项技能就不需要再锻炼它。业精于勤荒于嬉，除非有意识地提高技能，否则技能会随着时间的推移而消失。而这个行业又发展得如此之快，坚持练习是很重要的。从“我一直都是这样做的”的心态中走出来，进入“有没有更好的方法来做这件事”的心态。  </p><p>仅仅是因为你现在拥有六块腹肌，不意味着你就可以每天吃一个🍩。</p><h3 id="34-了解原因⭐"><a href="#34-了解原因⭐" class="headerlink" title="34. 了解原因⭐"></a>34. 了解原因⭐</h3><p>有时你必须表达自己的意见，因此了解其背后的原因非常重要。为什么解决方案A比解决方案B更好？提供有效的论据，你的意见将更加可靠。</p><h3 id="35-了解自己的价值"><a href="#35-了解自己的价值" class="headerlink" title="35. 了解自己的价值"></a>35. 了解自己的价值</h3><p>技术也是商品，应该得到适当的报酬。了解你所在地区的行业平均水平。如果你赚的钱少了，是时候和你的老板谈谈，追求你应得的。</p><h3 id="36-不要害怕寻求帮助⭐"><a href="#36-不要害怕寻求帮助⭐" class="headerlink" title="36. 不要害怕寻求帮助⭐"></a>36. 不要害怕寻求帮助⭐</h3><p>如果你被困在一个问题上，花了太多时间寻找解决方案，是时候寻求帮助了。我们都是人，我们都需要帮助，寻求同事的援助并不可耻。</p><h3 id="37-学会学习⭐"><a href="#37-学会学习⭐" class="headerlink" title="37. 学会学习⭐"></a>37. 学会学习⭐</h3><p>人们学习的方式不同，有些人通过视频教程学得最好，有些人通过阅读书籍学得最好。弄清楚你的学习风格，然后努力实践。</p><h3 id="38-与人为善"><a href="#38-与人为善" class="headerlink" title="38. 与人为善"></a>38. 与人为善</h3><p>有时你会被要求向同事提供反馈，友善一点，你可以对某位同事不够积极表达看法，而不是出言不逊。</p><h3 id="39-休息一下"><a href="#39-休息一下" class="headerlink" title="39. 休息一下"></a>39. 休息一下</h3><p>连续敲8个小时代码几乎是不可能，你很快就会筋疲力尽，犯很多错误。所以设个闹钟来提醒自己停下来休息一下。去散散步，和同事一起喝杯咖啡，远离屏幕会对你的工作效率和质量产生积极的影响。</p><h3 id="40-跟踪你的学习进度"><a href="#40-跟踪你的学习进度" class="headerlink" title="40. 跟踪你的学习进度"></a>40. 跟踪你的学习进度</h3><p>学习编程需要时间，当你看不到进展时，你会感到非常沮丧。所以跟踪你的成就和实现目标的进展非常重要。在你的电脑旁边放一个小清单，每次你完成一件事，把它写下来，不管它有多小，最终将会从量变到质变。</p><h3 id="41-不要依赖库和框架⭐"><a href="#41-不要依赖库和框架⭐" class="headerlink" title="41. 不要依赖库和框架⭐"></a>41. 不要依赖库和框架⭐</h3><p>掌握一个框架和库不如深入学习这门语言，没有必要一个接一个的学习这些库和框架，但是理解框架和库如何实现可以帮助你写出更简洁强壮的代码。</p><h3 id="42-学会爱上代码审查"><a href="#42-学会爱上代码审查" class="headerlink" title="42. 学会爱上代码审查"></a>42. 学会爱上代码审查</h3><p>让别人阅读和分析你的代码可能会让你不安，但是可以提供宝贵的反馈，这会让你成为一个更好的程序员。而且你也应该提高进行良好代码评审的能力。</p><h3 id="43-多方位全面学习"><a href="#43-多方位全面学习" class="headerlink" title="43. 多方位全面学习"></a>43. 多方位全面学习</h3><p>学习其他领域的基础知识, 如设计、营销、前端开发或后端开发。它将帮助你成为一个更全面的程序员。</p><h3 id="44-不要选择熟悉的技术，而应该是正确的⭐"><a href="#44-不要选择熟悉的技术，而应该是正确的⭐" class="headerlink" title="44. 不要选择熟悉的技术，而应该是正确的⭐"></a>44. 不要选择熟悉的技术，而应该是正确的⭐</h3><p>每个项目都有不同的需求，因此我们必须为这项工作选择合适的工具。尽管选择以前使用过的技术很方便，但是如果它们不适合项目的需要，应该探索其他替代方案。</p><h3 id="45-勇于承担责任⭐"><a href="#45-勇于承担责任⭐" class="headerlink" title="45. 勇于承担责任⭐"></a>45. 勇于承担责任⭐</h3><p>所有人都会犯错，在你的职业生涯中，你会犯很多很多的错误。因此，当你犯了错误时，站出来承担责任是很重要的，它将与你的团队成员和管理层建立信任。</p><h3 id="46-检查自己的代码⭐"><a href="#46-检查自己的代码⭐" class="headerlink" title="46. 检查自己的代码⭐"></a>46. 检查自己的代码⭐</h3><p>在发起PR请求之前，检查自己的代码，如果这是同事的工作，你会发表什么评论？在请求代码审查之前首先尝试自己诊断问题或错误非常重要，就像考试交卷前应该自己检查一遍。</p><h3 id="47-从失败中吸取教训⭐"><a href="#47-从失败中吸取教训⭐" class="headerlink" title="47. 从失败中吸取教训⭐"></a>47. 从失败中吸取教训⭐</h3><p>失败只是没有达到预期的结果，并不一定是件坏事。在我们的职业生涯中，我们会面临很多失败，从失败中学习下次你能做些什么。   </p><h3 id="48-正视自己的缺点"><a href="#48-正视自己的缺点" class="headerlink" title="48. 正视自己的缺点"></a>48. 正视自己的缺点</h3><p>了解你自己，你的缺点是什么?也许你总是在推送之前忘记更新测试，或者你真的不擅长回复电子邮件。了解你的弱点，这样你就能积极地改善它们。</p><h3 id="49-保持好奇心⭐"><a href="#49-保持好奇心⭐" class="headerlink" title="49. 保持好奇心⭐"></a>49. 保持好奇心⭐</h3><p>这个行业在不断发展，所以好奇心很重要。如果你不明白什么，不管是项目需求还是一行代码，大声说出来。没有人会因为你要求说明而批评你，你会因此创造出更好的代码。   </p><h3 id="50-不要试图学习一切⭐"><a href="#50-不要试图学习一切⭐" class="headerlink" title="50. 不要试图学习一切⭐"></a>50. 不要试图学习一切⭐</h3><p>世界上有无穷无尽的知识宝库，你不可能征服它。选择几个要掌握的主题，其余的就不要管了。你可以获得其他领域的相关知识，但你不可能掌握所有内容。</p><h3 id="51-该舍弃就舍弃"><a href="#51-该舍弃就舍弃" class="headerlink" title="51.  该舍弃就舍弃"></a>51.  该舍弃就舍弃</h3><p>仅仅因为你写了一些代码并不意味着你需要对它产生感情。没有人喜欢他们所做的工作被丢弃，但是代码有一个生命周期，所以没有必要一直保留着它。</p><h3 id="52-团队支持"><a href="#52-团队支持" class="headerlink" title="52.  团队支持"></a>52.  团队支持</h3><p>优秀的团队相互支持，这为尝试新事物创造了一个安全的空间，而不用担心受到惩罚。</p><h3 id="53-在社区中寻找鼓舞"><a href="#53-在社区中寻找鼓舞" class="headerlink" title="53. 在社区中寻找鼓舞"></a>53. 在社区中寻找鼓舞</h3><p>在行业里找几个你钦佩的人。它会激励你继续你的项目或尝试新事物</p><h3 id="54-重视并且珍惜你的工作"><a href="#54-重视并且珍惜你的工作" class="headerlink" title="54. 重视并且珍惜你的工作"></a>54. 重视并且珍惜你的工作</h3><p>不管你有多少经验或者你的职位是什么，你的工作都是有价值的，给予它应有的价值。</p><h3 id="55-排除干扰"><a href="#55-排除干扰" class="headerlink" title="55. 排除干扰"></a>55. 排除干扰</h3><p>关掉闲置的通知、短信、电子邮件和社交媒体会帮助你集中精力，最大化你的工作日。晚30分钟回复你朋友的信息，他死不了，真有事就打电话了。</p><h3 id="56-乐于助人"><a href="#56-乐于助人" class="headerlink" title="56. 乐于助人"></a>56. 乐于助人</h3><p>试着支持你的团队成员，无论是参加一个重要的演讲，还是在他们遇到困难时帮助他们。</p><h3 id="57-不要吝啬你的赞美⭐"><a href="#57-不要吝啬你的赞美⭐" class="headerlink" title="57. 不要吝啬你的赞美⭐"></a>57. 不要吝啬你的赞美⭐</h3><p>如果有人做得很好，告诉他们。正面反馈是与团队成员建立信任和帮助他们事业发展的好方法。他们也更有可能帮助你</p><h3 id="58-测试你的代码⭐"><a href="#58-测试你的代码⭐" class="headerlink" title="58. 测试你的代码⭐"></a>58. 测试你的代码⭐</h3><p>测试是很重要的。单元测试、回归测试、集成测试、端到端测试。测试你的代码，你的产品将会更加稳定。</p><h3 id="59-制定应对计划"><a href="#59-制定应对计划" class="headerlink" title="59. 制定应对计划"></a>59. 制定应对计划</h3><p>当你收到一个新功能需求或bug修改时，先制定应对计划，你需要什么来解决这个问题或开发这个特性？花几分钟来做这件事，也许后面可以为你节省数小时的沮丧。</p><h3 id="60-掌握伪代码"><a href="#60-掌握伪代码" class="headerlink" title="60. 掌握伪代码"></a>60. 掌握伪代码</h3><p>伪代码是一项很好的技能，因为它允许你在不浪费时间编写代码的情况下考虑复杂的问题。将一种方法写在纸上，运行不同的测试用例，看看缺陷在哪里。</p><h3 id="61-记录你的成就"><a href="#61-记录你的成就" class="headerlink" title="61. 记录你的成就"></a>61. 记录你的成就</h3><p>如果你在工作中获得了嘉奖，把它写下来。如果你开发了一个重要的功能，把它写下来。你会拥有一些积累、沉淀，它将有助于你职业晋升亦或在某一艰难的日子鼓舞你的士气。</p><h3 id="62-学习编程基础⭐"><a href="#62-学习编程基础⭐" class="headerlink" title="62. 学习编程基础⭐"></a>62. 学习编程基础⭐</h3><p>学习一些基本的排序和搜索算法以及数据结构。它们与语言无关，可以帮助你跨语言解决问题。</p><h3 id="63-选择长期维护的技术"><a href="#63-选择长期维护的技术" class="headerlink" title="63. 选择长期维护的技术"></a>63. 选择长期维护的技术</h3><p>尽管测试最新的技术很有趣，但是选择那些在企业应用程序中易于维护的技术。你们的团队将在未来的岁月里感谢你们。</p><h3 id="64-学习设计模式⭐"><a href="#64-学习设计模式⭐" class="headerlink" title="64. 学习设计模式⭐"></a>64. 学习设计模式⭐</h3><p>设计模式是构建代码的有效工具。你可能不是每个项目都需要它们，但是对它们有一个基本的了解将有助于构建更大的应用程序。</p><h3 id="65-化繁为简⭐"><a href="#65-化繁为简⭐" class="headerlink" title="65. 化繁为简⭐"></a>65. 化繁为简⭐</h3><p>不要编写复杂的代码来展示你高超的编程技能，而要着眼于可读性和简单性。这将使你的团队成员更容易做出贡献。</p><h3 id="66-还清技术债务"><a href="#66-还清技术债务" class="headerlink" title="66. 还清技术债务"></a>66. 还清技术债务</h3><p>技术债务可能会对性能产生巨大影响，所以如果能够重构，就应该重构。（这个建议绝对是好的，但是现实中要面临诸多问题）</p><h3 id="67-优先小版本迭代"><a href="#67-优先小版本迭代" class="headerlink" title="67. 优先小版本迭代"></a>67. 优先小版本迭代</h3><p>与其每个月发布一次大规模的升级，不如更频繁地发布较小的变更。这样你不太可能会引入bug和破坏更改。</p><h3 id="68-尽早并经常提交⭐"><a href="#68-尽早并经常提交⭐" class="headerlink" title="68. 尽早并经常提交⭐"></a>68. 尽早并经常提交⭐</h3><p>尽早提交和经常提交是确保你的工作保持干净的最好方法，并且还可以减少意外地恢复重要更改的压力。</p><h3 id="69-了解何时寻求帮助"><a href="#69-了解何时寻求帮助" class="headerlink" title="69. 了解何时寻求帮助"></a>69. 了解何时寻求帮助</h3><p>你不仅不应该害怕寻求帮助，而且你应该学会什么时候寻求帮助。在寻求帮助之前，你应该试着解决问题，并记录下你尝试的事情。但是当你被一个简单的问题难住一个多小时的时候，代价大于收益，你应该向同事求助。</p><h3 id="70-问一些有效的问题⭐"><a href="#70-问一些有效的问题⭐" class="headerlink" title="70. 问一些有效的问题⭐"></a>70. 问一些有效的问题⭐</h3><p>当你问问题的时候，要尽可能的具体，（可以参考github提issue的要求）。</p><h3 id="71-工作中及时寻求反馈"><a href="#71-工作中及时寻求反馈" class="headerlink" title="71. 工作中及时寻求反馈"></a>71. 工作中及时寻求反馈</h3><p>你的工作不需要完成就能得到反馈。如果你不确定方向，请一位值得信赖的同事来检查你的解决方案的有效性。</p><h3 id="72-阅读文档⭐"><a href="#72-阅读文档⭐" class="headerlink" title="72. 阅读文档⭐"></a>72. 阅读文档⭐</h3><p>文档是关于技术的最纯粹的事实来源，因此学习阅读文档可以快速帮助你成为专家。</p><p>###　73. 尽可能做出各种尝试⭐没有什么能阻止你尝试解决问题的方法，你有什么损失呢？</p><h3 id="74-在会议上积极发言"><a href="#74-在会议上积极发言" class="headerlink" title="74. 在会议上积极发言"></a>74. 在会议上积极发言</h3><p>你的想法和意见是有价值的，所以参加会议将有助于你与你的团队和管理层建立融洽的关系。</p><h3 id="75-跨团队协作"><a href="#75-跨团队协作" class="headerlink" title="75. 跨团队协作"></a>75. 跨团队协作</h3><p>如果你有机会和公司里的其他团队一起工作，那就去争取吧。</p><h3 id="76-保持项目热情"><a href="#76-保持项目热情" class="headerlink" title="76. 保持项目热情"></a>76. 保持项目热情</h3><p>当你每周工作40个小时时，花时间做你感兴趣的项目是很重要的（72小时的话更要如此）。它们可以帮助你重新找回对编程的热爱，并尝试你在工作中可能无法接触到的新技术。</p><h3 id="77-确定你的职业目标⭐"><a href="#77-确定你的职业目标⭐" class="headerlink" title="77. 确定你的职业目标⭐"></a>77. 确定你的职业目标⭐</h3><p>对你的职业生涯有一个理想的轨迹是很重要的。如果你不这样做，你就是在没有目标的情况下射箭。</p><h3 id="78-加入到讨论中来⭐"><a href="#78-加入到讨论中来⭐" class="headerlink" title="78. 加入到讨论中来⭐"></a>78. 加入到讨论中来⭐</h3><p>在博客上发表评论，参与Twitter主题，参与社区活动，做一个积极的旁观者会比单纯的旁观学到更多东西。</p><h3 id="79-确定任务优先级"><a href="#79-确定任务优先级" class="headerlink" title="79. 确定任务优先级"></a>79. 确定任务优先级</h3><p>学会确定任务的优先顺序将有助于提高您的工作效率，建立一个日常任务和长期任务待办事项列表，并按最重要的顺序排序。</p><h3 id="80-不要忽略细节"><a href="#80-不要忽略细节" class="headerlink" title="80. 不要忽略细节"></a>80. 不要忽略细节</h3><p>细节可以在项目中产生很大的影响。</p><h3 id="81-信任你的同事"><a href="#81-信任你的同事" class="headerlink" title="81. 信任你的同事"></a>81. 信任你的同事</h3><p>你的同事因为他们的技能而被雇佣，交给他们工作，并相信他们能完成。</p><h3 id="82-学会委托"><a href="#82-学会委托" class="headerlink" title="82. 学会委托"></a>82. 学会委托</h3><p>如果你处于领导地位，学习如何有效地委派任务。它会节省你的时间，你不能做所有的事。</p><h3 id="83-不要拿自己和别人比较"><a href="#83-不要拿自己和别人比较" class="headerlink" title="83. 不要拿自己和别人比较"></a>83. 不要拿自己和别人比较</h3><p>你唯一应该比较的是昨天的自己。</p><h3 id="84-找到你的盟友"><a href="#84-找到你的盟友" class="headerlink" title="84. 找到你的盟友"></a>84. 找到你的盟友</h3><p>学习编程将是一个漫长而不怎么容易的过程，和那些帮助你成长并鼓励你坚持下去的人在一起。</p><h3 id="85-不要想一步登天⭐"><a href="#85-不要想一步登天⭐" class="headerlink" title="85. 不要想一步登天⭐"></a>85. 不要想一步登天⭐</h3><p>一开始考虑太多做一个大而全的项目会让你不堪重负。构建时要考虑可伸缩性，但在需要时才开始扩展。这样你就不会用不必要的膨胀来压倒你的团队，而是保持了成长的能力。</p><h3 id="86-衡量性能影响⭐"><a href="#86-衡量性能影响⭐" class="headerlink" title="86. 衡量性能影响⭐"></a>86. 衡量性能影响⭐</h3><p>如果你想使用一种很酷的新技术，你应该权衡这样做的性能影响。你能在不影响性能的情况下实现类似的功能吗？如果可以，你可能需要重新考虑你的方法了。</p><h3 id="87-技术歧视不可取⭐"><a href="#87-技术歧视不可取⭐" class="headerlink" title="87. 技术歧视不可取⭐"></a>87. 技术歧视不可取⭐</h3><p>不要歧视新技术或新想法，对学习新技能的可能性保持开放的心态，也不要歧视他人，我们都值得尊重。（也不要歧视旧技术，即使现在前端框架盛行，但你也不能说Jquery就没有任何可取之处。）</p><h3 id="88-申请你不能胜任的工作"><a href="#88-申请你不能胜任的工作" class="headerlink" title="88. 申请你不能胜任的工作"></a>88. 申请你不能胜任的工作</h3><p>你永远不可能满足工作的所有要求，所以抓住机会申请吧，你有什么损失呢？</p><h3 id="89-模块化你的代码"><a href="#89-模块化你的代码" class="headerlink" title="89. 模块化你的代码"></a>89. 模块化你的代码</h3><p>你可以在一个长文件中编写所有代码，但这是不可维护的。通过模块化，我们确保代码易于理解和测试。</p><h3 id="90-不要只是做代码的搬运工⭐"><a href="#90-不要只是做代码的搬运工⭐" class="headerlink" title="90. 不要只是做代码的搬运工⭐"></a>90. 不要只是做代码的搬运工⭐</h3><p>如果你要复制并粘贴<a href="https://stackoverflow.com/" target="_blank" rel="noopener">Stack Overflow</a>中的解决方案，你应该确切地理解它的作用，有意识地选择要引入的代码。</p><h3 id="91-创造一个舒适的工作环境⭐"><a href="#91-创造一个舒适的工作环境⭐" class="headerlink" title="91. 创造一个舒适的工作环境⭐"></a>91. 创造一个舒适的工作环境⭐</h3><p>如果你喜欢你的工作环境和技术设置，你会更有动力去工作，所以还在等什么？</p><h3 id="92-记住你来自哪里"><a href="#92-记住你来自哪里" class="headerlink" title="92. 记住你来自哪里"></a>92. 记住你来自哪里</h3><p>我们都是从同一个地方开始的，随着你的技能和职位的发展，不要忘记你来自哪里，不要膨胀。</p><h3 id="93-试着保持乐观"><a href="#93-试着保持乐观" class="headerlink" title="93. 试着保持乐观"></a>93. 试着保持乐观</h3><p>如果出了什么问题，试着乐观一点。明天是新的一天。乐观会帮助你的团队充满活力和精神健康。</p><h3 id="94-不断重新评估你的工作流程⭐"><a href="#94-不断重新评估你的工作流程⭐" class="headerlink" title="94. 不断重新评估你的工作流程⭐"></a>94. 不断重新评估你的工作流程⭐</h3><p>仅仅因为某样东西现在有效，并不意味着它永远有效。重新评估你的工作流程，并在必要时做出调整。</p><h3 id="95-学会在家办公"><a href="#95-学会在家办公" class="headerlink" title="95. 学会在家办公"></a>95. 学会在家办公</h3><p>如果你有能力在家工作，那就学会有效地在家工作。找一个独立的办公空间，远离干扰。<a href="https://dev.to/boneskull/pro-tips-for-devs-working-at-home-3b63" target="_blank" rel="noopener">Boneskull</a>写了一篇很棒的关于在家工作的文章，你应该看看。</p><h3 id="96-无障碍代码"><a href="#96-无障碍代码" class="headerlink" title="96. 无障碍代码"></a>96. 无障碍代码</h3><p>无障碍不是事后才想到的，也不一定很难，每个人都应该能够使用你的产品。</p><h3 id="97-遵守你的承诺⭐"><a href="#97-遵守你的承诺⭐" class="headerlink" title="97. 遵守你的承诺⭐"></a>97. 遵守你的承诺⭐</h3><p>如果你告诉别人你会在某一天完成某件事，要信守承诺。如果你不能在截止日期前完成任务，那就早点说出来。</p><h3 id="98-积极主动"><a href="#98-积极主动" class="headerlink" title="98. 积极主动"></a>98. 积极主动</h3><p>如果你有额外的精力，找一个任务来帮助你的团队，他们会很感激你是主动的。</p><h3 id="99-创建一个令人惊叹的作品集"><a href="#99-创建一个令人惊叹的作品集" class="headerlink" title="99. 创建一个令人惊叹的作品集"></a>99. 创建一个令人惊叹的作品集</h3><p>一个优秀的作品集让你与众不同，使用它作为展示你的编程和设计技巧的机会！</p><h3 id="100-记住你喜欢编程的原因⭐"><a href="#100-记住你喜欢编程的原因⭐" class="headerlink" title="100. 记住你喜欢编程的原因⭐"></a>100. 记住你喜欢编程的原因⭐</h3><p>你进入这个行业是因为它激发了你的兴趣，如果你感到沮丧和怨恨，休息一下，给自己空间重新点燃你对编程的激情。</p><h3 id="101-分享你的知识⭐"><a href="#101-分享你的知识⭐" class="headerlink" title="101. 分享你的知识⭐"></a>101. 分享你的知识⭐</h3><p>如果你学到了一些很酷的东西，不要吝惜分享它，参加当地的技术交流会，在午餐时间教你的同事或学员，分享你的知识可以让更多人受益同时自己也能巩固提高。</p><p>完结撒花 🎉🎉🎉</p><p>这就是我关于成为一个优秀程序员的全部建议，希望你们喜欢。</p>]]></content:encoded>
      
      <comments>http://mydearest.cn/2019/%E6%88%90%E4%B8%BA%E4%BC%98%E7%A7%80%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E5%BB%BA%E8%AE%AE.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>Commit Message规范</title>
      <link>http://mydearest.cn/2019/Commit%20Message%E8%A7%84%E8%8C%83.html</link>
      <guid>http://mydearest.cn/2019/Commit%20Message%E8%A7%84%E8%8C%83.html</guid>
      <pubDate>Mon, 12 Aug 2019 17:55:40 GMT</pubDate>
      <description>
      
        &lt;p&gt;在团队开发中，commit message（提交说明）就如同代码注释一样重要。良好的commit message能让团队中的其他成员对你的每次提交的目的、&lt;/p&gt;
&lt;p&gt;涉及的代码范围及作用一目了然，方便日常的查询和帮助其他成员更好的帮你Code Review，必要时还能方便的生成Change log。&lt;/p&gt;
&lt;hr&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>在团队开发中，commit message（提交说明）就如同代码注释一样重要。良好的commit message能让团队中的其他成员对你的每次提交的目的、</p><p>涉及的代码范围及作用一目了然，方便日常的查询和帮助其他成员更好的帮你Code Review，必要时还能方便的生成Change log。</p><hr><a id="more"></a><h2 id="Commit-message格式"><a href="#Commit-message格式" class="headerlink" title="Commit message格式"></a>Commit message格式</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 格式：&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;</span></span><br></pre></td></tr></table></figure><ol><li>type：<code>必填</code> 用于说明commit的类型。总共7个标识：</li></ol><ul><li>feat： 新增feature</li><li>fix: 修复bug</li><li>docs: 仅仅修改了文档，比如README, CHANGELOG, CONTRIBUTE等等</li><li>style: 仅仅修改了空格、格式缩进、变量名等等，不改变代码逻辑</li><li>refactor: 代码重构，没有加新功能或者修复bug</li><li>perf: 优化相关，比如提升性能、体验</li><li>test: 测试用例，包括单元测试、集成测试等</li><li>chore: 改变构建流程、或者增加依赖库、工具等</li><li>revert: 回滚到上一个版本</li></ul><ol><li><p>scope：<code>可选</code> scope用于说明 commit 影响的范围，比如数据层、控制层、视图层或者目录甚至文件等等，视项目不同而不同。</p></li><li><p>subject：<code>必填</code> subject是 commit 目的的简短描述，不超过50个字符。</p></li></ol><ul><li>约定好commit message的语言，对我们来说最好使用中文</li><li>最好以动词开头（如使用英文请使用第一人称现在时，并且第一个字母小写）</li><li><code>&lt;scope&gt;</code>之后的冒号后面留一个英文输入法的空格</li><li>结尾不加句号或其他标点符号</li><li>若此次commit是解决某个issue应该在行末尾注明并加链接，如：…(#101)</li></ul><h2 id="Commit-message检查工具"><a href="#Commit-message检查工具" class="headerlink" title="Commit message检查工具"></a>Commit message检查工具</h2><ol><li><p><a href="https://github.com/commitizen/cz-cli" target="_blank" rel="noopener">commitizen</a>: 一个撰写合格 Commit message 的工具；</p></li><li><p><a href="https://github.com/kentcdodds/validate-commit-msg" target="_blank" rel="noopener">validate-commit-msg</a>: 用于检查 Node 项目的 Commit </p></li></ol><p>message 是否符合格式。</p>]]></content:encoded>
      
      <comments>http://mydearest.cn/2019/Commit%20Message%E8%A7%84%E8%8C%83.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>提问的智慧</title>
      <link>http://mydearest.cn/2019/%E6%8F%90%E9%97%AE%E7%9A%84%E6%99%BA%E6%85%A7.html</link>
      <guid>http://mydearest.cn/2019/%E6%8F%90%E9%97%AE%E7%9A%84%E6%99%BA%E6%85%A7.html</guid>
      <pubDate>Mon, 12 Aug 2019 17:50:45 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;提问之前&quot;&gt;&lt;a href=&quot;#提问之前&quot; class=&quot;headerlink&quot; title=&quot;提问之前&quot;&gt;&lt;/a&gt;提问之前&lt;/h2&gt;&lt;p&gt;在向别人提出一个技术问题之前，请尝试从以下几个途径去寻找答案：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Google&lt;/p&gt;
&lt;/l
        
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="提问之前"><a href="#提问之前" class="headerlink" title="提问之前"></a>提问之前</h2><p>在向别人提出一个技术问题之前，请尝试从以下几个途径去寻找答案：</p><ol><li><p>Google</p></li><li><p>Stackoverflow</p></li><li><p>相应的社区</p></li><li><p>官方文档</p></li><li><p>项目的Issue</p></li><li><p>项目源码（看个人能力）</p></li></ol><h2 id="提问之时"><a href="#提问之时" class="headerlink" title="提问之时"></a>提问之时</h2><p>以上尝试无果的情况下向别人提出问题时：</p><ol><li><p>认真做足相关功课，并整理好提问思路</p></li><li><p>礼多人不怪，一定要谦虚礼貌</p></li><li><p>清楚描述使用的环境、需求及问题的症状，语言要精简</p></li><li><p>能够提供一些问题的必要的截图、例子或者错误信息</p></li></ol><h2 id="提问结束"><a href="#提问结束" class="headerlink" title="提问结束"></a>提问结束</h2><ol><li><p>一定要表示感谢，不管问题有没有得到解决</p></li><li><p>如果问题解决，在论坛或者社区一定要 留下你的解决方案并加以必要的说明，方便后人(我深受其害)；哪怕是问的身边的人，有价值的问题也要在博客上做记录</p></li><li><p>如果以上方法都尝试了还是解决不了那就先放一放，说不定过两天就有思路了</p></li><li><p>再不行，那就换个思路或者方案来解决你的需求吧</p></li></ol><p>参考资料：</p><p><a href="https://github.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/blob/master/README-zh_CN.md" target="_blank" rel="noopener">https://github.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/blob/master/README-zh_CN.md</a></p>]]></content:encoded>
      
      <comments>http://mydearest.cn/2019/%E6%8F%90%E9%97%AE%E7%9A%84%E6%99%BA%E6%85%A7.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>效率工作</title>
      <link>http://mydearest.cn/2019/%E6%95%88%E7%8E%87%E5%B7%A5%E4%BD%9C.html</link>
      <guid>http://mydearest.cn/2019/%E6%95%88%E7%8E%87%E5%B7%A5%E4%BD%9C.html</guid>
      <pubDate>Mon, 05 Aug 2019 15:29:31 GMT</pubDate>
      <description>
      
        
        
          &lt;ol&gt;
&lt;li&gt;&lt;p&gt;时间常有，时间在于优先。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;时间总会有的：每天只计划 4～5 小时真正的工作。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;当你在状态时，就多干点；不然就好好休息：有时候会连着几天不是工作状态，有时在工作状态时却又能天天忙活 12 小
        
      
      </description>
      
      <content:encoded><![CDATA[<ol><li><p>时间常有，时间在于优先。</p></li><li><p>时间总会有的：每天只计划 4～5 小时真正的工作。</p></li><li><p>当你在状态时，就多干点；不然就好好休息：有时候会连着几天不是工作状态，有时在工作状态时却又能天天忙活 12 小时，这都很正常的。</p></li><li><p>重视你的时间，并使其值得重视：你的时间值 1000 美元/小时，你得动起来。</p></li><li><p>不要多任务，这只会消耗注意力；保持专注，一心一用。</p></li><li><p>养成工作习惯，并持之以恒，你的身体会适应的。</p></li><li><p>在有限的时间内，我们总是非常专注并且有效率。</p></li><li><p>进入工作状态的最佳方式就是工作，从小任务开始做起，让工作运转起来。</p></li><li><p>迭代工作，期待完美收工会令人窒息：“做完事情，要胜于完美收工” 。动手做，胜过任何完美的想象。</p></li><li><p>工作时间越长，并不等于效率越高。</p></li><li><p>按重要性工作，提高效率。</p></li><li><p>有会议就尽早安排，用于准备会议的时间往往都浪费掉了。</p></li><li><p>把会议和沟通 (邮件或电话) 结合，创造不间断工作时间：一个小会，也会毁了一个下午，因为它会把下午撕成两个较小的时间段，以至于啥也干不成。PS：当看到一个程序员冥思苦想时，不要过去打扰，甚至一句问候都是多余的。</p></li><li><p>一整天保持相同的工作环境。在项目/客户之间切换，会效率低。</p></li><li><p>工作—放松—工作=高效(番茄工作法)。</p></li></ol><blockquote><p>番茄工作法是弗朗西斯科·西里洛于1992年创立的一种相对于GTD更微观的时间管理方法。使用番茄工作法，选择一个待完成的任务，将番茄时间设为25分钟，专注工作，中途不允许做任何与该任务无关的事，直到番茄时钟响起，然后在纸上画一个X短暂休息一下（5分钟就行），每4个番茄时段多休息一会儿。</p></blockquote><ol><li><p>把不切实际的任务分割成合理的小任务，只要每天都完成小任务，你就会越来越接近那个大目标了。</p></li><li><p>从来没有两个任务会有相同的优先级，总会有个更重要，仔细考虑待办事情列表。</p></li><li><p>必须清楚白天必须完成的那件事，是什么。 只去做那件有着最大影响的事情。</p></li><li><p>把任务按时间分段，就能感觉它快被搞定了。</p></li><li><p>授权并擅用他人的力量。—君子善假于物(人)也，如果某件事其他人也可以做到八成，那就给他做！</p></li><li><p>把昨天翻过去，只考虑今天和明天。昨天的全垒打赢不了今天的比赛。—好汉不提当年勇。</p></li><li><p>给所有事情都设定一个期限。不要让工作无期限地进行下去。</p></li><li><p>针对时间紧或有压力的任务，设置结束时间，万事皆可终结。</p></li><li><p>多记，多做笔记。</p></li><li><p>进入高效状态后，记下任何分散你注意力的东西比如Google搜索词、灵光乍现的想法、新点子等等。如果你把它们记下来，它就不会再蹦来蹦去了。</p></li><li><p>休息，休息一下～。</p></li></ol>]]></content:encoded>
      
      <comments>http://mydearest.cn/2019/%E6%95%88%E7%8E%87%E5%B7%A5%E4%BD%9C.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>ES6Proxy</title>
      <link>http://mydearest.cn/2019/ES6Proxy.html</link>
      <guid>http://mydearest.cn/2019/ES6Proxy.html</guid>
      <pubDate>Tue, 30 Jul 2019 17:25:34 GMT</pubDate>
      <description>
      
        &lt;p&gt;Proxy，代理，是ES6新增的功能，可以理解为代理器（即由它代理某些操作）。&lt;/p&gt;
&lt;p&gt;Proxy 对象用于定义或修改某些操作的自定义行为，可以在外界对目标对象进行访问前，对外界的访问进行改写。&lt;/p&gt;
&lt;hr&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>Proxy，代理，是ES6新增的功能，可以理解为代理器（即由它代理某些操作）。</p><p>Proxy 对象用于定义或修改某些操作的自定义行为，可以在外界对目标对象进行访问前，对外界的访问进行改写。</p><hr><a id="more"></a><h3 id="1-Proxy-定义"><a href="#1-Proxy-定义" class="headerlink" title="1. Proxy 定义"></a>1. Proxy 定义</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(target, handler)</span><br></pre></td></tr></table></figure><p><code>new Proxy()</code>表示生成一个 Proxy 实例</p><ul><li>target：目标对象</li><li>handler：一个对象，其属性是当执行一个操作时定义代理的行为的函数。</li></ul><p><strong>注意：要实现拦截操作，必须是对 Proxy 实例进行操作，而不是针对目标对象 target 进行操作。</strong></p><p>首先，看个例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> handler = &#123;</span><br><span class="line">    get: <span class="function"><span class="keyword">function</span>(<span class="params">target, key, receiver</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`getter <span class="subst">$&#123;key&#125;</span>!`</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Reflect</span>.get(target, key, receiver)</span><br><span class="line">    &#125;,</span><br><span class="line">    set: <span class="function"><span class="keyword">function</span>(<span class="params">target, key, value, receiver</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`setter <span class="subst">$&#123;key&#125;</span>=<span class="subst">$&#123;value&#125;</span>`</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Reflect</span>.set(target, key, value, receiver)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Proxy</span>(&#123;&#125;, handler)</span><br><span class="line">obj.a = <span class="number">1</span> <span class="comment">// setter a=1</span></span><br><span class="line">obj.b = <span class="literal">undefined</span> <span class="comment">// setter b=undefined</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(obj.a, obj.b) </span><br><span class="line"><span class="comment">// getter a!</span></span><br><span class="line"><span class="comment">// getter b!</span></span><br><span class="line"><span class="comment">// 1 undefined</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'c'</span> <span class="keyword">in</span> obj, obj.c)</span><br><span class="line"><span class="comment">// getter c!</span></span><br><span class="line"><span class="comment">// false undefined</span></span><br></pre></td></tr></table></figure><p>在这个例子中，proxy 拦截了get和set操作。</p><p>再看一个例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> handler = &#123;</span><br><span class="line">    get: <span class="function"><span class="keyword">function</span>(<span class="params">target, key, receiver</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    &#125;,</span><br><span class="line">  set: <span class="function"><span class="keyword">function</span> (<span class="params">target, key, value, receiver</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`setting <span class="subst">$&#123;key&#125;</span>!`</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Reflect</span>.set(target, key, value, receiver);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Proxy</span>(&#123;&#125;, handler)</span><br><span class="line">obj.a = <span class="number">5</span> <span class="comment">// setting a!</span></span><br><span class="line"><span class="built_in">console</span>.log(obj.a) <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p>则由上面代码看出：<strong>Proxy 不仅是拦截了行为，更是用自己定义的行为覆盖了组件的原始行为</strong>。</p><p><strong>若<code>handler = {}</code>，则代表 Proxy 没有做任何拦截，访问 Proxy 实例就相当于访问 target 目标对象。</strong>这里不再演示，有兴趣的可以自己举例尝试。</p><h3 id="2-Proxy-handler方法（拦截方法）"><a href="#2-Proxy-handler方法（拦截方法）" class="headerlink" title="2. Proxy handler方法（拦截方法）"></a>2. Proxy handler方法（拦截方法）</h3><ul><li><code>get(target, key, receiver)</code>：拦截 target 属性的读取</li><li><code>set(target, key, value, receiver)</code>：拦截 target 属性的设置</li><li><code>has(target, key)</code>：拦截 <code>key in proxy</code> 的操作，并返回是否存在（boolean值）</li><li><code>deleteProperty(target, key)</code>：拦截 <code>delete proxy[key]</code>的操作，并返回结果（boolean值）</li><li><code>ownKeys(target)</code>：拦截<code>Object.getOwnPropertyName(proxy)</code>、<code>Object.getOwnPropertySymbols(proxy)</code>、<code>Object.keys(proxy)</code>、<code>for ... in</code>循环。并返回目标对象所有自身属性的属性名数组。注意：<strong><code>Object.keys()</code>的返回结果数组中只包含目标对象自身的可遍历属性</strong></li><li><code>getOwnPropertyDescriptor(target, key)</code>：拦截 <code>Object.getOwnPropertyDescriptor(proxy, key)</code>，返回属性的描述对象</li><li><code>defineProperty(target, key, desc)</code>：拦截<code>Object.defineProperty(proxy, key, desc)</code>、<code>Object.defineProperties(proxy, descs)</code>，返回一个 boolean 值</li><li><code>preventExtensions(target)</code>：拦截<code>Object.preventExtensions(proxy)</code>，返回一个 boolean 值</li><li><code>getPrototypeOf(target)</code>：拦截<code>Object.getPrototypeOf(proxy)</code>，返回一个对象</li><li><code>isExtensible(target)</code>：拦截<code>Object.isExtensible(proxy)</code>，返回一个 boolean 值</li><li><code>setPrototypeOf(target, key)</code>：拦截<code>Object.setPrototypeOf(proxy, key)</code>，返回一个 boolean 值。如果目标对象是函数，则还有两种额外操作可以被拦截</li><li><code>apply(target, object, args)</code>：拦截 Proxy 实例作为函数调用的操作，比如<code>proxy(...args)</code>、<code>proxy.call(object, ...args)</code>、<code>proxy.apply(...)</code></li><li><code>construct(target, args)</code>：拦截 Proxy 实例作为构造函数调用的操作，比如<code>new proxy(...args)</code></li></ul><p>总共 13 个拦截方法，下面进行简要举例说明，更多可见阮一峰老师的 <a href="https://link.juejin.im/?target=http%3A%2F%2Fes6.ruanyifeng.com%2F%23docs%2Fproxy" target="_blank" rel="noopener">《ECMAScript 6 入门》</a></p><h4 id="1-get，set"><a href="#1-get，set" class="headerlink" title="1. get，set"></a>1. get，set</h4><p><code>get</code>方法用于拦截某个属性的读取操作，可以接受三个参数，依次为目标对象、属性名和 proxy 实例本身（严格地说，是操作行为所针对的对象），其中最后一个参数可选。</p><p><code>set</code>拦截 target 属性的设置，可以接受四个参数，依次为目标对象、属性名、value和 proxy 实例本身（严格地说，是操作行为所针对的对象），其中最后一个参数可选。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> target = &#123;<span class="attr">foo</span>: <span class="number">1</span>&#125;</span><br><span class="line"><span class="keyword">let</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(target, &#123;</span><br><span class="line">    get(target, key, receiver) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`getter <span class="subst">$&#123;key&#125;</span>!`</span>)</span><br><span class="line">        <span class="keyword">return</span> target[key]</span><br><span class="line">    &#125;,</span><br><span class="line">    set: <span class="function"><span class="keyword">function</span>(<span class="params">target, key, value, receiver</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`setter <span class="subst">$&#123;key&#125;</span>!`</span>)</span><br><span class="line">        target[key] = value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = <span class="built_in">Object</span>.create(proxy)</span><br><span class="line"><span class="built_in">console</span>.log(obj.foo) </span><br><span class="line"><span class="comment">// getter foo!</span></span><br><span class="line"><span class="comment">// 1</span></span><br></pre></td></tr></table></figure><h4 id="2-has"><a href="#2-has" class="headerlink" title="2. has"></a>2. has</h4><p>拦截 propKey in proxy 的操作，返回一个布尔值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 has 方法隐藏某些属性，不被 in 运算符发现</span></span><br><span class="line"><span class="keyword">var</span> handler = &#123;</span><br><span class="line">    has (target, key) &#123;</span><br><span class="line">        <span class="keyword">if</span> (key.startsWith(<span class="string">'_'</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> key <span class="keyword">in</span> target;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> foo = &#123; <span class="attr">_name</span>: <span class="string">'foo'</span>, <span class="attr">name</span>: <span class="string">'foo'</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(foo, handler);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'_name'</span> <span class="keyword">in</span> proxy); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'name'</span> <span class="keyword">in</span> proxy); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h4 id="3-ownKeys"><a href="#3-ownKeys" class="headerlink" title="3. ownKeys"></a>3. ownKeys</h4><p>拦截自身属性的读取操作。并返回目标对象所有自身属性的属性名数组。具体返回结果可结合 MDN <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Enumerability_and_ownership_of_properties" target="_blank" rel="noopener">属性的可枚举性和所有权</a></p><ul><li><code>Object.getOwnPropertyName(proxy)</code></li><li><code>Object.getOwnPropertySymbols(proxy)</code></li><li><code>Object.keys(proxy)</code></li><li><code>for ... in</code>循环</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> target = &#123;</span><br><span class="line">  _foo: <span class="string">'foo'</span>,</span><br><span class="line">  _bar: <span class="string">'bar'</span>,</span><br><span class="line">  name: <span class="string">'An'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> handler = &#123;</span><br><span class="line">  ownKeys (target) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Reflect</span>.ownKeys(target).filter(key =key.startsWith(<span class="string">'_'</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(target, handler);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">of</span> <span class="built_in">Object</span>.keys(proxy)) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(target[key]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// "An"</span></span><br></pre></td></tr></table></figure><h4 id="4-apply"><a href="#4-apply" class="headerlink" title="4. apply"></a>4. apply</h4><p>apply 拦截 Proxy 实例作为函数调用的操作，比如函数的调用（<code>proxy(...args)</code>）、call（<code>proxy.call(object, ...args)</code>）、apply（<code>proxy.apply(...)</code>）等。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> target = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="string">'I am the target'</span>; &#125;;</span><br><span class="line"><span class="keyword">var</span> handler = &#123;</span><br><span class="line">  apply: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'I am the proxy'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(target, handler);</span><br><span class="line"></span><br><span class="line">proxy();</span><br><span class="line"><span class="comment">// "I am the proxy"</span></span><br></pre></td></tr></table></figure><p>Proxy 方法太多，这里只是将常用的简要介绍，更多请看阮一峰老师的 <a href="https://link.juejin.im/?target=http%3A%2F%2Fes6.ruanyifeng.com%2F%23docs%2Fproxy" target="_blank" rel="noopener">《ECMAScript 6 入门》</a></p>]]></content:encoded>
      
      <comments>http://mydearest.cn/2019/ES6Proxy.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>linux安装mongodb及常见命令</title>
      <link>http://mydearest.cn/2019/linux%E5%AE%89%E8%A3%85mongodb%E5%8F%8A%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4.html</link>
      <guid>http://mydearest.cn/2019/linux%E5%AE%89%E8%A3%85mongodb%E5%8F%8A%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4.html</guid>
      <pubDate>Sat, 20 Jul 2019 06:20:40 GMT</pubDate>
      <description>
      
        &lt;span itemprop=&quot;image&quot; itemscope=&quot;&quot; itemtype=&quot;http://schema.org/ImageObject&quot;&gt;&lt;img itemprop=&quot;url image&quot; src=&quot;http://cdn.mydearest.cn/blog/images/mongodb.jpg&quot; class=&quot;full-image&quot; alt=&quot;MongoDB&quot; title=&quot;MongoDB&quot;&gt;&lt;meta itemprop=&quot;width&quot; content=&quot;auto&quot;&gt;&lt;meta itemprop=&quot;height&quot; content=&quot;auto&quot;&gt;&lt;/span&gt;
&lt;h2 id=&quot;MongoDB-是一个基于分布式文件存储的数据库。由-C-语言编写。旨在为-WEB-应用提供可扩展的高性能数据存储解决方案。&quot;&gt;&lt;a href=&quot;#MongoDB-是一个基于分布式文件存储的数据库。由-C-语言编写。旨在为-WEB-应用提供可扩展的高性能数据存储解决方案。&quot; class=&quot;headerlink&quot; title=&quot;MongoDB 是一个基于分布式文件存储的数据库。由 C++ 语言编写。旨在为 WEB 应用提供可扩展的高性能数据存储解决方案。&quot;&gt;&lt;/a&gt;MongoDB 是一个基于分布式文件存储的数据库。由 C++ 语言编写。旨在为 WEB 应用提供可扩展的高性能数据存储解决方案。&lt;/h2&gt;
      
      </description>
      
      <content:encoded><![CDATA[<span itemprop="image" itemscope="" itemtype="http://schema.org/ImageObject"><img itemprop="url image" src="http://cdn.mydearest.cn/blog/images/mongodb.jpg" class="full-image" alt="MongoDB" title="MongoDB"><meta itemprop="width" content="auto"><meta itemprop="height" content="auto"></span><h2 id="MongoDB-是一个基于分布式文件存储的数据库。由-C-语言编写。旨在为-WEB-应用提供可扩展的高性能数据存储解决方案。"><a href="#MongoDB-是一个基于分布式文件存储的数据库。由-C-语言编写。旨在为-WEB-应用提供可扩展的高性能数据存储解决方案。" class="headerlink" title="MongoDB 是一个基于分布式文件存储的数据库。由 C++ 语言编写。旨在为 WEB 应用提供可扩展的高性能数据存储解决方案。"></a>MongoDB 是一个基于分布式文件存储的数据库。由 C++ 语言编写。旨在为 WEB 应用提供可扩展的高性能数据存储解决方案。</h2><a id="more"></a><h2 id="安装、配置"><a href="#安装、配置" class="headerlink" title="安装、配置"></a>安装、配置</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 下载</span></span></span><br><span class="line">curl -O https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-3.6.5.tgz</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 解压</span></span></span><br><span class="line">tar -zxvf mongodb-linux-x86_64-3.6.5.tgz </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 移动到指定目录</span></span></span><br><span class="line">mv  mongodb-linux-x86_64-3.6.5/ /usr/local/mongodb</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># MongoDB 的可执行文件位于 bin 目录下，所以可以将其添加到 PATH 路径中：当前终端有效(可跳过)</span></span></span><br><span class="line">export PATH=/usr/local/mongodb/bin:$PATH</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 到根目录创建文件夹 或者mongodb下</span></span></span><br><span class="line">mkdir data/db</span><br><span class="line">mkdir data/log</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># vim /etc/profile 添加到全局命令</span></span></span><br><span class="line">export PATH=/usr/local/mongodb/bin:$PATH </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 如果有多个</span></span></span><br><span class="line">export PATH=$JAVA_HOME/bin:$JRE_HOME/bin:/usr/local/mongodb/bin:$PATH</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 保存，退出，然后运行</span></span></span><br><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># mongodb.conf</span></span></span><br><span class="line">dbpath=/usr/local/mongodb/db</span><br><span class="line">logpath=/usr/local/mongodb/log/mongodb.log</span><br><span class="line">bind_ip=0.0.0.0</span><br><span class="line">fork=true</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 关闭</span></span></span><br><span class="line">ps -ef|grep mongod</span><br><span class="line">kill -9</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 后台启动 开启用户认证</span></span></span><br><span class="line">nohup mongod --auth -f /usr/local/mongodb/mongodb.conf &gt; myLog.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><h2 id="常见命令"><a href="#常见命令" class="headerlink" title="常见命令"></a>常见命令</h2><h3 id="设置用户和命令"><a href="#设置用户和命令" class="headerlink" title="设置用户和命令"></a>设置用户和命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 创建管理员</span></span></span><br><span class="line">mongo</span><br><span class="line"></span><br><span class="line">use admin</span><br><span class="line"></span><br><span class="line">db.createUser(</span><br><span class="line">  &#123;</span><br><span class="line">    user: "testuser",</span><br><span class="line">    pwd: "testpassword",</span><br><span class="line">    roles: [ &#123; role: "readWriteAnyDatabase", db: "admin" &#125; ]</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 认证登录</span></span></span><br><span class="line">db.auth("admin", "password")</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 显示当前系统用户</span></span></span><br><span class="line">db.system.users.find()</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 删除用户(删除用户的时候需要切换到用户管理的数据库才可以删除)</span></span></span><br><span class="line">db.dropUser("testuser")</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 修改密码</span></span></span><br><span class="line">db.addUser('testUser','111')</span><br><span class="line"></span><br><span class="line">db.changeUserPassword('tank2','test')</span><br></pre></td></tr></table></figure><h3 id="mongoose账号密码连接"><a href="#mongoose账号密码连接" class="headerlink" title="mongoose账号密码连接"></a>mongoose账号密码连接</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mongoose.connect(<span class="string">"mongodb://user:pwd@111.231.121.29/ticket"</span>, &#123;</span><br><span class="line">  authSource: <span class="string">"admin"</span>,</span><br><span class="line">  useMongoClient: <span class="literal">true</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="导入导出表字段"><a href="#导入导出表字段" class="headerlink" title="导入导出表字段"></a>导入导出表字段</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mongoexport -d book -c books -o books.json --type json</span><br><span class="line"></span><br><span class="line">mongoimport -d book -c books --file /home/mongodump/articles.json --type json</span><br></pre></td></tr></table></figure><h2 id="备份恢复数据库"><a href="#备份恢复数据库" class="headerlink" title="备份恢复数据库"></a>备份恢复数据库</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mongodump -h <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> -d book -o D:\iview-book-admin\<span class="keyword">static</span>\js</span><br><span class="line"></span><br><span class="line">mongorestore -h dbhost -d book --dir D:\iview-book-admin\<span class="keyword">static</span>\js\book</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://mydearest.cn/2019/linux%E5%AE%89%E8%A3%85mongodb%E5%8F%8A%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>blur事件与click事件冲突的解决办法</title>
      <link>http://mydearest.cn/2019/blur%E4%BA%8B%E4%BB%B6%E4%B8%8Eclick%E4%BA%8B%E4%BB%B6%E5%86%B2%E7%AA%81%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95.html</link>
      <guid>http://mydearest.cn/2019/blur%E4%BA%8B%E4%BB%B6%E4%B8%8Eclick%E4%BA%8B%E4%BB%B6%E5%86%B2%E7%AA%81%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95.html</guid>
      <pubDate>Fri, 12 Jul 2019 16:59:46 GMT</pubDate>
      <description>
      
        &lt;p&gt;在处理表单登录的过程中，遇到了一个问题，当我们在输入框输入内容输入框获取到焦点时，输入框后面会出现一个图标删除已输入的内容，因此删除图标会绑定一个click事件，但是当我们点击图标的时候，也触发了input的blur事件，blur事件会让input失去焦点时隐藏删除的图标，并且blur事件先于图标的click事件执行，因此这时候点击图标并不会删除输入框已输入的内容，而是图标消失了。还有弹窗输入框blur同时点击取消按钮关闭，也会出现需要点击2次的情况。&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;http://cdn.mydearest.cn/blog/images/blur.png&quot; alt=&quot;blur img&quot;&gt;&lt;/p&gt;

&lt;hr&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>在处理表单登录的过程中，遇到了一个问题，当我们在输入框输入内容输入框获取到焦点时，输入框后面会出现一个图标删除已输入的内容，因此删除图标会绑定一个click事件，但是当我们点击图标的时候，也触发了input的blur事件，blur事件会让input失去焦点时隐藏删除的图标，并且blur事件先于图标的click事件执行，因此这时候点击图标并不会删除输入框已输入的内容，而是图标消失了。还有弹窗输入框blur同时点击取消按钮关闭，也会出现需要点击2次的情况。</p><p align="center"><img src="http://cdn.mydearest.cn/blog/images/blur.png" alt="blur img"></p><hr><a id="more"></a><ul><li><p>blur事件：当元素失去焦点时触发blur事件；blur 事件仅发生于表单元素上。在新浏览器中，该事件可用于任何元素，blur和focus事件不会冒泡，其他表单事件都可以。</p></li><li><p>click事件：当点击元素时触发click事件；所有元素都有此事件，会产生冒泡。</p></li></ul><h3 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h3><blockquote><p>blur事件比click事件先触发，而javascript为单线程，同一时间只能执行处理一个事件，所以当blur执行时，导致其后续click事件并不会执行。</p></blockquote><h3 id="方案一-加定时器延时触发blur事件"><a href="#方案一-加定时器延时触发blur事件" class="headerlink" title="方案一 加定时器延时触发blur事件"></a>方案一 加定时器延时触发blur事件</h3><p>缺点：设置多久的延时是一个难以两全的问题，时间太短不能保证click事件的100%触发，时间太长则会造成卡顿的感觉，影响用户体验。</p><h3 id="方案二-将click事件改为mousedown事件，mousedown事件是优先于blur事件执行"><a href="#方案二-将click事件改为mousedown事件，mousedown事件是优先于blur事件执行" class="headerlink" title="方案二 将click事件改为mousedown事件，mousedown事件是优先于blur事件执行"></a>方案二 将click事件改为mousedown事件，mousedown事件是优先于blur事件执行</h3><p>缺点：鼠标按下便触发了事件，不收起、长按也会触发，可能造成用户体验不好。还需要判断是否是鼠标左键点击(event.button===0)。</p><h3 id="方案三-给click所在元素再添加一个mousedown事件，在其中执行event-preventDefault-阻止浏览器默认事件，这样点击按钮时输入框就不会失去焦点了"><a href="#方案三-给click所在元素再添加一个mousedown事件，在其中执行event-preventDefault-阻止浏览器默认事件，这样点击按钮时输入框就不会失去焦点了" class="headerlink" title="方案三 给click所在元素再添加一个mousedown事件，在其中执行event.preventDefault()阻止浏览器默认事件，这样点击按钮时输入框就不会失去焦点了"></a>方案三 给click所在元素再添加一个mousedown事件，在其中执行event.preventDefault()阻止浏览器默认事件，这样点击按钮时输入框就不会失去焦点了</h3><p>缺点：如果是弹窗下次打开时，焦点仍然存在。</p><h3 id="方案四-动态绑定移除blur事件"><a href="#方案四-动态绑定移除blur事件" class="headerlink" title="方案四 动态绑定移除blur事件"></a>方案四 动态绑定移除blur事件</h3><p><strong>推荐方案三和四</strong></p>]]></content:encoded>
      
      <comments>http://mydearest.cn/2019/blur%E4%BA%8B%E4%BB%B6%E4%B8%8Eclick%E4%BA%8B%E4%BB%B6%E5%86%B2%E7%AA%81%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>前端模块化发展扩展</title>
      <link>http://mydearest.cn/2019/%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E5%8C%96%E5%8F%91%E5%B1%95%E6%89%A9%E5%B1%95.html</link>
      <guid>http://mydearest.cn/2019/%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E5%8C%96%E5%8F%91%E5%B1%95%E6%89%A9%E5%B1%95.html</guid>
      <pubDate>Tue, 09 Jul 2019 16:51:20 GMT</pubDate>
      <description>
      
        &lt;p&gt;JavaScript 一开始并没有内建模块化支持，也几乎没有模块化这种概念。当时没那么大的需求，搞个模块化显得大材小用啊。随着互联网的发展，尤其是 2006 年 ajax 技术的出现和之后 Web 2.0 的兴起，越来越多的业务逻辑向前端转移，前端开发的复杂程度和代码量逐渐提升。这时，由于缺乏模块化概念，JavaScript 的一些问题便凸显出来：代码难以复用、容易出现全局变量污染和命名冲突、依赖管理难以维护等等。一开始，开发者们使用诸如暴露全局对象、自执行函数等方法来规避这些问题，但仍无法从根本上解决问题。&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>JavaScript 一开始并没有内建模块化支持，也几乎没有模块化这种概念。当时没那么大的需求，搞个模块化显得大材小用啊。随着互联网的发展，尤其是 2006 年 ajax 技术的出现和之后 Web 2.0 的兴起，越来越多的业务逻辑向前端转移，前端开发的复杂程度和代码量逐渐提升。这时，由于缺乏模块化概念，JavaScript 的一些问题便凸显出来：代码难以复用、容易出现全局变量污染和命名冲突、依赖管理难以维护等等。一开始，开发者们使用诸如暴露全局对象、自执行函数等方法来规避这些问题，但仍无法从根本上解决问题。</p><a id="more"></a><h2 id="CommonJS"><a href="#CommonJS" class="headerlink" title="CommonJS"></a>CommonJS</h2><p>2009 年，基于将 JavaScript 应用于服务端的尝试，ServerJS 诞生了。之后 ServerJS 更名为 CommonJS，并逐步发展为一个完整的模块规范。简称 CMD(Common Module Definition)</p><p><a href="http://www.commonjs.org/" target="_blank" rel="noopener">CommonJS官网</a><a href="http://javascript.ruanyifeng.com/nodejs/module.html" target="_blank" rel="noopener">CommonJS阮一峰</a></p><p>CommonJS 为模块的使用定义了一套 API。比如，它定义了全局函数 require，通过传入模块标识来引入其他模块，如果被引入的模块又依赖了其他模块，那么会依次加载这些模块；通过 module.exports 向外部暴露 API，以便其他的模块引入。</p><p>由于 CommonJS 是使用<code>同步方式</code>加载模块的，即只有加载完成才能进行接下来的操作，因此当应用于浏览器端时会受到网速的限制。</p><p>CommonJS对模块的定义主要分为模块引用、模块定义和模块标识3个部分。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> $ = <span class="built_in">require</span>(<span class="string">'jquery'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义私有方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">log</span> (<span class="params">...arg</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(...arg)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定义公有方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHello</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> el = $(<span class="string">'body'</span>)</span><br><span class="line">  log(<span class="string">'zhouyu, hello'</span>, el)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 暴露公有方法</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  sayHello</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="AMD"><a href="#AMD" class="headerlink" title="AMD"></a>AMD</h2><p>之后，在 CommonJS 组织的讨论中，AMD(Asynchronous Module Definition)应运而生。和 CommonJS 不同的是，它使用<code>异步方式</code>加载模块，因此更适合被浏览器端采用。AMD 用全局函数 define 来定义模块，它需要三个参数：模块名称、模块的依赖数组、所有依赖都可用之后执行的回调函数(该函数按照依赖声明的顺序，接收依赖作为参数)。</p><p><a href="https://github.com/amdjs/amdjs-api/wiki/AMD" target="_blank" rel="noopener">AMD</a><a href="https://github.com/amdjs/amdjs-api/wiki/AMD-(%E4%B8%AD%E6%96%87%E7%89%88" target="_blank" rel="noopener">AMD中文</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">define([<span class="string">'jquery'</span>], <span class="function"><span class="keyword">function</span> (<span class="params">$</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 定义私有方法</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">log</span> (<span class="params">...arg</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(...arg)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 定义公有方法</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">sayHello</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> el = $(<span class="string">'body'</span>)</span><br><span class="line">    log(<span class="string">'zhouyu, hello'</span>, el)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 暴露公有方法</span></span><br><span class="line">  <span class="keyword">return</span> sayHello</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="UMD"><a href="#UMD" class="headerlink" title="UMD"></a>UMD</h2><p>如果需要同时支持 CommonJS 和 AMD 两种格式，那么可以使用 UMD(Universal Module Definition)。事实上，UMD 通过一系列 if/else 判断来确定当前环境支持的模块体系，因此多数情况下 UMD 格式的模块会占用更大的体积。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">root, factory</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> define === <span class="string">'function'</span> &amp;&amp; define.amd) &#123;</span><br><span class="line">    <span class="comment">// AMD</span></span><br><span class="line">    define([<span class="string">'jquery'</span>], factory)</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> exports === <span class="string">'object'</span>) &#123;</span><br><span class="line">    <span class="comment">// Nodejs 或 CommonJS</span></span><br><span class="line">    <span class="built_in">module</span>.exports = factory(<span class="built_in">require</span>(<span class="string">'jquery'</span>))</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 浏览器全局变量(root 即 window)</span></span><br><span class="line">    root.returnExports = factory(root.jQuery)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;(<span class="keyword">this</span>, <span class="function"><span class="keyword">function</span> (<span class="params">$</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 定义私有方法</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">log</span> (<span class="params">...arg</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(...arg)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 定义公有方法</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">sayHello</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> el = $(<span class="string">'body'</span>)</span><br><span class="line">    log(<span class="string">'zhouyu, hello'</span>, el)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 暴露公有方法</span></span><br><span class="line">  <span class="keyword">return</span> sayHello</span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure><h2 id="ES6-Modules"><a href="#ES6-Modules" class="headerlink" title="ES6 Modules"></a>ES6 Modules</h2><p>无论是 CommonJS，AMD 还是 UMD，它们都不是标准的 JavaScript 模块解决方案。换句话说，它们都没有被写进 ECMA 的规范中。直到 2015 年 6 月，TC39 委员会终于将 Modules 写进 ECMAScript 2015 中，标志着原生模块新时代的到来。至此，JavaScript 文件有了两种形式：脚本(自 JavaScript 诞生起我们就在使用的)和模块(即 ECMAScript 2015 Modules)。下面就让我们来一起探索 ECMAScript 2015 Modules(以下简称 ES6 Modules)</p><p><a href="http://www.ecma-international.org/ecma-262/6.0/#sec-modules" target="_blank" rel="noopener">ES6 Modules</a><a href="http://es6.ruanyifeng.com/#docs/module" target="_blank" rel="noopener">ES6阮一峰</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> $ <span class="keyword">from</span>(<span class="string">'jquery'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义私有方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">log</span> (<span class="params">...arg</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(...arg)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定义公有方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHello</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> el = $(<span class="string">'body'</span>)</span><br><span class="line">  log(<span class="string">'zhouyu, hello'</span>, el)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> sayHello</span><br></pre></td></tr></table></figure><h2 id="ES6-Modules-现状"><a href="#ES6-Modules-现状" class="headerlink" title="ES6 Modules 现状"></a>ES6 Modules 现状</h2><p>时至今日，几大主流浏览器都在积极推进支持原生 ES6 Modules 的工作，部分浏览器的技术预览版也已经初步完成了这一使命。可以通过 <a href="https://caniuse.com/#search=module" target="_blank" rel="noopener">caniuse</a> 查看目前浏览器的支持情况。</p><h2 id="使用-Babel-和-webpack"><a href="#使用-Babel-和-webpack" class="headerlink" title="使用 Babel 和 webpack"></a>使用 Babel 和 webpack</h2><p>由于绝大多数浏览器都不支持 ES6 Modules，所以目前如果想使用它的语法，需要借助 Babel 和 webpack，即通过 Babel 将代码编译为 ES5 的语法，然后使用 webpack 打包成目标格式。</p><h2 id="直接使用-ES6-Modules"><a href="#直接使用-ES6-Modules" class="headerlink" title="直接使用 ES6 Modules"></a>直接使用 ES6 Modules</h2><p>有些游览器已经支持 ES6 Modules，我们利用 <code>&lt;script type=&quot;module&quot;&gt;</code>(默认是 defer)来使用。</p><h2 id="其他探索"><a href="#其他探索" class="headerlink" title="其他探索"></a>其他探索</h2><ul><li>动态加载方案 <code>import()</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> load = <span class="keyword">async</span> (url) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="built_in">module</span> = <span class="keyword">await</span> <span class="keyword">import</span>(url)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">module</span>, <span class="built_in">window</span>[tempGlobal])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">load</span> (<span class="params">url</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>)</span><br><span class="line">    <span class="keyword">const</span> tempGlobal = <span class="string">'__tempModuleLoadingVariable'</span> + <span class="built_in">Math</span>.random().toString(<span class="number">32</span>).substring(<span class="number">2</span>)</span><br><span class="line">    script.type = <span class="string">'module'</span></span><br><span class="line">    script.textContent = <span class="string">`import * as m from "<span class="subst">$&#123;url&#125;</span>"; window.<span class="subst">$&#123;tempGlobal&#125;</span> = m;`</span></span><br><span class="line"></span><br><span class="line">    script.onload = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      resolve(<span class="built_in">window</span>[tempGlobal])</span><br><span class="line">      <span class="keyword">delete</span> <span class="built_in">window</span>[tempGlobal]</span><br><span class="line">      script.remove()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    script.onerror = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Failed to load module script with URL '</span> + url))</span><br><span class="line">      <span class="keyword">delete</span> <span class="built_in">window</span>[tempGlobal]</span><br><span class="line">      script.remove()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">document</span>.documentElement.appendChild(script)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>基于 ES6 Modules 的 <code>module-pusher</code> 尝试</li></ul>]]></content:encoded>
      
      <comments>http://mydearest.cn/2019/%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E5%8C%96%E5%8F%91%E5%B1%95%E6%89%A9%E5%B1%95.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>健康指标</title>
      <link>http://mydearest.cn/2019/%E5%81%A5%E5%BA%B7%E6%8C%87%E6%A0%87.html</link>
      <guid>http://mydearest.cn/2019/%E5%81%A5%E5%BA%B7%E6%8C%87%E6%A0%87.html</guid>
      <pubDate>Tue, 09 Jul 2019 16:19:31 GMT</pubDate>
      <description>
      
        &lt;p&gt;接上次的&lt;a href=&quot;https://mydearest.cn/2019/%E7%BB%B4%E7%94%9F%E7%B4%A0.html&quot;&gt;维生素&lt;/a&gt;😊，罗列一些生活中需要知道健康指标。&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>接上次的<a href="https://mydearest.cn/2019/%E7%BB%B4%E7%94%9F%E7%B4%A0.html">维生素</a>😊，罗列一些生活中需要知道健康指标。</p><a id="more"></a><h1 id="血糖"><a href="#血糖" class="headerlink" title="血糖"></a>血糖</h1><p>血中的葡萄糖称为血糖。</p><p>血糖的来源包括：①食物消化、吸收；②肝内储存的糖原分解；③脂肪和蛋白质的转化。</p><p>血糖的去路包括：①氧化转变为能量；②转化为糖原储存于肝脏、肾脏和肌肉中；③转变为脂肪和蛋白质等其他营养成分加以储存。</p><p>胰岛是体内调节血糖的血糖浓度的主要器官，肝脏储存肝糖元。此外，血糖浓度还受神经、内分泌激素的调节。</p><h2 id="血糖值"><a href="#血糖值" class="headerlink" title="血糖值"></a>血糖值</h2><h3 id="空腹血糖"><a href="#空腹血糖" class="headerlink" title="空腹血糖"></a>空腹血糖</h3><p>全血血糖(手指)。血浆血糖(静脉)。</p><p>空腹血糖正常值，全血血糖：3.89～6.11 mmol/L，血浆血糖：3.90～6.90 mmol/L</p><p>空腹全血血糖 ≥ 6.70 mmol/L，血浆血糖 ≥ 7.80 mmol/L，2 次重复测定可诊断为糖尿病。</p><h3 id="餐后血糖"><a href="#餐后血糖" class="headerlink" title="餐后血糖"></a>餐后血糖</h3><p>餐后 1 小时：血糖 6.7-9.4 mmol/L。最多也不超过 11.1 mmol/L。</p><p>餐后 2 小时：血糖 ≤ 7.8 mmol/L。</p><p>餐后 3 小时：第三小时后恢复正常，各次尿糖均为阴性。</p><h3 id="孕妇血糖"><a href="#孕妇血糖" class="headerlink" title="孕妇血糖"></a>孕妇血糖</h3><p>空腹不超过 5.1 mmol/L。</p><p>餐后 1 小时不得超过 10.0 mmol/L 才是血糖的正常水平。</p><h2 id="糖尿病"><a href="#糖尿病" class="headerlink" title="糖尿病"></a>糖尿病</h2><p>糖尿病患者的空腹血糖参考值：</p><p>轻度糖尿病：7.0~8.4 mmol/L，中度糖尿病：8.4~11.1 mmol/L，重度糖尿病：大于 11.1 mmol/L。</p><h2 id="药物"><a href="#药物" class="headerlink" title="药物"></a>药物</h2><p>二甲双胍。</p><ol><li>二甲双胍片首选用单纯饮食控制及体育锻炼治疗无效的2型糖尿病，特别是肥胖的2型糖尿病。</li><li>本品与胰岛素合用，可减少胰岛素用量，防止低血糖发生。</li><li>可与磺酰脲类降血糖药合用，具协同作用。</li></ol><p>服用本品时应尽量避免饮酒。</p><h2 id="哪些食物降血糖"><a href="#哪些食物降血糖" class="headerlink" title="哪些食物降血糖"></a>哪些食物降血糖</h2><p>1.饮食宜清淡，忌辛辣，低糖、低油、低盐，按时饮食</p><p>2.可以吃：苦瓜、洋葱、山药、海带、魔芋多吃，冬瓜、芹菜、菠菜、藕等少吃</p><p>3.可以吃：柚子、苹果、橘子、樱桃、草莓、梨、桃等升糖指数比较低，西瓜吃靠近瓜皮的，不吃瓜心</p><p>4.不能吃：香蕉、山楂、柿子、枣子</p><p>5.多喝凉白开，不要憋尿</p><p>6.检测足部，保护足部</p><p>7.多做足部运动，踮脚、脚趾抓地、泡完脚后用掌心搓脚心</p><p>8.不含糖的甜味剂，比如木糖醇、三氯蔗糖、阿斯巴甜、甜菊糖苷这类甜味剂；如果含有这些的食品，可以少量食用。燕麦片</p><p>多吃：冬瓜、苦瓜、洋葱、山药、海带、魔芋、芹菜、菠菜、木耳、藕</p><h3 id="燕麦片"><a href="#燕麦片" class="headerlink" title="燕麦片"></a>燕麦片</h3><p>燕麦片是燕麦粒轧制而成，呈扁平状，直径约相当于黄豆粒，形状完整的一种食品。燕麦煮出来高度粘稠，其中 beta 葡聚糖健康成分所带来的，具有降血脂、降血糖、高饱腹的效果，长期食用具有减肥功效。此外，燕麦中含有丰富的维生素 B1、B2、E、叶酸等，可以改善血液循环、缓解生活工作带来的压力；含有的钙、磷、铁、锌、锰等矿物质也有预防骨质疏松、促进伤口愈合、防止贫血的功效。</p><h3 id="魔芋"><a href="#魔芋" class="headerlink" title="魔芋"></a>魔芋</h3><p>降血糖、降血脂、降血压、散毒、养颜、通脉、减肥、通便、开胃。</p><p>生魔芋有毒，必须煎煮 3 小时以上才可食用。</p><p>消化不良的人，每次食量不宜过多。</p><p>有皮肤病的人少食。</p><p>魔芋性寒，有伤寒感冒症状的应少食用。</p><h3 id="海带"><a href="#海带" class="headerlink" title="海带"></a>海带</h3><p>海带是一种营养价值很高的蔬菜，同时具有一定的药用价值。含有丰富的碘等矿物质元素。海带含热量低、蛋白质含量中等、矿物质丰富。研究发现，海带具有降血脂、降血糖、调节免疫、抗凝血、抗肿瘤、排铅解毒和抗氧化等多种生物功能。</p><p>吃海带后不要马上喝茶(茶含鞣酸)，也不要立刻吃酸涩的水果(酸涩水果含植物酸)。</p><p>吃多也不好，会得甲亢。</p><h3 id="山药"><a href="#山药" class="headerlink" title="山药"></a>山药</h3><p>具有滋养强壮，助消化，敛虚汗，止泻之功效，主治脾虚腹泻、肺虚咳嗽、糖尿病消渴、小便短频、遗精、妇女带下及消化不良的慢性肠炎。</p><h1 id="血压"><a href="#血压" class="headerlink" title="血压"></a>血压</h1><p>是指血液在血管内流动时作用于单位面积血管壁的侧压力，它是推动血液在血管内流动的动力。在不同血管内被分别称为动脉血压、毛细血管压和静脉血压，通常所说的血压是指体循环的动脉血压。</p><p>影响动脉血压的因素主要有五个方面：①每搏输出量；②外周阻力；③心率；④主动脉和大动脉管壁的弹性；⑤循环血量与血管容量。</p><h2 id="血压值"><a href="#血压值" class="headerlink" title="血压值"></a>血压值</h2><p>收缩压：高压。舒张压：低压。</p><p>正常成人安静状态下的血压范围较稳定，正常范围收缩压 90～139 mmHg，舒张压 60～89 mmHg，脉压 30～40 mmHg。</p><p>高血压：未使用抗高血压药的前提下，18 岁以上成人收缩压 ≥ 140 mmHg 和(或)舒张压 ≥ 90mmHg。</p><p>低血压：未使用抗高血压药的前提下，18 岁以上成人收缩压 &lt; 90 mmHg 和(或)舒张压 &lt; 60mmHg。</p><h2 id="哪些食物降血压"><a href="#哪些食物降血压" class="headerlink" title="哪些食物降血压"></a>哪些食物降血压</h2><h3 id="茄子"><a href="#茄子" class="headerlink" title="茄子"></a>茄子</h3><p>降低胆固醇，降血脂、降血压，防治胃癌，治疗慢性胃炎、肾炎水肿，防治坏血病及促进伤口愈合，清热解毒。</p><p>消化不良、容易腹泻、脾胃虚寒、便溏症状的人不宜多吃。</p><p>秋后的茄子有一定的毒素，不要吃。</p><h3 id="白萝卜"><a href="#白萝卜" class="headerlink" title="白萝卜"></a>白萝卜</h3><p>清肠排毒，促进消化，增强食欲，防癌抗癌，降血压</p><h3 id="芹菜"><a href="#芹菜" class="headerlink" title="芹菜"></a>芹菜</h3><p>降低胆固醇，降血压</p><p>【芹菜+鸡肉】容易伤元气。</p><p>【芹菜+兔肉】容易引起脱皮。</p><h1 id="BMI-指数"><a href="#BMI-指数" class="headerlink" title="BMI 指数"></a>BMI 指数</h1><p>身体质量指数，简称体质指数，又称体重.</p><p>体质指数(BMI)= 体重(kg)÷ 身高(m)^ 2</p><p>成人的BMI数值：</p><ul><li>过轻：低于 18.5</li><li>正常：18.5-23.9</li><li>过重：24-27</li><li>肥胖：28-32</li><li>非常肥胖：高于 32</li></ul><p>60 / (1.68 * 1.68) = 21.26</p><p>65 / (1.68 * 1.68) = 23.04</p><p>67 / (1.68 * 1.68) = 23.74</p><p>60 / (1.70 * 1.70) = 20.77</p><p>65 / (1.70 * 1.70) = 22.50</p><p>69 / (1.70 * 1.70) = 23.88</p><p>60 / (1.72 * 1.72) = 20.29</p><p>65 / (1.72 * 1.72) = 21.98</p><p>70 / (1.72 * 1.72) = 23.67</p><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="韭菜"><a href="#韭菜" class="headerlink" title="韭菜"></a>韭菜</h2><p>补肾，健胃，提神，降低胆固醇。</p><p>春食则香，夏食则臭。</p><p>【韭菜+菠菜】同食会有滑肠作用，容易引起腹泻。</p><p>【韭菜+牛肉】发 热动火，引起牙齿肿痛，口疮。</p><p>【韭菜+白酒】引起胃炎，胃溃肠病复发。</p><p>【韭菜+蜂蜜】同食容易引起腹泻。</p>]]></content:encoded>
      
      <comments>http://mydearest.cn/2019/%E5%81%A5%E5%BA%B7%E6%8C%87%E6%A0%87.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>EventLoop</title>
      <link>http://mydearest.cn/2019/EventLoop.html</link>
      <guid>http://mydearest.cn/2019/EventLoop.html</guid>
      <pubDate>Sun, 16 Jun 2019 04:38:46 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;描述事件队列的过程？&quot;&gt;&lt;a href=&quot;#描述事件队列的过程？&quot; class=&quot;headerlink&quot; title=&quot;描述事件队列的过程？&quot;&gt;&lt;/a&gt;描述事件队列的过程？&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;js是单线程的，会出现阻塞问题，因此有了异步队列的出现&lt;/li&gt;
&lt;li&gt;主进程同步执行任务，异步操作将添加到异步队列中&lt;/li&gt;
&lt;li&gt;等候主进程执行完毕后再执行异步队列中的操作&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="描述事件队列的过程？"><a href="#描述事件队列的过程？" class="headerlink" title="描述事件队列的过程？"></a>描述事件队列的过程？</h2><ul><li>js是单线程的，会出现阻塞问题，因此有了异步队列的出现</li><li>主进程同步执行任务，异步操作将添加到异步队列中</li><li>等候主进程执行完毕后再执行异步队列中的操作</li></ul><hr><a id="more"></a><h2 id="什么是宏任务什么是微任务？"><a href="#什么是宏任务什么是微任务？" class="headerlink" title="什么是宏任务什么是微任务？"></a>什么是宏任务什么是微任务？</h2><ul><li>异步队列中有宏任务微任务之分</li><li>一次事件循环：先运行宏任务队列中的一个，然后运行微任务队列中的所有任务。接着开始下一次循环</li></ul><h2 id="哪些是宏任务哪些是微任务？"><a href="#哪些是宏任务哪些是微任务？" class="headerlink" title="哪些是宏任务哪些是微任务？"></a>哪些是宏任务哪些是微任务？</h2><h3 id="宏任务"><a href="#宏任务" class="headerlink" title="宏任务"></a>宏任务</h3><ul><li>setTimeout</li><li>setImmediate</li><li>setIntarval</li><li>requestAnimationFrame</li><li>I/O</li><li>UI rendering</li></ul><h3 id="微任务"><a href="#微任务" class="headerlink" title="微任务"></a>微任务</h3><ul><li>process.nextTick</li><li>Promise.then</li><li>Object.observe</li><li>MutationObserver</li></ul><h3 id="练习题"><a href="#练习题" class="headerlink" title="练习题"></a>练习题</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line"><span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">3</span>)</span><br><span class="line">    resolve();</span><br><span class="line">&#125;)</span><br><span class="line">promise.then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">4</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">5</span>)</span><br><span class="line"><span class="comment">// 13542</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">&#125;,<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> intervalId = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">3</span>)</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">10</span>)</span><br><span class="line">    <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">11</span>)</span><br><span class="line">        resolve()</span><br><span class="line">    &#125;).then(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">12</span>)</span><br><span class="line">    &#125;).then(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">13</span>)</span><br><span class="line">        clearInterval(intervalId)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line"><span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">7</span>)</span><br><span class="line">&#125;).then(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">8</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">9</span>)</span><br><span class="line"><span class="comment">// 1 9 7 8 2 3 10 11 12 13</span></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://mydearest.cn/2019/EventLoop.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>前端模块化发展</title>
      <link>http://mydearest.cn/2019/%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E5%8C%96%E5%8F%91%E5%B1%95.html</link>
      <guid>http://mydearest.cn/2019/%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E5%8C%96%E5%8F%91%E5%B1%95.html</guid>
      <pubDate>Thu, 13 Jun 2019 15:37:20 GMT</pubDate>
      <description>
      
        &lt;h1 id=&quot;一、前端模块化发展简介&quot;&gt;&lt;a href=&quot;#一、前端模块化发展简介&quot; class=&quot;headerlink&quot; title=&quot;一、前端模块化发展简介&quot;&gt;&lt;/a&gt;一、前端模块化发展简介&lt;/h1&gt;&lt;h2 id=&quot;1-CommonJS&quot;&gt;&lt;a href=&quot;#1-CommonJS&quot; class=&quot;headerlink&quot; title=&quot;1.CommonJS&quot;&gt;&lt;/a&gt;1.CommonJS&lt;/h2&gt;&lt;p&gt;2009年，美国程序员Ryan Dahl创造了&lt;a href=&quot;http://nodejs.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;node.js&lt;/a&gt;项目，将javascript语言用于服务器端编程。这标志”Javascript模块化编程”正式诞生。nodeJs中的模块，一律为&lt;a href=&quot;https://en.wikipedia.org/wiki/CommonJS&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CommonJS&lt;/a&gt; 格式。&lt;/p&gt;
&lt;h3 id=&quot;1-1-语法风格&quot;&gt;&lt;a href=&quot;#1-1-语法风格&quot; class=&quot;headerlink&quot; title=&quot;1.1 语法风格&quot;&gt;&lt;/a&gt;1.1 语法风格&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//Math.js&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;.exports = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&#39;add&#39;&lt;/span&gt;: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;a, b&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; a + b;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//main.js&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt; = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;./Math&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.add(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;done&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="一、前端模块化发展简介"><a href="#一、前端模块化发展简介" class="headerlink" title="一、前端模块化发展简介"></a>一、前端模块化发展简介</h1><h2 id="1-CommonJS"><a href="#1-CommonJS" class="headerlink" title="1.CommonJS"></a>1.CommonJS</h2><p>2009年，美国程序员Ryan Dahl创造了<a href="http://nodejs.org/" target="_blank" rel="noopener">node.js</a>项目，将javascript语言用于服务器端编程。这标志”Javascript模块化编程”正式诞生。nodeJs中的模块，一律为<a href="https://en.wikipedia.org/wiki/CommonJS" target="_blank" rel="noopener">CommonJS</a> 格式。</p><h3 id="1-1-语法风格"><a href="#1-1-语法风格" class="headerlink" title="1.1 语法风格"></a>1.1 语法风格</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Math.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line"><span class="string">'add'</span>: <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main.js</span></span><br><span class="line"><span class="keyword">const</span> <span class="built_in">Math</span> = <span class="built_in">require</span>(<span class="string">'./Math'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.add(<span class="number">2</span>, <span class="number">3</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'done'</span>);</span><br></pre></td></tr></table></figure><hr><a id="more"></a><h3 id="1-2-同步加载"><a href="#1-2-同步加载" class="headerlink" title="1.2 同步加载"></a>1.2 同步加载</h3><h3 id="1-3-动态加载"><a href="#1-3-动态加载" class="headerlink" title="1.3 动态加载"></a>1.3 动态加载</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main.js</span></span><br><span class="line"><span class="keyword">const</span> <span class="built_in">Math</span> = <span class="built_in">require</span>(<span class="string">'./Ma'</span> + <span class="string">'th'</span>);<span class="comment">//动态拼接</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.add(<span class="number">2</span>, <span class="number">3</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'done'</span>);</span><br></pre></td></tr></table></figure><h3 id="1-4-浏览器不支持CommonJS规范。"><a href="#1-4-浏览器不支持CommonJS规范。" class="headerlink" title="1.4 浏览器不支持CommonJS规范。"></a>1.4 浏览器不支持CommonJS规范。</h3><p>浏览器不兼容CommonJS的根本原因，在于缺少四个Node.js环境的变量。</p><ul><li>module</li><li>exports</li><li>require</li><li>global</li></ul><p>可以使用工具进行转换，例如：<a href="http://browserify.org/" target="_blank" rel="noopener">Browserify</a></p><hr><h2 id="2-AMD"><a href="#2-AMD" class="headerlink" title="2.AMD"></a>2.AMD</h2><p>CommonJS是主要为了JS在后端的表现制定的，他是不适合前端的。</p><p><a href="http://github.com/amdjs/amdjs-api/wiki/AMD" target="_blank" rel="noopener">AMD</a>是”Asynchronous Module Definition”的缩写，意思就是”异步模块定义”。</p><p><strong>RequireJS</strong>实现了AMD规范。下面以RequireJS为例，了解一下AMD规范。</p><h3 id="2-1-语法风格"><a href="#2-1-语法风格" class="headerlink" title="2.1 语法风格"></a>2.1 语法风格</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Math.js</span></span><br><span class="line">define([], <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="string">'add'</span>: <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main.js</span></span><br><span class="line"><span class="built_in">require</span>.config(&#123;</span><br><span class="line">    paths : &#123;</span><br><span class="line">        <span class="string">"math"</span> : <span class="string">"Math"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">require</span>([<span class="string">'math'</span>], <span class="function"><span class="keyword">function</span> (<span class="params">math</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(math.add(<span class="number">2</span>, <span class="number">3</span>));</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'done'</span>);</span><br><span class="line"><span class="comment">//done</span></span><br><span class="line"><span class="comment">//5</span></span><br></pre></td></tr></table></figure><h3 id="2-2-异步加载"><a href="#2-2-异步加载" class="headerlink" title="2.2 异步加载"></a>2.2 异步加载</h3><h3 id="2-3-动态加载"><a href="#2-3-动态加载" class="headerlink" title="2.3 动态加载"></a>2.3 动态加载</h3><h3 id="2-4-依赖前置，提前执行"><a href="#2-4-依赖前置，提前执行" class="headerlink" title="2.4 依赖前置，提前执行"></a>2.4 依赖前置，提前执行</h3><hr><h2 id="3-CMD"><a href="#3-CMD" class="headerlink" title="3.CMD"></a>3.CMD</h2><p>CMD是SeaJS 在推广过程中对模块定义的规范化产出。</p><h3 id="3-1-语法风格"><a href="#3-1-语法风格" class="headerlink" title="3.1 语法风格"></a>3.1 语法风格</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// CMD</span></span><br><span class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params">require, exports, module</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="built_in">require</span>(<span class="string">'./a'</span>);</span><br><span class="line">    a.doSomething();</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="keyword">var</span> b = <span class="built_in">require</span>(<span class="string">'./b'</span>);   <span class="comment">// 依赖可以就近书写</span></span><br><span class="line">    b.doSomething();</span><br><span class="line">    <span class="comment">// ... </span></span><br><span class="line">    <span class="built_in">require</span>.async(<span class="string">'./c'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">c</span>)</span>&#123; <span class="comment">//支持异步加载</span></span><br><span class="line">        c.doSomething();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// AMD 默认推荐的是</span></span><br><span class="line">define([<span class="string">'./a'</span>, <span class="string">'./b'</span>], <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123; <span class="comment">// 依赖必须一开始就写好</span></span><br><span class="line">    a.doSomething();</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    b.doSomething();</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="3-2-AMD和CMD的区别"><a href="#3-2-AMD和CMD的区别" class="headerlink" title="3.2 AMD和CMD的区别"></a>3.2 AMD和CMD的区别</h3><p>1) <strong>对于依赖的模块，AMD 是提前执行，CMD 是延迟执行。</strong>不过 RequireJS 从 2.0 开始，也改成可以延迟执行（根据写法不同，处理方式不同）。CMD 推崇 as lazy as possible（尽可能的懒加载，也称为延迟加载，即在需要的时候才加载）。</p><p>2) <strong>CMD 推崇依赖就近，AMD 推崇依赖前置。</strong>虽然 AMD 也支持 CMD 的写法，同时还支持将 require 作为依赖项传递，但 RequireJS 的作者默认是最喜欢上面的写法，也是官方文档里默认的模块定义写法。</p><h3 id="3-3-推荐链接"><a href="#3-3-推荐链接" class="headerlink" title="3.3 推荐链接"></a>3.3 推荐链接</h3><p><a href="https://github.com/seajs/seajs/issues/277" target="_blank" rel="noopener">与 RequireJS 的异同</a></p><p><a href="https://seajs.github.io/seajs/docs/" target="_blank" rel="noopener">SeaJS官方文档</a></p><h1 id="二、Module"><a href="#二、Module" class="headerlink" title="二、Module"></a>二、Module</h1><p>ES6中Module的特点</p><ul><li>浏览器，服务器通用</li><li>静态加载</li></ul><h2 id="1-基本语法"><a href="#1-基本语法" class="headerlink" title="1. 基本语法"></a>1. 基本语法</h2><h3 id="1-1-export"><a href="#1-1-export" class="headerlink" title="1.1 export"></a>1.1 export</h3><p>一个模块就是一个独立的文件。<code>export</code>关键字用来输出该变量。可以输出变量，函数或类。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// test.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> firstName = <span class="string">'cheng'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> lastName = <span class="string">'zhang'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> age = <span class="number">18</span>;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// test.js</span></span><br><span class="line"><span class="keyword">var</span> firstName = <span class="string">'cheng'</span>;</span><br><span class="line"><span class="keyword">var</span> lastName = <span class="string">'zhang'</span>;</span><br><span class="line"><span class="keyword">var</span> age = <span class="number">18</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123; firstName, lastName, age &#125;;</span><br></pre></td></tr></table></figure><p>可以使用<code>as</code>为输出变量重命名。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> firstName = <span class="string">'cheng'</span>;</span><br><span class="line"><span class="keyword">var</span> lastName = <span class="string">'zhang'</span>;</span><br><span class="line"><span class="keyword">var</span> age = <span class="number">18</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">firstName <span class="keyword">as</span> name, </span><br><span class="line">    lastName <span class="keyword">as</span> lastname, </span><br><span class="line">    age</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>需要特别注意的是，<code>export</code><strong>命令规定的是对外的接口</strong>，必须与模块内部的变量建立一一对应关系。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 报错</span></span><br><span class="line"><span class="keyword">export</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 报错</span></span><br><span class="line"><span class="keyword">var</span> m = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">export</span> m;</span><br></pre></td></tr></table></figure><p><code>export</code>语句输出的接口，与其对应的值是<strong>动态绑定关系</strong>，即通过该接口，可以取到模块内部实时的值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> foo = <span class="string">'bar'</span>;</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> foo = <span class="string">'baz'</span>, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure><p><code>export</code>命令可以出现在模块的任何位置，只要处于<strong>模块顶层</strong>就可以。</p><h3 id="1-2-import"><a href="#1-2-import" class="headerlink" title="1.2 import"></a>1.2 import</h3><p>其他 JS 文件通过<code>import</code>命令加载模块。大括号里面的变量名，必须与被导入模块（<code>test.js</code>）对外接口的名称相同。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; firstName, lastName, age &#125; <span class="keyword">from</span> <span class="string">'./test.js'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(firstName + <span class="string">' '</span> + lastName);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//cheng zhang</span></span><br></pre></td></tr></table></figure><p><code>import</code>命令输入的变量都是<strong>只读</strong>的，因为它的本质是输入接口。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;a&#125; <span class="keyword">from</span> <span class="string">'./xxx.js'</span></span><br><span class="line"></span><br><span class="line">a = &#123;&#125;; <span class="comment">// Assignment to constant variable.</span></span><br></pre></td></tr></table></figure><p>如果<code>a</code>是一个对象，改写<code>a</code>的属性是允许的。和const一样。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;a&#125; <span class="keyword">from</span> <span class="string">'./xxx.js'</span></span><br><span class="line"></span><br><span class="line">a.foo = <span class="string">'hello'</span>; <span class="comment">// 合法操作</span></span><br></pre></td></tr></table></figure><p>可以用星号（<code>*</code>）指定一个对象，进行整体加载。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> test <span class="keyword">from</span> <span class="string">'./test.js'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(test.firstName + <span class="string">' '</span> + test.lastName);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//cheng zhang</span></span><br><span class="line"></span><br><span class="line">test.lastName = <span class="string">'yun'</span>;</span><br><span class="line"><span class="comment">//Cannot assign to read only property 'lastName' of object '[object Module]'</span></span><br><span class="line"><span class="comment">//如果是对象，可以修改对象的属性。</span></span><br></pre></td></tr></table></figure><p><code>import</code>命令<strong>具有提升效果</strong>，会提升到整个模块的头部，首先执行。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">foo();</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; foo &#125; <span class="keyword">from</span> <span class="string">'my_module'</span>;</span><br></pre></td></tr></table></figure><p>由于<code>import</code>是静态执行，所以<strong>不能使用表达式和变量</strong>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 报错</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="string">'f'</span> + <span class="string">'oo'</span> &#125; <span class="keyword">from</span> <span class="string">'my_module'</span>;</span><br></pre></td></tr></table></figure><p><code>import</code>语句<strong>会执行所加载的模块</strong>，因此可以有下面的写法。仅仅执行<code>lodash</code>模块，但是不输入任何值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'lodash'</span>;</span><br></pre></td></tr></table></figure><p>即使加载多次，也只会执行一次。也就是说，<code>import</code>语句是 <strong>Singleton 模式</strong>。</p><h3 id="1-3-单例模式解读"><a href="#1-3-单例模式解读" class="headerlink" title="1.3 单例模式解读"></a>1.3 单例模式解读</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//counter.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> counter = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">addCounter</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    counter++;</span><br><span class="line">&#125;</span><br><span class="line">addCounter();</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main.js</span></span><br><span class="line"><span class="keyword">import</span> &#123;counter, addCounter&#125; <span class="keyword">from</span> <span class="string">'./counter'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'main:'</span> + counter);</span><br><span class="line">addCounter();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'main:'</span> + counter);</span><br><span class="line"></span><br><span class="line"><span class="comment">//main:2</span></span><br><span class="line"><span class="comment">//main:3</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>module test<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"module"</span> <span class="attr">src</span>=<span class="string">'main.js'</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"module"</span> <span class="attr">src</span>=<span class="string">'main2.js'</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main2.js</span></span><br><span class="line"><span class="keyword">import</span> &#123;counter, addCounter&#125; <span class="keyword">from</span> <span class="string">'./counter'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'main2:'</span> + counter);</span><br><span class="line">addCounter();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'main2:'</span> + counter);</span><br><span class="line"></span><br><span class="line"><span class="comment">//main2:3</span></span><br><span class="line"><span class="comment">//main2:4</span></span><br></pre></td></tr></table></figure><h3 id="1-4-export-default"><a href="#1-4-export-default" class="headerlink" title="1.4 export default"></a>1.4 export default</h3><p>使用<code>export default</code>可以不用关注输出模块中的变量名。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// export-default.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'foo'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// import-default.js</span></span><br><span class="line"><span class="keyword">import</span> customName <span class="keyword">from</span> <span class="string">'./export-default'</span>;</span><br><span class="line">customName(); <span class="comment">// 'foo'</span></span><br></pre></td></tr></table></figure><p><code>import</code>命令可以为该匿名函数指定任意名字。<code>import</code>命令后面，不使用大括号。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// export-default.js</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'foo'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> foo;</span><br></pre></td></tr></table></figure><p><code>export default</code>的本质，就是输出一个叫做<code>default</code>的变量或方法。</p><p><code>imort something from ..</code>.的本质，就是<code>import {default as something} from ...</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 正确</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> a;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 错误</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">var</span> a = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 正确</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="number">42</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 报错</span></span><br><span class="line"><span class="keyword">export</span> <span class="number">42</span>;</span><br></pre></td></tr></table></figure><p>所以<code>export default</code>是比较常用的方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MyClass.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> </span>&#123; ... &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> MyClass <span class="keyword">from</span> <span class="string">'MyClass'</span>;</span><br><span class="line"><span class="keyword">let</span> o = <span class="keyword">new</span> MyClass();</span><br></pre></td></tr></table></figure><h3 id="1-5-import-amp-export混合使用"><a href="#1-5-import-amp-export混合使用" class="headerlink" title="1.5 import&amp;export混合使用"></a>1.5 import&amp;export混合使用</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> &#123; foo, bar &#125; <span class="keyword">from</span> <span class="string">'my_module'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以简单理解为</span></span><br><span class="line"><span class="keyword">import</span> &#123; foo, bar &#125; <span class="keyword">from</span> <span class="string">'my_module'</span>;</span><br><span class="line"><span class="keyword">export</span> &#123; foo, bar &#125;;</span><br></pre></td></tr></table></figure><p>上面代码中，<code>export</code>和<code>import</code>语句可以结合在一起，写成一行。但需要注意的是，写成一行以后，<code>foo</code>和<code>bar</code><strong>实际上并没有被导入当前模块</strong>，只是相当于对外转发了这两个接口，导致<strong>当前模块不能直接使用</strong><code>foo</code>和<code>bar</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 接口改名</span></span><br><span class="line"><span class="keyword">export</span> &#123; fooName <span class="keyword">as</span> newName &#125; <span class="keyword">from</span> <span class="string">'my_module'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//具名接口改为默认接口</span></span><br><span class="line"><span class="keyword">export</span> &#123; foo <span class="keyword">as</span> <span class="keyword">default</span> &#125; <span class="keyword">from</span> <span class="string">'./someModule'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//接口也可以改名为具名接口</span></span><br><span class="line"><span class="keyword">export</span> &#123; <span class="keyword">default</span> <span class="keyword">as</span> es6 &#125; <span class="keyword">from</span> <span class="string">'./someModule'</span>;</span><br></pre></td></tr></table></figure><h3 id="1-6-模块的继承"><a href="#1-6-模块的继承" class="headerlink" title="1.6 模块的继承"></a>1.6 模块的继承</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//calculator.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//calculatorPlus.js</span></span><br><span class="line"><span class="keyword">export</span> * <span class="keyword">from</span> <span class="string">'./calculator.js'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">multiply</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a * b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main.js</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> cal <span class="keyword">from</span> <span class="string">'./calculatorPlus.js'</span>;</span><br><span class="line"></span><br><span class="line">cal.add(<span class="number">2</span>, <span class="number">3</span>);<span class="comment">//5</span></span><br><span class="line">cal.multiply(<span class="number">2</span>, <span class="number">3</span>);<span class="comment">//6</span></span><br></pre></td></tr></table></figure><h3 id="1-7-import"><a href="#1-7-import" class="headerlink" title="1.7 import()"></a>1.7 import()</h3><p><code>import()</code>提案是为了解决<code>import</code><strong>动态加载</strong>，和<strong>不能写在代码块中</strong>的问题。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>(a + <span class="string">'.js'</span>)</span><br><span class="line">.then(...);</span><br><span class="line">      </span><br><span class="line"><span class="keyword">import</span>(f())</span><br><span class="line">.then(...);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (condition) &#123;</span><br><span class="line">  <span class="keyword">import</span>(<span class="string">'moduleA'</span>).then(...);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="keyword">import</span>(<span class="string">'moduleB'</span>).then(...);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-Module补充"><a href="#2-Module补充" class="headerlink" title="2. Module补充"></a>2. Module补充</h2><h3 id="2-1-浏览器加载"><a href="#2-1-浏览器加载" class="headerlink" title="2.1 浏览器加载"></a>2.1 浏览器加载</h3><p>html中加载 ES6 模块，也使用<code>&lt;script&gt;</code>标签，但是要加入<code>type=&quot;module&quot;</code>属性。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"module"</span> <span class="attr">src</span>=<span class="string">"./myModule.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--等同于--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"module"</span> <span class="attr">src</span>=<span class="string">"./myModule.js"</span> <span class="attr">defer</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"module"</span> <span class="attr">src</span>=<span class="string">"./myModule.js"</span> <span class="attr">async</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p><code>defer</code>:要等到整个页面在内存中正常渲染结束（DOM 结构完全生成，以及其他脚本执行完成），才会执行。保证执行顺序。</p></li><li><p><code>async</code>:一旦下载完，渲染引擎就会中断渲染，执行这个脚本以后，再继续渲染。不能保证执行顺序。</p></li></ul><p>对于外部的模块脚本，要注意：</p><ul><li>代码是在模块作用域之中运行，而不是在全局作用域运行。模块内部的顶层变量，外部不可见。</li><li>模块脚本自动采用严格模式，不管有没有声明<code>use strict</code>。</li><li>模块之中，可以使用<code>import</code>命令加载其他模块（<code>.js</code>后缀不可省略，需要提供绝对 URL 或相对 URL），也可以使用<code>export</code>命令输出对外接口。</li><li><strong>模块之中，顶层的<code>this</code>关键字返回<code>undefined</code>，而不是指向<code>window</code>。也就是说，在模块顶层使用<code>this</code>关键字，是无意义的</strong>。</li><li>同一个模块如果加载多次，将只执行一次。</li></ul><h3 id="2-2-循环加载"><a href="#2-2-循环加载" class="headerlink" title="2.2 循环加载"></a>2.2 循环加载</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// a.js</span></span><br><span class="line"><span class="keyword">import</span> &#123;bar&#125; <span class="keyword">from</span> <span class="string">'./b'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'a.js'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(bar);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> foo = <span class="string">'foo'</span>;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// b.js</span></span><br><span class="line"><span class="keyword">import</span> &#123;foo&#125; <span class="keyword">from</span> <span class="string">'./a'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'b.js'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(foo);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> bar = <span class="string">'bar'</span>;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>module test<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"module"</span> <span class="attr">src</span>=<span class="string">'a.js'</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Cannot access 'foo' before initialization--&gt;</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// a.js</span></span><br><span class="line"><span class="keyword">import</span> &#123;bar&#125; <span class="keyword">from</span> <span class="string">'./b'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'a.js'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(bar());</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="string">'foo'</span> &#125;</span><br><span class="line"><span class="keyword">export</span> &#123;foo&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// b.js</span></span><br><span class="line"><span class="keyword">import</span> &#123;foo&#125; <span class="keyword">from</span> <span class="string">'./a'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'b.js'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(foo());</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="string">'bar'</span> &#125;</span><br><span class="line"><span class="keyword">export</span> &#123;bar&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//b.mjs</span></span><br><span class="line"><span class="comment">//foo</span></span><br><span class="line"><span class="comment">//a.mjs</span></span><br><span class="line"><span class="comment">//bar</span></span><br></pre></td></tr></table></figure><p>因为函数具有提升作用。</p><h3 id="2-3-ES6模块和CommonJS模块的差异"><a href="#2-3-ES6模块和CommonJS模块的差异" class="headerlink" title="2.3 ES6模块和CommonJS模块的差异"></a>2.3 ES6模块和CommonJS模块的差异</h3><ol><li><p><code>import</code>和<code>export</code>是关键字，<code>require</code>不是。</p></li><li><p>CommonJS 模块输出的是一个值的拷贝，ES6 模块输出的是值的引用。(详情见上方【单例模式解读】)</p></li><li><p>CommonJS 模块是运行时加载，ES6 模块是编译时输出接口。</p><pre><code>   因为 CommonJS 加载的是一个对象（即`module.exports`属性），该对象只有在脚本运行完才会生成。而 ES6 模块不是对象，它的对外接口只是一种静态定义，在代码静态解析阶段就会生成。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//counter.js</span></span><br><span class="line"><span class="keyword">let</span> counter = <span class="number">2</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addCounter</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    counter++;</span><br><span class="line">&#125;</span><br><span class="line">addCounter();</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    counter,</span><br><span class="line">    addCounter: addCunter</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main.js</span></span><br><span class="line"><span class="keyword">var</span> counter = <span class="built_in">require</span>(<span class="string">'./addCounter.js'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'main:'</span> + counter.counter);<span class="comment">//3</span></span><br><span class="line">counter.addCounter();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'main:'</span> + counter.counter);<span class="comment">//3</span></span><br></pre></td></tr></table></figure></code></pre></li><li><p><strong><code>this</code>指向不同</strong>。ES6 模块之中，顶层的<code>this</code>指向<code>undefined</code>；CommonJS 模块的顶层<code>this</code>指向当前模块，这是两者的一个重大差异。</p></li></ol>]]></content:encoded>
      
      <comments>http://mydearest.cn/2019/%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E5%8C%96%E5%8F%91%E5%B1%95.html#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
