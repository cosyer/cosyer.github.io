<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>cosyer&#39;s Blog</title>
    <link>http://mydearest.cn/</link>
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>陈宇的博客</description>
    <pubDate>Tue, 17 Jul 2018 11:40:41 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>export/export default/import的区别以及用法</title>
      <link>http://mydearest.cn/es6export.html</link>
      <guid>http://mydearest.cn/es6export.html</guid>
      <pubDate>Fri, 06 Jul 2018 06:41:12 GMT</pubDate>
      <description>
      
        &lt;p&gt;ES6模块主要有两个功能：export和import&lt;/p&gt;
&lt;p&gt;export用于对外输出本模块（一个文件可以理解为一个模块）变量的接口&lt;/p&gt;
&lt;p&gt;import用于在一个模块中加载另一个含有export接口的模块。&lt;/p&gt;
&lt;p&gt;也就是说使用export命令定义了模块的对外接口以后，其他JS文件就可以通过import命令加载这个模块（文件）。&lt;/p&gt;
&lt;hr&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>ES6模块主要有两个功能：export和import</p><p>export用于对外输出本模块（一个文件可以理解为一个模块）变量的接口</p><p>import用于在一个模块中加载另一个含有export接口的模块。</p><p>也就是说使用export命令定义了模块的对外接口以后，其他JS文件就可以通过import命令加载这个模块（文件）。</p><hr><a id="more"></a><h2 id="export和import（一个导出一个导入）"><a href="#export和import（一个导出一个导入）" class="headerlink" title="export和import（一个导出一个导入）"></a>export和import（一个导出一个导入）</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// a 文件 </span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> name=<span class="string">"cosyer"</span> <span class="comment">// 导出单个变量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 引用a文件 </span></span><br><span class="line"><span class="keyword">import</span> &#123;name&#125; <span class="keyword">from</span> <span class="string">'./a'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    data()&#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    howl:<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(name) <span class="comment">// cosyer</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导出多个变量 </span></span><br><span class="line"><span class="keyword">let</span> name1=<span class="string">'张三'</span>;</span><br><span class="line"><span class="keyword">let</span> name2=<span class="string">'李四'</span>;</span><br><span class="line"><span class="keyword">export</span> &#123;name1,name2&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引用多个变量</span></span><br><span class="line"><span class="keyword">import</span> &#123;name1,name2&#125; <span class="keyword">from</span> <span class="string">'./a'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 导出函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mini</span>(<span class="params">num</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(num)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123;mini&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引用函数</span></span><br><span class="line"><span class="keyword">import</span> &#123;mini&#125; <span class="keyword">from</span> <span class="string">'./a'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">    howl:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        mini(<span class="number">1</span>) <span class="comment">// 1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="export和export-default"><a href="#export和export-default" class="headerlink" title="export和export default"></a>export和export default</h2><ol><li><p>export与export default均可用于导出常量、函数、文件、模块等。</p></li><li><p>你可以在其它文件或模块中通过import + (常量 | 函数 | 文件 | 模块)名的方式，将其导入，以便能够对其进行使用。</p></li><li><p>在一个文件或模块中，export、import可以有多个，export default仅有一个。</p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> name1;</span><br><span class="line"><span class="keyword">export</span> name2;</span><br></pre></td></tr></table></figure><ol start="4"><li>通过export方式导出，在导入时要加{}，export default则不需要。</li></ol><p>其实很多时候export与export default可以实现同样的目的，但使用export default命令，为模块指定默认输出，这样就不需要知道加载模块的变量名。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> name</span><br><span class="line"><span class="keyword">import</span> name <span class="keyword">from</span> <span class="string">'./a'</span></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://mydearest.cn/es6export.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>mobx -- 走进观察者模式</title>
      <link>http://mydearest.cn/mobx.html</link>
      <guid>http://mydearest.cn/mobx.html</guid>
      <pubDate>Fri, 06 Jul 2018 02:09:29 GMT</pubDate>
      <description>
      
        
        
          &lt;h4 id=&quot;React是一个状态机，由开始的初始状态，通过与用户的互动，导致状态变化，从而重新渲染UI。&quot;&gt;&lt;a href=&quot;#React是一个状态机，由开始的初始状态，通过与用户的互动，导致状态变化，从而重新渲染UI。&quot; class=&quot;headerlink&quot; title=&quot;
        
      
      </description>
      
      <content:encoded><![CDATA[<h4 id="React是一个状态机，由开始的初始状态，通过与用户的互动，导致状态变化，从而重新渲染UI。"><a href="#React是一个状态机，由开始的初始状态，通过与用户的互动，导致状态变化，从而重新渲染UI。" class="headerlink" title="React是一个状态机，由开始的初始状态，通过与用户的互动，导致状态变化，从而重新渲染UI。"></a>React是一个状态机，由开始的初始状态，通过与用户的互动，导致状态变化，从而重新渲染UI。</h4><h4 id="React-提供了优化UI渲染的机制，-这种机制就是通过使用虚拟DOM来减少昂贵的DOM变化的数量。"><a href="#React-提供了优化UI渲染的机制，-这种机制就是通过使用虚拟DOM来减少昂贵的DOM变化的数量。" class="headerlink" title="React 提供了优化UI渲染的机制， 这种机制就是通过使用虚拟DOM来减少昂贵的DOM变化的数量。"></a>React 提供了优化UI渲染的机制， 这种机制就是通过使用虚拟DOM来减少昂贵的DOM变化的数量。</h4><h4 id="MobX-提供了优化应用状态与-React-组件同步的机制，这种机制就是使用响应式虚拟依赖状态图表，它只有在真正需要的时候才更新并且永远保持是最新的。"><a href="#MobX-提供了优化应用状态与-React-组件同步的机制，这种机制就是使用响应式虚拟依赖状态图表，它只有在真正需要的时候才更新并且永远保持是最新的。" class="headerlink" title="MobX 提供了优化应用状态与 React 组件同步的机制，这种机制就是使用响应式虚拟依赖状态图表，它只有在真正需要的时候才更新并且永远保持是最新的。"></a>MobX 提供了优化应用状态与 React 组件同步的机制，这种机制就是使用响应式虚拟依赖状态图表，它只有在真正需要的时候才更新并且永远保持是最新的。</h4><h4 id="redux缓存机制-时间回溯适用于撤销操作-操作状态"><a href="#redux缓存机制-时间回溯适用于撤销操作-操作状态" class="headerlink" title="redux缓存机制 时间回溯适用于撤销操作 操作状态"></a>redux缓存机制 时间回溯适用于撤销操作 操作状态</h4><ol><li><p>安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save mobx mobx-react</span><br></pre></td></tr></table></figure></li><li><p>核心概念</p></li></ol><ul><li>state(状态) 状态是驱动应用的数据。</li><li>observable(value) &amp;&amp; @observable Observable 值可以是JS基本数据类型、引用类型、普通对象、类实例、数组和映射。其修饰的state会暴露出来供观察者使用。</li><li>observer(观察者)被observer修饰的组件，将会根据组件内使用到的被observable修饰的state的变化而自动重新渲染。</li><li>action(动作)只有在 actions 中，才可以修改 Mobx 中 state 的值。action–&gt;state–&gt;view</li><li>computed 计算值(computed values)是可以根据现有的状态或其它计算值衍生出的值。(可以看成公式)getter：获得计算得到的新state并返回。setter： 不能用来直接改变计算属性的值，但是它们可以用来作”逆向”衍生。</li><li>autorun这通常是当你需要从反应式代码桥接到命令式代码的情况，例如打印日志、持久化或者更新UI的代码。</li><li>如果你有一个函数应该自动运行，但不会产生一个新的值，请使用autorun。 其余情况都应该使用 computed。</li><li>reactionsReactions 和计算值很像，但它不是产生一个新的值，而是会产生一些副作用，比如打印到控制台、网络请求、递增地更新 React 组件树以修补DOM、等等。 简而言之，reactions 在 响应式编程和命令式编程之间建立沟通的桥梁。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">// component</span><br><span class="line">import &#123;inject, observer&#125; from &quot;mobx-react&quot;;</span><br><span class="line"></span><br><span class="line">// 观察者 注入store添加到属性上</span><br><span class="line">@inject(&quot;store&quot;) @observer</span><br><span class="line"></span><br><span class="line">this.props.store.xxStore.num</span><br><span class="line">this.props.store.xxStore.plus() // num+=1</span><br><span class="line">this.props.store.xxStore.total</span><br><span class="line"></span><br><span class="line">// homeStore</span><br><span class="line"></span><br><span class="line">@observable num;</span><br><span class="line">construtor()&#123;</span><br><span class="line">    this.name=&apos;&apos;</span><br><span class="line">    this.items=[]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@computed get total() &#123;</span><br><span class="line">    return this.items.length;</span><br><span class="line"> &#125;</span><br><span class="line">  </span><br><span class="line">@action plus=()=&gt;&#123;</span><br><span class="line">    this.num+=1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">autorun((e)=&gt;&#123;&#125;)</span><br><span class="line"></span><br><span class="line">const homeStore =new HomeStore()</span><br><span class="line">export &#123;homeStore&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">switch</span><br><span class="line">router render=&#123;(props)=&gt;&lt;Item &#123;...props&#125;/&gt;&#125;</span><br><span class="line">router component=&#123;Index&#125;</span><br><span class="line">react-route-dom</span><br><span class="line">withRouter</span><br><span class="line">Linking</span><br><span class="line">// Provider 传递stores</span><br><span class="line">Privider store=&#123;stores&#125;</span><br><span class="line">create-react-app react-scripts</span><br></pre></td></tr></table></figure><p>基本就这两种方法:immutable/observablemobx: oopredux: 函数式</p><p>ssr:流模式、字符串</p><p><a href="https://github.com/cosyer/mobx-demo" target="_blank" rel="noopener">demo地址</a></p>]]></content:encoded>
      
      <comments>http://mydearest.cn/mobx.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>主流浏览器的内核和渲染方式解读</title>
      <link>http://mydearest.cn/%E4%B8%BB%E6%B5%81%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E5%86%85%E6%A0%B8%E5%92%8C%E6%B8%B2%E6%9F%93%E6%96%B9%E5%BC%8F%E8%A7%A3%E8%AF%BB.html</link>
      <guid>http://mydearest.cn/%E4%B8%BB%E6%B5%81%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E5%86%85%E6%A0%B8%E5%92%8C%E6%B8%B2%E6%9F%93%E6%96%B9%E5%BC%8F%E8%A7%A3%E8%AF%BB.html</guid>
      <pubDate>Thu, 05 Jul 2018 13:24:03 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;浏览器内核&quot;&gt;&lt;a href=&quot;#浏览器内核&quot; class=&quot;headerlink&quot; title=&quot;浏览器内核&quot;&gt;&lt;/a&gt;浏览器内核&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Trident:IE，360，搜狗&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Gecko：firefox&lt;
        
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="浏览器内核"><a href="#浏览器内核" class="headerlink" title="浏览器内核"></a>浏览器内核</h2><ul><li><p>Trident:IE，360，搜狗</p></li><li><p>Gecko：firefox</p></li><li><p>webkit:safari，旧版chrome</p></li><li><p>presto：旧版opera</p></li><li><p>blink：新版chrome，新版opera</p></li></ul><h2 id="浏览器的渲染方式"><a href="#浏览器的渲染方式" class="headerlink" title="浏览器的渲染方式"></a>浏览器的渲染方式</h2><ol><li><p>构建DOM树浏览器请求到html代码后，在生成DOM的最开始阶段，并行发起css、图片、js的请求。</p></li><li><p>构建CSSOMcss文件加载完成，开始构建CSSOM</p></li><li><p>生成渲染树（Render Tree）CSSOM构建结束后，和DOM一起生成Render Tree</p></li><li><p>布局（Layout）有了Render Tree，浏览器已经能知道网页中有哪些节点，各个节点的CSS定义以及他们的从属关系。开始布局，计算出各个节点在屏幕中的位置。</p></li><li><p>Paint绘制布局之后，浏览器知道哪些节点要显示，每个节点的CSS属性是什么，每个节点在屏幕中的位置。所以接下来按照算出来的规则，通过显卡，把内容画在屏幕上。</p></li></ol>]]></content:encoded>
      
      <comments>http://mydearest.cn/%E4%B8%BB%E6%B5%81%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E5%86%85%E6%A0%B8%E5%92%8C%E6%B8%B2%E6%9F%93%E6%96%B9%E5%BC%8F%E8%A7%A3%E8%AF%BB.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>前端工程化</title>
      <link>http://mydearest.cn/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96.html</link>
      <guid>http://mydearest.cn/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96.html</guid>
      <pubDate>Thu, 05 Jul 2018 13:04:18 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;前端的工程化、模块化、组件化。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;广义的前端工程化&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;前端工程是软件工程的一个子类，指的是将软件工程的方法和原理运用在前端开发中, 目的是实现高效开发，有效协同，质量可控。&lt;/p&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;狭义
        
      
      </description>
      
      <content:encoded><![CDATA[<p>前端的工程化、模块化、组件化。</p><ol><li>广义的前端工程化</li></ol><p>前端工程是软件工程的一个子类，指的是将软件工程的方法和原理运用在前端开发中, 目的是实现高效开发，有效协同，质量可控。</p><ol start="2"><li>狭义的前端工程化</li></ol><p>前端工程是指将开发阶段代码转变成生产环境的代码的一系列步骤。主要包括构建，分支管理，自动化测试，部署等。</p><p>前端工程化的具体内容</p><ol><li><p>代码规范：保证团队所有成员以同样的规范开发代码。</p></li><li><p>分支管理：不同的开发人员开发不同的功能或组件，按照统一的流程合并到主干。</p></li><li><p>模块管理：一方面，团队引用的模块应该是规范的；另一方面，必须保证这些模块可以正确的加入到最终编译好的包文件中。</p></li><li><p>自动化测试：为了保证和并进主干的代码达到质量标准，必须有测试，而且测试应该是自动化的，可以回归的。</p></li><li><p>构建：主干更新以后，自动将代码编译为最终的目标格式，并且准备好各种静态资源，</p></li><li><p>部署：将构建好的代码部署到生产环境。</p></li></ol>]]></content:encoded>
      
      <comments>http://mydearest.cn/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>flex布局</title>
      <link>http://mydearest.cn/flex.html</link>
      <guid>http://mydearest.cn/flex.html</guid>
      <pubDate>Thu, 05 Jul 2018 13:04:18 GMT</pubDate>
      <description>
      
        &lt;p&gt;芮 rui 四声&lt;/p&gt;
&lt;p&gt;浏览器前缀 -webkit/chrome、safari -moz/firefox -ms/ie -o/opera&lt;/p&gt;
&lt;p&gt;弹性伸缩flexbox布局 &lt;/p&gt;
&lt;p&gt;任何一个容器都可设为display:flex&lt;/p&gt;
&lt;p&gt;行内元素 display:inline-flex&lt;/p&gt;
&lt;p&gt;webkit内核浏览器（Safari） display:-webkit-flex; display:flex&lt;/p&gt;
&lt;p&gt;设为flex布局以后，子元素的float、clear、vertival-align属性将失效。&lt;/p&gt;
&lt;hr&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>芮 rui 四声</p><p>浏览器前缀 -webkit/chrome、safari -moz/firefox -ms/ie -o/opera</p><p>弹性伸缩flexbox布局 </p><p>任何一个容器都可设为display:flex</p><p>行内元素 display:inline-flex</p><p>webkit内核浏览器（Safari） display:-webkit-flex; display:flex</p><p>设为flex布局以后，子元素的float、clear、vertival-align属性将失效。</p><hr><a id="more"></a><h2 id="容器的属性"><a href="#容器的属性" class="headerlink" title="容器的属性"></a>容器的属性</h2><h3 id="flex-direction-决定主轴的方向"><a href="#flex-direction-决定主轴的方向" class="headerlink" title="flex-direction 决定主轴的方向"></a>flex-direction 决定主轴的方向</h3><p>flex-direction:row;  /<em>默认：从左到右</em>/</p><p>flex-direction:row-reverse;  /<em>从右到左</em>/</p><p>flex-direction:column;  /<em>从上到下</em>/</p><p>flex-direction:column-reverse;  /<em>从下到上</em>/</p><h3 id="flex-wrap-一条轴排列不下，如何换行"><a href="#flex-wrap-一条轴排列不下，如何换行" class="headerlink" title="flex-wrap:一条轴排列不下，如何换行"></a>flex-wrap:一条轴排列不下，如何换行</h3><p>flex-wrap:nowrap;  /<em>默认:不换行</em>/</p><p>flex-wrap:wrap;  /<em>换行，第一行在上方</em>/</p><p>flex-wrap:wrap-reverse;  /<em>换行，第一行在下方</em>/</p><h3 id="flex-flow：上面两个的简写"><a href="#flex-flow：上面两个的简写" class="headerlink" title="flex-flow：上面两个的简写"></a>flex-flow：上面两个的简写</h3><p>flex-flow:fiex-direction flex-wrap;  /<em>默认 row no-wrap</em>/</p><h3 id="justify-content-主轴上的对齐方式"><a href="#justify-content-主轴上的对齐方式" class="headerlink" title="justify-content:主轴上的对齐方式"></a>justify-content:主轴上的对齐方式</h3><p>justify-content:flex-start;  /<em>默认：左对齐</em>/</p><p>justify-content:flex-end;  /<em>右对齐</em>/</p><p>justify-content:center;  /<em>居中</em>/</p><p>justify-content:space-between;  /<em>两端对齐，项目之间的间隔相同，边缘项目紧贴边框</em>/</p><p>justify-content:space-around;  /<em>项目两侧的间隔相同，所以，项目之间的间隔比项目与边框的间隔大一倍</em>/</p><h3 id="align-items-交叉轴上如何对齐"><a href="#align-items-交叉轴上如何对齐" class="headerlink" title="align-items:交叉轴上如何对齐"></a>align-items:交叉轴上如何对齐</h3><p>align-items:flex-start;  /<em>起点对齐</em>/</p><p>align-items:flex-end;  /<em>终点对齐</em>/</p><p>align-items:center;  /<em>中点对齐</em>/</p><p>align-items:baseline;  /<em>项目的第一行文字的基线对齐</em>/</p><p>align-items:stretch;  /<em>默认：项目未设高度或auto，占满整个容器高度</em>/</p><h3 id="align-content：多根轴线的对齐方式，只有一根轴线时，不起作用。"><a href="#align-content：多根轴线的对齐方式，只有一根轴线时，不起作用。" class="headerlink" title="align-content：多根轴线的对齐方式，只有一根轴线时，不起作用。"></a>align-content：多根轴线的对齐方式，只有一根轴线时，不起作用。</h3><p>aling-content:flex-start;  /<em>与交叉轴的起点对齐</em>/</p><p>aling-content:flex-end;  /<em>与交叉轴的终点对齐</em>/</p><p>aling-content:center;  /<em>与交叉轴的中点对齐</em>/</p><p>aling-content:space-between;  /<em>与交叉轴两端对齐，轴线之间的间隔平均分布。</em>/</p><p>aling-content:space-around;  /<em>每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍</em>/</p><p>aling-content:stretch;  /<em>默认：轴线占满整个交叉轴</em>/</p><h2 id="项目的属性"><a href="#项目的属性" class="headerlink" title="项目的属性"></a>项目的属性</h2><h3 id="order-定义项目的排列顺序。数值越小，排列越靠前，默认为0。"><a href="#order-定义项目的排列顺序。数值越小，排列越靠前，默认为0。" class="headerlink" title="order:定义项目的排列顺序。数值越小，排列越靠前，默认为0。"></a>order:定义项目的排列顺序。数值越小，排列越靠前，默认为0。</h3><p>order:1;</p><p>order:99;</p><p>order:-1;   </p><p>/<em>-1 1 99的顺序排列</em>/</p><h3 id="flex-grow：定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。"><a href="#flex-grow：定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。" class="headerlink" title="flex-grow：定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。"></a>flex-grow：定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。</h3><p>flex-grow: <number>; /<em> default 0 </em>/</number></p><p>如果所有项目的flex-grow属性都为1，则它们将等分剩余空间（如果有的话）。</p><p>如果一个项目的flex-grow属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍。</p><h3 id="flex-shrink-定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。"><a href="#flex-shrink-定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。" class="headerlink" title="flex-shrink:定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。"></a>flex-shrink:定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。</h3><p>flex-shrink: <number>; /<em> default 1 </em>/</number></p><p>如果所有项目的flex-shrink属性都为1，当空间不足时，都将等比例缩小。</p><p>如果一个项目的flex-shrink属性为0，其他项目都为1，则空间不足时，前者不缩小。</p><p>负值对该属性无效。</p><h3 id="flex-basis-定义了在分配多余空间之前，项目占据的主轴空间（main-size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小。"><a href="#flex-basis-定义了在分配多余空间之前，项目占据的主轴空间（main-size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小。" class="headerlink" title="flex-basis:定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小。"></a>flex-basis:定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小。</h3><p>flex-basis: <length> | auto; /<em> default auto </em>/</length></p><p>它可以设为跟width或height属性一样的值（比如350px），则项目将占据固定空间。</p><h3 id="flex-是flex-grow-flex-shrink-和-flex-basis的简写，默认值为0-1-auto。后两个属性可选。"><a href="#flex-是flex-grow-flex-shrink-和-flex-basis的简写，默认值为0-1-auto。后两个属性可选。" class="headerlink" title="flex:是flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto。后两个属性可选。"></a>flex:是flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto。后两个属性可选。</h3><p>flex: none | [ &lt;’flex-grow’&gt; &lt;’flex-shrink’&gt;? || &lt;’flex-basis’&gt; ]</p><h3 id="align-self属性允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。"><a href="#align-self属性允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。" class="headerlink" title="align-self属性允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。"></a>align-self属性允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。</h3><p>align-self: auto | flex-start | flex-end | center | baseline | stretch;</p><h2 id="react-native使用flex布局注意点"><a href="#react-native使用flex布局注意点" class="headerlink" title="react-native使用flex布局注意点"></a>react-native使用flex布局注意点</h2><ul><li>样式对象需要驼峰式写法</li><li>React Native中的Flexbox的工作原理和web上的CSS基本一致，当然也存在少许差异。</li></ul><p>首先是默认值不同：flexDirection的默认值是column而不是row，而flex也只能指定一个数字值。</p><h2 id="扩展阅读："><a href="#扩展阅读：" class="headerlink" title="扩展阅读："></a>扩展阅读：</h2><p><a href="http://www.w3cplus.com/css3/a-guide-to-flexbox-new.html" target="_blank" rel="noopener">w3cplus指南</a><a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html" target="_blank" rel="noopener">Flex 布局教程：语法篇</a><a href="http://blog.csdn.net/magneto7/article/details/70854472" target="_blank" rel="noopener">思维图</a></p>]]></content:encoded>
      
      <comments>http://mydearest.cn/flex.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>服务器推技术</title>
      <link>http://mydearest.cn/%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%8E%A8%E6%8A%80%E6%9C%AF.html</link>
      <guid>http://mydearest.cn/%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%8E%A8%E6%8A%80%E6%9C%AF.html</guid>
      <pubDate>Thu, 05 Jul 2018 12:33:37 GMT</pubDate>
      <description>
      
        &lt;p&gt;在做前端页面渲染时，经常会遇到有的组件需要跟随数据的变化而实时的变化，例如：一个线上报名系统，总人数有一定限制，所以要实时的展现已经报名的人数，应该怎么实现呢？最基本有如下3种方案：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ajax轮询&lt;/li&gt;
&lt;li&gt;Ajax长轮询(comet)&lt;/li&gt;
&lt;li&gt;websocket长连接&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>在做前端页面渲染时，经常会遇到有的组件需要跟随数据的变化而实时的变化，例如：一个线上报名系统，总人数有一定限制，所以要实时的展现已经报名的人数，应该怎么实现呢？最基本有如下3种方案：</p><ul><li>Ajax轮询</li><li>Ajax长轮询(comet)</li><li>websocket长连接</li></ul><hr><a id="more"></a><h2 id="Ajax轮询"><a href="#Ajax轮询" class="headerlink" title="Ajax轮询"></a>Ajax轮询</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><p>实现简单，利用XHR,通过setInterval定时向后端发送请求。</p><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><p>会造成数据在一小段时间内不同步和大量无效的请求，增加后端处理压力.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        url: <span class="string">'https://www.baidu.com/'</span>,</span><br><span class="line">        success: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">//success code</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;, <span class="number">3000</span>);</span><br></pre></td></tr></table></figure><h2 id="Ajax长轮询-comet"><a href="#Ajax长轮询-comet" class="headerlink" title="Ajax长轮询(comet)"></a>Ajax长轮询(comet)</h2><p>在Ajax轮询的基础上做的一点改进，在后端数据没有更新的时候不再返回空响应，而且后端一直保存连接，直到后端有数据变化，则相应请求并且关闭连接，前端收到数据，马上再次向后端发起请求，并处理刚刚收到的数据。</p><p>通常的做法是，在服务器的程序中加入一个死循环，在循环中监测数据的变动。当发现新数据时，立即将其输出给浏览器并断开连接，浏览器在收到数据后，再次发起请求以进入下一个周期。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">async</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        url: <span class="string">'http://api.3g.qq.com'</span>,</span><br><span class="line">        success: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">async</span>();</span><br><span class="line">            <span class="comment">//success code</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="websocket长连接"><a href="#websocket长连接" class="headerlink" title="websocket长连接"></a>websocket长连接</h2><p>WebSocket是html5出来的东西(协议)，也就是说和http协议没关系，但http是不支持长链接的，WebSocket其实是一个新协议，跟http协议基本没有关系，只是为了兼容现有浏览器的握手规范而已。</p><p>WebSocket通信协议包含两个部分，一是开放性HTTP握手连接协商连接参数，二是二进制消息分帧机制（接收消息的文本和二进制数据传输）。它是一个独立完善的协议，也可以在浏览器之外实现。</p><h3 id="HTTP升级协商"><a href="#HTTP升级协商" class="headerlink" title="HTTP升级协商"></a>HTTP升级协商</h3><p>WebSocket协议提供了很多强大的特性：基于消息的通信、自定义的二进制分帧层、子协议协商、可选的协议扩展，等等。即在交换数据之前，客户端必须与服务器协商适当的参数以建立连接。</p><p>利用HTTP完成握手有几个好处。首先，让WebSockets与现有HTTP基础设施兼容：WebSocket服务器可以运行在80和443 端口上，这通常是对客户端唯一开放的端口。其次，让我们可以重用并扩展HTTP的Upgrade流，为其添加自定义的WebSocket首部，以完成协商。</p><h3 id="请求头信息"><a href="#请求头信息" class="headerlink" title="请求头信息"></a>请求头信息</h3><p>Connection:Upgrade Sec-WebSocket-Key:eDCPPyPQZq7PiwRcx8SPog== Sec-WebSocket-Version:13 Upgrade:websocket </p><h3 id="响应头信息"><a href="#响应头信息" class="headerlink" title="响应头信息"></a>响应头信息</h3><p>HTTP/1.1 101 Switching Protocols Connection:Upgrade Sec-WebSocket-Accept:/ZVAP3n6XuqDUoDp416PYUO+ZJc= Upgrade:websocket</p><p>最后，前述握手完成后，如果握手成功，该连接就可以用作双向通信信道交换WebSocket消息。到此，客户端与服务器之间不会再发生HTTP通信，一切由WebSocket 协议接管。</p><h3 id="具体使用方法，本文采用node-js中的Socket-IO来进行说明："><a href="#具体使用方法，本文采用node-js中的Socket-IO来进行说明：" class="headerlink" title="具体使用方法，本文采用node.js中的Socket.IO来进行说明："></a>具体使用方法，本文采用node.js中的Socket.IO来进行说明：</h3><ol><li>服务端创建socket.io的实例</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="built_in">require</span>(<span class="string">'express'</span>)(); </span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>).Server(app); </span><br><span class="line"><span class="keyword">var</span> io = <span class="built_in">require</span>(<span class="string">'socket.io'</span>)(http);<span class="comment">//创建实例 </span></span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123; res.sendfile(<span class="string">'index.html'</span>); &#125;);</span><br><span class="line"></span><br><span class="line">io.on(<span class="string">'connection'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">socket</span>)</span>&#123; </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'a user connected'</span>); </span><br><span class="line">&#125;);<span class="comment">// 监听前端连接 </span></span><br><span class="line"></span><br><span class="line">http.listen(<span class="number">3000</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="built_in">console</span>.log(<span class="string">'listening on *:3000'</span>); &#125;);</span><br></pre></td></tr></table></figure><ol start="2"><li>数据传输</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 前端客户端向后端发送数据：</span></span><br><span class="line">socket.emit(<span class="string">'chat message'</span>, $(<span class="string">'#m'</span>).val()); </span><br><span class="line"></span><br><span class="line"><span class="comment">// 后端接收数据：</span></span><br><span class="line"></span><br><span class="line">io.on(<span class="string">'connection'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">socket</span>)</span>&#123; socket.on(<span class="string">'chat message'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">msg</span>)</span>&#123; </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'message: '</span> + msg); &#125;); </span><br><span class="line">&#125;); </span><br><span class="line"></span><br><span class="line"><span class="comment">// 后端向前端发送数据：</span></span><br><span class="line"></span><br><span class="line">io.on(<span class="string">'connection'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">socket</span>)</span>&#123; socket.on(<span class="string">'chat message'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">msg</span>)</span>&#123; </span><br><span class="line">    io.emit(<span class="string">'chat message'</span>, msg); &#125;); &#125;); </span><br><span class="line"></span><br><span class="line"><span class="comment">// 前端接收数据：</span></span><br><span class="line"></span><br><span class="line">socket.on(<span class="string">'chat message'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">msg</span>)</span>&#123; <span class="built_in">console</span>.log(msg); &#125;);</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://mydearest.cn/%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%8E%A8%E6%8A%80%E6%9C%AF.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>函数的防抖和节流</title>
      <link>http://mydearest.cn/%E5%87%BD%E6%95%B0%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81.html</link>
      <guid>http://mydearest.cn/%E5%87%BD%E6%95%B0%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81.html</guid>
      <pubDate>Tue, 03 Jul 2018 14:45:58 GMT</pubDate>
      <description>
      
        &lt;p&gt;场景：事件频繁被触发，频繁执行DOM操作、资源加载等重复行为，导致UI停顿甚至浏览器崩溃。&lt;/p&gt;
&lt;p&gt;函数防抖和节流用于限制函数的执行。是优化高频率执行js代码的一种手段。&lt;/p&gt;
&lt;hr&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>场景：事件频繁被触发，频繁执行DOM操作、资源加载等重复行为，导致UI停顿甚至浏览器崩溃。</p><p>函数防抖和节流用于限制函数的执行。是优化高频率执行js代码的一种手段。</p><hr><a id="more"></a><h2 id="函数防抖"><a href="#函数防抖" class="headerlink" title="函数防抖"></a>函数防抖</h2><p>函数防抖就是让某个函数在上一次执行后，满足等待某个时间内不再触发此函数后再执行，而在这个等待时间内再次触发此函数，等待时间会重新计算。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> debounce = <span class="function"><span class="keyword">function</span>(<span class="params">idle,action</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> last;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> ctx = <span class="keyword">this</span>,</span><br><span class="line">        args = <span class="built_in">arguments</span>;</span><br><span class="line">    clearTimeout(last);</span><br><span class="line">    last = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      action.apply(ctx,args);</span><br><span class="line">    &#125;,idle);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回函数连续调用时，空闲时间必须大于或等于idle，action才会执行。</span></span><br></pre></td></tr></table></figure><h3 id="实际例子"><a href="#实际例子" class="headerlink" title="实际例子"></a>实际例子</h3><p>当持续触发事件时，一定时间段内没有再触发事件，事件处理函数才会执行一次，如果设定的时间到来之前，又一次触发了事件，就重新开始延时。如下图，持续触发scroll事件时，并不执行handle函数，当1000毫秒内没有触发scroll事件时，才会延时触发scroll事件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">fn, wait</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> timeout = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(timeout !== <span class="literal">null</span>) </span><br><span class="line">                clearTimeout(timeout);</span><br><span class="line">        timeout = setTimeout(fn, wait);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 处理函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handle</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">Math</span>.random()); </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 滚动事件</span></span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'scroll'</span>, debounce(handle, <span class="number">1000</span>));</span><br></pre></td></tr></table></figure><p>当持续触发scroll事件时，事件处理函数handle只在停止滚动1000毫秒之后才会调用一次，也就是说在持续触发scroll事件的过程中，事件处理函数handle一直没有执行。</p><p>函数防抖适用于连续调用函数，但只在延时后调用一次。定时器存在则销毁，第一次一定会创建并调用函数。</p><h2 id="函数节流"><a href="#函数节流" class="headerlink" title="函数节流"></a>函数节流</h2><p>每隔某个时间去执行某函数，避免函数的过多执行。</p><p>如果将水龙头拧紧直到水是以水滴的形式流出，那你会发现每隔一段时间，就会有一滴水流出。也就是说会先设定一个执行周期，当调用动作的时刻大于等于执行周期则执行该动作，然后进入下一个新周期。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> throttle = <span class="function"><span class="keyword">function</span>(<span class="params">delay,action</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> last ;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> cur = +<span class="keyword">new</span> <span class="built_in">Date</span>();  <span class="comment">//返回毫秒数</span></span><br><span class="line">    <span class="keyword">if</span>(cur - last &gt; = delay)&#123;</span><br><span class="line">      action.apply(<span class="keyword">this</span>,<span class="built_in">arguments</span>);</span><br><span class="line">      last = cur;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实际例子-1"><a href="#实际例子-1" class="headerlink" title="实际例子"></a>实际例子</h3><p>函数节流主要有两种实现方法：时间戳和定时器。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> throttle = <span class="function"><span class="keyword">function</span>(<span class="params">func, delay</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> prev = <span class="built_in">Date</span>.now();</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> context = <span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">var</span> args = <span class="built_in">arguments</span>;</span><br><span class="line">        <span class="keyword">var</span> now = <span class="built_in">Date</span>.now();</span><br><span class="line">        <span class="keyword">if</span> (now - prev &gt;= delay) &#123;</span><br><span class="line">            func.apply(context, args);</span><br><span class="line">            prev = <span class="built_in">Date</span>.now();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handle</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">Math</span>.random());</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'scroll'</span>, throttle(handle, <span class="number">1000</span>));</span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> throttle = <span class="function"><span class="keyword">function</span>(<span class="params">func, delay</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> timer = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> context = <span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">var</span> args = <span class="built_in">arguments</span>;</span><br><span class="line">        <span class="keyword">if</span> (!timer) &#123;</span><br><span class="line">            timer = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                func.apply(context, args);</span><br><span class="line">                timer = <span class="literal">null</span>;</span><br><span class="line">            &#125;, delay);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handle</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">Math</span>.random());</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'scroll'</span>, throttle(handle, <span class="number">1000</span>));</span><br></pre></td></tr></table></figure><p>函数节流适用于间接性调用函数。定时器不存在则创建调用函数，定时销毁。</p>]]></content:encoded>
      
      <comments>http://mydearest.cn/%E5%87%BD%E6%95%B0%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>在去杭州前的一些想法</title>
      <link>http://mydearest.cn/beforehz.html</link>
      <guid>http://mydearest.cn/beforehz.html</guid>
      <pubDate>Tue, 26 Jun 2018 13:14:37 GMT</pubDate>
      <description>
      
        &lt;p&gt;怯懦的我终于和领导提出了离职，从8月11号入职以来，jenkins打包管理、bugatti自动化部署等等惊艳到了在上家公司还是用手动发包javac的我，学到了更正规的软件开发流程体系和产品线的迭代，KA项目的定制化。从1月开始一直用RN做相关的微应用，期间虽然也做过小程序、mui的H5、antd的中后台系统，但大多数时间还是用RN写业务应用。经过几个应用的锻炼、改造，已经封出了一些较能应付业务需求的组件。复杂的集成调用框架那边都做了，其他部分做起来没有什么技术含量了。我知道已经毕业1年的我该做出些改变了。&lt;/p&gt;
&lt;hr&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>怯懦的我终于和领导提出了离职，从8月11号入职以来，jenkins打包管理、bugatti自动化部署等等惊艳到了在上家公司还是用手动发包javac的我，学到了更正规的软件开发流程体系和产品线的迭代，KA项目的定制化。从1月开始一直用RN做相关的微应用，期间虽然也做过小程序、mui的H5、antd的中后台系统，但大多数时间还是用RN写业务应用。经过几个应用的锻炼、改造，已经封出了一些较能应付业务需求的组件。复杂的集成调用框架那边都做了，其他部分做起来没有什么技术含量了。我知道已经毕业1年的我该做出些改变了。</p><hr><a id="more"></a><p>面对领导们的挽留，我也只能笑着婉拒。我想在大前端的道路上迈的更远，本来就没打算活很长的时间，在短暂还算充满干劲的人生中多做点自己感到快乐的事。说来也是好笑，来了南京这么久也没出去逛过，只对公司和公寓周边熟悉一些，真是符合我的作风啊o(<em>￣︶￣</em>)o。</p><p>依稀还记得刚追被去南京发展是我的内心也是非常慌乱的，陌生的城市、环境和人不停地在劝退着我，投递的简历有了回复，我不断预演这面试的场景，竟可能多的将自己的优势展现出来。将近2个小时的长途客车旅途，我到了南京南站，摸着黑上了地铁到了软件大道。9点半又误打误撞地摸到了目的地，不好意思随便进入，随即打电话确认（有人来引下路多好）。等待的过程忐忑不安，人生第一次经历三轮面试，和技术聊真的开心啊O(∩_∩)O哈哈~面试完后立即又买了车票回了家汗~~</p><p>自从工作以来就没请过假，没迟过到。自尊心强烈的我很在意别人对我的看法。去年买了房，房贷没什么压力。房子让父母住，我在工作的地方租房住，这是我的规划。不想去相亲，不想被各种绑架。</p><p>作为熟练的api caller，高中之前的学习是多么快乐啊，是的，做题(除了语文)学习很快乐。新思维解题都是带来很多不同的思路，课堂上有选择地去学习自己喜欢的事物。虽然被老师骂的惨，但暗地里还是支持的。没压力地考上了重点高中，进城上高中了，才感觉到差距是巨大的。城里的小孩终究是不一样的，读过的书也好，培养的兴趣爱好也好，上过的兴趣班都远超过你。学的东西都是套路化的解题，枯燥乏味。渲染了xx的气氛，表达了xx什么的情感。各种烦心、倒霉的事也接踵而来，小小的幸福被扼杀。好奇心和脖子的扭，知道的越多，越觉得绝望。见过的所谓的’真实’，都是为了利益。永远不要去试探人性。现在看来都只是可笑的借口罢了，压力抑郁到自残。人与人之间最公平的就是时间了，每个人一天都是24小时，谁也不多，谁也不少。特别佩服那些活的独立、认真的人们。他们年轻、强大、充满个性，差距真的差到天差地别，是我前进的目标和憧憬的对象。我不会再迷茫了，毕竟~~~</p><blockquote class="blockquote-center"><p>不去做的话永远也做不到。</p></blockquote> ]]></content:encoded>
      
      <comments>http://mydearest.cn/beforehz.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>常见排序的JS实现</title>
      <link>http://mydearest.cn/sort.html</link>
      <guid>http://mydearest.cn/sort.html</guid>
      <pubDate>Mon, 25 Jun 2018 13:37:09 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;https-github-com-damonare-Sorts-这位大兄弟♂总结的很好，快去看看吧！&quot;&gt;&lt;a href=&quot;#https-github-com-damonare-Sorts-这位大兄弟♂总结的很好，快去看看吧！&quot; class=&quot;headerlink&quot; title=&quot;https://github.com/damonare/Sorts 这位大兄弟♂总结的很好，快去看看吧！&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/damonare/Sorts&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/damonare/Sorts&lt;/a&gt; 这位大兄弟♂总结的很好，快去看看吧！&lt;/h2&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="https-github-com-damonare-Sorts-这位大兄弟♂总结的很好，快去看看吧！"><a href="#https-github-com-damonare-Sorts-这位大兄弟♂总结的很好，快去看看吧！" class="headerlink" title="https://github.com/damonare/Sorts 这位大兄弟♂总结的很好，快去看看吧！"></a><a href="https://github.com/damonare/Sorts" target="_blank" rel="noopener">https://github.com/damonare/Sorts</a> 这位大兄弟♂总结的很好，快去看看吧！</h2><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 常见排序的JS实现</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Sort = &#123;</span><br><span class="line">    <span class="comment">//快速排序(递归)</span></span><br><span class="line">    quick: <span class="function"><span class="keyword">function</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> nLength = arr.length,</span><br><span class="line">            pivotIndex = <span class="built_in">Math</span>.floor(nLength / <span class="number">2</span>),</span><br><span class="line">            pivot = arr.splice(pivotIndex, <span class="number">1</span>)[<span class="number">0</span>],</span><br><span class="line">            left = [],</span><br><span class="line">            right = [];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (nLength &lt; <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> arr;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[i] &lt; pivot) &#123;</span><br><span class="line">                left.push(arr[i]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                right.push(arr[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">arguments</span>.callee(left).concat([pivot], <span class="built_in">arguments</span>.callee(right));</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">//冒泡排序</span></span><br><span class="line">    bubble: <span class="function"><span class="keyword">function</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> nLength = arr.length;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (nLength &lt; <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> arr;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = nLength - <span class="number">1</span>; i &gt; <span class="number">0</span>; --i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; i; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                    <span class="keyword">var</span> temp = arr[j];</span><br><span class="line">                    arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">                    arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">//选择排序</span></span><br><span class="line">    selection: <span class="function"><span class="keyword">function</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> nLength = arr.length;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (nLength &lt; <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> arr;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; nLength; i++) &#123;</span><br><span class="line">            <span class="keyword">var</span> index = i;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> j = i + <span class="number">1</span>; j &lt; nLength; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (arr[j] &lt; arr[index]) &#123;</span><br><span class="line">                    index = j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (i !== index) &#123;</span><br><span class="line">                <span class="keyword">var</span> temp = arr[i];</span><br><span class="line">                arr[i] = arr[index];</span><br><span class="line">                arr[index] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">//插入排序</span></span><br><span class="line">    insertion: <span class="function"><span class="keyword">function</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> nLength = arr.length;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (nLength &lt; <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> arr;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; nLength; ++i) &#123;</span><br><span class="line">            <span class="keyword">var</span> j = i,</span><br><span class="line">                value = arr[i];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (j &gt; <span class="number">0</span> &amp;&amp; arr[j - <span class="number">1</span>] &gt; value) &#123;</span><br><span class="line">                arr[j] = arr[j - <span class="number">1</span>];</span><br><span class="line">                --j;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (j !== i) &#123;</span><br><span class="line">                arr[j] = value;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">//希尔排序</span></span><br><span class="line">    shell: <span class="function"><span class="keyword">function</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> nLength = arr.length;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (nLength &lt; <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> arr;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> step = nLength &gt;&gt; <span class="number">1</span>; step &gt; <span class="number">0</span>; step &gt;&gt;= <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; step; ++i) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> j = i + step; j &lt; nLength; j += step) &#123;</span><br><span class="line">                    <span class="keyword">var</span> k = j,</span><br><span class="line">                        value = arr[j];</span><br><span class="line">                    <span class="keyword">while</span> (k &gt;= step &amp;&amp; arr[k - step] &gt; value) &#123;</span><br><span class="line">                        arr[k] = arr[k - step];</span><br><span class="line">                        k -= step;</span><br><span class="line">                    &#125;</span><br><span class="line">                    arr[k] = value;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://mydearest.cn/sort.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>详解 Cookie、 LocalStorage 与 SessionStorage</title>
      <link>http://mydearest.cn/storage.html</link>
      <guid>http://mydearest.cn/storage.html</guid>
      <pubDate>Sat, 23 Jun 2018 05:43:32 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;Cookie&quot;&gt;&lt;a href=&quot;#Cookie&quot; class=&quot;headerlink&quot; title=&quot;Cookie&quot;&gt;&lt;/a&gt;Cookie&lt;/h2&gt;&lt;p&gt;Cookie 是小甜饼的意思。顾名思义，cookie 确实非常小，它的大小限制为4KB左右。它的主要用途有保存登录信息，比如你登录某个网站市场可以看到“记住密码”，这通常就是通过在 Cookie 中存入一段辨别用户身份的数据来实现的。&lt;/p&gt;
&lt;h2 id=&quot;localStorage&quot;&gt;&lt;a href=&quot;#localStorage&quot; class=&quot;headerlink&quot; title=&quot;localStorage&quot;&gt;&lt;/a&gt;localStorage&lt;/h2&gt;&lt;p&gt;localStorage 是 HTML5 标准中新加入的技术，它并不是什么划时代的新东西。早在 IE 6 时代，就有一个叫 userData 的东西用于本地存储，而当时考虑到浏览器兼容性，更通用的方案是使用 Flash。而如今，localStorage 被大多数浏览器所支持，如果你的网站需要支持 IE6+，那以 userData 作为你的 polyfill 的方案是种不错的选择。&lt;/p&gt;
&lt;p&gt;缺点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;存储容量限制，大部分浏览器应该最多5M。&lt;/li&gt;
&lt;li&gt;仅支持字符串，如果是存对象还需要将使用JSON.stringify和JSON.parse方法互相转换，有些啰嗦。&lt;/li&gt;
&lt;li&gt;读取都是同步的。大多数情况下，还挺好使的。但如果存储数据比较大，例如一张重要图片base64格式存储了，读取可能会有可感知的延迟时间。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;sessionStorage&quot;&gt;&lt;a href=&quot;#sessionStorage&quot; class=&quot;headerlink&quot; title=&quot;sessionStorage&quot;&gt;&lt;/a&gt;sessionStorage&lt;/h2&gt;&lt;p&gt;sessionStorage 与 localStorage 的接口类似，但保存数据的生命周期与 localStorage 不同。做过后端开发的同学应该知道 Session 这个词的意思，直译过来是“会话”。而 sessionStorage 是一个前端的概念，它只是可以将一部分数据在当前会话中保存下来，刷新页面数据依旧存在。但当页面关闭后，sessionStorage 中的数据就会被清空。&lt;/p&gt;
&lt;hr&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><p>Cookie 是小甜饼的意思。顾名思义，cookie 确实非常小，它的大小限制为4KB左右。它的主要用途有保存登录信息，比如你登录某个网站市场可以看到“记住密码”，这通常就是通过在 Cookie 中存入一段辨别用户身份的数据来实现的。</p><h2 id="localStorage"><a href="#localStorage" class="headerlink" title="localStorage"></a>localStorage</h2><p>localStorage 是 HTML5 标准中新加入的技术，它并不是什么划时代的新东西。早在 IE 6 时代，就有一个叫 userData 的东西用于本地存储，而当时考虑到浏览器兼容性，更通用的方案是使用 Flash。而如今，localStorage 被大多数浏览器所支持，如果你的网站需要支持 IE6+，那以 userData 作为你的 polyfill 的方案是种不错的选择。</p><p>缺点：</p><ol><li>存储容量限制，大部分浏览器应该最多5M。</li><li>仅支持字符串，如果是存对象还需要将使用JSON.stringify和JSON.parse方法互相转换，有些啰嗦。</li><li>读取都是同步的。大多数情况下，还挺好使的。但如果存储数据比较大，例如一张重要图片base64格式存储了，读取可能会有可感知的延迟时间。</li></ol><h2 id="sessionStorage"><a href="#sessionStorage" class="headerlink" title="sessionStorage"></a>sessionStorage</h2><p>sessionStorage 与 localStorage 的接口类似，但保存数据的生命周期与 localStorage 不同。做过后端开发的同学应该知道 Session 这个词的意思，直译过来是“会话”。而 sessionStorage 是一个前端的概念，它只是可以将一部分数据在当前会话中保存下来，刷新页面数据依旧存在。但当页面关闭后，sessionStorage 中的数据就会被清空。</p><hr><a id="more"></a><h2 id="三者的异同"><a href="#三者的异同" class="headerlink" title="三者的异同"></a>三者的异同</h2><table><thead><tr><th style="text-align:center">特性</th><th style="text-align:center">Cookie</th><th style="text-align:center">localstorage</th><th>sessionstorage</th></tr></thead><tbody><tr><td style="text-align:center">生命周期</td><td style="text-align:center">一般由服务器生成，可设置失效时间。如果在浏览器端生成Cookie，默认是关闭浏览器后失效</td><td style="text-align:center">除非被清除，否则永久保存</td><td>仅在当前会话下有效，关闭页面或浏览器后被清除</td></tr><tr><td style="text-align:center">数据大小</td><td style="text-align:center">4K</td><td style="text-align:center">5M</td><td>5M</td></tr><tr><td style="text-align:center">与服务器端通信</td><td style="text-align:center">每次都会携带在HTTP头中，如果使用cookie保存过多数据会带来性能问题</td><td style="text-align:center">仅在客户端（即浏览器）中保存，不参与和服务器的通信</td><td>同上</td></tr><tr><td style="text-align:center">易用性</td><td style="text-align:center">需要自己封装，原生的Cookie接口不友好</td><td style="text-align:center">可以封装来对Object和Array有更好的支持</td><td>同上</td></tr></tbody></table><h2 id="安全性的考虑"><a href="#安全性的考虑" class="headerlink" title="安全性的考虑"></a>安全性的考虑</h2><p>需要注意的是，不是什么数据都适合放在 Cookie、localStorage 和 sessionStorage 中的。使用它们的时候，需要时刻注意是否有代码存在 XSS 注入的风险。因为只要打开控制台，你就随意修改它们的值，也就是说如果你的网站中有 XSS 的风险，它们就能对你的 localStorage 肆意妄为。所以千万不要用它们存储你系统中的敏感数据。</p><h2 id="cookie用法"><a href="#cookie用法" class="headerlink" title="cookie用法"></a>cookie用法</h2><p>JavaScript 可以使用 document.cookie 属性来创建 、读取、及删除 cookie。document.cookie=”username=John Doe”;</p><p>您还可以为 cookie 添加一个过期时间（以 UTC 或 GMT 时间）。默认情况下，cookie 在浏览器关闭时删除：document.cookie=”username=John Doe; expires=Thu, 18 Dec 2013 12:00:00 GMT”;</p><p>您可以使用 path 参数告诉浏览器 cookie 的路径。默认情况下，cookie 属于当前页面。document.cookie=”username=John Doe; expires=Thu, 18 Dec 2013 12:00:00 GMT; path=/“;</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置cookie</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setCookie</span>(<span class="params">cname,cvalue,exdays</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">var</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">  d.setTime(d.getTime()+(exdays*<span class="number">24</span>*<span class="number">60</span>*<span class="number">60</span>*<span class="number">1000</span>));</span><br><span class="line">  <span class="keyword">var</span> expires = <span class="string">"expires="</span>+d.toGMTString();</span><br><span class="line">  <span class="built_in">document</span>.cookie = cname + <span class="string">"="</span> + cvalue + <span class="string">"; "</span> + expires;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取指定cookie</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getCookie</span>(<span class="params">cname</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">var</span> name = cname + <span class="string">"="</span>;</span><br><span class="line">  <span class="keyword">var</span> ca = <span class="built_in">document</span>.cookie.split(<span class="string">';'</span>);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;ca.length; i++) </span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">var</span> c = ca[i].trim();</span><br><span class="line">    <span class="keyword">if</span> (c.indexOf(name)==<span class="number">0</span>) <span class="keyword">return</span> c.substring(name.length,c.length);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检测cookie函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkCookie</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">var</span> username=getCookie(<span class="string">"username"</span>);</span><br><span class="line">  <span class="keyword">if</span> (username!=<span class="string">""</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    alert(<span class="string">"Welcome again "</span> + username);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> </span><br><span class="line">  &#123;</span><br><span class="line">    username = prompt(<span class="string">"Please enter your name:"</span>,<span class="string">""</span>);</span><br><span class="line">    <span class="keyword">if</span> (username!=<span class="string">""</span> &amp;&amp; username!=<span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      setCookie(<span class="string">"username"</span>,username,<span class="number">365</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="localStorage和sessionStorage用法"><a href="#localStorage和sessionStorage用法" class="headerlink" title="localStorage和sessionStorage用法"></a>localStorage和sessionStorage用法</h2><p>localStorage和sessionStorage类似(也可以像普通对象一样用点(.)操作符，及[]的方式进行数据存储)<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> setStorage(name, data) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> data === <span class="string">'object'</span>) &#123;</span><br><span class="line">        <span class="built_in">window</span>.localStorage.setItem(name, <span class="built_in">JSON</span>.stringify(data))</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> data === <span class="string">'number'</span> || <span class="keyword">typeof</span> data === <span class="string">'string'</span> || <span class="keyword">typeof</span> data === <span class="string">'boolean'</span>) &#123;</span><br><span class="line">        <span class="built_in">window</span>.localStorage.setItem(name, data)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        alert(<span class="string">'该类型不能用于本地存储~'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取localstorage</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> getStorage(name) &#123;</span><br><span class="line">    <span class="keyword">let</span> data = <span class="built_in">window</span>.localStorage.getItem(name)</span><br><span class="line">    <span class="keyword">if</span> (data) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">JSON</span>.parse(data)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">''</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 删除localstorage</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> removeStorage(name) &#123;</span><br><span class="line">    <span class="built_in">window</span>.localStorage.removeItem(name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 清空localstorage</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> clearStorage() &#123;</span><br><span class="line">    <span class="built_in">window</span>.localStorage.clear()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="规避localStorage缺点—localforage"><a href="#规避localStorage缺点—localforage" class="headerlink" title="规避localStorage缺点—localforage"></a>规避localStorage缺点—localforage</h2><p>localforage的逻辑是这样的：优先使用IndexedDB存储数据，如果浏览器不支持，使用WebSQL，浏览器再不支持，使用localStorage。</p><p>localforage的API名称和localStorage一样，但是，在同步还是异步上却不同，localforage是异步执行的，用法示意如下。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">localforage.getItem(<span class="string">'key'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, value</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 如果err不是null，则出错。否则value就是我们想要的值</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>]]></content:encoded>
      
      <comments>http://mydearest.cn/storage.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>面试题整理归纳</title>
      <link>http://mydearest.cn/interview.html</link>
      <guid>http://mydearest.cn/interview.html</guid>
      <pubDate>Sat, 23 Jun 2018 02:58:48 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;字符串扩展的方法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;includes()：返回布尔值，表示是否找到了参数字符串。数组也可以 a[1]=1 且能判断undefined&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td
        
      
      </description>
      
      <content:encoded><![CDATA[<p>字符串扩展的方法</p><ul><li><p>includes()：返回布尔值，表示是否找到了参数字符串。数组也可以 a[1]=1 且能判断undefined</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">a[<span class="number">4</span>]=<span class="number">5</span> <span class="comment">// [1, 2, 3, undefined × 1, 5] empty</span></span><br><span class="line"><span class="comment">// a[3]=undefined [1, 2, 3, undefined, 5] </span></span><br><span class="line"></span><br><span class="line">a.indexOf(<span class="literal">undefined</span>) <span class="comment">// -1</span></span><br><span class="line">a.includes(<span class="literal">undefined</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li><li><p>startsWith()：返回布尔值，表示参数字符串是否在原字符串的头部。</p></li><li>endsWith()：返回布尔值，表示参数字符串是否在原字符串的尾部。str | index</li><li>repeat()：返回一个新字符串，表示将原字符串重复n次。参数如果是小数，会被取整(不四舍五入)。参数是负数或者Infinity，会报错。0/Nan返回空字符串,参数是字符串，则会先转换成数字。</li><li>padStart()：头部补全。</li><li>padEnd()：尾部补全<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&apos;x&apos;.padStart(5, &apos;ab&apos;) // &apos;ababx&apos;</span><br><span class="line">&apos;x&apos;.padStart(4, &apos;ab&apos;) // &apos;abax&apos;</span><br><span class="line"></span><br><span class="line">&apos;x&apos;.padEnd(5, &apos;ab&apos;) // &apos;xabab&apos;</span><br><span class="line">&apos;x&apos;.padEnd(4, &apos;ab&apos;) // &apos;xaba&apos;</span><br></pre></td></tr></table></figure></li></ul><p>如果原字符串的长度，等于或大于指定的最小长度，则返回原字符串。默认使用空格补全</p><ul><li>模板字符串（template string）是增强版的字符串，用反引号`标识。它可以当作普通字符串使用，也可以用来定义多行字符串，或者在字符串中嵌入变量。`${表达式、变量}`</li><li>commonjs 服务器端 amd 浏览器端</li><li>const 必须赋值定义 let 在同一作用于无法重复命名 无法变量提升</li><li>split(字符串或者正则,设置长度) 字符串=&gt;数组</li><li>substr(开始的索引//splice可以为负数-1则为字符串最后一个字符,length字符数)方法不同的是,substring(开始索引，结束索引+1)负的参数有区别只有单参数时到字符串结尾String exd=filePath.subString(filePath.lastIndexOf(“.”)+1,filePath.length)</li></ul>]]></content:encoded>
      
      <comments>http://mydearest.cn/interview.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>正确设置网站title、keywords、description</title>
      <link>http://mydearest.cn/seo.html</link>
      <guid>http://mydearest.cn/seo.html</guid>
      <pubDate>Fri, 22 Jun 2018 10:27:43 GMT</pubDate>
      <description>
      
        &lt;hr&gt;
      
      </description>
      
      <content:encoded><![CDATA[<hr><a id="more"></a><p>SEO：搜索引擎优化，提高网站浏览量</p><p>SEM：搜索引擎营销</p><p>IP：独立IP访问的用户</p><p>PV：页面浏览量或点击量</p><p>UV：独立访客数</p><h2 id="title（网站标题）"><a href="#title（网站标题）" class="headerlink" title="title（网站标题）"></a>title（网站标题）</h2><p>title，就是浏览器上显示的那些内容，不仅用户能看到，也能被搜索引擎检索到（搜索引擎在抓取网页时，最先读取的就是网页标题，所以title是否正确设置极其重要。）title一般不超过80个字符，而且词语间要用英文“-”隔开，因为计算机只对英语的敏感性较高，对汉语的敏感性不高。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">用法：<span class="tag">&lt;<span class="name">title</span>&gt;</span>网站标题<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li><p>首页title写法，一般是“网站名称-主关键词或一句含有主关键词的描述”。在做优化时习惯把主关键词放最前面，网站名称放后面，因为搜索引擎给予标题最前面的词比后面的高。比如，做“招聘”这个词，就这样写“企业招聘-创业公司招聘技巧-xx招聘”。</p></li><li><p>栏目页title写法，一般有2种：“栏目名称-网站名称”、“栏目名称栏目关键词-网站名称”。建议用“栏目名称-网站名称”。而且栏目名称最好用关键词来确定，比如企业招聘栏目最好就用企业招聘，而不要起个让人无法识别的名字如企业来人，企业看看，或企业加上一些特殊符号，这种写法虽然很有个性，但会让你的网站在优化上占了下风。</p></li><li><p>分类列表页title写法，一般是“分类列表页名称-栏目名称-网站名称”，这个和栏目页差不多。</p></li><li><p>文章页title写法，一般有3种：“文章标题-网站名称”、“内容标题-栏目名称”、“内容标题-栏目名称-网站名称”。其中，“内容标题-栏目名称-网站名称”的写法最为规范，但也相对复杂，它能给用户很好的提示，让用户知道他在访问哪篇文章，并且是在哪个网站的哪个栏目下。</p></li></ol><h2 id="keywords（关键词）"><a href="#keywords（关键词）" class="headerlink" title="keywords（关键词）"></a>keywords（关键词）</h2><p>keywords，是用户不查看源代码看不到的。主要作用是告诉搜索引擎本页内容是围绕哪些词展开的。因此keywords的每个词都要能在内容中找到相应匹配，才有利于排名。keywords一般不超过3个，每个关键词不宜过长，而且词语间要用英文“,”隔开。为什么用英文上文已经说过。而且，尽量将重要的关键字靠前放，因为靠后的关键字排名较差，除非你站有很高的权重。</p><p>小道消息称keywords曾被百度、谷歌、雅虎等搜索引擎剔除，将不会再影响搜索引擎的排序结果，设置一下总没坏处，还是有一些搜索引擎比较重视keywords标签的。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">用法：<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">”Keywords”</span> <span class="attr">Content</span>=<span class="string">”关键词1,关键词2,关键词3,关键词4″</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li><p>首页keywords写法，一般是“网站名称,主要栏目名,主要关键词”。</p></li><li><p>栏目页keywords写法，一般是“栏目名称,栏目关键字,栏目分类列表名称”。</p></li><li><p>分类列表页keywords写法，这个就比较简单了，只要将你这个栏目中的主要关键字写入即可。</p></li><li><p>文章页keywords写法，建议大家提取文章中的关键词，比如我的文章主要是讲SEO优化的，那么我关键词肯定是SEO优化，如果你觉得你提取关键词的能力较差，也可以选择文章中出现比较多的词来作为关键词，比如我现在写的内容是关于title、keywords、description的，那我的文章页关键词就是这3个。</p></li></ol><h2 id="description（内容摘要）"><a href="#description（内容摘要）" class="headerlink" title="description（内容摘要）"></a>description（内容摘要）</h2><p>description，和上面的keywords一样，是用户不查看源代码看不到的，而且也是对于一个网页的简要内容概况。不同的是，keywords是由几个词语的组成的，而description则是完整的一句话。description一般不超过150个字符，描述内容要和页面内容相关。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">用法：<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">”Description”</span> <span class="attr">Content</span>=<span class="string">”你网页的简述”</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li><p>首页description写法，一般是将首页的标题、关键词和一些特殊栏目的内容融合到里面，写成简单的介绍。</p></li><li><p>栏目页description写法，一般是将栏目的标题、关键字、分类列表名称融合到里面，写成简单的介绍。</p></li><li><p>分类列表页description，这个就比较简单了，一般只需要把分类列表的标题、关键词融合在一起，写成简单的介绍。</p></li><li><p>文章页description写法，一般有2种写法，标准写法就和前面的一样，将文章标题、文章中的重要内容和关键词融合在一起，写成简单的介绍。这是最好最标准的写法。但是这样写比较麻烦，可以在文章首段和标题中加入关键词，比如我这篇文章是讲title、keywords、description的，那么在文章首段和标题中就加入这些内容，然后直接将文章首段的内容复制到description中即可。</p></li></ol><p><strong>PS：3个标签按重要性来分：title＞description＞keywords</strong></p><h2 id="其他优化技巧"><a href="#其他优化技巧" class="headerlink" title="其他优化技巧"></a>其他优化技巧</h2><p>1）标签语义化 2）一个页面中的H1标签只能使用一次 3）img标签都要设置 alt 属性，在这个属性中声明当前图片的信息（spider不能收录图片，但是可以抓取到图片alt属性的值） 4）HTML的层级不要太深的层级，蜘蛛可能不会抓取和收录 5）把需要推广的关键词尽可能的在页面中曝光（最好都写在H（2~6）标签中） </p>]]></content:encoded>
      
      <comments>http://mydearest.cn/seo.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>JavaScript整理总结</title>
      <link>http://mydearest.cn/jssummary.html</link>
      <guid>http://mydearest.cn/jssummary.html</guid>
      <pubDate>Thu, 21 Jun 2018 11:37:27 GMT</pubDate>
      <description>
      
        &lt;p&gt;JS的相关知识点比较繁杂，特此开篇整理一波，方便回顾总结查阅。&lt;/p&gt;
&lt;hr&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>JS的相关知识点比较繁杂，特此开篇整理一波，方便回顾总结查阅。</p><hr><a id="more"></a><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>JavaScript 是一门跨平台、面向对象、基于原型的轻量级动态脚本语言。</p><p>与java的对比：</p><table><thead><tr><th style="text-align:left">JavaScript</th><th style="text-align:left">Java</th></tr></thead><tbody><tr><td style="text-align:left">面向对象。不区分对象类型。通过原型机制继承，任何对象的属性和方法均可以被动态添加。</td><td style="text-align:left">基于类系统。分为类和实例，通过类层级的定义实现继承。不能动态增加对象或类的属性或方法。</td></tr><tr><td style="text-align:left">变量类型不需要提前声明(动态类型)。</td><td style="text-align:left">变量类型必须提前声明(静态类型)。</td></tr><tr><td style="text-align:left">不能直接自动写入硬盘。</td><td style="text-align:left">可以直接自动写入硬盘。</td></tr></tbody></table><h2 id="变量声明"><a href="#变量声明" class="headerlink" title="变量声明"></a>变量声明</h2><h3 id="var-存在变量提升"><a href="#var-存在变量提升" class="headerlink" title="var(存在变量提升)"></a>var(存在变量提升)</h3><p>声明一个变量，可赋一个初始化值。</p><h3 id="let-let-同一变量在同一作用域不能同时声明"><a href="#let-let-同一变量在同一作用域不能同时声明" class="headerlink" title="let(let 同一变量在同一作用域不能同时声明)"></a>let(let 同一变量在同一作用域不能同时声明)</h3><p>声明一个块作用域的局部变量，可赋一个初始化值。</p><h3 id="const-const-声明时必须赋初始值-也不可以在脚本运行时重新声明"><a href="#const-const-声明时必须赋初始值-也不可以在脚本运行时重新声明" class="headerlink" title="const(const 声明时必须赋初始值,也不可以在脚本运行时重新声明)"></a>const(const 声明时必须赋初始值,也不可以在脚本运行时重新声明)</h3><p>声明一个块作用域的只读的命名常量。const声明创建一个值的只读引用。但这并不意味着它所持有的值是不可变的，只是变量标识符不能重新分配。如const a=[1,2,3] a[1]=4; const b={} b.name=”1” 数组元素和对象属性不受保护。</p><h2 id="变量的作用域"><a href="#变量的作用域" class="headerlink" title="变量的作用域"></a>变量的作用域</h2><p>在所有函数之外声明的变量，叫做全局变量，因为它可被当前文档中的任何其他代码所访问。在函数内部声明的变量，叫做局部变量，因为它只能在该函数内部访问。全区变量是全局对象的属性，在浏览器中可以用window.xx或xx来访问。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> a=<span class="number">5</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a) <span class="comment">// 5 使用let声明块级则是undefined</span></span><br></pre></td></tr></table></figure></p><h2 id="变量提升"><a href="#变量提升" class="headerlink" title="变量提升"></a>变量提升</h2><p>JavaScript 变量的另一特别之处是，你可以引用稍后声明的变量而不会引发异常。这一概念称为变量声明提升(hoisting)；var ok ; let 和 const 则不会存在变量提升</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span></span><br><span class="line"><span class="built_in">console</span>.log(x === <span class="literal">undefined</span>); <span class="comment">// true</span></span><br><span class="line"><span class="keyword">var</span> x = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span></span><br><span class="line"><span class="keyword">var</span> myvar = <span class="string">"my value"</span>;</span><br><span class="line"></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(myvar); <span class="comment">// undefined</span></span><br><span class="line">  <span class="keyword">var</span> myvar = <span class="string">"local value"</span>;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="number">1.1</span> 也可写作</span><br><span class="line"><span class="keyword">var</span> x;</span><br><span class="line"><span class="built_in">console</span>.log(x === <span class="literal">undefined</span>); <span class="comment">// true</span></span><br><span class="line">x = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="number">2.1</span></span><br><span class="line"><span class="keyword">var</span> myvar = <span class="string">"my value"</span>;</span><br><span class="line"> </span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> myvar;</span><br><span class="line">  <span class="built_in">console</span>.log(myvar); <span class="comment">// undefined</span></span><br><span class="line">  myvar = <span class="string">"local value"</span>;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h2 id="函数提升"><a href="#函数提升" class="headerlink" title="函数提升"></a>函数提升</h2><p>声明函数的两种方式：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;&#125; <span class="comment">// 函数声明 存在函数提升且大于变量提升</span></span><br><span class="line"><span class="keyword">var</span> foo=<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;&#125; <span class="comment">// 函数表达式 var foo=function foo1()&#123;&#125; 函数名可写</span></span><br></pre></td></tr></table></figure></p><p>此时的3种递归调用自身的方式 </p><ul><li>foo()</li><li>foo1()</li><li>arguments.callee() </li></ul><p>现在已经不推荐使用arguments.callee()；原因：访问 arguments 是个很昂贵的操作，因为它是个很大的对象，每次递归调用时都需要重新创建。影响现代浏览器的性能，还会影响闭包。</p><h2 id="数据类型-7种"><a href="#数据类型-7种" class="headerlink" title="数据类型 7种"></a>数据类型 7种</h2><h3 id="原始类型"><a href="#原始类型" class="headerlink" title="原始类型"></a>原始类型</h3><ul><li>Boolean</li><li>null</li><li>undefined</li><li>String </li><li>Number 标识范围 -2^53~2^53-1 数字均为双精度浮点类型</li><li>Symbol(它的实例是唯一且不可改变)<h3 id="对象Object"><a href="#对象Object" class="headerlink" title="对象Object"></a>对象Object</h3>对象被定义为“无序属性的集合，其属性可以包含基本值，对象或者函数”。</li></ul><p>只有null和undefined无法拥有方法<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="literal">null</span> === <span class="string">'object'</span> <span class="comment">// true</span></span><br><span class="line"><span class="literal">null</span> <span class="keyword">instanceof</span> <span class="built_in">Object</span> <span class="comment">// false </span></span><br><span class="line"><span class="literal">null</span> <span class="keyword">instanceof</span> <span class="literal">null</span> <span class="comment">// error</span></span><br></pre></td></tr></table></figure></p><h2 id="字面量"><a href="#字面量" class="headerlink" title="字面量"></a>字面量</h2><p>字面量是由语法表达式定义的常量</p><ul><li>数组字面量(Array literals) []</li><li>布尔字面量(Boolean literals) true/false</li><li>浮点数字面量(Floating-point literals) 3.14</li><li>整数(Intergers) 5 </li><li>对象字面量(Object literals) {}</li><li>RegExp literals 一个正则表达式是字符被斜线（译注：正斜杠“/”）围成的表达式 /a+b/ </li><li>字符串字面量(String literals) “1212” ‘1212’JavaScript会自动将字符串字面值转换为一个临时字符串对象，调用该方法，然后废弃掉那个临时的字符串对象。你也能用对字符串字面值使用类似</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span>.length的属性：</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"John's cat"</span>.length)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj=&#123;</span><br><span class="line">  say:funciton()&#123;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 简写</span></span><br><span class="line">  say()&#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>十进制整数字面量由一串数字序列组成，且没有前缀0。八进制的整数以 0（或0O、0o）开头，只能包括数字0-7。十六进制整数以0x（或0X）开头，可以包含数字（0-9）和字母 a~f 或 A~F。二进制整数以0b（或0B）开头，只能包含数字0和1。</p><h2 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">"Bob"</span>, time = <span class="string">"today"</span>;</span><br><span class="line"><span class="string">`Hello <span class="subst">$&#123;name&#125;</span>, how are you <span class="subst">$&#123;time&#125;</span>?`</span></span><br></pre></td></tr></table></figure><h2 id="布尔环境的假值"><a href="#布尔环境的假值" class="headerlink" title="布尔环境的假值"></a>布尔环境的假值</h2><ul><li>false</li><li>undefined</li><li>null</li><li>0</li><li>NaN</li><li>空字符串（””）</li></ul><h2 id="try-catch"><a href="#try-catch" class="headerlink" title="try-catch"></a>try-catch</h2><p>如果finally块返回一个值，该值会是整个try-catch-finally流程的返回值，不管在try和catch块中语句返回了什么：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">throw</span> <span class="string">"bogus"</span>;</span><br><span class="line">  &#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">// this return statement is suspended</span></span><br><span class="line">                 <span class="comment">// until finally block has completed</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>); <span class="comment">// not reachable</span></span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">3</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// overwrites the previous "return"</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">4</span>); <span class="comment">// not reachable</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// "return false" is executed now  </span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">5</span>); <span class="comment">// not reachable</span></span><br><span class="line">&#125;</span><br><span class="line">f(); <span class="comment">// console 0, 1, 3; returns false</span></span><br></pre></td></tr></table></figure></p><h2 id="for-of-和-for-in循环"><a href="#for-of-和-for-in循环" class="headerlink" title="for of 和 for in循环"></a>for of 和 for in循环</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>];</span><br><span class="line">arr.foo = <span class="string">"hello"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> arr) &#123;</span><br><span class="line">   <span class="built_in">console</span>.log(i); <span class="comment">// logs "0", "1", "2", "foo"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 所有可枚举的属性名</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">of</span> arr) &#123;</span><br><span class="line">   <span class="built_in">console</span>.log(i); <span class="comment">// logs "3", "5", "7" // 注意这里没有 hello</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="嵌套函数和闭包"><a href="#嵌套函数和闭包" class="headerlink" title="嵌套函数和闭包"></a>嵌套函数和闭包</h2><p>一个闭包是一个可以自己拥有独立的环境与变量的的表达式。</p><ul><li>内部函数包含外部函数的作用域。</li><li>内部函数只可以在外部函数中访问。</li><li>内部函数可以访问外部函数的参数和变量，但是外部函数却不能使用它的参数和变量。</li></ul><h2 id="多层嵌套函数"><a href="#多层嵌套函数" class="headerlink" title="多层嵌套函数"></a>多层嵌套函数</h2><p>函数可以被多层嵌套。例如，函数A可以包含函数B，函数B可以再包含函数C。B和C都形成了闭包，所以B可以访问A，C可以访问B和A。因此，闭包可以包含多个作用域；他们递归式的包含了所有包含它的函数作用域。这个称之为作用域链。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">B</span>(<span class="params">y</span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">C</span>(<span class="params">z</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(x + y + z);</span><br><span class="line">    &#125;</span><br><span class="line">    C(<span class="number">3</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  B(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line">A(<span class="number">1</span>); <span class="comment">// logs 6 (1 + 2 + 3)</span></span><br></pre></td></tr></table></figure></p><p>在这个例子里面，C可以访问B的y和A的x。这是因为：</p><ol><li>B形成了一个包含A的闭包，B可以访问A的参数和变量</li><li>C形成了一个包含B的闭包</li><li>B包含A，所以C也包含A，C可以访问B和A的参数和变量。换言之，C用这个顺序链接了B和A的作用域</li></ol><p>反过来却不是这样。A不能访问C，因为A看不到B中的参数和变量，C是B中的一个变量，所以C是B私有的。</p><h2 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h2><p>当同一个闭包作用域下两个参数或者变量同名时，就会产生命名冲突。更近的作用域有更高的优先权，所以最近的优先级最高，最远的优先级最低。这就是作用域链。链的第一个元素就是最里面的作用域，最后一个元素便是最外层的作用域。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">outside</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> x = <span class="number">5</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">inside</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x * <span class="number">2</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> inside;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">outside()(<span class="number">10</span>); <span class="comment">// returns 20 instead of 10</span></span><br></pre></td></tr></table></figure></p><p>命名冲突发生在return x上，inside的参数x和outside变量x发生了冲突。这里的作用链域是{inside, outside, 全局对象}。因此inside的x具有最高优先权，返回了20（inside的x）而不是10（outside的x）。</p><h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><p>JavaScript 允许函数嵌套，并且内部函数可以访问定义在外部函数中的所有变量和函数，以及外部函数能访问的所有变量和函数。但是，外部函数却不能够访问定义在内部函数中的变量和函数。这给内部函数的变量提供了一定的安全性。此外，由于内部函数可以访问外部函数的作用域，因此当内部函数生存周期大于外部函数时，外部函数中定义的变量和函数将的生存周期比内部函数执行时间长。当内部函数以某一种方式被任何一个外部函数作用域访问时，一个闭包就产生了。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> pet = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;          <span class="comment">//外部函数定义了一个变量"name"</span></span><br><span class="line">  <span class="keyword">var</span> getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;            </span><br><span class="line">    <span class="comment">//内部函数可以访问 外部函数定义的"name"</span></span><br><span class="line">    <span class="keyword">return</span> name; </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//返回这个内部函数，从而将其暴露在外部函数作用域</span></span><br><span class="line">  <span class="keyword">return</span> getName;               </span><br><span class="line">&#125;;</span><br><span class="line">myPet = pet(<span class="string">"Vivie"</span>);</span><br><span class="line">    </span><br><span class="line">myPet();                            <span class="comment">// 返回结果 "Vivie"</span></span><br></pre></td></tr></table></figure></p><h2 id="arguments-对象"><a href="#arguments-对象" class="headerlink" title="arguments 对象"></a>arguments 对象</h2><p>函数的实际参数会被保存在一个类似数组的arguments对象中。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">arguments</span>[i] <span class="comment">// 访问</span></span><br></pre></td></tr></table></figure></p><p>arguments变量只是 ”类数组对象“，并不是一个数组。称其为类数组对象是说它有一个索引编号和length属性。尽管如此，它并不拥有全部的Array对象的操作方法。</p><h2 id="函数参数-默认参数、剩余参数-rest"><a href="#函数参数-默认参数、剩余参数-rest" class="headerlink" title="函数参数(默认参数、剩余参数(rest))"></a>函数参数(默认参数、剩余参数(rest))</h2><p>剩余参数语法允许将不确定数量的参数表示为数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">multiply</span>(<span class="params">a, b = <span class="number">1</span>,...[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a*b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h2><p>箭头函数总是匿名的引入箭头函数的原因</p><ol><li>更简洁的语法</li><li>捕捉闭包上下文的this值<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.age = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.age++; <span class="comment">// |this| properly refers to the person object</span></span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> Person();</span><br></pre></td></tr></table></figure></li></ol><h2 id="扩展语句"><a href="#扩展语句" class="headerlink" title="扩展语句"></a>扩展语句</h2><p>适用于对象，数组<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x, y, z</span>) </span>&#123; &#125;</span><br><span class="line"><span class="keyword">var</span> args = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line">f(...args);</span><br></pre></td></tr></table></figure></p><h2 id="临时对象"><a href="#临时对象" class="headerlink" title="临时对象"></a>临时对象</h2><p>你可以在String字面值上使用String对象的任何方法—JavaScript自动把String字面值转换为一个临时的String对象, 然后调用其相应方法,最后丢弃销毁此临时对象.在String字面值上也可以使用String.length属性.<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s1 = <span class="string">"2 + 2"</span>; <span class="comment">// Creates a string literal value</span></span><br><span class="line"><span class="keyword">var</span> s2 = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">"2 + 2"</span>); <span class="comment">// Creates a String object</span></span><br><span class="line"><span class="built_in">eval</span>(s1); <span class="comment">// Returns the number 4</span></span><br><span class="line"><span class="built_in">eval</span>(s2); <span class="comment">// Returns the string "2 + 2"</span></span><br></pre></td></tr></table></figure></p><h2 id="数组方法"><a href="#数组方法" class="headerlink" title="数组方法"></a>数组方法</h2><h3 id="concat-连接两个数组并返回一个新的数组。"><a href="#concat-连接两个数组并返回一个新的数组。" class="headerlink" title="concat() 连接两个数组并返回一个新的数组。"></a>concat() 连接两个数组并返回一个新的数组。</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myArray = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span>);</span><br><span class="line">myArray = myArray.concat(<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>); </span><br><span class="line"><span class="comment">// myArray is now ["1", "2", "3", "a", "b", "c"]</span></span><br></pre></td></tr></table></figure><h3 id="join-将数组的所有元素连接成一个字符串。"><a href="#join-将数组的所有元素连接成一个字符串。" class="headerlink" title="join() 将数组的所有元素连接成一个字符串。"></a>join() 将数组的所有元素连接成一个字符串。</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myArray = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">"Wind"</span>, <span class="string">"Rain"</span>, <span class="string">"Fire"</span>);</span><br><span class="line"><span class="keyword">var</span> list = myArray.join(<span class="string">" - "</span>); <span class="comment">// list is "Wind - Rain - Fire"</span></span><br></pre></td></tr></table></figure><h3 id="push-在数组末尾添加一个或多个元素，并返回数组操作后的长度。"><a href="#push-在数组末尾添加一个或多个元素，并返回数组操作后的长度。" class="headerlink" title="push() 在数组末尾添加一个或多个元素，并返回数组操作后的长度。"></a>push() 在数组末尾添加一个或多个元素，并返回数组操作后的长度。</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myArray = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">"1"</span>, <span class="string">"2"</span>);</span><br><span class="line">myArray.push(<span class="string">"3"</span>); <span class="comment">// myArray is now ["1", "2", "3"]</span></span><br></pre></td></tr></table></figure><h3 id="pop-从数组移出最后一个元素，并返回该元素。"><a href="#pop-从数组移出最后一个元素，并返回该元素。" class="headerlink" title="pop() 从数组移出最后一个元素，并返回该元素。"></a>pop() 从数组移出最后一个元素，并返回该元素。</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myArray = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span>);</span><br><span class="line"><span class="keyword">var</span> last = myArray.pop(); </span><br><span class="line"><span class="comment">// myArray is now ["1", "2"], last = "3"</span></span><br></pre></td></tr></table></figure><h3 id="shift-从数组移出第一个元素，并返回该元素。"><a href="#shift-从数组移出第一个元素，并返回该元素。" class="headerlink" title="shift() 从数组移出第一个元素，并返回该元素。"></a>shift() 从数组移出第一个元素，并返回该元素。</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myArray = <span class="keyword">new</span> <span class="built_in">Array</span> (<span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span>);</span><br><span class="line"><span class="keyword">var</span> first = myArray.shift(); </span><br><span class="line"><span class="comment">// myArray is now ["2", "3"], first is "1"</span></span><br></pre></td></tr></table></figure><h3 id="unshift-在数组开头添加一个或多个元素，并返回数组的新长度。"><a href="#unshift-在数组开头添加一个或多个元素，并返回数组的新长度。" class="headerlink" title="unshift()在数组开头添加一个或多个元素，并返回数组的新长度。"></a>unshift()在数组开头添加一个或多个元素，并返回数组的新长度。</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myArray = <span class="keyword">new</span> <span class="built_in">Array</span> (<span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span>);</span><br><span class="line">myArray.unshift(<span class="string">"4"</span>, <span class="string">"5"</span>); </span><br><span class="line"><span class="comment">// myArray becomes ["4", "5", "1", "2", "3"]</span></span><br></pre></td></tr></table></figure><h3 id="slice-开始索引，结束索引-从数组提取一个片段，并作为一个新数组返回。"><a href="#slice-开始索引，结束索引-从数组提取一个片段，并作为一个新数组返回。" class="headerlink" title="slice(开始索引，结束索引) 从数组提取一个片段，并作为一个新数组返回。"></a>slice(开始索引，结束索引) 从数组提取一个片段，并作为一个新数组返回。</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myArray = <span class="keyword">new</span> <span class="built_in">Array</span> (<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>, <span class="string">"e"</span>);</span><br><span class="line">myArray = myArray.slice(<span class="number">1</span>, <span class="number">4</span>); <span class="comment">// until index 3, returning [ "b", "c", "d"]</span></span><br></pre></td></tr></table></figure><h3 id="splice-index-count-to-remove-addElement1-addElement2-…-从数组移出一些元素，（可选）并替换它们。"><a href="#splice-index-count-to-remove-addElement1-addElement2-…-从数组移出一些元素，（可选）并替换它们。" class="headerlink" title="splice(index, count_to_remove, addElement1, addElement2, …)从数组移出一些元素，（可选）并替换它们。"></a>splice(index, count_to_remove, addElement1, addElement2, …)从数组移出一些元素，（可选）并替换它们。</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myArray = <span class="keyword">new</span> <span class="built_in">Array</span> (<span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span>, <span class="string">"4"</span>, <span class="string">"5"</span>);</span><br><span class="line">myArray.splice(<span class="number">1</span>, <span class="number">3</span>, <span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>); </span><br><span class="line"><span class="comment">// myArray is now ["1", "a", "b", "c", "d", "5"]</span></span><br></pre></td></tr></table></figure><h3 id="reverse-颠倒数组元素的顺序：第一个变成最后一个，最后一个变成第一个。"><a href="#reverse-颠倒数组元素的顺序：第一个变成最后一个，最后一个变成第一个。" class="headerlink" title="reverse() 颠倒数组元素的顺序：第一个变成最后一个，最后一个变成第一个。"></a>reverse() 颠倒数组元素的顺序：第一个变成最后一个，最后一个变成第一个。</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myArray = <span class="keyword">new</span> <span class="built_in">Array</span> (<span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span>);</span><br><span class="line">myArray.reverse(); </span><br><span class="line"><span class="comment">// transposes the array so that myArray = [ "3", "2", "1" ]</span></span><br></pre></td></tr></table></figure><h3 id="sort-给数组元素排序。"><a href="#sort-给数组元素排序。" class="headerlink" title="sort() 给数组元素排序。"></a>sort() 给数组元素排序。</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>]</span><br><span class="line">arr.sort() <span class="comment">// [1,2,3]</span></span><br></pre></td></tr></table></figure><p>sort() 也可以带一个回调函数来决定怎么比较数组元素。这个回调函数比较两个值，并返回3个值中的一个：</p><ul><li>如果 a 小于 b ，返回 -1(或任何负数) 降序</li><li>如果 a 大于 b ，返回 1 (或任何正数) 升序</li><li>如果 a 和 b 相等，返回 0。</li></ul><h3 id="indexOf-searchElement-fromIndex-在数组中搜索searchElement-并返回第一个匹配的索引。"><a href="#indexOf-searchElement-fromIndex-在数组中搜索searchElement-并返回第一个匹配的索引。" class="headerlink" title="indexOf(searchElement[, fromIndex]) 在数组中搜索searchElement 并返回第一个匹配的索引。"></a>indexOf(searchElement[, fromIndex]) 在数组中搜索searchElement 并返回第一个匹配的索引。</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'a'</span>];</span><br><span class="line"><span class="built_in">console</span>.log(a.indexOf(<span class="string">'b'</span>)); <span class="comment">// logs 1</span></span><br><span class="line"><span class="comment">// Now try again, starting from after the last match</span></span><br><span class="line"><span class="built_in">console</span>.log(a.indexOf(<span class="string">'b'</span>, <span class="number">2</span>)); <span class="comment">// logs 3</span></span><br><span class="line"><span class="built_in">console</span>.log(a.indexOf(<span class="string">'z'</span>)); <span class="comment">// logs -1, because 'z' was not found</span></span><br></pre></td></tr></table></figure><h3 id="lastIndexOf-searchElement-fromIndex-和-indexOf-差不多，但这是从结尾开始，并且是反向搜索。"><a href="#lastIndexOf-searchElement-fromIndex-和-indexOf-差不多，但这是从结尾开始，并且是反向搜索。" class="headerlink" title="lastIndexOf(searchElement[, fromIndex]) 和 indexOf 差不多，但这是从结尾开始，并且是反向搜索。"></a>lastIndexOf(searchElement[, fromIndex]) 和 indexOf 差不多，但这是从结尾开始，并且是反向搜索。</h3><h3 id="forEach-循环数组-不定的顺序-不能用break-return-false跳出循环遍历"><a href="#forEach-循环数组-不定的顺序-不能用break-return-false跳出循环遍历" class="headerlink" title="forEach() 循环数组 不定的顺序 不能用break,return false跳出循环遍历"></a>forEach() 循环数组 不定的顺序 不能用break,return false跳出循环遍历</h3><h3 id="map-循环数组返回新数组"><a href="#map-循环数组返回新数组" class="headerlink" title="map() 循环数组返回新数组"></a>map() 循环数组返回新数组</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a1 = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>];</span><br><span class="line"><span class="keyword">var</span> a2 = a1.map(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123; <span class="keyword">return</span> item.toUpperCase(); &#125;);</span><br><span class="line"><span class="built_in">console</span>.log(a2); <span class="comment">// logs A,B,C</span></span><br></pre></td></tr></table></figure><h3 id="filter-循环数组返回符合条件的元素"><a href="#filter-循环数组返回符合条件的元素" class="headerlink" title="filter() 循环数组返回符合条件的元素"></a>filter() 循环数组返回符合条件的元素</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a1 = [<span class="string">'a'</span>, <span class="number">10</span>, <span class="string">'b'</span>, <span class="number">20</span>, <span class="string">'c'</span>, <span class="number">30</span>];</span><br><span class="line"><span class="keyword">var</span> a2 = a1.filter(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123; <span class="keyword">return</span> <span class="keyword">typeof</span> item == <span class="string">'number'</span>; &#125;);</span><br><span class="line"><span class="built_in">console</span>.log(a2); <span class="comment">// logs 10,20,30</span></span><br></pre></td></tr></table></figure><h3 id="every-循环数组-如果全部元素满足条件则返回true-否则返回false"><a href="#every-循环数组-如果全部元素满足条件则返回true-否则返回false" class="headerlink" title="every() 循环数组 如果全部元素满足条件则返回true 否则返回false"></a>every() 循环数组 如果全部元素满足条件则返回true 否则返回false</h3><h3 id="some-循环数组-只要有一项满足条件则返回true-全部不满足返回false"><a href="#some-循环数组-只要有一项满足条件则返回true-全部不满足返回false" class="headerlink" title="some() 循环数组 只要有一项满足条件则返回true 全部不满足返回false"></a>some() 循环数组 只要有一项满足条件则返回true 全部不满足返回false</h3><h3 id="reduce-迭代-使用回调函数-callback-firstValue-secondValue-把数组列表计算成一个单一值-reduceRight-从右边开始"><a href="#reduce-迭代-使用回调函数-callback-firstValue-secondValue-把数组列表计算成一个单一值-reduceRight-从右边开始" class="headerlink" title="reduce() 迭代 使用回调函数 callback(firstValue, secondValue) 把数组列表计算成一个单一值 reduceRight() 从右边开始"></a>reduce() 迭代 使用回调函数 callback(firstValue, secondValue) 把数组列表计算成一个单一值 reduceRight() 从右边开始</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>];</span><br><span class="line"><span class="keyword">var</span> total = a.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">first, second</span>) </span>&#123; <span class="keyword">return</span> first + second; &#125;, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">console</span>.log(total) <span class="comment">// Prints 60</span></span><br></pre></td></tr></table></figure><h2 id="Map简单的键值对集合"><a href="#Map简单的键值对集合" class="headerlink" title="Map简单的键值对集合"></a>Map简单的键值对集合</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sayings = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">sayings.set(<span class="string">'dog'</span>, <span class="string">'woof'</span>);</span><br><span class="line">sayings.set(<span class="string">'cat'</span>, <span class="string">'meow'</span>);</span><br><span class="line">sayings.set(<span class="string">'elephant'</span>, <span class="string">'toot'</span>);</span><br><span class="line">sayings.size; <span class="comment">// 3</span></span><br><span class="line">sayings.get(<span class="string">'fox'</span>); <span class="comment">// undefined</span></span><br><span class="line">sayings.has(<span class="string">'bird'</span>); <span class="comment">// false</span></span><br><span class="line">sayings.delete(<span class="string">'dog'</span>);</span><br><span class="line">sayings.has(<span class="string">'dog'</span>); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> [key, value] <span class="keyword">of</span> sayings) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(key + <span class="string">' goes '</span> + value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// "cat goes meow"</span></span><br><span class="line"><span class="comment">// "elephant goes toot"</span></span><br><span class="line"></span><br><span class="line">sayings.clear();</span><br><span class="line">sayings.size; <span class="comment">// 0</span></span><br></pre></td></tr></table></figure><p>new Map() 参数可以是一个数组或者其他 iterable 对象，其元素或为键值对，或为两个元素的数组。 每个键值对都会添加到新的 Map。null 会被当做 undefined。</p><p><strong>Object和Map的比较</strong></p><ol><li>一般地，objects会被用于将字符串类型映射到数值。Object允许设置键值对、根据键获取值、删除键、检测某个键是否存在。而Map具有更多的优势。</li><li>Object的键均为Strings类型，在Map里键可以是任意类型。</li><li>必须手动计算Object的尺寸，但是可以很容易地获取使用Map的尺寸。</li><li>Map的遍历遵循元素的插入顺序。</li><li>Object有原型，所以映射中有一些缺省的键。（可以理解为map = Object.create(null)）。</li></ol><p>如果键在运行时才能知道，或者所有的键类型相同，所有的值类型相同，那就使用Map。如果需要将原始值存储为键，则使用Map，因为Object将每个键视为字符串，不管它是一个数字值、布尔值还是任何其他原始值。如果需要对个别元素进行操作，使用Object。</p><h2 id="Set集合"><a href="#Set集合" class="headerlink" title="Set集合"></a>Set集合</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mySet = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">mySet.add(<span class="number">1</span>);</span><br><span class="line">mySet.add(<span class="string">"some text"</span>);</span><br><span class="line">mySet.add(<span class="string">"foo"</span>);</span><br><span class="line"></span><br><span class="line">mySet.has(<span class="number">1</span>); <span class="comment">// true</span></span><br><span class="line">mySet.delete(<span class="string">"foo"</span>);</span><br><span class="line">mySet.size; <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> mySet) <span class="built_in">console</span>.log(item);</span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// "some text"</span></span><br><span class="line"></span><br><span class="line">mySet2 = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">4</span>]);</span><br><span class="line"><span class="built_in">Array</span>.from(mySet);  <span class="comment">// [1,2,3] 常用来去重</span></span><br></pre></td></tr></table></figure><p><strong>Array和Set的比较</strong></p><ol><li>数组中用于判断元素是否存在的indexOf 函数效率低下。</li><li>Set对象允许根据值删除元素，而数组中必须使用基于下标的 splice 方法。</li><li>数组的indexOf方法无法找到NaN值。</li><li>Set对象存储不重复的值，所以不需要手动处理包含重复值的情况。</li><li>数组是特殊的对象,对象是关联数组 字符串是特殊的数组</li><li>方括弧取值为动态判定[]，数字非有效的js标识符   </li></ol><h2 id="setter和getter-get-set修饰function"><a href="#setter和getter-get-set修饰function" class="headerlink" title="setter和getter (get set修饰function)"></a>setter和getter (get set修饰function)</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">  a: <span class="number">7</span>,</span><br><span class="line">  get b() &#123; </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.a + <span class="number">1</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  set c(x) &#123;</span><br><span class="line">    <span class="keyword">this</span>.a = x / <span class="number">2</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(o.a); <span class="comment">// 7</span></span><br><span class="line"><span class="built_in">console</span>.log(o.b); <span class="comment">// 8 取b值时调用</span></span><br><span class="line">o.c = <span class="number">50</span>;         <span class="comment">// 给c设置值调用</span></span><br><span class="line"><span class="built_in">console</span>.log(o.a); <span class="comment">// 25</span></span><br><span class="line">-----------------------</span><br><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">  a: <span class="number">7</span>,</span><br><span class="line">  b:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.a + <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(o.b()); <span class="comment">// 8</span></span><br></pre></td></tr></table></figure><h2 id="访问所有可枚举对象属性"><a href="#访问所有可枚举对象属性" class="headerlink" title="访问所有可枚举对象属性"></a>访问所有可枚举对象属性</h2><ol><li>for in 无序</li><li>Object.keys() 不包括原型的属性名数组</li><li>Object.getOwnPropertyNames()</li></ol><h2 id="Symbol-原始数据类型-不可枚举的-符号类型"><a href="#Symbol-原始数据类型-不可枚举的-符号类型" class="headerlink" title="Symbol(原始数据类型) 不可枚举的 符号类型"></a>Symbol(原始数据类型) 不可枚举的 符号类型</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span>  myPrivateMethod  = <span class="built_in">Symbol</span>(); <span class="comment">// 不能使用new Symbol()创建，它是一个不完整的类</span></span><br><span class="line"><span class="keyword">this</span>[myPrivateMethod] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;...&#125;;</span><br></pre></td></tr></table></figure><p>for in 和 Object.getOwnPropertyNames()访问不到，只能通过myPrivateMethod或者Object.getOwnPropertySymbols()来访问<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Symbol</span>(<span class="string">"foo"</span>) !== <span class="built_in">Symbol</span>(<span class="string">"foo"</span>)</span><br><span class="line"><span class="keyword">const</span> foo = <span class="built_in">Symbol</span>()</span><br><span class="line"><span class="keyword">const</span> bar = <span class="built_in">Symbol</span>()</span><br><span class="line"><span class="keyword">typeof</span> foo === <span class="string">"symbol"</span></span><br><span class="line"><span class="keyword">typeof</span> bar === <span class="string">"symbol"</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;&#125;</span><br><span class="line">obj[foo] = <span class="string">"foo"</span></span><br><span class="line">obj[bar] = <span class="string">"bar"</span></span><br><span class="line"><span class="built_in">JSON</span>.stringify(obj) <span class="comment">// &#123;&#125;</span></span><br><span class="line"><span class="built_in">Object</span>.keys(obj) <span class="comment">// []</span></span><br><span class="line"><span class="built_in">Object</span>.getOwnPropertyNames(obj) <span class="comment">// []</span></span><br><span class="line"><span class="built_in">Object</span>.getOwnPropertySymbols(obj) <span class="comment">// [ foo, bar ]</span></span><br></pre></td></tr></table></figure></p><h2 id="Proxy-代理"><a href="#Proxy-代理" class="headerlink" title="Proxy 代理"></a>Proxy 代理</h2><p><code>let p= new Proxy(target,handler)</code></p><ul><li><p>target用Proxy包装的目标对象（可以是任何类型的对象，包括原生数组，函数，甚至另一个代理）。</p></li><li><p>handler一个对象，其属性是当执行一个操作时定义代理的行为的函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置缺省值</span></span><br><span class="line"><span class="keyword">let</span> handler = &#123;</span><br><span class="line">    get: <span class="function"><span class="keyword">function</span>(<span class="params">target, name</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name <span class="keyword">in</span> target ? target[name] : <span class="number">37</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> <span class="built_in">Proxy</span>(&#123;&#125;, handler);</span><br><span class="line"></span><br><span class="line">p.a = <span class="number">1</span>;</span><br><span class="line">p.b = <span class="literal">undefined</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(p.a, p.b);    <span class="comment">// 1, undefined</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'c'</span> <span class="keyword">in</span> p, p.c);    <span class="comment">// false, 37</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 转发代理</span></span><br><span class="line"><span class="keyword">let</span> target = &#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> <span class="built_in">Proxy</span>(target, &#123;&#125;);</span><br><span class="line"></span><br><span class="line">p.a = <span class="number">37</span>;   <span class="comment">// 操作转发到目标</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(target.a);    <span class="comment">// 37. 操作已经被正确地转发</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// demo</span></span><br><span class="line"><span class="keyword">let</span> book  = &#123;<span class="string">"name"</span>:<span class="string">"《ES6基础系列》"</span>,<span class="string">"price"</span>:<span class="number">56</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(book,&#123;</span><br><span class="line">    get:<span class="function"><span class="keyword">function</span>(<span class="params">target,property</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(property === <span class="string">"name"</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"《入门到懵逼》"</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> target[property];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    set:<span class="function"><span class="keyword">function</span>(<span class="params">target,property,value</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(property === <span class="string">'price'</span>)&#123;</span><br><span class="line">            target[property] = <span class="number">56</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h2 id="生成器-generator"><a href="#生成器-generator" class="headerlink" title="生成器 generator"></a>生成器 generator</h2><p>function* 来修饰GeneratorFunction函数<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">idMaker</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> index = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span>(<span class="literal">true</span>)</span><br><span class="line">    <span class="keyword">yield</span> index++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> gen = idMaker();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(gen.next().value); <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">console</span>.log(gen.next().value); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(gen.next().value); <span class="comment">// 2</span></span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure></p><p>对象实现迭代行为<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myIterable = &#123;&#125;;</span><br><span class="line">myIterable[<span class="built_in">Symbol</span>.iterator] = <span class="function"><span class="keyword">function</span>* (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">3</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> myIterable) &#123; </span><br><span class="line">    <span class="built_in">console</span>.log(value); </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line">or</span><br><span class="line"></span><br><span class="line">[...myIterable]; <span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure></p>]]></content:encoded>
      
      <comments>http://mydearest.cn/jssummary.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>redux状态传播</title>
      <link>http://mydearest.cn/reduxstate.html</link>
      <guid>http://mydearest.cn/reduxstate.html</guid>
      <pubDate>Thu, 21 Jun 2018 11:37:18 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;要有内容不然搜索会挂&lt;/p&gt;

        
      
      </description>
      
      <content:encoded><![CDATA[<p>要有内容不然搜索会挂</p>]]></content:encoded>
      
      <comments>http://mydearest.cn/reduxstate.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>响应式网页设计</title>
      <link>http://mydearest.cn/responsive.html</link>
      <guid>http://mydearest.cn/responsive.html</guid>
      <pubDate>Tue, 19 Jun 2018 17:33:47 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;什么是响应式网站&quot;&gt;&lt;a href=&quot;#什么是响应式网站&quot; class=&quot;headerlink&quot; title=&quot;什么是响应式网站&quot;&gt;&lt;/a&gt;什么是响应式网站&lt;/h2&gt;&lt;p&gt;响应式布局是Ethan Marcotte在2010年5月份提出的一个概念，简而言之，就是一个网站能够兼容多个终端——而不是为每个终端做一个特定的版本。这个概念是为解决移动互联网浏览而诞生的。&lt;/p&gt;
&lt;hr&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="什么是响应式网站"><a href="#什么是响应式网站" class="headerlink" title="什么是响应式网站"></a>什么是响应式网站</h2><p>响应式布局是Ethan Marcotte在2010年5月份提出的一个概念，简而言之，就是一个网站能够兼容多个终端——而不是为每个终端做一个特定的版本。这个概念是为解决移动互联网浏览而诞生的。</p><hr><a id="more"></a><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul><li>面对不同分辨率设备灵活性强</li><li>能够快捷解决多设备显示适应问题</li></ul><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ul><li>兼容各种设备工作量大，效率低下</li><li>代码累赘，会出现隐藏无用的元素，加载时间加长</li><li>其实这是一种折中性质的设计解决方案，多方面因素影响而达不到最佳效果</li><li>一定程度上改变了网站原有的布局结构，会出现用户混淆的情况</li></ul><h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><p>谷歌教程用HTML5以及CSS3的媒体查询完成了一个响应式布局的demo，大家可以用不同的尺寸的设备，查看不同分辨率下的表现。也可以在控制台模拟各种设备，欢迎大家提出意见。</p><p>在线地址：<a href="http://dir.mydearest.cn/responsive/" target="_blank" rel="noopener">http://dir.mydearest.cn/responsive/</a></p>]]></content:encoded>
      
      <comments>http://mydearest.cn/responsive.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>有趣的摧毁页面</title>
      <link>http://mydearest.cn/destory.html</link>
      <guid>http://mydearest.cn/destory.html</guid>
      <pubDate>Tue, 19 Jun 2018 17:14:13 GMT</pubDate>
      <description>
      
        &lt;p&gt;食用方法&lt;/p&gt;
&lt;p&gt;使用【上下左右键】来控制飞行器的运动&lt;/p&gt;
&lt;p&gt;使用【空格键】来发射导弹&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;javascript:var%20KICKASSVERSION=&#39;2.0&#39;; var%20s%20=%20document.createElement(&#39;script&#39;); s.type=&#39;text/javascript&#39;; document.body.appendChild(s); s.src=&#39;//hi.kickassapp.com/kickass.js&#39;; void(0);&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt; 点击开始摧毁 &lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>食用方法</p><p>使用【上下左右键】来控制飞行器的运动</p><p>使用【空格键】来发射导弹</p><p><a href="javascript:var%20KICKASSVERSION='2.0'; var%20s%20=%20document.createElement('script'); s.type='text/javascript'; document.body.appendChild(s); s.src='//hi.kickassapp.com/kickass.js'; void(0);" target="_blank" rel="noopener"> 点击开始摧毁 </a></p><hr><a id="more"></a><p>引入JS代码<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=<span class="string">"javascript:var%20KICKASSVERSION='2.0'; </span></span><br><span class="line"><span class="string">var%20s%20=%20document.createElement('script'); </span></span><br><span class="line"><span class="string">s.type='text/javascript'; document.body.appendChild(s); </span></span><br><span class="line"><span class="string">s.src='//hi.kickassapp.com/kickass.js'; void(0);"</span>&gt; 点击开始摧毁 &lt;<span class="regexp">/a&gt;</span></span><br></pre></td></tr></table></figure></p><p>页面崩溃<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> total = <span class="string">""</span>; </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123; </span><br><span class="line">    total = total + i.toString(); </span><br><span class="line">    history.pushState(<span class="number">0</span>, <span class="number">0</span>, total); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>转动吧，风扇！！！</p>]]></content:encoded>
      
      <comments>http://mydearest.cn/destory.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>console控制台优化</title>
      <link>http://mydearest.cn/console.html</link>
      <guid>http://mydearest.cn/console.html</guid>
      <pubDate>Mon, 18 Jun 2018 12:07:08 GMT</pubDate>
      <description>
      
        &lt;p&gt;谷歌开发者中心上面关于谷歌浏览器控制台console.log()的文档：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;格式说明符&lt;/th&gt;
&lt;th style=&quot;text-align:right&quot;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;%s&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;将值格式化为字符串。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;%d?or?%i&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;将值格式化为整数。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;%f&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;将值格式化为浮点值。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;%o&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;将值格式化为可扩展的DOM元素（如在元素面板中）。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;%O&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;将值格式化为可扩展的JavaScript对象。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;%c&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;根据您提供的CSS样式格式化输出字符串。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;\n是换行，可以将一个字符串设置成多行
%c标记之后的内容使用对应样式，格式如 console.log(‘%c第一个样式%c第二个样式’,’css1′,’css2′); 如此对应
样式和普通的css效果基本一致，可以设置文字颜色，背景颜色，字体大小，间距，边距等等。还支持部分css3高级效果。&lt;/p&gt;
&lt;hr&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>谷歌开发者中心上面关于谷歌浏览器控制台console.log()的文档：</p><table><thead><tr><th style="text-align:left">格式说明符</th><th style="text-align:right">描述</th></tr></thead><tbody><tr><td style="text-align:left">%s</td><td style="text-align:right">将值格式化为字符串。</td></tr><tr><td style="text-align:left">%d?or?%i</td><td style="text-align:right">将值格式化为整数。</td></tr><tr><td style="text-align:left">%f</td><td style="text-align:right">将值格式化为浮点值。</td></tr><tr><td style="text-align:left">%o</td><td style="text-align:right">将值格式化为可扩展的DOM元素（如在元素面板中）。</td></tr><tr><td style="text-align:left">%O</td><td style="text-align:right">将值格式化为可扩展的JavaScript对象。</td></tr><tr><td style="text-align:left">%c</td><td style="text-align:right">根据您提供的CSS样式格式化输出字符串。</td></tr></tbody></table><p>\n是换行，可以将一个字符串设置成多行%c标记之后的内容使用对应样式，格式如 console.log(‘%c第一个样式%c第二个样式’,’css1′,’css2′); 如此对应样式和普通的css效果基本一致，可以设置文字颜色，背景颜色，字体大小，间距，边距等等。还支持部分css3高级效果。</p><hr><a id="more"></a><h2 id="3D字体效果-Text"><a href="#3D字体效果-Text" class="headerlink" title="3D字体效果 Text"></a>3D字体效果 Text</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;<span class="built_in">console</span>.log(<span class="string">"%c3D Text"</span>,<span class="string">" text-shadow: 0 1px 0 #ccc,0 2px 0 #c9c9c9,0 3px 0 #bbb,0 4px 0 #b9b9b9,0 5px 0 #aaa,0 6px 1px rgba(0,0,0,.1),0 0 5px rgba(0,0,0,.1),0 1px 3px rgba(0,0,0,.3),0 3px 5px rgba(0,0,0,.2),0 5px 10px rgba(0,0,0,.25),0 10px 10px rgba(0,0,0,.2),0 20px 20px rgba(0,0,0,.15);font-size:5em"</span>)&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Colorful彩色背景-CSS"><a href="#Colorful彩色背景-CSS" class="headerlink" title="Colorful彩色背景 CSS"></a>Colorful彩色背景 CSS</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;<span class="built_in">console</span>.log(<span class="string">"%cColorful CSS"</span>,<span class="string">"background: rgba(252,234,187,1);background: -moz-linear-gradient(left, rgba(252,234,187,1) 0%, rgba(175,250,77,1) 12%, rgba(0,247,49,1) 28%, rgba(0,210,247,1) 39%,rgba(0,189,247,1) 51%, rgba(133,108,217,1) 64%, rgba(177,0,247,1) 78%, rgba(247,0,189,1) 87%, rgba(245,22,52,1) 100%);background: -webkit-gradient(left top, right top, color-stop(0%, rgba(252,234,187,1)), color-stop(12%, rgba(175,250,77,1)), color-stop(28%, rgba(0,247,49,1)), color-stop(39%, rgba(0,210,247,1)), color-stop(51%, rgba(0,189,247,1)), color-stop(64%, rgba(133,108,217,1)), color-stop(78%, rgba(177,0,247,1)), color-stop(87%, rgba(247,0,189,1)), color-stop(100%, rgba(245,22,52,1)));background: -webkit-linear-gradient(left, rgba(252,234,187,1) 0%, rgba(175,250,77,1) 12%, rgba(0,247,49,1) 28%, rgba(0,210,247,1) 39%, rgba(0,189,247,1) 51%, rgba(133,108,217,1) 64%, rgba(177,0,247,1) 78%, rgba(247,0,189,1) 87%, rgba(245,22,52,1) 100%);background: -o-linear-gradient(left, rgba(252,234,187,1) 0%, rgba(175,250,77,1) 12%, rgba(0,247,49,1) 28%, rgba(0,210,247,1) 39%, rgba(0,189,247,1) 51%, rgba(133,108,217,1) 64%, rgba(177,0,247,1) 78%, rgba(247,0,189,1) 87%, rgba(245,22,52,1) 100%);background: -ms-linear-gradient(left, rgba(252,234,187,1) 0%, rgba(175,250,77,1) 12%, rgba(0,247,49,1) 28%, rgba(0,210,247,1) 39%, rgba(0,189,247,1) 51%, rgba(133,108,217,1) 64%, rgba(177,0,247,1) 78%, rgba(247,0,189,1) 87%, rgba(245,22,52,1) 100%);background: linear-gradient(to right, rgba(252,234,187,1) 0%, rgba(175,250,77,1) 12%, rgba(0,247,49,1) 28%, rgba(0,210,247,1) 39%, rgba(0,189,247,1) 51%, rgba(133,108,217,1) 64%, rgba(177,0,247,1) 78%, rgba(247,0,189,1) 87%, rgba(245,22,52,1) 100%);filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#fceabb', endColorstr='#f51634', GradientType=1 );font-size:5em"</span>)&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Rainbow彩虹字-Text"><a href="#Rainbow彩虹字-Text" class="headerlink" title="Rainbow彩虹字 Text"></a>Rainbow彩虹字 Text</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;<span class="built_in">console</span>.log(<span class="string">'%cRainbow Text '</span>, <span class="string">'background-image:-webkit-gradient( linear, left top, right top, color-stop(0, #f22), color-stop(0.15, #f2f), color-stop(0.3, #22f), color-stop(0.45, #2ff), color-stop(0.6, #2f2),color-stop(0.75, #2f2), color-stop(0.9, #ff2), color-stop(1, #f22) );color:transparent;-webkit-background-clip: text;font-size:5em;'</span>);&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="在Chrome控制台输出图片"><a href="#在Chrome控制台输出图片" class="headerlink" title="在Chrome控制台输出图片"></a>在Chrome控制台输出图片</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;<span class="built_in">console</span>.log(<span class="string">"%c"</span>, <span class="string">"padding:50px 700px;line-height:120px;background:url('http://wx1.sinaimg.cn/large/ba098b64ly1fjz4j8pju5j20p002sgm4.jpg') no-repeat;"</span>);&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"%c%c源码作者%ccosyer chenyu@mydearest.cn"</span>, <span class="string">"line-height:26px;"</span>, <span class="string">"line-height:16px;padding:2px 6px;border-radius: 5px 0px 0px 5px;background:#35495e;color:#fff;font-size:12px;"</span>, <span class="string">"padding:2px 8px;background:#0093ff;color:#fff;line-height:16px;font-size:12px;border-radius: 0px 5px 5px 0px;"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"%c%c网站地址%chttps://mydearest.cn"</span>, <span class="string">"line-height:26px;"</span>, <span class="string">"line-height:16px;padding:2px 6px;border-radius: 5px 0px 0px 5px;background:#35495e;color:#fff;font-size:12px;"</span>, <span class="string">"padding:2px 8px;background:#0093ff;color:#fff;line-height:16px;font-size:12px;border-radius: 0px 5px 5px 0px;"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"%c%cgithub%https://github.com/cosyer"</span>, <span class="string">"line-height:26px;"</span>, <span class="string">"line-height:16px;padding:2px 6px;border-radius: 5px 0px 0px 5px;background:#35495e;color:#fff;font-size:12px;"</span>, <span class="string">"padding:2px 8px;background:#0093ff;color:#fff;line-height:16px;font-size:12px;border-radius: 0px 5px 5px 0px;"</span>);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p><a href="https://icomoon.io/" target="_blank" rel="noopener">https://icomoon.io/</a></p><p><a href="https://zh-cn.cooltext.com/" target="_blank" rel="noopener">https://zh-cn.cooltext.com/</a></p><p><a href="https://www.logaster.cn/logo/#logos" target="_blank" rel="noopener">https://www.logaster.cn/logo/#logos</a></p><p><a href="http://www.logoko.com.cn/design" target="_blank" rel="noopener">http://www.logoko.com.cn/design</a></p><p><a href="http://www.beipy.com/335.html" target="_blank" rel="noopener">http://www.beipy.com/335.html</a></p>]]></content:encoded>
      
      <comments>http://mydearest.cn/console.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>JavaScript停止冒泡和阻止浏览器默认行为</title>
      <link>http://mydearest.cn/bubble.html</link>
      <guid>http://mydearest.cn/bubble.html</guid>
      <pubDate>Mon, 18 Jun 2018 11:16:48 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;防止冒泡&quot;&gt;&lt;a href=&quot;#防止冒泡&quot; class=&quot;headerlink&quot; title=&quot;防止冒泡&quot;&gt;&lt;/a&gt;防止冒泡&lt;/h2&gt;&lt;p&gt;w3c的方法是e.stopPropagation()，IE则是使用e.cancelBubble = true&lt;/p&gt;
&lt;p&gt;stopPropagation也是事件对象(Event)的一个方法，作用是阻止目标元素的冒泡事件，但是会不阻止默认行为。什么是冒泡事件？如在一个按钮是绑定一个”click”事件，那么”click”事件会依次在它的父级元素中被触发 。stopPropagation就是阻止目标元素的事件冒泡到父级元素。&lt;/p&gt;
&lt;hr&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="防止冒泡"><a href="#防止冒泡" class="headerlink" title="防止冒泡"></a>防止冒泡</h2><p>w3c的方法是e.stopPropagation()，IE则是使用e.cancelBubble = true</p><p>stopPropagation也是事件对象(Event)的一个方法，作用是阻止目标元素的冒泡事件，但是会不阻止默认行为。什么是冒泡事件？如在一个按钮是绑定一个”click”事件，那么”click”事件会依次在它的父级元素中被触发 。stopPropagation就是阻止目标元素的事件冒泡到父级元素。</p><hr><a id="more"></a><h2 id="阻止默认行为"><a href="#阻止默认行为" class="headerlink" title="阻止默认行为"></a>阻止默认行为</h2><p>w3c的方法是e.preventDefault()，IE则是使用e.returnValue = false</p><p>preventDefault它是事件对象(Event)的一个方法，作用是取消一个目标元素的默认行为。既然是说默认行为，当然是元素必须有默认行为才能被取消，如果元素本身就没有默认行为，调用当然就无效了。什么元素有默认行为呢？如链接<code>&lt;a&gt;</code>，提交按钮<code>&lt;input type=”submit”&gt;</code>等。当Event 对象的 cancelable为false时，表示没有默认行为，这时即使有默认行为，调用preventDefault也是不会起作用的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"> &lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;&lt;/title&gt;</span><br><span class="line">&lt;<span class="regexp">/head&gt;</span></span><br><span class="line"><span class="regexp">&lt;body&gt;</span></span><br><span class="line"><span class="regexp">&lt;div id="box" style="width: 300px;height: 300px;background: pink;"&gt;</span></span><br><span class="line"><span class="regexp">&lt;input type="button" name="按钮" value="按钮" id="btn"&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"><span class="keyword">var</span> box1=<span class="built_in">document</span>.getElementById(<span class="string">"box"</span>);</span><br><span class="line"><span class="keyword">var</span> btn1=<span class="built_in">document</span>.getElementById(<span class="string">"btn"</span>);</span><br><span class="line">btn1.onclick=<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">alert(<span class="string">"按钮"</span>);</span><br><span class="line"><span class="comment">//阻止冒泡；</span></span><br><span class="line"><span class="keyword">var</span> e=e|| <span class="built_in">window</span>.event;</span><br><span class="line"><span class="comment">//w3c取消冒泡</span></span><br><span class="line">e.stopPropagation();</span><br><span class="line"><span class="comment">//ie取消冒泡</span></span><br><span class="line"><span class="comment">//判断他现在的状态，然后给他赋值true，</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">typeof</span> e.cancelBubble==<span class="string">'undefined'</span>)&#123;</span><br><span class="line">e.stopPropagation();</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">e.cancelBubble=<span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">box1.onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">alert(<span class="string">"div"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">document</span>.body.onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">alert(<span class="string">"body"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">document</span>.documentElement.onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">alert(<span class="string">"html"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">document</span>.onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">alert(<span class="string">"document"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://mydearest.cn/bubble.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>侠之大者，为国接盘</title>
      <link>http://mydearest.cn/houseprice.html</link>
      <guid>http://mydearest.cn/houseprice.html</guid>
      <pubDate>Sat, 16 Jun 2018 09:54:50 GMT</pubDate>
      <description>
      
        &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;炒房兴邦，实业误国&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote class="blockquote-center"><p>炒房兴邦，实业误国</p></blockquote><hr><a id="more"></a><p>近年来，房价成为了生活中重要的谈资和话题，几乎所有的聊天场合都会聊到房子，什么谁谁谁有几套房，不用工作每月靠房租过活。坐公交车上都是听到一些阿姨手里几套房，在手里在捂一会，转手卖给有刚需的年轻人，后悔没多买几套之类的话。</p><p>房价的上涨，刚需不敢不买，等下去看不到希望，掏空了一家父母的过去和年轻人的未来，面对zf的货币超发引起的通货膨胀，却又无可奈何。房价再涨个3、4倍，分分钟GDP超过美国啊。现在基本的理财方式已经赶不上通货膨胀的速度了，眼看着手里的钱越来越不值钱，人人自危，都只能通过购房来保值。被zf逼的哪怕背上几十年的贷款也要坐上这趟车，给zf当几十年的免费劳动力来消化这巨大的泡沫。</p><p>这个浮躁社会的高房价，让我们这些刚毕业工作几年的年轻人，要我们的青春和汗水给你们买单。现在的年轻人，怎么可能刚毕业就能积攒到买房的首付，被逼的去‘啃老’，掏空全家人的钱包，成为房奴。2017年前yz的房价大概7000/m2，恒大在年初当了一波地王2w/m2买了邗江中专那边的地后，各个楼盘开始疯长，在年底11月份购入1w/m2后，如今短短半年已经涨到了1.3w/m2。试想以100m2为例如果不早点买，就得平白无故多交20w的韭菜钱。房价降是不可能降的，这个牵扯到太多人和行业的利益，一旦崩盘了，其他行业也会受到影响，经济陷入低迷，zf不断地增发货币来救市。一线城市政府来主导市场看上去房价跌了，这也只是杯水车薪，高额的房价不断地在驱逐这所谓的低端人口，也是啊，毕竟要实现小康社会啊，让先富带动后富，实现共同小康，还是直接消灭低端人口容易些。房价的压力让现在的中国人充满着戾气、浮躁。上了车的人在嘲讽着没上车的人，一旦买了房，两者就成了对立面，高房价改变了人们的价值观。如今人们对于成功的标准定义有几辆车，几套房。现在各个城市推行的所谓吸引人才政策，不就是为了让人来接盘去库存么。</p><p>房价带来了价值观的革命，中下层把买房当成了人生目标，中产把买房当成了支付手段，政府把卖地当作经济支柱，将企业债务转化成了居民债务。房价捆绑了经济、政治、户籍、教育、爱情、事业甚至社会地位，集万千宠爱于一身。随着房价越来越高，社会阶层出现固化趋势，多少年轻人的梦想倍房价无情碾压，多少家庭为了买房背上沉重的债务，多少爱情因为房价变得支离破碎，还有的夫妻为了多买套房选择离婚。而在房价面前我们崇尚的个人奋斗，不值一文。年轻人开始选择佛系，不再憧憬爱情，坚持和努力并没有什么卵用，开始相信投机的价值。金钱至上主义横行，勤劳致富成为了笑话，炒房的人成为了羡慕对象，所谓的梦想是多么的幼稚可笑。这个xx的时代，只要你买不起房救市没出息的男人。毕竟男生在婚姻当中是向下兼容，而女生是向上兼容的。现在的知乎上现在的男生为什么不追求女生、为什么现在的女孩子活得都很潇洒，男孩子确郁郁寡欢这类的问题比比皆是。毕竟女性才是消费的主力，那些商家们为了自己的利益，各种推出什么女神节等等之类的活动和营销号无底线地讨好女性发软文毒鸡汤，恶心至极。什么公主、女王、仙女，拜拜了您！大家又不是笨蛋，看透了资本主义生产方式，不想再沦为奴隶了，工作只会使自己越来越贫穷。劳动法就是个笑话，各种被所谓的企业文化所绑架，压榨干你的劳动力。员工和公司的关系很简单，你付给我钱，我帮你工作罢了，我们并不是一家人。永远不要试探人性的底线，没有完美的人。抱歉，中国特色社会主义的大饼我吃不下了。</p><p>从古至今，中国还是没有发生什么大的变化，权利还是掌握在少部分人手里，层层剥削的金字塔结构，什么人民当家作主，到头来还不是被代表了。所谓的法律还不是为了维护阶级统治的利益。我国是领导人选举能全票通过的国家，神奇不神奇呵呵。一个个大腹便便的领导们，嘴上说着服务人民，背地里作者贪污腐败的行当。这年头都希望考公务员，公务员是什么，为人民服务。一个个都争着抢着去当人民的公仆，还不是为了铁饭碗、利益。在小城市里，都是靠关系，所谓的人情社会。有些人只是想听到他们想听到的话罢了，成年人的价值观一旦成型一般是很难改变的。国家开放二胎政策还不是为了拉动内需，劳动力不足，老龄化严重。现在地区间发展不平衡，中国就只有这北上广深等一线城市罢了，很多人背井离乡去这些大城市打工，这些人是去赚钱而不是来消费的，当地的zf是很讨厌的。春运很值得骄傲吗，你以为人人都愿意远离自己的家乡，在陌生的城市中打拼吗？这些繁华都与自己无关。很久之前被教导不乱扔垃圾，可现实是如果大家都不乱扔垃圾了，那些环卫工人们是真的会失业的，资本家会让人白白领一份工资么？答案当然是不会的，他们宁可把过剩的商品都愿意倒掉销毁，也不愿意救济贫民，扰乱消费市场。中国有着最大的局域网，保护本国的互联网产品的利益，没什么创新，都是对标国外的产品。除了抄袭还是抄袭，科研没有实际的成果都只是为了骗取国家的补贴。</p><p>这年头的幼儿教育也是问题不断。应试教育也就算了，再怎么培养也是考试型人才。为了不让自己的孩子输在起跑线，给孩子报了大大小小的培训班。中国大多数父母都不希望自己的孩子是个“普通学生”，而是希望孩子能像别人家的孩子一样能考进名牌大学（被国家归为 211 或者 985 的大学），但事实上每年能挤过高考独木桥考取 211/985 的孩子有多少呢？ 全国平均下来大约是 7% 。对 93% 的学生和家长来说，十几年来他们承受着巨大的压力，最后却几乎可以说在“读书”上是失败的。我们的学校除了教学生读书还教他们什么呢？</p><p>不论社会如何变化动荡，大家只想守护好自己的小小幸福罢了。</p>]]></content:encoded>
      
      <comments>http://mydearest.cn/houseprice.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>JS执行顺序-函数声明提升、匿名函数、函数表达式</title>
      <link>http://mydearest.cn/executionOrder.html</link>
      <guid>http://mydearest.cn/executionOrder.html</guid>
      <pubDate>Wed, 13 Jun 2018 09:06:49 GMT</pubDate>
      <description>
      
        &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;JS 是按照&lt;code&gt;代码块&lt;/code&gt;进行 编译、执行 的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote class="blockquote-center"><p>JS 是按照<code>代码块</code>进行 编译、执行 的。</p></blockquote><hr><a id="more"></a><h2 id="script标签区分代码块"><a href="#script标签区分代码块" class="headerlink" title="script标签区分代码块"></a>script标签区分代码块</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  alert(<span class="string">'代码块一'</span>);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">  alert('代码块二');</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><h2 id="关于函数-声明式函数、赋值型（函数表达式）函数、匿名函数、自执行函数"><a href="#关于函数-声明式函数、赋值型（函数表达式）函数、匿名函数、自执行函数" class="headerlink" title="关于函数(声明式函数、赋值型（函数表达式）函数、匿名函数、自执行函数)"></a>关于函数(声明式函数、赋值型（函数表达式）函数、匿名函数、自执行函数)</h2><h3 id="函数提升"><a href="#函数提升" class="headerlink" title="函数提升"></a>函数提升</h3><p><code>声明函数与赋值函数的区别在于： 在 JS 的预编译期间，声明式函数会被先提取出来，然后才按照顺序执行 JS代码。</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">A();  <span class="comment">// 'A '</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'A'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">B(); <span class="comment">// error， B is not a function</span></span><br><span class="line"><span class="keyword">var</span> B = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'B'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="匿名函数（没有名字的函数）"><a href="#匿名函数（没有名字的函数）" class="headerlink" title="匿名函数（没有名字的函数）"></a>匿名函数（没有名字的函数）</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125; <span class="comment">// 匿名函数</span></span><br></pre></td></tr></table></figure><h3 id="自执行函数"><a href="#自执行函数" class="headerlink" title="自执行函数"></a>自执行函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">3</span>);</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 带参数</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">num</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(num);</span><br><span class="line">&#125;)(<span class="number">3</span>); <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 没有括号会报错 如下</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">3</span>);</span><br><span class="line">&#125;();</span><br></pre></td></tr></table></figure><p>原因如下：</p><ul><li>function {}()其实这是一个函数声明。</li><li>JS运行的时候，会对函数声明进行预编译，然后在执行其他语句。</li><li>也就是说function(){}先被预编译了。然后JS看见了()。JS一脸懵逼，这不得报错吗。</li><li>而匿名函数实际上是一个语句，正常执行。</li></ul><p>自执行函数的标识也可以是<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">!<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;()      (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;)()    </span><br><span class="line">~<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;()      <span class="keyword">void</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;()</span><br></pre></td></tr></table></figure></p><h2 id="预编译期和执行期"><a href="#预编译期和执行期" class="headerlink" title="预编译期和执行期"></a>预编译期和执行期</h2><div class="note info"><p>JS的解析分为两个阶段：预编译 和 执行期。</p></div><ul><li>预编译期间：对本代码块中的所有声明变量和函数进行处理(类似于C语言的编译) ，但需要注意，1.此时处理函数的只是 声明式函数2.变量也只是进行了声明但是没有进行初始化和赋值</li><li>编译期间：从上到下编译代码块。</li></ul><h3 id="函数声明提前且后来居上覆盖"><a href="#函数声明提前且后来居上覆盖" class="headerlink" title="函数声明提前且后来居上覆盖"></a>函数声明提前且后来居上覆盖</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">getName(); <span class="comment">// 6</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params"></span>) </span>&#123; alert (<span class="number">5</span>);&#125;</span><br><span class="line"><span class="keyword">var</span> getName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; alert (<span class="number">4</span>);&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params"></span>) </span>&#123; alert (<span class="number">6</span>);&#125;</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"><span class="keyword">var</span> getName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; alert (<span class="number">4</span>);&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params"></span>) </span>&#123; alert (<span class="number">6</span>);&#125;</span><br><span class="line">getName(); <span class="comment">// 4 函数声明都被提升了，表达式会覆盖掉</span></span><br></pre></td></tr></table></figure><h3 id="练习题"><a href="#练习题" class="headerlink" title="练习题"></a>练习题</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    getName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; alert (<span class="number">1</span>); &#125;;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">Foo.getName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; alert (<span class="number">2</span>);&#125;;</span><br><span class="line">Foo.prototype.getName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; alert (<span class="number">3</span>);&#125;;</span><br><span class="line"><span class="keyword">var</span> getName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; alert (<span class="number">4</span>);&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params"></span>) </span>&#123; alert (<span class="number">5</span>);&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//请写出以下输出结果：</span></span><br><span class="line">Foo.getName(); <span class="comment">// 2</span></span><br><span class="line">getName();  <span class="comment">// 4</span></span><br><span class="line">Foo().getName(); <span class="comment">// 1</span></span><br><span class="line">getName(); <span class="comment">// 1</span></span><br><span class="line"><span class="keyword">new</span> Foo.getName(); <span class="comment">// 2</span></span><br><span class="line"><span class="keyword">new</span> Foo().getName(); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><h2 id="ES6之前，JS没有变量作用域。只有-函数作用域-和-全局作用域。"><a href="#ES6之前，JS没有变量作用域。只有-函数作用域-和-全局作用域。" class="headerlink" title="ES6之前，JS没有变量作用域。只有 函数作用域 和 全局作用域。"></a>ES6之前，JS没有变量作用域。只有 函数作用域 和 全局作用域。</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 3</span></span><br><span class="line">---</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// error</span></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://mydearest.cn/executionOrder.html#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
