<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>cosyer&#39;s Blog</title>
    <link>http://mydearest.cn/</link>
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>陈宇的博客</description>
    <pubDate>Mon, 15 Oct 2018 15:54:05 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>正则总结</title>
      <link>http://mydearest.cn/%E6%AD%A3%E5%88%99%E6%80%BB%E7%BB%93.html</link>
      <guid>http://mydearest.cn/%E6%AD%A3%E5%88%99%E6%80%BB%E7%BB%93.html</guid>
      <pubDate>Sun, 14 Oct 2018 14:42:18 GMT</pubDate>
      <description>
      
        &lt;p&gt;创建正则表达式
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; expression = &lt;span class=&quot;regexp&quot;&gt;/pattern/&lt;/span&gt;flags ;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;其中的模式（pattern）部分可以是任何简单或复杂的正则表达式，可以包含字符类、限定符、分组、 向前查找以及反向引用。每个正则表达式都可带有一或多个标志（flags），用以标明正则表达式的行为。 正则表达式的匹配模式支持下列 3 个标志。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;g：表示全局（global）模式，即模式将被应用于所有字符串，而非在发现第一个匹配项时立即 停止；&lt;/li&gt;
&lt;li&gt;i：表示不区分大小写（case-insensitive）模式，即在确定匹配项时忽略模式与字符串的大小写；&lt;/li&gt;
&lt;li&gt;m：表示多行（multiline）模式，即在到达一行文本末尾时还会继续查找下一行中是否存在与模式匹配的项。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; text = &lt;span class=&quot;string&quot;&gt;&quot;aaa &quot;&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; pattern1 = &lt;span class=&quot;regexp&quot;&gt;/\s$/&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;//匹配字符串末尾的空格 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pattern1.exec(text);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>创建正则表达式<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> expression = <span class="regexp">/pattern/</span>flags ;</span><br></pre></td></tr></table></figure></p><p>其中的模式（pattern）部分可以是任何简单或复杂的正则表达式，可以包含字符类、限定符、分组、 向前查找以及反向引用。每个正则表达式都可带有一或多个标志（flags），用以标明正则表达式的行为。 正则表达式的匹配模式支持下列 3 个标志。</p><ul><li>g：表示全局（global）模式，即模式将被应用于所有字符串，而非在发现第一个匹配项时立即 停止；</li><li>i：表示不区分大小写（case-insensitive）模式，即在确定匹配项时忽略模式与字符串的大小写；</li><li>m：表示多行（multiline）模式，即在到达一行文本末尾时还会继续查找下一行中是否存在与模式匹配的项。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> text = <span class="string">"aaa "</span>; </span><br><span class="line"><span class="keyword">var</span> pattern1 = <span class="regexp">/\s$/</span>; <span class="comment">//匹配字符串末尾的空格 </span></span><br><span class="line">pattern1.exec(text);</span><br></pre></td></tr></table></figure><hr><a id="more"></a><p>正则定义了很多特殊意义的字符，有名词，量词，谓词等</p><h2 id="简单字符"><a href="#简单字符" class="headerlink" title="简单字符"></a>简单字符</h2><p>没有特殊意义的字符都是简单字符，简单字符就代表自身，绝大部分字符都是简单字符，举个例子。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/abc/ <span class="comment">// 匹配 abc</span></span><br><span class="line">/<span class="number">123</span>/ <span class="comment">// 匹配 123</span></span><br><span class="line">/-_-<span class="regexp">/ /</span><span class="regexp">/ 匹配 -_-</span></span><br></pre></td></tr></table></figure></p><h2 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h2><p>\是转义字符，其后面的字符会代表不同的意思，转义字符主要有三个作用：</p><ol><li><p>是为了匹配不方便显示的特殊字符，比如换行，tab符号等</p></li><li><p>正则中预先定义了一些代表特殊意义的字符，比如\w等</p></li><li><p>在正则中某些字符有特殊含义(比如下面说到的)，转义字符可以让其显示自身的含义</p></li></ol><table><thead><tr><th style="text-align:left">常用转义字符</th><th style="text-align:left">意义</th></tr></thead><tbody><tr><td style="text-align:left">\n</td><td style="text-align:left">匹配换行符 （newline）</td></tr><tr><td style="text-align:left">\r</td><td style="text-align:left">匹配回车符 （return）</td></tr><tr><td style="text-align:left">\t</td><td style="text-align:left">匹配制表符，也就是tab键</td></tr><tr><td style="text-align:left">\v</td><td style="text-align:left">匹配垂直制表符</td></tr><tr><td style="text-align:left">\x20</td><td style="text-align:left">20是2位16进制数字，代表对应的字符</td></tr><tr><td style="text-align:left">\u002B</td><td style="text-align:left">002B是4位16进制数字，代表对应的字符</td></tr><tr><td style="text-align:left">\u002B</td><td style="text-align:left">002B是4位16进制数字，代表对应的字符</td></tr><tr><td style="text-align:left">\w</td><td style="text-align:left">匹配任何一个字母或者数字或者下划线 单子字符 (word)</td></tr><tr><td style="text-align:left">\W</td><td style="text-align:left">匹配任何一个字母或者数字或者下划线以外的字符 非单子字符</td></tr><tr><td style="text-align:left">\s</td><td style="text-align:left">匹配空白字符，如空格，tab等 （space）</td></tr><tr><td style="text-align:left">\S</td><td style="text-align:left">匹配非空白字符</td></tr><tr><td style="text-align:left">\d</td><td style="text-align:left">匹配数字字符，0~9 （digit）</td></tr><tr><td style="text-align:left">\D</td><td style="text-align:left">匹配非数字字符</td></tr><tr><td style="text-align:left">\b</td><td style="text-align:left">匹配单词的边界 (boundary)</td></tr><tr><td style="text-align:left">\B</td><td style="text-align:left">匹配非单词边界</td></tr><tr><td style="text-align:left">\</td><td style="text-align:left">匹配\本身</td></tr></tbody></table><h2 id="字符集合"><a href="#字符集合" class="headerlink" title="字符集合"></a>字符集合</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 有时我们需要匹配一类字符，字符集可以实现这个功能，字符集的语法用[]分隔，下面的代码能够匹配a或b或c</span></span><br><span class="line">[abc]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果要表示字符很多，可以使用-表示一个范围内的字符，下面两个功能相同</span></span><br><span class="line">[<span class="number">0123456789</span>]</span><br><span class="line">[<span class="number">0</span><span class="number">-9</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在前面添加^，可表示非的意思，下面的代码能够匹配abc之外的任意字符</span></span><br><span class="line">[^abc]</span><br></pre></td></tr></table></figure><p>其实正则还内置了一些字符集，在上面的转义字符有提到，下面给出内置字符集对应的自定义字符集<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 匹配除了换行符（\n）以外的任意一个字符 = [^\n]</span></span><br><span class="line">\w = [<span class="number">0</span><span class="number">-9</span>a-zA-Z_]</span><br><span class="line">\W = [^<span class="number">0</span><span class="number">-9</span>a-zA-Z_]</span><br><span class="line">\s = [ \t\n\v]</span><br><span class="line">\S = [^ \t\n\v]</span><br><span class="line">\d = [<span class="number">0</span><span class="number">-9</span>]</span><br><span class="line">\D = [^<span class="number">0</span><span class="number">-9</span>]</span><br></pre></td></tr></table></figure></p><h2 id="量词"><a href="#量词" class="headerlink" title="量词"></a>量词</h2><p>如果需要匹配多次某个字符，正则也提供了量词的功能，正则中的量词有多个，如?、+、*、{n}、{m,n}、{m,}</p><p>{n}匹配n次，比如a{2}，匹配aa</p><p>{m, n}匹配m-n次，优先匹配n次，比如a{1,3}，可以匹配aaa、aa、a</p><p>{m,}匹配m-∞次，优先匹配∞次，比如a{1,}，可以匹配aaaa…</p><p>?匹配0次或1次，优先匹配1次，相当于{0,1}</p><p>+匹配1-n次，优先匹配n次，相当于{1,}</p><p>*匹配0-n次，优先匹配n次，相当于{0,}</p><p>正则默认和人心一样是贪婪的，也就是常说的贪婪模式，凡是表示范围的量词，都优先匹配上限而不是下限</p><p>a{1, 3} // 匹配字符串’aaa’的话，会匹配aaa而不是a<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> text = <span class="string">"aaa"</span>; </span><br><span class="line"><span class="keyword">var</span> pattern1 = <span class="regexp">/a&#123;1,3&#125;/</span>;</span><br><span class="line">pattern1.exec(text); <span class="comment">//["aaa", index: 0, input: "aaa"]</span></span><br></pre></td></tr></table></figure></p><p>有时候这不是我们想要的结果，可以在量词后面加上?，就可以开启非贪婪模式<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> text = <span class="string">"aaa"</span>; </span><br><span class="line"><span class="keyword">var</span> pattern1 = <span class="regexp">/a&#123;1,3&#125;/</span>;</span><br><span class="line">pattern1.exec(text); <span class="comment">//["aaa", index: 0, input: "aaa"]</span></span><br></pre></td></tr></table></figure></p><h2 id="字符边界"><a href="#字符边界" class="headerlink" title="字符边界"></a>字符边界</h2><p>^在[]外表示匹配开头的意思^abc // 可以匹配abc，但是不能匹配aabc</p><p>$表示匹配结尾的意思abc$ // 可以匹配abc，但是不能匹配abcc上面提到的\b表示单词的边界</p><p>\b表示匹配一个词的边界。一个词的边界就是一个词不被另外一个“字”字符跟随的位置或者没有其他“字”字符在其前面的位置。abc\b // 可以匹配 abc ，但是不能匹配 abcc；/\bm/匹配“moon”中得‘m’；/oo\b/并不匹配”moon”中得’oo’，因为’oo’被一个“字”字符’n’紧跟着。/oon\b/匹配”moon”中得’oon’，因为’oon’是这个字符串的结束部分。这样他没有被一个“字”字符紧跟着。/\w\b\w/将不能匹配任何字符串，因为在一个单词中间的字符永远也不可能同时满足没有“字”字符跟随和有“字”字符跟随两种情况。</p><h2 id="选择表达式"><a href="#选择表达式" class="headerlink" title="选择表达式"></a>选择表达式</h2><p>有时我们想匹配x或者y，如果x和y是单个字符，可以使用字符集，[abc]可以匹配a或b或c，如果x和y是多个字符，字符集就无能为力了，此时就要用到分组</p><p>正则中用|来表示分组，a|b表示匹配a或者b的意思<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">123</span>|<span class="number">456</span>|<span class="number">789</span> <span class="comment">// 匹配 123 或 456 或 789</span></span><br></pre></td></tr></table></figure></p><h2 id="分组与引用"><a href="#分组与引用" class="headerlink" title="分组与引用"></a>分组与引用</h2><p>分组是正则中非常强大的一个功能，可以让上面提到的量词作用于一组字符，而非单个字符，分组的语法是圆括号包裹(xxx)<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(abc)&#123;<span class="number">2</span>&#125; <span class="comment">// 匹配abcabc</span></span><br></pre></td></tr></table></figure></p><p>分组不能放在[]中，分组中还可以使用选择表达式<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">123</span>|<span class="number">456</span>)&#123;<span class="number">2</span>&#125; <span class="comment">// 匹配 123123、456456、123456、456123</span></span><br></pre></td></tr></table></figure></p><p>和分组相关的概念还有一个捕获分组和非捕获分组，分组默认都是捕获的，在分组的(后面添加?:可以让分组变为非捕获分组，非捕获分组可以提高性能和简化逻辑<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'123'</span>.match(<span class="regexp">/(?:123)/</span>) <span class="comment">// 返回 ['123']</span></span><br><span class="line"><span class="string">'123'</span>.match(<span class="regexp">/(123)/</span>)  <span class="comment">// 返回 ['123', '123']</span></span><br><span class="line"><span class="comment">// 和分组相关的另一个概念是引用，比如在匹配html标签时，通常希望&lt;xxx&gt;&lt;/xxx&gt;后面的xxx能够和前面保持一致</span></span><br></pre></td></tr></table></figure></p><p>引用的语法是\数字，数字代表引用前面第几个捕获分组，注意非捕获分组不能被引用<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;([a-z]+)&gt;&lt;\/\1&gt; // 可以匹配 `&lt;span&gt;&lt;/span&gt;` 或 `&lt;div&gt;&lt;/div&gt;`等</span><br></pre></td></tr></table></figure></p><h2 id="预搜索"><a href="#预搜索" class="headerlink" title="预搜索"></a>预搜索</h2><p>如果你想匹配xxx前不能是yyy，或者xxx后不能是yyy，那就要用到预搜索</p><p>js只支持正向预搜索，也就是xxx后面必须是yyy，或者xxx后面不能是yyy<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>(?=<span class="number">2</span>) <span class="comment">// 可以匹配12，不能匹配22</span></span><br><span class="line"><span class="number">1</span>(?!<span class="number">2</span>) <span class="comment">// 可有匹配22，不能匹配12</span></span><br></pre></td></tr></table></figure></p><h2 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h2><p>默认正则是区分大小写，这可能并不是我们想要的，正则提供了修饰符的功能，修复的语法如下<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/xxx/gi <span class="comment">// 最后面的g和i就是两个修饰符</span></span><br></pre></td></tr></table></figure></p><p>g正则遇到第一个匹配的字符就会结束，加上全局修复符，可以让其匹配到结束</p><p>i正则默认是区分大小写的，i可以忽略大小写</p><p>m正则默认情况下，^和$只能匹配字符串的开始和结尾，m修饰符可以让^和$匹配行首和行尾，不理解就看例子<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/jing$/ <span class="comment">// 能够匹配 'yanhaijing，不能匹配 'yanhaijing\n'</span></span><br><span class="line">/jing$/m <span class="comment">// 能够匹配 'yanhaijing， 能够匹配 'yanhaijing\n'</span></span><br><span class="line"></span><br><span class="line">/^jing/ <span class="comment">// 能够匹配 'jing'，不能匹配 '\njing'</span></span><br><span class="line">/^jing/m <span class="comment">// 能够匹配 'jing'，能够匹配 '\njing'</span></span><br></pre></td></tr></table></figure></p><h2 id="js使用正则表达式的方法"><a href="#js使用正则表达式的方法" class="headerlink" title="js使用正则表达式的方法"></a>js使用正则表达式的方法</h2><p>正则表达式是用于匹配字符串中字符组合的模式。在 JavaScript中，正则表达式也是对象。这些模式被用于 RegExp 的 exec 和 test 方法, 以及 String 的 match、replace、search 和 split 方法|方法|描述||:—|—:||exec    |一个在字符串中执行查找匹配的RegExp方法，它返回一个数组（未匹配到则返回null）。||test    |一个在字符串中测试是否匹配的RegExp方法，它返回true或false。||match    |一个在字符串中执行查找匹配的String方法，它返回一个数组或者在未匹配到时返回null。||search    |一个在字符串中测试匹配的String方法，它返回匹配到的位置索引，或者在失败时返回-1。||replace    |一个在字符串中执行查找匹配的String方法，并且使用替换字符串替换掉匹配到的子字符串。||split    |一个使用正则表达式或者一个固定字符串分隔一个字符串，并将分隔后的子字符串存储到数组中的String方法。|</p><p>当你想要知道在一个字符串中的一个匹配是否被找到，你可以使用test或search方法；想得到更多的信息（但是比较慢）则可以使用exec或match方法。如果你使用exec或match方法并且匹配成功了，那么这些方法将返回一个数组并且更新相关的正则表达式对象的属性和预定义的正则表达式对象（详见下）。如果匹配失败，那么exec方法返回null（也就是false）。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> text = <span class="string">"cat, bat, sat, fat"</span>; <span class="keyword">var</span> pattern1 = <span class="regexp">/.at/</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> matches = pattern1.exec(text);</span><br><span class="line"><span class="built_in">console</span>.log(matches) <span class="comment">//["cat", index: 0, input: "cat, bat, sat, fat"]</span></span><br></pre></td></tr></table></figure></p>]]></content:encoded>
      
      <comments>http://mydearest.cn/%E6%AD%A3%E5%88%99%E6%80%BB%E7%BB%93.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>动手实现redux</title>
      <link>http://mydearest.cn/%E5%8A%A8%E6%89%8B%E5%AE%9E%E7%8E%B0redux.html</link>
      <guid>http://mydearest.cn/%E5%8A%A8%E6%89%8B%E5%AE%9E%E7%8E%B0redux.html</guid>
      <pubDate>Wed, 03 Oct 2018 11:24:18 GMT</pubDate>
      <description>
      
        &lt;p&gt;概念：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个app有一个store，一个store管理着一个全局state&lt;/li&gt;
&lt;li&gt;createStore 传入reducer，返回getState, dispatch, subscribe&lt;/li&gt;
&lt;li&gt;action是一个至少有type这个键的对象，可以写一个creactActioner 函数去return生成action对象&lt;/li&gt;
&lt;li&gt;createStore.dispatch(action) 根据action这个对象去更新state&lt;/li&gt;
&lt;li&gt;dispatch是一个函数，内部有将执行reducer函数&lt;/li&gt;
&lt;li&gt;reducer也是一个函数，传入state,action, 输出一个新的state . (switch case return…)&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>概念：</p><ul><li>一个app有一个store，一个store管理着一个全局state</li><li>createStore 传入reducer，返回getState, dispatch, subscribe</li><li>action是一个至少有type这个键的对象，可以写一个creactActioner 函数去return生成action对象</li><li>createStore.dispatch(action) 根据action这个对象去更新state</li><li>dispatch是一个函数，内部有将执行reducer函数</li><li>reducer也是一个函数，传入state,action, 输出一个新的state . (switch case return…)</li></ul><hr><a id="more"></a><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> = <span class="string">'title'</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span> = <span class="string">"changeTheme"</span> <span class="attr">value</span>=<span class="string">"变成蓝色主题"</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实现createStore 传入reducer</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createStore</span>(<span class="params">reducer</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 存储数据</span></span><br><span class="line">    <span class="keyword">let</span> state = <span class="literal">null</span></span><br><span class="line">    <span class="comment">// 订阅列表</span></span><br><span class="line">    <span class="keyword">const</span> listenerList=[]</span><br><span class="line">    <span class="comment">// 增加订阅</span></span><br><span class="line">    <span class="keyword">const</span> subscribe=<span class="function">(<span class="params">listener</span>)=&gt;</span>listenerList.push(listener)</span><br><span class="line">    <span class="comment">// 返回state</span></span><br><span class="line">    <span class="keyword">const</span> getState=<span class="function"><span class="params">()</span>=&gt;</span>state </span><br><span class="line">    <span class="comment">// dispatch</span></span><br><span class="line">    <span class="keyword">const</span> dispatch=<span class="function">(<span class="params">action</span>)=&gt;</span>&#123;</span><br><span class="line">      <span class="comment">// 新的state</span></span><br><span class="line">      state=reducer(state,action)</span><br><span class="line">      <span class="comment">// 遍历执行</span></span><br><span class="line">      listenerList.forEach(item)=&gt;item()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 初始化state</span></span><br><span class="line">    dispatch(&#123;&#125;)</span><br><span class="line">    <span class="keyword">return</span> &#123;getState,subscribe,dispatch&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现reducer</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params">state,action</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(!state)&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      title:<span class="string">'红色'</span>,</span><br><span class="line">      color:<span class="string">'red'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">switch</span>(action.type)&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'UPDATE_TITLE'</span>:</span><br><span class="line">    <span class="keyword">return</span> &#123;...state,<span class="attr">title</span>:action.title&#125;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'UPDATE_COLOR'</span>:</span><br><span class="line">    <span class="keyword">return</span> &#123;...state,<span class="attr">color</span>:action.color&#125;</span><br><span class="line">    <span class="keyword">default</span>:<span class="keyword">return</span> state</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 传入reducer生成store</span></span><br><span class="line"><span class="keyword">const</span> store =createStore(reducer)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 渲染代码</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">renderDom</span>(<span class="params">state</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> titleDOM = <span class="built_in">document</span>.getElementById(<span class="string">'title'</span>);</span><br><span class="line">  titleDOM.innerHTML = state.title;</span><br><span class="line">  titleDOM.style.color = state.color;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听数据变化重新渲染页面</span></span><br><span class="line">store.subscribe(<span class="function"><span class="params">()</span> =&gt;</span> renderApp(store.getState()));<span class="comment">// 让每次dispatch时都会执行传入的这个函数，渲染页面</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 首次渲染页面</span></span><br><span class="line">renderApp(store.getState());</span><br><span class="line"></span><br><span class="line"><span class="comment">// action</span></span><br><span class="line"><span class="keyword">const</span> updateThemeName = <span class="function"><span class="params">()</span> =&gt;</span> (&#123;</span><br><span class="line">  type: <span class="string">'UPDATE_TITLE'</span>,</span><br><span class="line">  title: <span class="string">'蓝色'</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">const</span> updateThemeColor = <span class="function"><span class="params">()</span> =&gt;</span> (&#123;</span><br><span class="line">  type: <span class="string">'UPDATE_COLOR'</span>,</span><br><span class="line">  color: <span class="string">'blue'</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 绑定事件</span></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'changeTheme'</span>).onclick = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  store.dispatch(updateThemeName());</span><br><span class="line">  store.dispatch(updateThemeColor());</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://mydearest.cn/%E5%8A%A8%E6%89%8B%E5%AE%9E%E7%8E%B0redux.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>人一生必须要去的3个地方</title>
      <link>http://mydearest.cn/%E4%BA%BA%E4%B8%80%E7%94%9F%E5%BF%85%E9%A1%BB%E5%8E%BB%E7%9A%843%E4%B8%AA%E5%9C%B0%E6%96%B9.html</link>
      <guid>http://mydearest.cn/%E4%BA%BA%E4%B8%80%E7%94%9F%E5%BF%85%E9%A1%BB%E5%8E%BB%E7%9A%843%E4%B8%AA%E5%9C%B0%E6%96%B9.html</guid>
      <pubDate>Fri, 14 Sep 2018 12:33:52 GMT</pubDate>
      <description>
      
        &lt;p&gt;通常有人说一个人一生最好经常去三个地方看看，人生感悟会提高一个档次，人生观，价值观乃至世界观，都会有一个质的飞跃。这三个地方就是：托儿所、殡仪馆、监狱。 常去托儿所，看到天真烂漫、童真无邪、活泼可爱的孩子们，会更加的体会到生命的重要和可爱，从而更加珍惜生命，热爱生活，激发出更多积极向上的人生志向。 常去殡仪馆，看到撒手人寰逝去的人们，会感受到，人赤条条来，赤条条去，人为财死，鸟为食亡，是多么的狭隘和自私，心胸会豁然开朗，，不会在为鸡毛蒜皮的小事斤斤计较，退一步海阔天空，让三分心平气和。会更加的领会人生的价值所在，让人生更具异彩。 常去监狱，看到无论是过去高官还是贫民百姓，进到监狱没有了姓名，只有号码，一律囚服，进出报告，极大的限制了人身自由，天高任鸟飞，海阔凭鱼跃的现实已经成为梦中的理想。自古就有人犯王法身无主，因此也就会更加的洁身自好，以人为镜，严于律己。守法度者为幸福，世上本没有绝对的自由，遵守了，习惯了，适应了也就自由了。&lt;/p&gt;
&lt;hr&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>通常有人说一个人一生最好经常去三个地方看看，人生感悟会提高一个档次，人生观，价值观乃至世界观，都会有一个质的飞跃。这三个地方就是：托儿所、殡仪馆、监狱。 常去托儿所，看到天真烂漫、童真无邪、活泼可爱的孩子们，会更加的体会到生命的重要和可爱，从而更加珍惜生命，热爱生活，激发出更多积极向上的人生志向。 常去殡仪馆，看到撒手人寰逝去的人们，会感受到，人赤条条来，赤条条去，人为财死，鸟为食亡，是多么的狭隘和自私，心胸会豁然开朗，，不会在为鸡毛蒜皮的小事斤斤计较，退一步海阔天空，让三分心平气和。会更加的领会人生的价值所在，让人生更具异彩。 常去监狱，看到无论是过去高官还是贫民百姓，进到监狱没有了姓名，只有号码，一律囚服，进出报告，极大的限制了人身自由，天高任鸟飞，海阔凭鱼跃的现实已经成为梦中的理想。自古就有人犯王法身无主，因此也就会更加的洁身自好，以人为镜，严于律己。守法度者为幸福，世上本没有绝对的自由，遵守了，习惯了，适应了也就自由了。</p><hr><a id="more"></a><p>中国的人实在是太多了，人均资源少，而且分配不均，旱死的旱死涝死的涝死。小时候奶奶经常说我爸生下来多么瘦小，为了生存还去卖过血。我爸也是从无到有的打拼。我是努力了，但我拼命努力了么？没有！！！是需要有那种不成功便成仁的决心和坚持到底的毅力。是的，我自己什么都将可以牺牲的！要想得到什么必须付出同等的代价。新中国成立解放了人民，同样也诞生了新的剥削阶级。文革各个组织间的利益冲突。中国还是那个中国，似曾相识的中央集权，人民当家做主恩恩，当好韭菜，接收被剥削收割的命运。</p><p>自古以来的人情社会，不送礼办不成事，贪污落马的大老虎们一批接一批。拉帮结派、结党营私、官官相护。</p><ul><li>退休年龄将来目标是65岁退休，现在国人平均寿命接近75岁，10年能拿回多少退休金？- 养老个人部分退休可以逐年领回，但只算本金，按本国多年通货膨胀率测算，退休时相当于多少实际购买力？</li><li>社保里有些险种可能多数人用不到，比如失业险，多交了很多人也没得益，算下这种会占多少？</li><li>最后，要看是公司单独给员工交满额还是全社会所有公司都交满额。这也有关系？是的，公司是盈利组织，多支付了成本就要想办法收回来。</li></ul><p>近些年的社保制度，要知道以前的公寓都是不交养老保险的。现在他们推向还能拿到不菲的养老金。是谁的缴纳的呢？这样的庞氏骗局能持续多久呢？</p><p>妈妈的胃结石、奶奶的甲亢、爷爷的骨刺。身体健康最重要，讨厌医院里消毒水和中药的味道。这里的氛围代凯莱达。以前一老以为自己有绝症重病，什么后脑勺的突起，坐摩托车时的心悸，不敢去做刺激性的娱乐项目，以前去方特都只是去坐坐旋转木马，有心脏病。这就是我的极限吗？！</p><p>科室真的好赚钱，医生好闲，人到了报告</p><p>努力努力，不想当韭菜了。保护好自己的家人，努力地活下去！！！</p><p>不是什么病真是太好了，但是要考公务员。可能会离很远。我为了离得近选择了外包公司，处于鄙视链下，学习受限。接私活。可能去sn这种大公司镀个金也是个好选择吧！大平台之间跳转的重要性。</p><p>一天到晚没什么精神，让人好担心。10.3一起煮饭吃了。对菜价什么的也有了大概的了解，生活的丰富多彩。2年不到15k，大城市的高薪真是个诱惑，家里还和我说买车位emmm。</p><ul><li>revenge</li><li>protect</li><li>breakthrough</li></ul><ol><li>不去做的话永远也做不到。</li><li>要想得到什么，必须付出同等的代价。</li><li>我的钻头可是突破天际的钻头啊！</li></ol>]]></content:encoded>
      
      <comments>http://mydearest.cn/%E4%BA%BA%E4%B8%80%E7%94%9F%E5%BF%85%E9%A1%BB%E5%8E%BB%E7%9A%843%E4%B8%AA%E5%9C%B0%E6%96%B9.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>toFixed方法注意点</title>
      <link>http://mydearest.cn/toFixed%E6%96%B9%E6%B3%95%E6%B3%A8%E6%84%8F%E7%82%B9.html</link>
      <guid>http://mydearest.cn/toFixed%E6%96%B9%E6%B3%95%E6%B3%A8%E6%84%8F%E7%82%B9.html</guid>
      <pubDate>Fri, 14 Sep 2018 12:33:52 GMT</pubDate>
      <description>
      
        &lt;h3 id=&quot;遇到的问题&quot;&gt;&lt;a href=&quot;#遇到的问题&quot; class=&quot;headerlink&quot; title=&quot;遇到的问题:&quot;&gt;&lt;/a&gt;遇到的问题:&lt;/h3&gt;&lt;p&gt;js的浮点数运算不准确，(a + b).toFixed(2)能解决一部分问题，但并不完美。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;0.1&lt;/span&gt; + &lt;span class=&quot;number&quot;&gt;0.2&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;//0.30000000000000004&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;number&quot;&gt;0.1&lt;/span&gt; + &lt;span class=&quot;number&quot;&gt;0.2&lt;/span&gt;).toFixed(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// 0.30&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;0.815&lt;/span&gt; + &lt;span class=&quot;number&quot;&gt;0.1&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// 0.9149999999999999&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;number&quot;&gt;0.815&lt;/span&gt; + &lt;span class=&quot;number&quot;&gt;0.1&lt;/span&gt;).toFixed(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// 0.91，错误！期望0.92&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// toFixed并不是我们通常理解的“四舍五入”，而是“四舍六入五留双”&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 简单来说就是：四舍六入五考虑，五后非零就进一，五后为零看奇偶，五前为偶应舍去，五前为奇要进一。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;number&quot;&gt;0.225&lt;/span&gt;).toFixed(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// 0.23&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;number&quot;&gt;0.235&lt;/span&gt;).toFixed(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// 0.23，错误！期望0.24&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h3 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题:"></a>遇到的问题:</h3><p>js的浮点数运算不准确，(a + b).toFixed(2)能解决一部分问题，但并不完美。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0.1</span> + <span class="number">0.2</span> <span class="comment">//0.30000000000000004</span></span><br><span class="line">(<span class="number">0.1</span> + <span class="number">0.2</span>).toFixed(<span class="number">2</span>) <span class="comment">// 0.30</span></span><br><span class="line"><span class="number">0.815</span> + <span class="number">0.1</span> <span class="comment">// 0.9149999999999999</span></span><br><span class="line">(<span class="number">0.815</span> + <span class="number">0.1</span>).toFixed(<span class="number">2</span>) <span class="comment">// 0.91，错误！期望0.92</span></span><br><span class="line"><span class="comment">// toFixed并不是我们通常理解的“四舍五入”，而是“四舍六入五留双”</span></span><br><span class="line"><span class="comment">// 简单来说就是：四舍六入五考虑，五后非零就进一，五后为零看奇偶，五前为偶应舍去，五前为奇要进一。</span></span><br><span class="line">(<span class="number">0.225</span>).toFixed(<span class="number">2</span>) <span class="comment">// 0.23</span></span><br><span class="line">(<span class="number">0.235</span>).toFixed(<span class="number">2</span>) <span class="comment">// 0.23，错误！期望0.24</span></span><br></pre></td></tr></table></figure><hr><a id="more"></a><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>网络上有很多种解决方案，可以修正toFixed方法，也可以重新定义四则运算。重新定义四则运算，最为规范，但使用麻烦，故我最终选择了修正toFixed。声明：源码来源于网络，本文只是添加了注释和分析。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 直接替换原型链上的方法，方便使用</span></span><br><span class="line"><span class="built_in">Number</span>.prototype.toFixed = <span class="function"><span class="keyword">function</span> (<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// n为期望保留的位数，超过限定，报错！</span></span><br><span class="line">  <span class="keyword">if</span> (n &gt; <span class="number">20</span> || n &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">RangeError</span>(<span class="string">'toFixed() digits argument must be between 0 and 20'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 获取数字</span></span><br><span class="line">  <span class="keyword">const</span> number = <span class="keyword">this</span>;</span><br><span class="line">  <span class="comment">// 如果是NaN,或者数字过大，直接返回'NaN'或者类似'1e+21'的科学计数法字符串</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">isNaN</span>(number) || number &gt;= <span class="built_in">Math</span>.pow(<span class="number">10</span>, <span class="number">21</span>)) &#123;</span><br><span class="line">    <span class="keyword">return</span> number.toString();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 默认保留整数</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> (n) == <span class="string">'undefined'</span> || n == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">Math</span>.round(number)).toString();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 先获取字符串</span></span><br><span class="line">  <span class="keyword">let</span> result = number.toString();</span><br><span class="line">  <span class="comment">// 获取小数部分</span></span><br><span class="line">  <span class="keyword">const</span> arr = result.split(<span class="string">'.'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 整数的情况，直接在后面加上对应个数的0即可</span></span><br><span class="line">  <span class="keyword">if</span> (arr.length &lt; <span class="number">2</span>) &#123;</span><br><span class="line">    result += <span class="string">'.'</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; i += <span class="number">1</span>) &#123;</span><br><span class="line">      result += <span class="string">'0'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 整数和小数</span></span><br><span class="line">  <span class="keyword">const</span> integer = arr[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">const</span> decimal = arr[<span class="number">1</span>];</span><br><span class="line">  <span class="comment">// 如果已经符合要求位数，直接返回</span></span><br><span class="line">  <span class="keyword">if</span> (decimal.length == n) &#123;</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 如果小于指定的位数，补上</span></span><br><span class="line">  <span class="keyword">if</span> (decimal.length &lt; n) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n - decimal.length; i += <span class="number">1</span>) &#123;</span><br><span class="line">      result += <span class="string">'0'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 如果到这里还没结束，说明原有小数位多于指定的n位</span></span><br><span class="line">  <span class="comment">// 先直接截取对应的位数</span></span><br><span class="line">  result = integer + <span class="string">'.'</span> + decimal.substr(<span class="number">0</span>, n);</span><br><span class="line">  <span class="comment">// 获取后面的一位</span></span><br><span class="line">  <span class="keyword">const</span> last = decimal.substr(n, <span class="number">1</span>);</span><br><span class="line"> <span class="keyword">if</span> (<span class="regexp">/^\d(9)&#123;5,&#125;[89]$/</span>.test(decimal.substr(n))) &#123;</span><br><span class="line">    last = +last + <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 大于等于5统一进一位</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">parseInt</span>(last, <span class="number">10</span>) &gt;= <span class="number">5</span>) &#123;</span><br><span class="line">    <span class="comment">// 转换倍数，转换为整数后，再进行四舍五入</span></span><br><span class="line">    <span class="keyword">const</span> x = <span class="built_in">Math</span>.pow(<span class="number">10</span>, n);</span><br><span class="line">    <span class="comment">// 进一位后，转化还原为小数</span></span><br><span class="line">    result = (<span class="built_in">Math</span>.round((<span class="built_in">parseFloat</span>(result) * x)) + <span class="number">1</span>) / x;</span><br><span class="line">    <span class="comment">// 再确认一遍</span></span><br><span class="line">    result = result.toFixed(n);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>]]></content:encoded>
      
      <comments>http://mydearest.cn/toFixed%E6%96%B9%E6%B3%95%E6%B3%A8%E6%84%8F%E7%82%B9.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>js判断浏览器类型和访问来源</title>
      <link>http://mydearest.cn/js%E5%88%A4%E6%96%AD%E6%B5%8F%E8%A7%88%E5%99%A8%E7%B1%BB%E5%9E%8B%E5%92%8C%E8%AE%BF%E9%97%AE%E6%9D%A5%E6%BA%90.html</link>
      <guid>http://mydearest.cn/js%E5%88%A4%E6%96%AD%E6%B5%8F%E8%A7%88%E5%99%A8%E7%B1%BB%E5%9E%8B%E5%92%8C%E8%AE%BF%E9%97%AE%E6%9D%A5%E6%BA%90.html</guid>
      <pubDate>Mon, 10 Sep 2018 11:54:52 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;code&gt;userAgent&lt;/code&gt; 属性是一个只读的字符串，声明了浏览器用于 HTTP 请求的用户代理头的值。&lt;/p&gt;
&lt;p&gt;一般来讲，它是在 &lt;code&gt;navigator.appCodeName&lt;/code&gt; 的值之后加上斜线和 &lt;code&gt;navigator.appVersion&lt;/code&gt; 的值构成的。&lt;/p&gt;
&lt;p&gt;例如：Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.2; SV1; .NET CLR 1.1.4322)。&lt;/p&gt;
&lt;p&gt;注：用户代理头：user-agent header。&lt;/p&gt;
&lt;hr&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p><code>userAgent</code> 属性是一个只读的字符串，声明了浏览器用于 HTTP 请求的用户代理头的值。</p><p>一般来讲，它是在 <code>navigator.appCodeName</code> 的值之后加上斜线和 <code>navigator.appVersion</code> 的值构成的。</p><p>例如：Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.2; SV1; .NET CLR 1.1.4322)。</p><p>注：用户代理头：user-agent header。</p><hr><a id="more"></a><h2 id="判断浏览器类型"><a href="#判断浏览器类型" class="headerlink" title="判断浏览器类型"></a>判断浏览器类型</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//判断当前浏览类型 </span></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">BrowserType</span>(<span class="params"></span>) </span></span><br><span class="line"><span class="function"> </span>&#123; </span><br><span class="line">   <span class="keyword">var</span> userAgent = navigator.userAgent; <span class="comment">//取得浏览器的userAgent字符串 </span></span><br><span class="line">   <span class="keyword">var</span> isOpera = userAgent.indexOf(<span class="string">"Opera"</span>) &gt; <span class="number">-1</span>; <span class="comment">//判断是否Opera浏览器 </span></span><br><span class="line">   <span class="keyword">var</span> isIE = userAgent.indexOf(<span class="string">"compatible"</span>) &gt; <span class="number">-1</span> &amp;&amp; userAgent.indexOf(<span class="string">"MSIE"</span>) &gt; <span class="number">-1</span> &amp;&amp; !isOpera; <span class="comment">//判断是否IE浏览器 </span></span><br><span class="line">   <span class="keyword">var</span> isEdge = userAgent.indexOf(<span class="string">"Windows NT 6.1; Trident/7.0;"</span>) &gt; <span class="number">-1</span> &amp;&amp; !isIE; <span class="comment">//判断是否IE的Edge浏览器 </span></span><br><span class="line">   <span class="keyword">var</span> isFF = userAgent.indexOf(<span class="string">"Firefox"</span>) &gt; <span class="number">-1</span>; <span class="comment">//判断是否Firefox浏览器 </span></span><br><span class="line">   <span class="keyword">var</span> isSafari = userAgent.indexOf(<span class="string">"Safari"</span>) &gt; <span class="number">-1</span> &amp;&amp; userAgent.indexOf(<span class="string">"Chrome"</span>) == <span class="number">-1</span>; <span class="comment">//判断是否Safari浏览器 </span></span><br><span class="line">   <span class="keyword">var</span> isChrome = userAgent.indexOf(<span class="string">"Chrome"</span>) &gt; <span class="number">-1</span> &amp;&amp; userAgent.indexOf(<span class="string">"Safari"</span>) &gt; <span class="number">-1</span>; <span class="comment">//判断Chrome浏览器 </span></span><br><span class="line"> </span><br><span class="line">   <span class="keyword">if</span> (isIE)  </span><br><span class="line">   &#123; </span><br><span class="line">      <span class="keyword">var</span> reIE = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"MSIE (\\d+\\.\\d+);"</span>); </span><br><span class="line">      reIE.test(userAgent); </span><br><span class="line">      <span class="keyword">var</span> fIEVersion = <span class="built_in">parseFloat</span>(<span class="built_in">RegExp</span>[<span class="string">"$1"</span>]); </span><br><span class="line">      <span class="keyword">if</span>(fIEVersion == <span class="number">7</span>) </span><br><span class="line">      &#123; <span class="keyword">return</span> <span class="string">"IE7"</span>;&#125; </span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span>(fIEVersion == <span class="number">8</span>) </span><br><span class="line">      &#123; <span class="keyword">return</span> <span class="string">"IE8"</span>;&#125; </span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span>(fIEVersion == <span class="number">9</span>) </span><br><span class="line">      &#123; <span class="keyword">return</span> <span class="string">"IE9"</span>;&#125; </span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span>(fIEVersion == <span class="number">10</span>) </span><br><span class="line">      &#123; <span class="keyword">return</span> <span class="string">"IE10"</span>;&#125; </span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span>(fIEVersion == <span class="number">11</span>) </span><br><span class="line">      &#123; <span class="keyword">return</span> <span class="string">"IE11"</span>;&#125; </span><br><span class="line">      <span class="keyword">else</span> </span><br><span class="line">      &#123; <span class="keyword">return</span> <span class="string">"0"</span>&#125;<span class="comment">//IE版本过低 </span></span><br><span class="line">    &#125;<span class="comment">//isIE end </span></span><br><span class="line">     </span><br><span class="line">    <span class="keyword">if</span> (isFF) &#123; <span class="keyword">return</span> <span class="string">"FF"</span>;&#125; </span><br><span class="line">    <span class="keyword">if</span> (isOpera) &#123; <span class="keyword">return</span> <span class="string">"Opera"</span>;&#125; </span><br><span class="line">    <span class="keyword">if</span> (isSafari) &#123; <span class="keyword">return</span> <span class="string">"Safari"</span>;&#125; </span><br><span class="line">    <span class="keyword">if</span> (isChrome) &#123; <span class="keyword">return</span> <span class="string">"Chrome"</span>;&#125; </span><br><span class="line">    <span class="keyword">if</span> (isEdge) &#123; <span class="keyword">return</span> <span class="string">"Edge"</span>;&#125; </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="判断浏览器访问来源"><a href="#判断浏览器访问来源" class="headerlink" title="判断浏览器访问来源"></a>判断浏览器访问来源</h2><h3 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.location.href = <span class="regexp">/Android|webOS|iPhone|iPod|BlackBerry/i</span>.test(navigator.userAgent) ? <span class="string">"https://www.baidu.com/"</span> :  <span class="string">"http://news.baidu.com/"</span>;</span><br></pre></td></tr></table></figure><h3 id="方法2"><a href="#方法2" class="headerlink" title="方法2"></a>方法2</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">IsPC</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> userAgentInfo = navigator.userAgent;</span><br><span class="line">    <span class="keyword">var</span> Agents = [<span class="string">"Android"</span>, <span class="string">"iPhone"</span>,</span><br><span class="line">                <span class="string">"SymbianOS"</span>, <span class="string">"Windows Phone"</span>,</span><br><span class="line">                <span class="string">"iPad"</span>, <span class="string">"iPod"</span>];</span><br><span class="line">    <span class="keyword">var</span> flag = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> v = <span class="number">0</span>; v &lt; Agents.length; v++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (userAgentInfo.indexOf(Agents[v]) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            flag = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法3"><a href="#方法3" class="headerlink" title="方法3"></a>方法3</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">browserRedirect</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> sUserAgent = navigator.userAgent.toLowerCase();</span><br><span class="line">    <span class="keyword">var</span> bIsIpad = sUserAgent.match(<span class="regexp">/ipad/i</span>) == <span class="string">"ipad"</span>;</span><br><span class="line">    <span class="keyword">var</span> bIsIphoneOs = sUserAgent.match(<span class="regexp">/iphone os/i</span>) == <span class="string">"iphone os"</span>;</span><br><span class="line">    <span class="keyword">var</span> bIsMidp = sUserAgent.match(<span class="regexp">/midp/i</span>) == <span class="string">"midp"</span>;</span><br><span class="line">    <span class="keyword">var</span> bIsUc7 = sUserAgent.match(<span class="regexp">/rv:1.2.3.4/i</span>) == <span class="string">"rv:1.2.3.4"</span>;</span><br><span class="line">    <span class="keyword">var</span> bIsUc = sUserAgent.match(<span class="regexp">/ucweb/i</span>) == <span class="string">"ucweb"</span>;</span><br><span class="line">    <span class="keyword">var</span> bIsAndroid = sUserAgent.match(<span class="regexp">/android/i</span>) == <span class="string">"android"</span>;</span><br><span class="line">    <span class="keyword">var</span> bIsCE = sUserAgent.match(<span class="regexp">/windows ce/i</span>) == <span class="string">"windows ce"</span>;</span><br><span class="line">    <span class="keyword">var</span> bIsWM = sUserAgent.match(<span class="regexp">/windows mobile/i</span>) == <span class="string">"windows mobile"</span>;</span><br><span class="line">    <span class="keyword">if</span> (!(bIsIpad || bIsIphoneOs || bIsMidp || bIsUc7 || bIsUc || bIsAndroid || bIsCE || bIsWM) )&#123;</span><br><span class="line">        <span class="built_in">window</span>.location.href=B页面;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">browserRedirect();</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://mydearest.cn/js%E5%88%A4%E6%96%AD%E6%B5%8F%E8%A7%88%E5%99%A8%E7%B1%BB%E5%9E%8B%E5%92%8C%E8%AE%BF%E9%97%AE%E6%9D%A5%E6%BA%90.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>实现网页顶部加载条loading</title>
      <link>http://mydearest.cn/%E5%AE%9E%E7%8E%B0%E7%BD%91%E9%A1%B5%E9%A1%B6%E9%83%A8%E5%8A%A0%E8%BD%BD%E6%9D%A1loading.html</link>
      <guid>http://mydearest.cn/%E5%AE%9E%E7%8E%B0%E7%BD%91%E9%A1%B5%E9%A1%B6%E9%83%A8%E5%8A%A0%E8%BD%BD%E6%9D%A1loading.html</guid>
      <pubDate>Mon, 10 Sep 2018 11:54:52 GMT</pubDate>
      <description>
      
        &lt;h3 id=&quot;为什么要加loading的效果&quot;&gt;&lt;a href=&quot;#为什么要加loading的效果&quot; class=&quot;headerlink&quot; title=&quot;为什么要加loading的效果&quot;&gt;&lt;/a&gt;为什么要加loading的效果&lt;/h3&gt;&lt;p&gt;一款好的产品，都需要有一个漂亮的loading界面。lodaing界面不仅能给用户带来良好的体验，而且有效的消除了程序加载等待过程中的枯躁感。loading进度条更是对当前加载进度的一个良好反馈。从0%-100%的加载进度可以有效的告知用户还有多久即可打开页面。带有进度条的loading界面在程序中并不罕见，但是在web中呢？到目前为止浏览器并没有提供有效的浏览器对象来反馈页面的加载进度，所以无法直接、便捷的获得页面加载进度的反馈。&lt;/p&gt;
&lt;hr&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h3 id="为什么要加loading的效果"><a href="#为什么要加loading的效果" class="headerlink" title="为什么要加loading的效果"></a>为什么要加loading的效果</h3><p>一款好的产品，都需要有一个漂亮的loading界面。lodaing界面不仅能给用户带来良好的体验，而且有效的消除了程序加载等待过程中的枯躁感。loading进度条更是对当前加载进度的一个良好反馈。从0%-100%的加载进度可以有效的告知用户还有多久即可打开页面。带有进度条的loading界面在程序中并不罕见，但是在web中呢？到目前为止浏览器并没有提供有效的浏览器对象来反馈页面的加载进度，所以无法直接、便捷的获得页面加载进度的反馈。</p><hr><a id="more"></a><h3 id="jquery实现"><a href="#jquery实现" class="headerlink" title="jquery实现"></a>jquery实现</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"progress"</span>&gt;</span> </span><br><span class="line">   <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span>&#123; </span><br><span class="line">      <span class="attribute">margin</span>:<span class="number">0</span>; </span><br><span class="line">  &#125; </span><br><span class="line">  <span class="selector-id">#progress</span> &#123; </span><br><span class="line">      <span class="attribute">position</span>:fixed; </span><br><span class="line">      <span class="attribute">height</span>: <span class="number">2px</span>; </span><br><span class="line">      <span class="attribute">background</span>:<span class="number">#6bc30d</span>; </span><br><span class="line">      <span class="attribute">transition</span>:opacity <span class="number">500ms</span> linear </span><br><span class="line">  &#125; </span><br><span class="line">  <span class="selector-id">#progress</span><span class="selector-class">.done</span> &#123; </span><br><span class="line">      <span class="attribute">opacity</span>:<span class="number">0</span> </span><br><span class="line">  &#125; </span><br><span class="line">  <span class="selector-id">#progress</span> <span class="selector-tag">span</span> &#123; </span><br><span class="line">      <span class="attribute">position</span>:absolute; </span><br><span class="line">      <span class="attribute">height</span>:<span class="number">2px</span>; </span><br><span class="line">      <span class="attribute">-webkit-box-shadow</span>:<span class="number">#6bc30d</span> <span class="number">1px</span> <span class="number">0</span> <span class="number">6px</span> <span class="number">1px</span>; </span><br><span class="line">      <span class="attribute">-webkit-border-radius</span>:<span class="number">100%</span>; </span><br><span class="line">      <span class="attribute">opacity</span>:<span class="number">1</span>; </span><br><span class="line">      <span class="attribute">width</span>:<span class="number">150px</span>; </span><br><span class="line">      <span class="attribute">right</span>:-<span class="number">10px</span>; </span><br><span class="line">      <span class="attribute">-webkit-animation</span>:pulse <span class="number">2s</span> ease-out <span class="number">0s</span> infinite; </span><br><span class="line">  &#125; </span><br><span class="line"> </span><br><span class="line">  @-<span class="keyword">webkit</span>-<span class="keyword">keyframes</span> pulse &#123; </span><br><span class="line">      30% &#123; </span><br><span class="line">          <span class="attribute">opacity</span>:.<span class="number">6</span> </span><br><span class="line">      &#125; </span><br><span class="line">      60% &#123; </span><br><span class="line">          <span class="attribute">opacity</span>:<span class="number">0</span>; </span><br><span class="line">      &#125; </span><br><span class="line">      100% &#123; </span><br><span class="line">          <span class="attribute">opacity</span>:.<span class="number">6</span> </span><br><span class="line">      &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$(&#123;<span class="attr">property</span>: <span class="number">0</span>&#125;).animate(&#123;<span class="attr">property</span>: <span class="number">100</span>&#125;, &#123; </span><br><span class="line">    duration: <span class="number">2000</span>, </span><br><span class="line">    step: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">        <span class="keyword">var</span> percentage = <span class="built_in">Math</span>.round(<span class="keyword">this</span>.property); </span><br><span class="line"> </span><br><span class="line">        $(<span class="string">'#progress'</span>).css(<span class="string">'width'</span>,  percentage+<span class="string">"%"</span>); </span><br><span class="line"> </span><br><span class="line">         <span class="keyword">if</span>(percentage == <span class="number">100</span>) &#123; </span><br><span class="line">                $(<span class="string">"#progress"</span>).addClass(<span class="string">"done"</span>);<span class="comment">//完成，隐藏进度条 </span></span><br><span class="line">            &#125; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="tip"><a href="#tip" class="headerlink" title="tip"></a>tip</h3><ul><li>这种方法简单明了，但兼容性不是太好。主流的浏览器肯定没有问题，但如果考虑IE兼容性的，就不要用此方法了。</li><li>duration是设置时间的。默认是2秒。换算代码：2000=2秒</li><li>请引入jquery库文件。否则程序不会运行</li></ul>]]></content:encoded>
      
      <comments>http://mydearest.cn/%E5%AE%9E%E7%8E%B0%E7%BD%91%E9%A1%B5%E9%A1%B6%E9%83%A8%E5%8A%A0%E8%BD%BD%E6%9D%A1loading.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>Sass学习笔记</title>
      <link>http://mydearest.cn/sass.html</link>
      <guid>http://mydearest.cn/sass.html</guid>
      <pubDate>Sat, 01 Sep 2018 09:03:52 GMT</pubDate>
      <description>
      
        &lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;p&gt;Sass 是一款强化 CSS 的辅助工具，它在 CSS 语法的基础上增加了变量 (variables)、嵌套 (nested rules)、混合 (mixins)、导入 (inline imports) 等高级功能，这些拓展令 CSS 更加强大与优雅。&lt;/p&gt;
&lt;hr&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>Sass 是一款强化 CSS 的辅助工具，它在 CSS 语法的基础上增加了变量 (variables)、嵌套 (nested rules)、混合 (mixins)、导入 (inline imports) 等高级功能，这些拓展令 CSS 更加强大与优雅。</p><hr><a id="more"></a><h3 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">import</span> <span class="string">"reset.css"</span>; <span class="comment">// css</span></span><br><span class="line">@<span class="keyword">import</span> <span class="string">"index"</span>; <span class="comment">// sass</span></span><br></pre></td></tr></table></figure><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 普通变量</span></span><br><span class="line">$fontSize:<span class="number">16</span>px;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认变量</span></span><br><span class="line">$baseLineHeight: <span class="number">1.5</span> !<span class="keyword">default</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 覆盖默认变量，需要写在 !default 前面</span></span><br><span class="line">$baseLineHeight: <span class="number">1.7</span>;</span><br><span class="line">$baseLineHeight: <span class="number">1.5</span> !<span class="keyword">default</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一维 list</span></span><br><span class="line">$px: (<span class="number">5</span>px <span class="number">10</span>px <span class="number">20</span>px <span class="number">30</span>px);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 二维 list</span></span><br><span class="line">$px: (<span class="number">5</span>px <span class="number">10</span>px)</span><br><span class="line">     (<span class="number">20</span>px <span class="number">30</span>px);</span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line">$pxs: <span class="number">5</span>px <span class="number">10</span>px, <span class="number">20</span>px <span class="number">30</span>px;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Map 类似对象</span></span><br><span class="line">$heading: (</span><br><span class="line">    h1: <span class="number">2</span>em,</span><br><span class="line">    h2: <span class="number">1.5</span>em,</span><br><span class="line">    h3: <span class="number">1.2</span>em</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="插值"><a href="#插值" class="headerlink" title="插值"></a>插值</h3><p>插值使用 #{}<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Variables</span></span><br><span class="line">$mySelector: banner;</span><br><span class="line"></span><br><span class="line"><span class="comment">// .banner</span></span><br><span class="line">.#&#123;mySelector&#125; &#123;</span><br><span class="line">    font-weight: bold;</span><br><span class="line">    line-height: <span class="number">40</span>px;</span><br><span class="line">    margin: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="跳出嵌套"><a href="#跳出嵌套" class="headerlink" title="跳出嵌套"></a>跳出嵌套</h3><p>@at-root (without: rule| all | media)<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 跳出普通的嵌套</span></span><br><span class="line">.demo &#123;</span><br><span class="line">    animation: motion <span class="number">3</span>s infinite;</span><br><span class="line"></span><br><span class="line">    @at-root &#123;</span><br><span class="line">        @keyframes motion &#123;</span><br><span class="line">          ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 跳出 media 嵌套</span></span><br><span class="line">@media print &#123;</span><br><span class="line">    .parent2&#123;</span><br><span class="line">        color:#f00;</span><br><span class="line"></span><br><span class="line">        @at-root (without: media) &#123;</span><br><span class="line">            .child2 &#123;</span><br><span class="line">                width:<span class="number">200</span>px;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="混合-mixin"><a href="#混合-mixin" class="headerlink" title="混合(mixin)"></a>混合(mixin)</h3><p>使用 @mixin 声明混合，可以传递参数，参数名以$符号开始，多个参数以逗号分开，也可以给参数设置默认值。@mixin 通过 @include 来调用。混合器中不仅可以包含属性，也可以包含 css 规则，包含选择器和选择器中的属性，也可以使用 &amp; 上下文。</p><p>为便于书写，@mixin 可以用 = 表示，而 @include 可以用 + 表示<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 无参数</span></span><br><span class="line">@mixin block &#123;</span><br><span class="line">    display: block;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// css 规则，注意上下文</span></span><br><span class="line">@mixin no-bullets &#123;</span><br><span class="line">    list-style: none;</span><br><span class="line">    li &#123;</span><br><span class="line">        list-style-image: none;</span><br><span class="line">        list-style-type: none;</span><br><span class="line">        margin-left: <span class="number">0</span>px;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 带参数</span></span><br><span class="line">@mixin opacity($opacity: <span class="number">50</span>) &#123;</span><br><span class="line">    opacity: $opacity / <span class="number">100</span>;</span><br><span class="line">    filter: alpha(opacity=$opacity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 多个参数</span></span><br><span class="line">@mixin horizontal-line($border: 1px dashed #ccc, $padding: 10px)&#123;</span><br><span class="line">    border-bottom: $border;</span><br><span class="line">    padding-top: $padding;</span><br><span class="line">    padding-bottom: $padding;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@include horizontal-line($padding: <span class="number">15</span>px);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 多组值参数</span></span><br><span class="line">@mixin box-shadow($shadow...) &#123;</span><br><span class="line">    -webkit-box-shadow:$shadow;</span><br><span class="line">    box-shadow:$shadow;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@include box-shadow(</span><br><span class="line">    <span class="number">0</span> <span class="number">2</span>px <span class="number">2</span>px rgba(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.3</span>),</span><br><span class="line">    <span class="number">0</span> <span class="number">3</span>px <span class="number">3</span>px rgba(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.2</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p><h4 id="Content"><a href="#Content" class="headerlink" title="@Content"></a>@Content</h4><p>@content 它可以使 @mixin 接受一整块样式，接受的样式从 @content 开始。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@mixin max-screen($res) &#123;</span><br><span class="line">    @media only screen and ( max-width: $res ) &#123;</span><br><span class="line">        @content; <span class="comment">// body &#123; color: red &#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@include max-screen(<span class="number">480</span>px) &#123;</span><br><span class="line">    body &#123; <span class="attr">color</span>: red &#125; <span class="comment">// 这里就i @content 引用的内容</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>选择器继承可以让选择器继承另一个选择器的所有样式，并联合声明。使用选择器的继承，要使用关键词 @extend，后面紧跟需要继承的选择器。继承可以继承默认的元素属性，比如让一个div继承a，那么这 div 看起来就好像 a 一样。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 继承现有的标签，或类</span></span><br><span class="line">h1&#123;</span><br><span class="line">    border: 4px solid #ff9aa9;</span><br><span class="line">&#125;</span><br><span class="line">.speaker&#123;</span><br><span class="line">    @extend h1;</span><br><span class="line">    border-width: <span class="number">2</span>px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="占位选择器"><a href="#占位选择器" class="headerlink" title="占位选择器%"></a>占位选择器%</h2><p>可以定义占位选择器 %，如果不调用则不会有任何多余的 css 代码。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">%block &#123;</span><br><span class="line">    display: block;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.box &#123;</span><br><span class="line">    @extend %block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>sass定义了很多函数可供使用，当然你也可以自己定义函数，以@fuction开始。</p><p>使用最多的是颜色函数：颜色函数中又以 lighten 减淡和 darken 加深为最，其调用方法为 lighten($color, $amount) 和 darken($color, $amount)它们的第一个参数都是颜色值，第二个参数都是百分比。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@<span class="function"><span class="keyword">function</span> <span class="title">pxToRem</span>(<span class="params">$px</span>) </span>&#123;</span><br><span class="line">    @<span class="keyword">return</span> $px / $baseFontSize * <span class="number">1</span>rem;</span><br><span class="line">&#125;</span><br><span class="line">body &#123;</span><br><span class="line">    color: lighten($gray, <span class="number">10</span>%); <span class="comment">// 直接使用</span></span><br><span class="line">&#125;</span><br><span class="line">div &#123;</span><br><span class="line">    font-size: pxToRem(<span class="number">16</span>px);</span><br><span class="line">    color: darken($gray, <span class="number">10</span>%);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="if判断"><a href="#if判断" class="headerlink" title="@if判断"></a>@if判断</h2><p>@if 可一个条件单独使用，也可以和 @else 结合多条件使用<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$big: <span class="literal">false</span>;</span><br><span class="line">p &#123;</span><br><span class="line">    @<span class="keyword">if</span> $big == <span class="literal">false</span> &#123;</span><br><span class="line">        margin: <span class="number">10</span>px;</span><br><span class="line">    &#125;</span><br><span class="line">    @<span class="keyword">else</span> &#123;</span><br><span class="line">        margin: <span class="number">10</span>px auto;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="三目判断"><a href="#三目判断" class="headerlink" title="三目判断"></a>三目判断</h2><p>语法为：if($condition, $if_true, $if_false) 。三个参数分别表示：条件，条件为真的值，条件为假的值。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$min: <span class="number">20</span>;</span><br><span class="line">p &#123;</span><br><span class="line">    color: <span class="keyword">if</span>($min &gt; <span class="number">10</span>, red, blue); <span class="comment">// blue</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h2><p>for 循环有两种形式，分别为：@for $var from [start] through [end] 和 @for $var from [start] to [end]。关键字through表示包括end这个数，而to则不包括end这个数。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">for</span> $i <span class="keyword">from</span> <span class="number">1</span> through <span class="number">3</span> &#123;</span><br><span class="line">    .item-#&#123;$i&#125; &#123; width: 2em * $i; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="each-循环"><a href="#each-循环" class="headerlink" title="@each 循环"></a>@each 循环</h2><p>语法为：@each $var in [list or map]<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$headings: (h1: <span class="number">2</span>em, <span class="attr">h2</span>: <span class="number">1.5</span>em, <span class="attr">h3</span>: <span class="number">1.2</span>em);</span><br><span class="line">@each $header, $size <span class="keyword">in</span> $headings &#123;</span><br><span class="line">    #&#123;$header&#125; &#123;</span><br><span class="line">        font-size: $size;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content:encoded>
      
      <comments>http://mydearest.cn/sass.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>如何练就超强的学习能力</title>
      <link>http://mydearest.cn/%E5%A6%82%E4%BD%95%E7%BB%83%E5%B0%B1%E8%B6%85%E5%BC%BA%E7%9A%84%E5%AD%A6%E4%B9%A0%E8%83%BD%E5%8A%9B.html</link>
      <guid>http://mydearest.cn/%E5%A6%82%E4%BD%95%E7%BB%83%E5%B0%B1%E8%B6%85%E5%BC%BA%E7%9A%84%E5%AD%A6%E4%B9%A0%E8%83%BD%E5%8A%9B.html</guid>
      <pubDate>Sat, 01 Sep 2018 08:13:37 GMT</pubDate>
      <description>
      
        &lt;h3 id=&quot;学习开始前的准备&quot;&gt;&lt;a href=&quot;#学习开始前的准备&quot; class=&quot;headerlink&quot; title=&quot;学习开始前的准备&quot;&gt;&lt;/a&gt;学习开始前的准备&lt;/h3&gt;&lt;p&gt;心态我认为世界上没有“困难”的内容，只有“简单但是不完整”的内容。爱因斯坦说：“如果你不能让一个五岁小孩理解你的概念，那就意味着你对这个概念不够了解。”这句话的含义很丰富。首先，为什么一个五岁小孩具备可以理解所有概念的能力？因为所有概念本质上都是一个逻辑链条，一环接一环。只要把每一个环节的逻辑理解了，那你对这个概念本身就理解透了。这个逻辑链条上的每一环都不困难，所以一个五岁小孩都能理解。理解一个概念最困难的地方在于填补一个断裂的逻辑链条。很多时候，教科书里会说：“因为A，所以C。” 然而那个概念其实是“因为A，所以B，所以C。”在这个时候我们就会头大：看不懂A和C之间的联系啊，难道是因为A所以D所以C？还是因为A所以E所以C？困难就是在这个过程中出现的。我们都曾有过这个经历：自己苦苦思索了许久的难题，在别人一两句话的点拨下就豁然开朗。这种经历的本质就是对方告诉了你：“A和C之间缺失的那个部分是B。”从A到B到C的逻辑不难，难的是修补A和C之间断裂的逻辑链条。因此，我再次重复：世界上没有“困难”的内容，只有“简单但是不完整”的内容。当你在学习上感到气馁时，记住上面这句话，它将会给你继续探索的信心和勇气。&lt;/p&gt;
&lt;hr&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h3 id="学习开始前的准备"><a href="#学习开始前的准备" class="headerlink" title="学习开始前的准备"></a>学习开始前的准备</h3><p>心态我认为世界上没有“困难”的内容，只有“简单但是不完整”的内容。爱因斯坦说：“如果你不能让一个五岁小孩理解你的概念，那就意味着你对这个概念不够了解。”这句话的含义很丰富。首先，为什么一个五岁小孩具备可以理解所有概念的能力？因为所有概念本质上都是一个逻辑链条，一环接一环。只要把每一个环节的逻辑理解了，那你对这个概念本身就理解透了。这个逻辑链条上的每一环都不困难，所以一个五岁小孩都能理解。理解一个概念最困难的地方在于填补一个断裂的逻辑链条。很多时候，教科书里会说：“因为A，所以C。” 然而那个概念其实是“因为A，所以B，所以C。”在这个时候我们就会头大：看不懂A和C之间的联系啊，难道是因为A所以D所以C？还是因为A所以E所以C？困难就是在这个过程中出现的。我们都曾有过这个经历：自己苦苦思索了许久的难题，在别人一两句话的点拨下就豁然开朗。这种经历的本质就是对方告诉了你：“A和C之间缺失的那个部分是B。”从A到B到C的逻辑不难，难的是修补A和C之间断裂的逻辑链条。因此，我再次重复：世界上没有“困难”的内容，只有“简单但是不完整”的内容。当你在学习上感到气馁时，记住上面这句话，它将会给你继续探索的信心和勇气。</p><hr><a id="more"></a><h3 id="痴迷（obsession）"><a href="#痴迷（obsession）" class="headerlink" title="痴迷（obsession）"></a>痴迷（obsession）</h3><p>“痴迷”是我用过的最有效的方法。当我学到一个新概念时，如果我不能马上理解它，我就会一整天反复在脑中思索这个概念：走路时、吃饭时、坐车时都在思考。其实就是把别人看手机的时间拿来思考概念了。但是“痴迷”和常见的“利用碎片时间”有一个根本性的不同。利用碎片时间是被动的，是“因为我有这些时间，所以我要利用好它”；而痴迷是主动的，是“我对这个内容很好奇，所以我要弄懂它。”换句话说，利用碎片时间的重点在于“利用时间”，而痴迷的重点在于“你很好奇”。当你用“痴迷”的方法想通一个概念时，你就会把这个概念记得特别牢固，因为1）你花了很多时间反复思考它，这本身就是一个记忆的过程；2）你对这个概念会有自己的理解，知其然并知其所以然，而不是单纯把教科书背了下来。“知其然并知其所以然”意味着当你对这个概念的记忆变得模糊时，你脑里将有更多关于这个概念的内容来“提示”你将其记起来。</p><h3 id="有效率的学习策略"><a href="#有效率的学习策略" class="headerlink" title="有效率的学习策略"></a>有效率的学习策略</h3><p>当你遇到一道数学难题时，你会怎么做？查答案？自己苦苦思索？开始玩手机逃避？我的做法是在有答案的情况下先查答案，不浪费时间在解题过程上，而是把时间都花在理解概念上。这样才可以把时间的效用最大化，因为难题都是树的叶子，而题目考察的概念是树的主干。一棵树只有一个主干，但是可以有茫茫多的叶子。如果你每个难题都自己思索的话，你大概率得学到猴年马月了。因此，应对难题最好的方法不是硬刚，而是找答案。</p>]]></content:encoded>
      
      <comments>http://mydearest.cn/%E5%A6%82%E4%BD%95%E7%BB%83%E5%B0%B1%E8%B6%85%E5%BC%BA%E7%9A%84%E5%AD%A6%E4%B9%A0%E8%83%BD%E5%8A%9B.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>选择</title>
      <link>http://mydearest.cn/%E9%80%89%E6%8B%A9.html</link>
      <guid>http://mydearest.cn/%E9%80%89%E6%8B%A9.html</guid>
      <pubDate>Sat, 01 Sep 2018 03:30:37 GMT</pubDate>
      <description>
      
        &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;没有方向的船，任何方向都是逆风。&lt;/p&gt;
&lt;/blockquote&gt; 
&lt;p&gt;选择比努力更加重要。在中国这个有着特殊国情的国家里，个人的位置是很难找准定位的。混的差了，被人鄙夷。混的好了招人记恨。人就是喜欢互相比较，每个人的学习产出比是不一样的。不满足于现状，总想着明天一定比今天的自己强。&lt;/p&gt;
&lt;hr&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote class="blockquote-center"><p>没有方向的船，任何方向都是逆风。</p></blockquote> <p>选择比努力更加重要。在中国这个有着特殊国情的国家里，个人的位置是很难找准定位的。混的差了，被人鄙夷。混的好了招人记恨。人就是喜欢互相比较，每个人的学习产出比是不一样的。不满足于现状，总想着明天一定比今天的自己强。</p><hr><a id="more"></a><p>每个人的格局和所谓的幸福度都是不一样的，nj1年10k看上去已经不错了，比上不足比下有余。有很多老家的年轻人拿着微薄的薪水过着随遇而安的生活，而有自尊心希望受到别人的肯定，努力地活下去。去外包就去外包吧，钱给足也是可以的。福利待遇有不错。就是估计要上sn和tn的黑名单了，发了offer都不去。。。也有需要重新租房等一系列问题。就是技术单一，工作环境差，内网环境。不管怎样都不能懈怠，不会这么一直干下去。</p>]]></content:encoded>
      
      <comments>http://mydearest.cn/%E9%80%89%E6%8B%A9.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>console控制台优化</title>
      <link>http://mydearest.cn/console%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3.html</link>
      <guid>http://mydearest.cn/console%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3.html</guid>
      <pubDate>Thu, 30 Aug 2018 09:13:08 GMT</pubDate>
      <description>
      
        &lt;p&gt;熟悉前端的不会对console和alert陌生，两者在调试的时候可谓是法宝级别的工具，但是关于console，其实远远不止于console.log这一个简单的命令，它能做的事情有很多，那么让我们来一起了解一下，它有哪些冷门功能吧。&lt;/p&gt;
&lt;hr&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>熟悉前端的不会对console和alert陌生，两者在调试的时候可谓是法宝级别的工具，但是关于console，其实远远不止于console.log这一个简单的命令，它能做的事情有很多，那么让我们来一起了解一下，它有哪些冷门功能吧。</p><hr><a id="more"></a><h3 id="显示信息的命令"><a href="#显示信息的命令" class="headerlink" title="显示信息的命令"></a>显示信息的命令</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'hello world'</span>);</span><br><span class="line"><span class="built_in">console</span>.info(<span class="string">'信息'</span>);</span><br><span class="line"><span class="built_in">console</span>.error(<span class="string">'错误'</span>);</span><br><span class="line"><span class="built_in">console</span>.warn(<span class="string">'警告'</span>);</span><br></pre></td></tr></table></figure><h3 id="占位符"><a href="#占位符" class="headerlink" title="占位符"></a>占位符</h3><p>​ console上述的集中度支持printf的占位符格式，支持的占位符有：字符（%s）、整数（%d或%i）、浮点数（%f）和对象（%o）<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">"%d年%d月%d日"</span>,<span class="number">2016</span>,<span class="number">11</span>,<span class="number">11</span>);</span><br></pre></td></tr></table></figure></p><h3 id="信息分组"><a href="#信息分组" class="headerlink" title="信息分组"></a>信息分组</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.group(<span class="string">"第一组信息"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"第一组第一条:何问起(http://hovertree.com)"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"第一组第二条:柯乐义(http://keleyi.com)"</span>);</span><br><span class="line"><span class="built_in">console</span>.groupEnd();</span><br><span class="line"><span class="built_in">console</span>.group(<span class="string">"第二组信息"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"第二组第一条:HoverClock 一个jQuery时钟插件"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"第二组第二条:欢迎使用"</span>);</span><br><span class="line"><span class="built_in">console</span>.groupEnd();</span><br></pre></td></tr></table></figure><h3 id="对象信息"><a href="#对象信息" class="headerlink" title="对象信息"></a>对象信息</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj=&#123;</span><br><span class="line">    id:<span class="number">1</span>,</span><br><span class="line">    name:<span class="number">123</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.dir(obj)</span><br></pre></td></tr></table></figure><h3 id="显示网页节点"><a href="#显示网页节点" class="headerlink" title="显示网页节点"></a>显示网页节点</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.dirxml()用来显示网页的某个节点（node）所包含的html/xml代码</span><br><span class="line"><span class="keyword">var</span> info = <span class="built_in">document</span>.getElementById(<span class="string">'info'</span>);</span><br><span class="line"><span class="built_in">console</span>.dirxml(info);</span><br></pre></td></tr></table></figure><h3 id="判断变量是否为真"><a href="#判断变量是否为真" class="headerlink" title="判断变量是否为真"></a>判断变量是否为真</h3><p>​console.assert()用来判断一个表达式或变量是否为真。如果结果为否，则在控制台输出一条相应信息，并且抛出一个异常。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.assert(<span class="number">1</span> == <span class="number">1</span>); </span><br><span class="line"><span class="built_in">console</span>.assert(<span class="number">1</span> == <span class="number">2</span>); <span class="comment">// Assertion failed: console.assert</span></span><br></pre></td></tr></table></figure></p><h3 id="追踪函数的调用踪迹"><a href="#追踪函数的调用踪迹" class="headerlink" title="追踪函数的调用踪迹"></a>追踪函数的调用踪迹</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.trace();</span><br><span class="line"><span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> x = add3(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add3</span>(<span class="params">a,b</span>)</span>&#123;<span class="keyword">return</span> add2(a,b);&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add2</span>(<span class="params">a,b</span>)</span>&#123;<span class="keyword">return</span> add1(a,b);&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add1</span>(<span class="params">a,b</span>)</span>&#123;<span class="keyword">return</span> add(a,b);&#125;</span><br><span class="line"><span class="comment">// add add1 add2 add3</span></span><br></pre></td></tr></table></figure><h3 id="计时功能"><a href="#计时功能" class="headerlink" title="计时功能"></a>计时功能</h3><p>console.time()和console.timeEnd()，用来显示代码的运行时间。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.time(<span class="string">"控制台计时器一"</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">10000</span>;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> j=<span class="number">0</span>;j&lt;<span class="number">1000</span>;j++)&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.timeEnd(<span class="string">"控制台计时器一"</span>);</span><br></pre></td></tr></table></figure></p>]]></content:encoded>
      
      <comments>http://mydearest.cn/console%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>JavaScript性能优化</title>
      <link>http://mydearest.cn/js%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96.html</link>
      <guid>http://mydearest.cn/js%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96.html</guid>
      <pubDate>Wed, 29 Aug 2018 16:17:32 GMT</pubDate>
      <description>
      
        &lt;h3 id=&quot;评估局部变量&quot;&gt;&lt;a href=&quot;#评估局部变量&quot; class=&quot;headerlink&quot; title=&quot;评估局部变量&quot;&gt;&lt;/a&gt;评估局部变量&lt;/h3&gt;&lt;p&gt;主要针对IE而言，由于局部变量的查找是从最特定作用域到最大作用域，且可以通过多个域
层级，所以这种查找会导致查询到通用的结果。在定义函数作用域的时候，如果一个局部变
量在之前没有进行过var变量声明， 那么此处一定要在变量名前加上var关键字以定义其当
前的作用域和防止查询，从而提高代码的速度。&lt;/p&gt;
&lt;hr&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h3 id="评估局部变量"><a href="#评估局部变量" class="headerlink" title="评估局部变量"></a>评估局部变量</h3><p>主要针对IE而言，由于局部变量的查找是从最特定作用域到最大作用域，且可以通过多个域层级，所以这种查找会导致查询到通用的结果。在定义函数作用域的时候，如果一个局部变量在之前没有进行过var变量声明， 那么此处一定要在变量名前加上var关键字以定义其当前的作用域和防止查询，从而提高代码的速度。</p><hr><a id="more"></a><h3 id="除非必要，否则不要使用嵌套循环"><a href="#除非必要，否则不要使用嵌套循环" class="headerlink" title="除非必要，否则不要使用嵌套循环"></a>除非必要，否则不要使用嵌套循环</h3><p>减少不必要的循环，例如 for 和 while 循环，以保持 JavaScript 的线性，并避免需要遍历数千个对象。无用的循环可能会导致浏览器处理代码时更困难，从而减缓速度。</p><h3 id="缓存对象以提高性能"><a href="#缓存对象以提高性能" class="headerlink" title="缓存对象以提高性能"></a>缓存对象以提高性能</h3><p>很多时候，会重复使用脚本来访问某个对象。 将重复访问的对象存储在用户定义的变量中，并且之后在引用该对象时使用此变量，可以立刻实现性能提升。</p><h3 id="使用-js文件来缓存脚本"><a href="#使用-js文件来缓存脚本" class="headerlink" title="使用.js文件来缓存脚本"></a>使用.js文件来缓存脚本</h3><p>使用这种技术可以实现性能提升，因为它允许浏览器只加载脚本一次，当页面被重新加载或重新访问时只需要从缓存中调用脚本即可。</p><h3 id="使用Gzip压缩文件"><a href="#使用Gzip压缩文件" class="headerlink" title="使用Gzip压缩文件"></a>使用Gzip压缩文件</h3><p>使用 GZip 可以明显地降低 JavaScript 文件的大小，节省带宽，并加快响应时间。 有时 JavaScript 文件非常大，如果没有经过压缩，它可能会造成网站瘫痪。较小的文件能提供更快、更令人满意的网页体验。</p><h3 id="尽量减少对HTTP的请求"><a href="#尽量减少对HTTP的请求" class="headerlink" title="尽量减少对HTTP的请求"></a>尽量减少对HTTP的请求</h3><p>通过结合外部文件和直接在 XHTML 页面中嵌入 JavaScript 来尽量减少对 HTTP 返回页面的请求。 每一个特定的 HTTP 请求传输至服务器端都会导致大量的时延。</p><h3 id="不要重复使用相同的脚本"><a href="#不要重复使用相同的脚本" class="headerlink" title="不要重复使用相同的脚本"></a>不要重复使用相同的脚本</h3><p>复的脚本对性能会造成显著的影响。重复的脚本会创建不需要的HTTP请求，尤其是在IE浏览器中。在HTML页面中使用脚本标签，可以帮助避免意外地生成重复的脚本。</p><h3 id="缩短作用域链"><a href="#缩短作用域链" class="headerlink" title="缩短作用域链"></a>缩短作用域链</h3><p>全局作用域通常较慢，因为每次执行函数的时候，它会引发创建一个临时的调用作用域，JavaScript 会在作用域链中搜索第一个对象，如果找不到该变量，则会遍历链直到搜索到全局对象。</p><h3 id="使用函数内联"><a href="#使用函数内联" class="headerlink" title="使用函数内联"></a>使用函数内联</h3><p>函数内联有助于减少函数调用的成本，并用被调用的函数体替换函数调用。 在 JavaScript 中执行函数调用是一个高成本的操作，因为需要执行几个准备步骤：为参数分配空间，复制参数以及解析函数名称。</p><h3 id="尽量不要使用全局变量"><a href="#尽量不要使用全局变量" class="headerlink" title="尽量不要使用全局变量"></a>尽量不要使用全局变量</h3><p>由于脚本引擎需要搜索作用域，所以当从函数内部或其他作用域内引用全局变量时，如果局部作用域丢失，全局变量将被销毁。如果全局作用域中的变量并不一直存在于脚本的生命周期，则可以提升性能。</p><h3 id="不要一直保留对其他文档的引用"><a href="#不要一直保留对其他文档的引用" class="headerlink" title="不要一直保留对其他文档的引用"></a>不要一直保留对其他文档的引用</h3><p>当脚本结束后不再保留对其他文档的引用可以实现更快的性能。因为对其他文档中的对象进行的任何引用不会被保存在整个 DOM 树中，并且脚本环境也不会一直保留在内存中。 因此文档本身不用再被加载。</p><h3 id="不要误用-for-in-Object-hasOwnProperty-只遍历当前对象"><a href="#不要误用-for-in-Object-hasOwnProperty-只遍历当前对象" class="headerlink" title="不要误用 for-in Object.hasOwnProperty()只遍历当前对象"></a>不要误用 for-in Object.hasOwnProperty()只遍历当前对象</h3><p>由于“for-in”循环需要脚本引擎构建包含所有可枚举属性的列表，因此 for 循环内的代码是不会修改这个列表的。 在 for 循环内部，预先计算出列表的长度并赋给变量 len，然后进行迭代。</p>]]></content:encoded>
      
      <comments>http://mydearest.cn/js%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>classNames在react上的应用</title>
      <link>http://mydearest.cn/classNames%E5%9C%A8react%E4%B8%8A%E7%9A%84%E5%BA%94%E7%94%A8.html</link>
      <guid>http://mydearest.cn/classNames%E5%9C%A8react%E4%B8%8A%E7%9A%84%E5%BA%94%E7%94%A8.html</guid>
      <pubDate>Thu, 23 Aug 2018 09:22:35 GMT</pubDate>
      <description>
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;在 Vue 里有一个动态的 class 语法，很好的根据条件动态设置 class。例如：
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;div &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;button&quot;&lt;/span&gt; :&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;&amp;#123; active: show &amp;#125;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;就是当 show 为 true 时，此标签被赋予 active 样式。&lt;/p&gt;
&lt;p&gt;在 React 要实现这样功能，可能会这样做：
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;div className=&amp;#123;&lt;span class=&quot;string&quot;&gt;`button &lt;span class=&quot;subst&quot;&gt;$&amp;#123;show ? &lt;span class=&quot;string&quot;&gt;&#39;active&#39;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;&amp;#125;&lt;/span&gt;`&lt;/span&gt;&amp;#125;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;注意到，这里只有一个属性判断，如果有多个时会显得非常麻烦，那么现在使用 &lt;a href=&quot;https://github.com/JedWatson/classnames&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ClassNames&lt;/a&gt; 这个库来解决这个问题。&lt;/p&gt;
&lt;hr&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在 Vue 里有一个动态的 class 语法，很好的根据条件动态设置 class。例如：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"button"</span> :<span class="class"><span class="keyword">class</span></span>=<span class="string">"&#123; active: show &#125;"</span>&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p>就是当 show 为 true 时，此标签被赋予 active 样式。</p><p>在 React 要实现这样功能，可能会这样做：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div className=&#123;<span class="string">`button <span class="subst">$&#123;show ? <span class="string">'active'</span> : <span class="string">''</span>&#125;</span>`</span>&#125;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p>注意到，这里只有一个属性判断，如果有多个时会显得非常麻烦，那么现在使用 <a href="https://github.com/JedWatson/classnames" target="_blank" rel="noopener">ClassNames</a> 这个库来解决这个问题。</p><hr><a id="more"></a><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><p><code>ClassNames</code> 是一个高性能、简便的用户根据条件动态设置 <code>className</code> 的 <code>Javascript</code> 库。</p><p>它的使用非常简单，来看看下面的几种使用方式。（自己也可以开发一个类似的库，不过没必要再造轮子）<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> classNames <span class="keyword">from</span> <span class="string">'classnames'</span>;</span><br><span class="line"></span><br><span class="line">classNames(<span class="string">'foo'</span>, <span class="string">'bar'</span>);                   <span class="comment">// =&gt; 'foo bar'</span></span><br><span class="line">classNames(<span class="string">'foo'</span>, &#123; <span class="attr">bar</span>: <span class="literal">true</span> &#125;);           <span class="comment">// =&gt; 'foo bar'</span></span><br><span class="line">classNames(&#123; <span class="string">'foo-bar'</span>: <span class="literal">true</span> &#125;);            <span class="comment">// =&gt; 'foo-bar'</span></span><br><span class="line">classNames(&#123; <span class="string">'foo-bar'</span>: <span class="literal">false</span> &#125;);           <span class="comment">// =&gt; ''</span></span><br><span class="line">classNames(&#123; <span class="attr">foo</span>: <span class="literal">true</span> &#125;, &#123; <span class="attr">bar</span>: <span class="literal">true</span> &#125;);   <span class="comment">// =&gt; 'foo bar'</span></span><br><span class="line">classNames(&#123; <span class="attr">foo</span>: <span class="literal">true</span>, <span class="attr">bar</span>: <span class="literal">true</span> &#125;);       <span class="comment">// =&gt; 'foo bar'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 多级嵌套，多参数</span></span><br><span class="line">classNames(<span class="string">'foo'</span>, &#123; <span class="attr">bar</span>: <span class="literal">true</span>, <span class="attr">duck</span>: <span class="literal">false</span> &#125;, <span class="string">'baz'</span>, &#123; <span class="attr">quux</span>: <span class="literal">true</span> &#125;);</span><br><span class="line"><span class="comment">// =&gt; 'foo bar baz quux'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// !! 为 false 的将被忽略</span></span><br><span class="line">classNames(<span class="literal">null</span>, <span class="literal">false</span>, <span class="string">'bar'</span>, <span class="literal">undefined</span>, <span class="number">0</span>, <span class="number">1</span>, &#123; <span class="attr">baz</span>: <span class="literal">null</span> &#125;, <span class="string">''</span>);</span><br><span class="line"><span class="comment">// =&gt; 'bar 1'</span></span><br></pre></td></tr></table></figure></p><h3 id="动态属性名"><a href="#动态属性名" class="headerlink" title="动态属性名"></a>动态属性名</h3><p>在 ES6 下，可以使用模板语法，来设置跟强大的动态 <code>className</code>。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> buttonType = <span class="string">'primary'</span>;</span><br><span class="line">classNames(&#123; [<span class="string">`btn-<span class="subst">$&#123;buttonType&#125;</span>`</span>]: <span class="literal">true</span> &#125;);</span><br></pre></td></tr></table></figure></p><h3 id="去重功能dedupe"><a href="#去重功能dedupe" class="headerlink" title="去重功能dedupe"></a>去重功能dedupe</h3><p>使用 dedupe 版本的 classNames 可以正确地对类进行重复数据删除，并确保在后面的参数中指定的错误类从结果集中排除。dedupe 会慢（约5倍），因此它是作为选择提供的（在默认是不会去重的）。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> classNames <span class="keyword">from</span> <span class="string">'classnames/dedupe'</span>;</span><br><span class="line"></span><br><span class="line">classNames(<span class="string">'foo'</span>, <span class="string">'foo'</span>, <span class="string">'bar'</span>);                <span class="comment">// =&gt; 'foo bar'</span></span><br><span class="line">classNames(<span class="string">'foo'</span>, &#123; <span class="attr">foo</span>: <span class="literal">false</span>, <span class="attr">bar</span>: <span class="literal">true</span> &#125;);   <span class="comment">// =&gt; 'bar'</span></span><br></pre></td></tr></table></figure></p><h3 id="映射bind"><a href="#映射bind" class="headerlink" title="映射bind"></a>映射bind</h3><p>如果您使用 css-modules 或类似的方法来抽象类“名称”以及 className 实际输出到 DOM 的真实值，那么要使用 bind 版本。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> classNames <span class="keyword">from</span> <span class="string">'classnames/bind'</span>;</span><br><span class="line"><span class="comment">// 映射关系</span></span><br><span class="line"><span class="keyword">const</span> styles = &#123;</span><br><span class="line">    foo: <span class="string">'abc'</span>,</span><br><span class="line">    bar: <span class="string">'def'</span>,</span><br><span class="line">    baz: <span class="string">'xyz'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> cx = classNames.bind(styles);</span><br><span class="line"><span class="keyword">const</span> className = cx(<span class="string">'foo'</span>, [<span class="string">'bar'</span>], &#123; <span class="attr">baz</span>: <span class="literal">true</span> &#125;);  <span class="comment">//（1） =&gt; "abc def xyz"</span></span><br><span class="line"><span class="comment">// const className = cx('abc', ['def'], &#123; xyz: true &#125;); （2）</span></span><br></pre></td></tr></table></figure></p><p>这里什么意思呢？实际上就是把 foo 与 abc 产生映射，也就是说 （1） 和 （2） 两条语句是等效的，好处就像是定义一些常量一样。</p><h3 id="在React上使用"><a href="#在React上使用" class="headerlink" title="在React上使用"></a>在React上使用</h3><p>如antd上的源码，prefix定义class<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> prefixCls = <span class="string">'alter'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> classs = classNames(prefixCls, &#123;</span><br><span class="line">    [<span class="string">`<span class="subst">$&#123;prefixCls&#125;</span>-<span class="subst">$&#123;type&#125;</span>`</span>]: <span class="literal">true</span>,</span><br><span class="line">    [<span class="string">`<span class="subst">$&#123;prefixCls&#125;</span>-close`</span>]: !<span class="keyword">this</span>.state.closing,</span><br><span class="line">    [<span class="string">`<span class="subst">$&#123;prefixCls&#125;</span>-with-description`</span>]: !!description,</span><br><span class="line">    [<span class="string">`<span class="subst">$&#123;prefixCls&#125;</span>-no-icon`</span>]: !showIcon,</span><br><span class="line">    [<span class="string">`<span class="subst">$&#123;prefixCls&#125;</span>-banner`</span>]: !!banner,</span><br><span class="line">&#125;, className);</span><br></pre></td></tr></table></figure></p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul><li><a href="https://github.com/JedWatson/classnames" target="_blank" rel="noopener">https://github.com/JedWatson/classnames</a></li><li><a href="https://www.npmjs.com/package/classcat" target="_blank" rel="noopener">https://www.npmjs.com/package/classcat</a></li></ul>]]></content:encoded>
      
      <comments>http://mydearest.cn/classNames%E5%9C%A8react%E4%B8%8A%E7%9A%84%E5%BA%94%E7%94%A8.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>generator生成器</title>
      <link>http://mydearest.cn/es6generator.html</link>
      <guid>http://mydearest.cn/es6generator.html</guid>
      <pubDate>Tue, 21 Aug 2018 03:49:12 GMT</pubDate>
      <description>
      
        &lt;p&gt;生成器（ generator）是能返回一个迭代器的函数。生成器函数也是一种函数，最直观的表现就是比普通的function多了个星号*，在其函数体内可以使用yield关键字，有意思的是函数会在每个yield后暂停。&lt;/p&gt;
&lt;p&gt;这里生活中有一个比较形象的例子。咱们到银行办理业务时候都得向大厅的机器取一张排队号。你拿到你的排队号，机器并不会自动为你再出下一张票。也就是说取票机“暂停”住了，直到下一个人再次唤起才会继续吐票。&lt;/p&gt;
&lt;hr&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>生成器（ generator）是能返回一个迭代器的函数。生成器函数也是一种函数，最直观的表现就是比普通的function多了个星号*，在其函数体内可以使用yield关键字，有意思的是函数会在每个yield后暂停。</p><p>这里生活中有一个比较形象的例子。咱们到银行办理业务时候都得向大厅的机器取一张排队号。你拿到你的排队号，机器并不会自动为你再出下一张票。也就是说取票机“暂停”住了，直到下一个人再次唤起才会继续吐票。</p><hr><a id="more"></a><p>OK。说说迭代器。当你调用一个generator时，它将返回一个迭代器对象。这个迭代器对象拥有一个叫做next的方法来帮助你重启generator函数并得到下一个值。next方法不仅返回值，它返回的对象具有两个属性：done和value。value是你获得的值，done用来表明你的generator是否已经停止提供值。继续用刚刚取票的例子，每张排队号就是这里的value，打印票的纸是否用完就这是这里的done。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 生成器</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> *<span class="title">createGenerator</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 迭代器</span></span><br><span class="line"><span class="keyword">let</span> iterator=createGenerator()</span><br><span class="line"><span class="built_in">console</span>.log(iterator.next().value) <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(iterator.next().value) <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(iterator.next().value) <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><p>那生成器和迭代器又有什么用处呢？</p><p>围绕着生成器的许多兴奋点都与异步编程直接相关。异步调用对于我们来说是很困难的事，我们的函数并不会等待异步调用完再执行，你可能会想到用回调函数，（当然还有其他方案比如Promise比如Async/await）。</p><p>生成器可以让我们的代码进行等待。就不用嵌套的回调函数。使用generator可以确保当异步调用在我们的generator函数运行一下行代码之前完成时暂停函数的执行。</p><p>那么问题来了，咱们也不能手动一直调用next()方法，你需要一个能够调用生成器并启动迭代器的方法。就像这样子的：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params">taskDef</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 创建迭代器，让它在别处可用</span></span><br><span class="line">  <span class="keyword">let</span> task=taskDef();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 启动任务</span></span><br><span class="line">  <span class="keyword">let</span> result=task.next();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 递归使用函数来保持对next()的调用</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">step</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="comment">// 如果还有更多要做的</span></span><br><span class="line">      <span class="keyword">if</span>(!result.done)&#123;</span><br><span class="line">        result=task.next();</span><br><span class="line">        step();</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 开始处理过程</span></span><br><span class="line">  step();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>生成器与迭代器最有趣、最令人激动的方面，或许就是可创建外观清晰的异步操作代码。可以不必到处使用回调函数，而是可以建立貌似同步的代码，但实际上却使用 <code>yield</code> 来等待异步操作结束。</p><p>es6引入了 async 函数，使得异步操作变得更加方便。</p><p>async 函数是什么？一句话，它就是 Generator 函数的语法糖。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">timeout</span>(<span class="params">ms</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>)=&gt;</span>&#123;</span><br><span class="line">      setTimeout(resolve,ms)</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">asyncPrint</span>(<span class="params">value,ms</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">await</span> timeout(ms);</span><br><span class="line">    <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">asyncPrint(<span class="string">'hello world'</span>,<span class="number">50</span>)</span><br></pre></td></tr></table></figure></p><p>一比较就会发现，async函数就是将 Generator 函数的星号（*）替换成async，将yield替换成await，仅此而已。async函数对 Generator 函数的改进，体现在以下四点：</p><ul><li>内置执行器</li><li>更好的语义</li><li>更广的适用性</li><li>返回值是Promise</li></ul>]]></content:encoded>
      
      <comments>http://mydearest.cn/es6generator.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>移动端web问题总结（长期更新）</title>
      <link>http://mydearest.cn/%E7%A7%BB%E5%8A%A8%E7%AB%AFweb%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93.html</link>
      <guid>http://mydearest.cn/%E7%A7%BB%E5%8A%A8%E7%AB%AFweb%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93.html</guid>
      <pubDate>Tue, 21 Aug 2018 02:14:35 GMT</pubDate>
      <description>
      
        
        
          &lt;h3 id=&quot;meta基础知识&quot;&gt;&lt;a href=&quot;#meta基础知识&quot; class=&quot;headerlink&quot; title=&quot;meta基础知识&quot;&gt;&lt;/a&gt;meta基础知识&lt;/h3&gt;&lt;h4 id=&quot;H5页面窗口自动调整到设备宽度，并禁止用户缩放页面&quot;&gt;&lt;a href=&quot;#H5页面
        
      
      </description>
      
      <content:encoded><![CDATA[<h3 id="meta基础知识"><a href="#meta基础知识" class="headerlink" title="meta基础知识"></a>meta基础知识</h3><h4 id="H5页面窗口自动调整到设备宽度，并禁止用户缩放页面"><a href="#H5页面窗口自动调整到设备宽度，并禁止用户缩放页面" class="headerlink" title="H5页面窗口自动调整到设备宽度，并禁止用户缩放页面"></a>H5页面窗口自动调整到设备宽度，并禁止用户缩放页面</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width,initial-scale=1.0,minimum-scale=1.0,maximum-scale=1.0,user-scalable=no"</span> /&gt;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://mydearest.cn/%E7%A7%BB%E5%8A%A8%E7%AB%AFweb%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>react组件实现按需加载</title>
      <link>http://mydearest.cn/react%E7%BB%84%E4%BB%B6%E5%AE%9E%E7%8E%B0%E6%8C%89%E9%9C%80%E5%8A%A0%E8%BD%BD.html</link>
      <guid>http://mydearest.cn/react%E7%BB%84%E4%BB%B6%E5%AE%9E%E7%8E%B0%E6%8C%89%E9%9C%80%E5%8A%A0%E8%BD%BD.html</guid>
      <pubDate>Wed, 15 Aug 2018 02:45:27 GMT</pubDate>
      <description>
      
        &lt;p&gt;第一种：ReactTraining/react-router 介绍的基于 webpack, babel-plugin-syntax-dynamic-import, 和 react-loadable.&lt;/p&gt;
&lt;p&gt;主要是利用了react-loadable这个高级组件，他是专门用来异步加载（也可以预加载）组件的。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/ReactTraining/react-router/blob/master/packages/react-router-dom/docs/guides/code-splitting.md&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/ReactTraining/react-router/blob/master/packages/react-router-dom/docs/guides/code-splitting.md&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>第一种：ReactTraining/react-router 介绍的基于 webpack, babel-plugin-syntax-dynamic-import, 和 react-loadable.</p><p>主要是利用了react-loadable这个高级组件，他是专门用来异步加载（也可以预加载）组件的。</p><p><a href="https://github.com/ReactTraining/react-router/blob/master/packages/react-router-dom/docs/guides/code-splitting.md" target="_blank" rel="noopener">https://github.com/ReactTraining/react-router/blob/master/packages/react-router-dom/docs/guides/code-splitting.md</a></p><hr> <a id="more"></a> <p>第二种：SF网友介绍的Bundle组件配合webpack组件bundle-loader</p><p>bundle-loader效用其实和require.ensure()一样，把组件分片成单独的chunk，在Bundle组件中引入</p><p><a href="https://segmentfault.com/a/1190000009539836" target="_blank" rel="noopener">https://segmentfault.com/a/1190000009539836</a></p><p>但是我尝试的时候发现总是报错说不要在import中引入webpack的loader。。。</p><p>然后我继续查，发现第三种实现</p><p>第三种：简书AlienZHOU介绍的同样基于create-react-app的方式，在Bundle组件中props入一个()=&gt;import(‘path’)函数</p><p><a href="http://www.jianshu.com/p/547aa7b92d8c" target="_blank" rel="noopener">http://www.jianshu.com/p/547aa7b92d8c</a></p><p>第四种，create-react-app文档给的react-router按需加载实现：用一个类Bundle组件的异步函数</p><p><a href="https://serverless-stack.com/chapters/code-splitting-in-create-react-app.html" target="_blank" rel="noopener">https://serverless-stack.com/chapters/code-splitting-in-create-react-app.html</a></p><p>这种方式我试了下，确实能分片，但是讨论里有人指出性能上不如Bundle组件，那个人好像还是Create-react-app的主要贡献者</p><p>四种方式我都试过，期间。。这个过程略痛苦。。。不过结论是：第三种是目前我认为最好的，基于create-react-app，且实现最简单。</p><p>但是较大的项目，一般我们都会eject出来自己配置webpack啦，其实影响也不大。</p>]]></content:encoded>
      
      <comments>http://mydearest.cn/react%E7%BB%84%E4%BB%B6%E5%AE%9E%E7%8E%B0%E6%8C%89%E9%9C%80%E5%8A%A0%E8%BD%BD.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>css绘制几何图形</title>
      <link>http://mydearest.cn/css%E7%BB%98%E5%88%B6%E5%87%A0%E4%BD%95%E5%9B%BE%E5%BD%A2.html</link>
      <guid>http://mydearest.cn/css%E7%BB%98%E5%88%B6%E5%87%A0%E4%BD%95%E5%9B%BE%E5%BD%A2.html</guid>
      <pubDate>Tue, 14 Aug 2018 07:04:09 GMT</pubDate>
      <description>
      
        &lt;h3 id=&quot;圆&quot;&gt;&lt;a href=&quot;#圆&quot; class=&quot;headerlink&quot; title=&quot;圆&quot;&gt;&lt;/a&gt;圆&lt;/h3&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;div&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;100px&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;100px&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;border-radius&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;50px&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* 注意宽高相同圆角为一半 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;四个不同方向的半圆&quot;&gt;&lt;a href=&quot;#四个不同方向的半圆&quot; class=&quot;headerlink&quot; title=&quot;四个不同方向的半圆&quot;&gt;&lt;/a&gt;四个不同方向的半圆&lt;/h3&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.top&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;100px&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;50px&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;border-radius&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;50px&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;50px&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.right&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;50px&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;100px&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;border-radius&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;50px&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;50px&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.bottom&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;100px&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;50px&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;border-radius&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;50px&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;50px&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.left&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;50px&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;100px&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;border-radius&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;50px&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;50px&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h3 id="圆"><a href="#圆" class="headerlink" title="圆"></a>圆</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line"><span class="attribute">border-radius</span>: <span class="number">50px</span>; </span><br><span class="line"><span class="comment">/* 注意宽高相同圆角为一半 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="四个不同方向的半圆"><a href="#四个不同方向的半圆" class="headerlink" title="四个不同方向的半圆"></a>四个不同方向的半圆</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.top</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50px</span> <span class="number">50px</span> <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">0</span> <span class="number">50px</span> <span class="number">50px</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.bottom</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">50px</span> <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.left</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50px</span> <span class="number">0</span> <span class="number">0</span> <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><a id="more"></a><h3 id="四分之一圆"><a href="#四分之一圆" class="headerlink" title="四分之一圆"></a>四分之一圆</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>:<span class="number">50px</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="菱形"><a href="#菱形" class="headerlink" title="菱形"></a>菱形</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.quarter-ellipse</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">150px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">100%</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">background</span>: black;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*将菱形里的字转成正着的方向*/</span></span><br><span class="line"><span class="selector-class">.paralle</span> <span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">skew</span>(20deg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三角形"><a href="#三角形" class="headerlink" title="三角形"></a>三角形</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#triangle-up</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border-left</span>: <span class="number">50px</span> solid transparent;</span><br><span class="line">    <span class="attribute">border-right</span>: <span class="number">50px</span> solid transparent;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">100px</span> solid lightblue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#triangle-down</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border-left</span>: <span class="number">50px</span> solid transparent;</span><br><span class="line">    <span class="attribute">border-right</span>: <span class="number">50px</span> solid transparent;</span><br><span class="line">    <span class="attribute">border-top</span>: <span class="number">100px</span> solid lightblue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#triangle-left</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border-top</span>: <span class="number">50px</span> solid transparent;</span><br><span class="line">    <span class="attribute">border-right</span>: <span class="number">100px</span> solid lightblue;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">50px</span> solid transparent;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#triangle-right</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border-top</span>: <span class="number">50px</span> solid transparent;</span><br><span class="line">    <span class="attribute">border-left</span>: <span class="number">100px</span> solid lightblue;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">50px</span> solid transparent;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#triangle-topleft</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border-top</span>: <span class="number">100px</span> solid lightblue;</span><br><span class="line">    <span class="attribute">border-right</span>: <span class="number">100px</span> solid transparent;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#triangle-topright</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border-top</span>: <span class="number">100px</span> solid lightblue;</span><br><span class="line">    <span class="attribute">border-left</span>: <span class="number">100px</span> solid transparent; </span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#triangle-bottomleft</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">100px</span> solid lightblue;</span><br><span class="line">    <span class="attribute">border-right</span>: <span class="number">100px</span> solid transparent;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#triangle-bottomright</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">100px</span> solid lightblue;</span><br><span class="line">    <span class="attribute">border-left</span>: <span class="number">100px</span> solid transparent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://mydearest.cn/css%E7%BB%98%E5%88%B6%E5%87%A0%E4%BD%95%E5%9B%BE%E5%BD%A2.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>Http请求概述</title>
      <link>http://mydearest.cn/http%E8%AF%B7%E6%B1%82%E6%A6%82%E8%BF%B0.html</link>
      <guid>http://mydearest.cn/http%E8%AF%B7%E6%B1%82%E6%A6%82%E8%BF%B0.html</guid>
      <pubDate>Tue, 14 Aug 2018 06:56:52 GMT</pubDate>
      <description>
      
        &lt;p&gt;超文本传输协议（HTTP, HyperText Transfer Protocol）是一种无状态的协议，它位于OSI七层模型的传输层。HTTP客户端会根据需要构建合适的HTTP请求方法，而HTTP服务器会根据不同的HTTP请求方法做出不同的响应。&lt;/p&gt;
&lt;hr&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>超文本传输协议（HTTP, HyperText Transfer Protocol）是一种无状态的协议，它位于OSI七层模型的传输层。HTTP客户端会根据需要构建合适的HTTP请求方法，而HTTP服务器会根据不同的HTTP请求方法做出不同的响应。</p><hr><a id="more"></a><h2 id="HTTP版本"><a href="#HTTP版本" class="headerlink" title="HTTP版本"></a>HTTP版本</h2><p>在HTTP的发展过程中，出现了很多HTTP版本，其中的大部分协议都是向下兼容的。在进行HTTP请求时，客户端在请求时会告诉服务器它采用的协议版本号，而服务器则会在使用相同或者更早的协议版本进行响应。</p><ul><li><p>HTTP/0.9这是HTTP最早大规模使用的版本，现已过时。在这个版本中 只有GET一种请求方法，在HTTP通讯也没有指定版本号，也不支持请求头信息。该版本不支持POST等方法，因此客户端向服务器传递信息的能力非常有限。HTTP/0.9的请求只有如下一行：GET <a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a></p></li><li><p>HTTP/1.0这个版本是第一个在HTTP通讯中指定版本号的协议版本，HTTP/1.0至今仍被广泛采用，特别是在代理服务器中。该版本支持：GET、POST、HEAD三种HTTP请求方法。</p></li><li>HTTP/1.1</li></ul><p>HTTP/1.1是当前正在使用的版本。该版本默认采用持久连接，并能很好地配合代理服务器工作。还支持以管道方式同时发送多个请求，以便降低线路负载，提高传输速度。HTTP/1.1新增了：OPTIONS、PUT、DELETE、TRACE、CONNECT五种HTTP请求方法。</p><ul><li>HTTP/2这个版本是最新发布的版本，于今年5月（2015年5月）做HTTP标准正式发布。HTTP/2通过支持请求与相应的多路重用来减少延迟，通过压缩HTTP头字段将协议开销降到最低，同时增加了对请求优先级和服务器端推送的支持。</li></ul><h2 id="HTTP请求方法"><a href="#HTTP请求方法" class="headerlink" title="HTTP请求方法"></a>HTTP请求方法</h2><h3 id="HTTP-1-1"><a href="#HTTP-1-1" class="headerlink" title="HTTP/1.1"></a>HTTP/1.1</h3><p>协议中共定义了8种HTTP请求方法，HTTP请求方法也被叫做“请求动作”，不同的方法规定了不同的操作指定的资源方式。服务端也会根据不同的请求方法做不同的响应。</p><h4 id="GET"><a href="#GET" class="headerlink" title="GET"></a>GET</h4><p>GET请求会显示请求指定的资源。一般来说GET方法应该只用于数据的读取，而不应当用于会产生副作用的非幂等的操作中。GET会方法请求指定的页面信息，并返回响应主体，GET被认为是不安全的方法，因为GET方法会被网络蜘蛛等任意的访问。</p><h4 id="HEAD"><a href="#HEAD" class="headerlink" title="HEAD"></a>HEAD</h4><p>HEAD方法与GET方法一样，都是向服务器发出指定资源的请求。但是，服务器在响应HEAD请求时不会回传资源的内容部分，即：响应主体。这样，我们可以不传输全部内容的情况下，就可以获取服务器的响应头信息。HEAD方法常被用于客户端查看服务器的性能。</p><h4 id="POST"><a href="#POST" class="headerlink" title="POST"></a>POST</h4><p>POST请求会 向指定资源提交数据，请求服务器进行处理，如：表单数据提交、文件上传等，请求数据会被 包含在请求体中。POST方法是非幂等的方法，因为这个请求可能会创建新的资源或/和修改现有资源。</p><h4 id="PUT"><a href="#PUT" class="headerlink" title="PUT"></a>PUT</h4><p>PUT请求会身向指定资源位置上传其最新内容，PUT方法是幂等的方法。通过该方法客户端可以将指定资源的最新数据传送给服务器取代指定的资源的内容。</p><h4 id="DELETE"><a href="#DELETE" class="headerlink" title="DELETE"></a>DELETE</h4><p>DELETE请求用于请求服务器删除所请求URI（统一资源标识符，Uniform Resource Identifier）所标识的资源。DELETE请求后指定资源会被删除，DELETE方法也是幂等的。</p><h4 id="CONNECT"><a href="#CONNECT" class="headerlink" title="CONNECT"></a>CONNECT</h4><p>CONNECT方法是HTTP/1.1协议预留的，能够将连接改为管道方式的代理服务器。通常用于SSL加密服务器的链接与非加密的HTTP代理服务器的通信。</p><h4 id="OPTIONS"><a href="#OPTIONS" class="headerlink" title="OPTIONS"></a>OPTIONS</h4><p>OPTIONS请求与HEAD类似，一般也是用于客户端查看服务器的性能。 这个方法会请求服务器返回该资源所支持的所有HTTP请求方法，该方法会用 * 来代替资源名称，向服务器发送OPTIONS请求，可以测试服务器功能是否正常。JavaScript的XMLHttpRequest对象进行CORS跨域资源共享时，就是使用OPTIONS方法发送嗅探请求，以判断是否有对指定资源的访问权限。</p><h4 id="TRACE"><a href="#TRACE" class="headerlink" title="TRACE"></a>TRACE</h4><p>TRACE请求服务器回显其收到的请求信息，该方法主要用于HTTP请求的测试或诊断。</p><h3 id="HTTP-1-1之后增加的方法"><a href="#HTTP-1-1之后增加的方法" class="headerlink" title="HTTP/1.1之后增加的方法"></a>HTTP/1.1之后增加的方法</h3><p>在HTTP/1.1标准制定之后，又陆续扩展了一些方法。其中使用中较多的是PATCH 方法:</p><h4 id="PATCH"><a href="#PATCH" class="headerlink" title="PATCH"></a>PATCH</h4><p>PATCH方法出现的较晚，它在2010年的RFC 5789标准中被定义。PATCH请求与PUT请求类似，同样用于资源的更新。二者有以下两点不同：1.PATCH一般用于资源的部分更新，而PUT一般用于资源的整体更新。2.当资源不存在时，PATCH会创建一个新的资源，而PUT只会对已在资源进行更新。</p><h3 id="请求头和响应头"><a href="#请求头和响应头" class="headerlink" title="请求头和响应头"></a>请求头和响应头</h3><p>1)请求(客户端-&gt;服务端[request])     GET(请求的方式) /newcoder/hello.html(请求的目标资源) HTTP/1.1(请求采用的协议和版本号)     Accept: <em>/</em>(客户端能接收的资源类型)     Accept-Language: en-us(客户端接收的语言类型)     Connection: Keep-Alive(维护客户端和服务端的连接关系)     Host: localhost:8080(连接的目标主机和端口号)     Referer: <a href="http://localhost/links.asp(告诉服务器我来自于哪里)" target="_blank" rel="noopener">http://localhost/links.asp(告诉服务器我来自于哪里)</a>     User-Agent: Mozilla/4.0(客户端版本号的名字)     Accept-Encoding: gzip, deflate(客户端能接收的压缩数据的类型)     If-Modified-Since: Tue, 11 Jul 2000 18:23:51 GMT(缓存时间)<br>    Cookie(客户端暂存服务端的信息)     Date: Tue, 11 Jul 2000 18:23:51 GMT(客户端请求服务端的时间)</p><p>2)响应(服务端-&gt;客户端[response])    HTTP/1.1(响应采用的协议和版本号) 200(状态码) OK(描述信息)    Location: <a href="http://www.baidu.com(服务端需要客户端访问的页面路径)" target="_blank" rel="noopener">http://www.baidu.com(服务端需要客户端访问的页面路径)</a>     Server:apache tomcat(服务端的Web服务端名)    Content-Encoding: gzip(服务端能够发送压缩编码类型)     Content-Length: 80(服务端发送的压缩数据的长度)     Content-Language: zh-cn(服务端发送的语言类型)     Content-Type: text/html; charset=GB2312(服务端发送的类型及采用的编码方式)    Last-Modified: Tue, 11 Jul 2000 18:23:51 GMT(服务端对该资源最后修改的时间)    Refresh: 1;url=<a href="http://www.it315.org(服务端要求客户端1秒钟后，刷新，然后访问指定的页面路径)" target="_blank" rel="noopener">http://www.it315.org(服务端要求客户端1秒钟后，刷新，然后访问指定的页面路径)</a>    Content-Disposition: attachment; filename=aaa.zip(服务端要求客户端以下载文件的方式打开该文件)    Transfer-Encoding: chunked(分块传递数据到客户端）<br>    Set-Cookie:SS=Q0=5Lb_nQ; path=/search(服务端发送到客户端的暂存数据)    Expires: -1//3种(服务端禁止客户端缓存页面数据)    Cache-Control: no-cache(服务端禁止客户端缓存页面数据)<br>    Pragma: no-cache(服务端禁止客户端缓存页面数据)<br>    Connection: close(1.0)/(1.1)Keep-Alive(维护客户端和服务端的连接关系)<br>    Date: Tue, 11 Jul 2000 18:23:51 GMT(服务端响应客户端的时间)在服务器响应客户端的时候，带上Access-Control-Allow-Origin头信息，解决跨域的一种方法。</p>]]></content:encoded>
      
      <comments>http://mydearest.cn/http%E8%AF%B7%E6%B1%82%E6%A6%82%E8%BF%B0.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>获取浏览器url参数方法总结</title>
      <link>http://mydearest.cn/%E8%8E%B7%E5%8F%96%E6%B5%8F%E8%A7%88%E5%99%A8url%E5%8F%82%E6%95%B0%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93.html</link>
      <guid>http://mydearest.cn/%E8%8E%B7%E5%8F%96%E6%B5%8F%E8%A7%88%E5%99%A8url%E5%8F%82%E6%95%B0%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93.html</guid>
      <pubDate>Wed, 08 Aug 2018 15:21:52 GMT</pubDate>
      <description>
      
        &lt;ol&gt;
&lt;li&gt;正则(xxx?typeId=1)&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getQueryString&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;name&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; reg = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;RegExp&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;(^|&amp;amp;)&#39;&lt;/span&gt; + name + &lt;span class=&quot;string&quot;&gt;&#39;=([^&amp;amp;]*)(&amp;amp;|$)&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;i&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; r = &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.location.search.substr(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;).match(reg);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (r != &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// return unescape(r[2]); // 中文会乱码&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;decodeURI&lt;/span&gt;(r[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;getQueryString(&lt;span class=&quot;string&quot;&gt;&quot;typeId&quot;&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// &quot;2&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
      
      </description>
      
      <content:encoded><![CDATA[<ol><li>正则(xxx?typeId=1)<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getQueryString</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'(^|&amp;)'</span> + name + <span class="string">'=([^&amp;]*)(&amp;|$)'</span>, <span class="string">'i'</span>);</span><br><span class="line">    <span class="keyword">var</span> r = <span class="built_in">window</span>.location.search.substr(<span class="number">1</span>).match(reg);</span><br><span class="line">    <span class="keyword">if</span> (r != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// return unescape(r[2]); // 中文会乱码</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">decodeURI</span>(r[<span class="number">2</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">getQueryString(<span class="string">"typeId"</span>) <span class="comment">// "2"</span></span><br></pre></td></tr></table></figure></li></ol><hr><a id="more"></a><ol start="2"><li><p>split拆分</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getQueryString</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> url = location.search; <span class="comment">//获取url中"?"符后的字串</span></span><br><span class="line">    <span class="keyword">var</span> theRequest = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">    <span class="keyword">if</span> (url.indexOf(<span class="string">"?"</span>) != <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> str = url.substr(<span class="number">1</span>);</span><br><span class="line">        strs = str.split(<span class="string">"&amp;"</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; strs.length; i ++) &#123;</span><br><span class="line">            theRequest[strs[i].split(<span class="string">"="</span>)[<span class="number">0</span>]] = <span class="built_in">unescape</span>(strs[i].split(<span class="string">"="</span>)[<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> theRequest;</span><br><span class="line">&#125;</span><br><span class="line">getQueryString(<span class="string">"typeId"</span>) <span class="comment">// &#123;typeId:"2&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>正则获值 和1一样</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getQueryString</span>(<span class="params">name</span>) </span>&#123;  </span><br><span class="line">    <span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"(^|&amp;)"</span> + name + <span class="string">"=([^&amp;]*)(&amp;|$)"</span>, <span class="string">"i"</span>);  </span><br><span class="line">    <span class="keyword">var</span> r = <span class="built_in">window</span>.location.search.substr(<span class="number">1</span>).match(reg);  <span class="comment">//获取url中"?"符后的字符串并正则匹配</span></span><br><span class="line">    <span class="keyword">var</span> context = <span class="string">""</span>;  </span><br><span class="line">    <span class="keyword">if</span> (r != <span class="literal">null</span>)  </span><br><span class="line">         context = r[<span class="number">2</span>];  </span><br><span class="line">    reg = <span class="literal">null</span>;  </span><br><span class="line">    r = <span class="literal">null</span>;  </span><br><span class="line">    <span class="keyword">return</span> context == <span class="literal">null</span> || context == <span class="string">""</span> || context == <span class="string">"undefined"</span> ? <span class="string">""</span> : context;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>单参数获取(?1)获取？后面的数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> url=<span class="built_in">window</span>.location.href</span><br><span class="line">url.substring(url.indexOf(<span class="string">'?'</span>) + <span class="number">1</span>)</span><br><span class="line"><span class="comment">// url.substr(url.indexOf('?') + 1)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> url=<span class="built_in">window</span>.location.search</span><br><span class="line">url.substring(<span class="number">1</span>)</span><br><span class="line"><span class="comment">// url.substr(1)</span></span><br></pre></td></tr></table></figure></li></ol>]]></content:encoded>
      
      <comments>http://mydearest.cn/%E8%8E%B7%E5%8F%96%E6%B5%8F%E8%A7%88%E5%99%A8url%E5%8F%82%E6%95%B0%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>单页应用优缺点分析</title>
      <link>http://mydearest.cn/spa.html</link>
      <guid>http://mydearest.cn/spa.html</guid>
      <pubDate>Thu, 26 Jul 2018 13:24:37 GMT</pubDate>
      <description>
      
        &lt;p&gt;单页Web应用（single page web application，SPA），就是只有一张Web页面的应用。单页应用程序 (SPA) 是加载单个HTML 页面并在用户与应用程序交互时动态更新该页面的Web应用程序。浏览器一开始会加载必需的HTML、CSS和JavaScript，所有的操作都在这张页面上完成，都由JavaScript来控制。&lt;/p&gt;
&lt;hr&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>单页Web应用（single page web application，SPA），就是只有一张Web页面的应用。单页应用程序 (SPA) 是加载单个HTML 页面并在用户与应用程序交互时动态更新该页面的Web应用程序。浏览器一开始会加载必需的HTML、CSS和JavaScript，所有的操作都在这张页面上完成，都由JavaScript来控制。</p><hr><a id="more"></a><h2 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h2><p>1、分离前后端关注点，前端负责界面显示，后端负责数据存储和计算，各司其职，不会把前后端的逻辑混杂在一起；前后台分离开发模式。</p><p>2、减轻服务器压力，服务器只用出数据就可以，不用管展示逻辑和页面合成，吞吐能力会提高几倍；</p><p>3、同一套后端程序代码，不用修改就可以用于Web界面、手机、平板等多种客户端；</p><ol start="4"><li>服务器压力变小，后台不需要负责模板渲染，输出页面工作。ajax实现页面刷新，不需要重新加载整个页面。</li></ol><h2 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h2><p>1、SEO问题，现在可以通过Prerender等技术解决一部分；</p><p>2、前进、后退、地址栏等，需要自行实现；</p><p>3、初次加载时间较多；</p>]]></content:encoded>
      
      <comments>http://mydearest.cn/spa.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>https加密通信流程解析</title>
      <link>http://mydearest.cn/https%E5%8A%A0%E5%AF%86%E9%80%9A%E4%BF%A1.html</link>
      <guid>http://mydearest.cn/https%E5%8A%A0%E5%AF%86%E9%80%9A%E4%BF%A1.html</guid>
      <pubDate>Wed, 25 Jul 2018 14:18:25 GMT</pubDate>
      <description>
      
        &lt;p&gt;https其实是有两部分组成：http + SSL / TLS，也就是在HTTP上又加了一层处理加密信息的模块。服务端和客户端的信息传输都会通过TLS进行加密，所以传输的数据都是加密后的数据。&lt;/p&gt;
&lt;p&gt;https比http要占用更多的资源，http使用TCP 三次握手建立连接，客户端和服务器需要交换3个包，https除了 TCP 的三个包，还要加上 ssl握手需要的9个包，所以一共是12个包。&lt;/p&gt;
&lt;hr&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>https其实是有两部分组成：http + SSL / TLS，也就是在HTTP上又加了一层处理加密信息的模块。服务端和客户端的信息传输都会通过TLS进行加密，所以传输的数据都是加密后的数据。</p><p>https比http要占用更多的资源，http使用TCP 三次握手建立连接，客户端和服务器需要交换3个包，https除了 TCP 的三个包，还要加上 ssl握手需要的9个包，所以一共是12个包。</p><hr><a id="more"></a><h2 id="流程解析"><a href="#流程解析" class="headerlink" title="流程解析"></a>流程解析</h2><h3 id="客户端发起HTTPS请求"><a href="#客户端发起HTTPS请求" class="headerlink" title="客户端发起HTTPS请求"></a>客户端发起HTTPS请求</h3><p>用户在浏览器里输入一个https网址，然后连接到server的443端口。</p><h3 id="服务端的配置"><a href="#服务端的配置" class="headerlink" title="服务端的配置"></a>服务端的配置</h3><p>采用HTTPS协议的服务器必须要有一套数字证书，可以自己制作，也可以向组织申请。区别就是自己颁发的证书需要客户端验证通过，才可以继续访问，而使用受信任的公司申请的证书则不会弹出提示页面(startssl就是个不错的选择，有1年的免费服务)。这套证书其实就是一对公钥和私钥。如果对公钥和私钥不太理解，可以想象成一把钥匙和一个锁头，只是全世界只有你一个人有这把钥匙，你可以把锁头给别人，别人可以用这个锁把重要的东西锁起来，然后发给你，因为只有你一个人有这把钥匙，所以只有你才能看到被这把锁锁起来的东西。</p><h3 id="传送证书"><a href="#传送证书" class="headerlink" title="传送证书"></a>传送证书</h3><p>这个证书其实就是公钥，只是包含了很多信息，如证书的颁发机构，过期时间等等。</p><h3 id="传送加密信息"><a href="#传送加密信息" class="headerlink" title="传送加密信息"></a>传送加密信息</h3><p>这部分工作是有客户端的TLS来完成的，首先会验证公钥是否有效，比如颁发机构，过期时间等等，如果发现异常，则会弹出一个警告框，提示证书存在问题。如果证书没有问题，那么就生成一个随机值。然后用证书对该随机值进行加密。就好像上面说的，把随机值用锁头锁起来，这样除非有钥匙，不然看不到被锁住的内容。</p><h3 id="服务端解密信息"><a href="#服务端解密信息" class="headerlink" title="服务端解密信息"></a>服务端解密信息</h3><p>服务端用私钥解密后，得到了客户端传过来的随机值(私钥)，然后把内容通过该值进行对称加密。所谓对称加密就是，将信息和私钥通过某种算法混合在一起，这样除非知道私钥，不然无法获取内容，而正好客户端和服务端都知道这个私钥，所以只要加密算法够彪悍，私钥够复杂，数据就够安全。</p><h3 id="传输加密后的信息"><a href="#传输加密后的信息" class="headerlink" title="传输加密后的信息"></a>传输加密后的信息</h3><p>这部分信息是服务段用私钥加密后的信息，可以在客户端被还原。</p><h3 id="客户端解密信息"><a href="#客户端解密信息" class="headerlink" title="客户端解密信息"></a>客户端解密信息</h3><p>客户端用之前生成的私钥解密服务段传过来的信息，于是获取了解密后的内容。整个过程第三方即使监听到了数据，也束手无策。</p>]]></content:encoded>
      
      <comments>http://mydearest.cn/https%E5%8A%A0%E5%AF%86%E9%80%9A%E4%BF%A1.html#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
