<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>cosyer&#39;s Blog</title>
    <link>http://mydearest.cn/</link>
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>陈宇的博客</description>
    <pubDate>Sat, 20 Jul 2019 09:48:16 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>linux安装mongodb及常见命令</title>
      <link>http://mydearest.cn/2019/linux%E5%AE%89%E8%A3%85mongodb%E5%8F%8A%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4.html</link>
      <guid>http://mydearest.cn/2019/linux%E5%AE%89%E8%A3%85mongodb%E5%8F%8A%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4.html</guid>
      <pubDate>Sat, 20 Jul 2019 06:20:40 GMT</pubDate>
      <description>
      
        &lt;span itemprop=&quot;image&quot; itemscope=&quot;&quot; itemtype=&quot;http://schema.org/ImageObject&quot;&gt;&lt;img itemprop=&quot;url image&quot; src=&quot;http://cdn.mydearest.cn/blog/images/mongodb.jpg&quot; class=&quot;full-image&quot; alt=&quot;MongoDB&quot; title=&quot;MongoDB&quot;&gt;&lt;meta itemprop=&quot;width&quot; content=&quot;auto&quot;&gt;&lt;meta itemprop=&quot;height&quot; content=&quot;auto&quot;&gt;&lt;/span&gt;
&lt;h2 id=&quot;MongoDB-是一个基于分布式文件存储的数据库。由-C-语言编写。旨在为-WEB-应用提供可扩展的高性能数据存储解决方案。&quot;&gt;&lt;a href=&quot;#MongoDB-是一个基于分布式文件存储的数据库。由-C-语言编写。旨在为-WEB-应用提供可扩展的高性能数据存储解决方案。&quot; class=&quot;headerlink&quot; title=&quot;MongoDB 是一个基于分布式文件存储的数据库。由 C++ 语言编写。旨在为 WEB 应用提供可扩展的高性能数据存储解决方案。&quot;&gt;&lt;/a&gt;MongoDB 是一个基于分布式文件存储的数据库。由 C++ 语言编写。旨在为 WEB 应用提供可扩展的高性能数据存储解决方案。&lt;/h2&gt;
      
      </description>
      
      <content:encoded><![CDATA[<span itemprop="image" itemscope="" itemtype="http://schema.org/ImageObject"><img itemprop="url image" src="http://cdn.mydearest.cn/blog/images/mongodb.jpg" class="full-image" alt="MongoDB" title="MongoDB"><meta itemprop="width" content="auto"><meta itemprop="height" content="auto"></span><h2 id="MongoDB-是一个基于分布式文件存储的数据库。由-C-语言编写。旨在为-WEB-应用提供可扩展的高性能数据存储解决方案。"><a href="#MongoDB-是一个基于分布式文件存储的数据库。由-C-语言编写。旨在为-WEB-应用提供可扩展的高性能数据存储解决方案。" class="headerlink" title="MongoDB 是一个基于分布式文件存储的数据库。由 C++ 语言编写。旨在为 WEB 应用提供可扩展的高性能数据存储解决方案。"></a>MongoDB 是一个基于分布式文件存储的数据库。由 C++ 语言编写。旨在为 WEB 应用提供可扩展的高性能数据存储解决方案。</h2><a id="more"></a><h2 id="安装、配置"><a href="#安装、配置" class="headerlink" title="安装、配置"></a>安装、配置</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 下载</span></span></span><br><span class="line">curl -O https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-3.6.5.tgz</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 解压</span></span></span><br><span class="line">tar -zxvf mongodb-linux-x86_64-3.6.5.tgz </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 移动到指定目录</span></span></span><br><span class="line">mv  mongodb-linux-x86_64-3.6.5/ /usr/local/mongodb</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># MongoDB 的可执行文件位于 bin 目录下，所以可以将其添加到 PATH 路径中：当前终端有效(可跳过)</span></span></span><br><span class="line">export PATH=/usr/local/mongodb/bin:$PATH</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 到根目录创建文件夹 或者mongodb下</span></span></span><br><span class="line">mkdir data/db</span><br><span class="line">mkdir data/log</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># vim /etc/profile 添加到全局命令</span></span></span><br><span class="line">export PATH=/usr/local/mongodb/bin:$PATH </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 如果有多个</span></span></span><br><span class="line">export PATH=$JAVA_HOME/bin:$JRE_HOME/bin:/usr/local/mongodb/bin:$PATH</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 保存，退出，然后运行</span></span></span><br><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># mongodb.conf</span></span></span><br><span class="line">dbpath=/usr/local/mongodb/db</span><br><span class="line">logpath=/usr/local/mongodb/log/mongodb.log</span><br><span class="line">bind_ip=0.0.0.0</span><br><span class="line">fork=true</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 关闭</span></span></span><br><span class="line">ps -ef|grep mongod</span><br><span class="line">kill -9</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 后台启动 开启用户认证</span></span></span><br><span class="line">nohup mongod --auth -f /usr/local/mongodb/mongodb.conf &gt; myLog.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><h2 id="常见命令"><a href="#常见命令" class="headerlink" title="常见命令"></a>常见命令</h2><h3 id="设置用户和命令"><a href="#设置用户和命令" class="headerlink" title="设置用户和命令"></a>设置用户和命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 创建管理员</span></span></span><br><span class="line">mongo</span><br><span class="line"></span><br><span class="line">use admin</span><br><span class="line"></span><br><span class="line">db.createUser(</span><br><span class="line">  &#123;</span><br><span class="line">    user: "testuser",</span><br><span class="line">    pwd: "testpassword",</span><br><span class="line">    roles: [ &#123; role: "readWriteAnyDatabase", db: "admin" &#125; ]</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 认证登录</span></span></span><br><span class="line">db.auth("admin", "password")</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 显示当前系统用户</span></span></span><br><span class="line">db.system.users.find()</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 删除用户(删除用户的时候需要切换到用户管理的数据库才可以删除)</span></span></span><br><span class="line">db.dropUser("testuser")</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 修改密码</span></span></span><br><span class="line">db.addUser('testUser','111')</span><br><span class="line"></span><br><span class="line">db.changeUserPassword('tank2','test')</span><br></pre></td></tr></table></figure><h3 id="mongoose账号密码连接"><a href="#mongoose账号密码连接" class="headerlink" title="mongoose账号密码连接"></a>mongoose账号密码连接</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mongoose.connect(<span class="string">"mongodb://user:pwd@111.231.121.29/ticket"</span>, &#123;</span><br><span class="line">  authSource: <span class="string">"admin"</span>,</span><br><span class="line">  useMongoClient: <span class="literal">true</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://mydearest.cn/2019/linux%E5%AE%89%E8%A3%85mongodb%E5%8F%8A%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>blur事件与click事件冲突的解决办法</title>
      <link>http://mydearest.cn/2019/blur%E4%BA%8B%E4%BB%B6%E4%B8%8Eclick%E4%BA%8B%E4%BB%B6%E5%86%B2%E7%AA%81%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95.html</link>
      <guid>http://mydearest.cn/2019/blur%E4%BA%8B%E4%BB%B6%E4%B8%8Eclick%E4%BA%8B%E4%BB%B6%E5%86%B2%E7%AA%81%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95.html</guid>
      <pubDate>Fri, 12 Jul 2019 16:59:46 GMT</pubDate>
      <description>
      
        &lt;p&gt;在处理表单登录的过程中，遇到了一个问题，当我们在输入框输入内容输入框获取到焦点时，输入框后面会出现一个图标删除已输入的内容，因此删除图标会绑定一个click事件，但是当我们点击图标的时候，也触发了input的blur事件，blur事件会让input失去焦点时隐藏删除的图标，并且blur事件先于图标的click事件执行，因此这时候点击图标并不会删除输入框已输入的内容，而是图标消失了。还有弹窗输入框blur同时点击取消按钮关闭，也会出现需要点击2次的情况。&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;http://cdn.mydearest.cn/blog/images/blur.png&quot; alt=&quot;blur img&quot;&gt;&lt;/p&gt;

&lt;hr&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>在处理表单登录的过程中，遇到了一个问题，当我们在输入框输入内容输入框获取到焦点时，输入框后面会出现一个图标删除已输入的内容，因此删除图标会绑定一个click事件，但是当我们点击图标的时候，也触发了input的blur事件，blur事件会让input失去焦点时隐藏删除的图标，并且blur事件先于图标的click事件执行，因此这时候点击图标并不会删除输入框已输入的内容，而是图标消失了。还有弹窗输入框blur同时点击取消按钮关闭，也会出现需要点击2次的情况。</p><p align="center"><img src="http://cdn.mydearest.cn/blog/images/blur.png" alt="blur img"></p><hr><a id="more"></a><ul><li><p>blur事件：当元素失去焦点时触发blur事件；blur 事件仅发生于表单元素上。在新浏览器中，该事件可用于任何元素，blur和focus事件不会冒泡，其他表单事件都可以。</p></li><li><p>click事件：当点击元素时触发click事件；所有元素都有此事件，会产生冒泡。</p></li></ul><h3 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h3><blockquote><p>blur事件比click事件先触发，而javascript为单线程，同一时间只能执行处理一个事件，所以当blur执行时，导致其后续click事件并不会执行。</p></blockquote><h3 id="方案一-加定时器延时触发blur事件"><a href="#方案一-加定时器延时触发blur事件" class="headerlink" title="方案一 加定时器延时触发blur事件"></a>方案一 加定时器延时触发blur事件</h3><p>缺点：设置多久的延时是一个难以两全的问题，时间太短不能保证click事件的100%触发，时间太长则会造成卡顿的感觉，影响用户体验。</p><h3 id="方案二-将click事件改为mousedown事件，mousedown事件是优先于blur事件执行"><a href="#方案二-将click事件改为mousedown事件，mousedown事件是优先于blur事件执行" class="headerlink" title="方案二 将click事件改为mousedown事件，mousedown事件是优先于blur事件执行"></a>方案二 将click事件改为mousedown事件，mousedown事件是优先于blur事件执行</h3><p>缺点：鼠标按下便触发了事件，不收起、长按也会触发，可能造成用户体验不好。还需要判断是否是鼠标左键点击(event.button===0)。</p><h3 id="方案三-给click所在元素再添加一个mousedown事件，在其中执行event-preventDefault-阻止浏览器默认事件，这样点击按钮时输入框就不会失去焦点了"><a href="#方案三-给click所在元素再添加一个mousedown事件，在其中执行event-preventDefault-阻止浏览器默认事件，这样点击按钮时输入框就不会失去焦点了" class="headerlink" title="方案三 给click所在元素再添加一个mousedown事件，在其中执行event.preventDefault()阻止浏览器默认事件，这样点击按钮时输入框就不会失去焦点了"></a>方案三 给click所在元素再添加一个mousedown事件，在其中执行event.preventDefault()阻止浏览器默认事件，这样点击按钮时输入框就不会失去焦点了</h3><p>缺点：如果是弹窗下次打开时，焦点仍然存在。</p><h3 id="方案四-动态绑定移除blur事件"><a href="#方案四-动态绑定移除blur事件" class="headerlink" title="方案四 动态绑定移除blur事件"></a>方案四 动态绑定移除blur事件</h3><p><strong>推荐方案三和四</strong></p>]]></content:encoded>
      
      <comments>http://mydearest.cn/2019/blur%E4%BA%8B%E4%BB%B6%E4%B8%8Eclick%E4%BA%8B%E4%BB%B6%E5%86%B2%E7%AA%81%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>前端模块化发展扩展</title>
      <link>http://mydearest.cn/2019/%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E5%8C%96%E5%8F%91%E5%B1%95%E6%89%A9%E5%B1%95.html</link>
      <guid>http://mydearest.cn/2019/%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E5%8C%96%E5%8F%91%E5%B1%95%E6%89%A9%E5%B1%95.html</guid>
      <pubDate>Tue, 09 Jul 2019 16:51:20 GMT</pubDate>
      <description>
      
        &lt;p&gt;JavaScript 一开始并没有内建模块化支持，也几乎没有模块化这种概念。当时没那么大的需求，搞个模块化显得大材小用啊。随着互联网的发展，尤其是 2006 年 ajax 技术的出现和之后 Web 2.0 的兴起，越来越多的业务逻辑向前端转移，前端开发的复杂程度和代码量逐渐提升。这时，由于缺乏模块化概念，JavaScript 的一些问题便凸显出来：代码难以复用、容易出现全局变量污染和命名冲突、依赖管理难以维护等等。一开始，开发者们使用诸如暴露全局对象、自执行函数等方法来规避这些问题，但仍无法从根本上解决问题。&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>JavaScript 一开始并没有内建模块化支持，也几乎没有模块化这种概念。当时没那么大的需求，搞个模块化显得大材小用啊。随着互联网的发展，尤其是 2006 年 ajax 技术的出现和之后 Web 2.0 的兴起，越来越多的业务逻辑向前端转移，前端开发的复杂程度和代码量逐渐提升。这时，由于缺乏模块化概念，JavaScript 的一些问题便凸显出来：代码难以复用、容易出现全局变量污染和命名冲突、依赖管理难以维护等等。一开始，开发者们使用诸如暴露全局对象、自执行函数等方法来规避这些问题，但仍无法从根本上解决问题。</p><a id="more"></a><h2 id="CommonJS"><a href="#CommonJS" class="headerlink" title="CommonJS"></a>CommonJS</h2><p>2009 年，基于将 JavaScript 应用于服务端的尝试，ServerJS 诞生了。之后 ServerJS 更名为 CommonJS，并逐步发展为一个完整的模块规范。简称 CMD(Common Module Definition)</p><p><a href="http://www.commonjs.org/" target="_blank" rel="noopener">CommonJS官网</a><a href="http://javascript.ruanyifeng.com/nodejs/module.html" target="_blank" rel="noopener">CommonJS阮一峰</a></p><p>CommonJS 为模块的使用定义了一套 API。比如，它定义了全局函数 require，通过传入模块标识来引入其他模块，如果被引入的模块又依赖了其他模块，那么会依次加载这些模块；通过 module.exports 向外部暴露 API，以便其他的模块引入。</p><p>由于 CommonJS 是使用<code>同步方式</code>加载模块的，即只有加载完成才能进行接下来的操作，因此当应用于浏览器端时会受到网速的限制。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> $ = <span class="built_in">require</span>(<span class="string">'jquery'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义私有方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">log</span> (<span class="params">...arg</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(...arg)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定义公有方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHello</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> el = $(<span class="string">'body'</span>)</span><br><span class="line">  log(<span class="string">'zhouyu, hello'</span>, el)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 暴露公有方法</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  sayHello</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="AMD"><a href="#AMD" class="headerlink" title="AMD"></a>AMD</h2><p>之后，在 CommonJS 组织的讨论中，AMD(Asynchronous Module Definition)应运而生。和 CommonJS 不同的是，它使用<code>异步方式</code>加载模块，因此更适合被浏览器端采用。AMD 用全局函数 define 来定义模块，它需要三个参数：模块名称、模块的依赖数组、所有依赖都可用之后执行的回调函数(该函数按照依赖声明的顺序，接收依赖作为参数)。</p><p><a href="https://github.com/amdjs/amdjs-api/wiki/AMD" target="_blank" rel="noopener">AMD</a><a href="https://github.com/amdjs/amdjs-api/wiki/AMD-(%E4%B8%AD%E6%96%87%E7%89%88" target="_blank" rel="noopener">AMD中文</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">define([<span class="string">'jquery'</span>], <span class="function"><span class="keyword">function</span> (<span class="params">$</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 定义私有方法</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">log</span> (<span class="params">...arg</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(...arg)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 定义公有方法</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">sayHello</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> el = $(<span class="string">'body'</span>)</span><br><span class="line">    log(<span class="string">'zhouyu, hello'</span>, el)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 暴露公有方法</span></span><br><span class="line">  <span class="keyword">return</span> sayHello</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="UMD"><a href="#UMD" class="headerlink" title="UMD"></a>UMD</h2><p>如果需要同时支持 CommonJS 和 AMD 两种格式，那么可以使用 UMD(Universal Module Definition)。事实上，UMD 通过一系列 if/else 判断来确定当前环境支持的模块体系，因此多数情况下 UMD 格式的模块会占用更大的体积。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">root, factory</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> define === <span class="string">'function'</span> &amp;&amp; define.amd) &#123;</span><br><span class="line">    <span class="comment">// AMD</span></span><br><span class="line">    define([<span class="string">'jquery'</span>], factory)</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> exports === <span class="string">'object'</span>) &#123;</span><br><span class="line">    <span class="comment">// Nodejs 或 CommonJS</span></span><br><span class="line">    <span class="built_in">module</span>.exports = factory(<span class="built_in">require</span>(<span class="string">'jquery'</span>))</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 浏览器全局变量(root 即 window)</span></span><br><span class="line">    root.returnExports = factory(root.jQuery)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;(<span class="keyword">this</span>, <span class="function"><span class="keyword">function</span> (<span class="params">$</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 定义私有方法</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">log</span> (<span class="params">...arg</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(...arg)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 定义公有方法</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">sayHello</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> el = $(<span class="string">'body'</span>)</span><br><span class="line">    log(<span class="string">'zhouyu, hello'</span>, el)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 暴露公有方法</span></span><br><span class="line">  <span class="keyword">return</span> sayHello</span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure><h2 id="ES6-Modules"><a href="#ES6-Modules" class="headerlink" title="ES6 Modules"></a>ES6 Modules</h2><p>无论是 CommonJS，AMD 还是 UMD，它们都不是标准的 JavaScript 模块解决方案。换句话说，它们都没有被写进 ECMA 的规范中。直到 2015 年 6 月，TC39 委员会终于将 Modules 写进 ECMAScript 2015 中，标志着原生模块新时代的到来。至此，JavaScript 文件有了两种形式：脚本(自 JavaScript 诞生起我们就在使用的)和模块(即 ECMAScript 2015 Modules)。下面就让我们来一起探索 ECMAScript 2015 Modules(以下简称 ES6 Modules)</p><p><a href="http://www.ecma-international.org/ecma-262/6.0/#sec-modules" target="_blank" rel="noopener">ES6 Modules</a><a href="http://es6.ruanyifeng.com/#docs/module" target="_blank" rel="noopener">ES6阮一峰</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> $ <span class="keyword">from</span>(<span class="string">'jquery'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义私有方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">log</span> (<span class="params">...arg</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(...arg)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定义公有方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHello</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> el = $(<span class="string">'body'</span>)</span><br><span class="line">  log(<span class="string">'zhouyu, hello'</span>, el)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> sayHello</span><br></pre></td></tr></table></figure><h2 id="ES6-Modules-现状"><a href="#ES6-Modules-现状" class="headerlink" title="ES6 Modules 现状"></a>ES6 Modules 现状</h2><p>时至今日，几大主流浏览器都在积极推进支持原生 ES6 Modules 的工作，部分浏览器的技术预览版也已经初步完成了这一使命。可以通过 <a href="https://caniuse.com/#search=module" target="_blank" rel="noopener">caniuse</a> 查看目前浏览器的支持情况。</p><h2 id="使用-Babel-和-webpack"><a href="#使用-Babel-和-webpack" class="headerlink" title="使用 Babel 和 webpack"></a>使用 Babel 和 webpack</h2><p>由于绝大多数浏览器都不支持 ES6 Modules，所以目前如果想使用它的语法，需要借助 Babel 和 webpack，即通过 Babel 将代码编译为 ES5 的语法，然后使用 webpack 打包成目标格式。</p><h2 id="直接使用-ES6-Modules"><a href="#直接使用-ES6-Modules" class="headerlink" title="直接使用 ES6 Modules"></a>直接使用 ES6 Modules</h2><p>有些游览器已经支持 ES6 Modules，我们利用 <code>&lt;script type=&quot;module&quot;&gt;</code>(默认是 defer)来使用。</p><h2 id="其他探索"><a href="#其他探索" class="headerlink" title="其他探索"></a>其他探索</h2><ul><li>动态加载方案 <code>import()</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> load = <span class="keyword">async</span> (url) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="built_in">module</span> = <span class="keyword">await</span> <span class="keyword">import</span>(url)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">module</span>, <span class="built_in">window</span>[tempGlobal])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">load</span> (<span class="params">url</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>)</span><br><span class="line">    <span class="keyword">const</span> tempGlobal = <span class="string">'__tempModuleLoadingVariable'</span> + <span class="built_in">Math</span>.random().toString(<span class="number">32</span>).substring(<span class="number">2</span>)</span><br><span class="line">    script.type = <span class="string">'module'</span></span><br><span class="line">    script.textContent = <span class="string">`import * as m from "<span class="subst">$&#123;url&#125;</span>"; window.<span class="subst">$&#123;tempGlobal&#125;</span> = m;`</span></span><br><span class="line"></span><br><span class="line">    script.onload = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      resolve(<span class="built_in">window</span>[tempGlobal])</span><br><span class="line">      <span class="keyword">delete</span> <span class="built_in">window</span>[tempGlobal]</span><br><span class="line">      script.remove()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    script.onerror = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Failed to load module script with URL '</span> + url))</span><br><span class="line">      <span class="keyword">delete</span> <span class="built_in">window</span>[tempGlobal]</span><br><span class="line">      script.remove()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">document</span>.documentElement.appendChild(script)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>基于 ES6 Modules 的 <code>module-pusher</code> 尝试</li></ul>]]></content:encoded>
      
      <comments>http://mydearest.cn/2019/%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E5%8C%96%E5%8F%91%E5%B1%95%E6%89%A9%E5%B1%95.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>健康指标</title>
      <link>http://mydearest.cn/2019/%E5%81%A5%E5%BA%B7%E6%8C%87%E6%A0%87.html</link>
      <guid>http://mydearest.cn/2019/%E5%81%A5%E5%BA%B7%E6%8C%87%E6%A0%87.html</guid>
      <pubDate>Tue, 09 Jul 2019 16:19:31 GMT</pubDate>
      <description>
      
        &lt;p&gt;接上次的&lt;a href=&quot;https://mydearest.cn/2019/%E7%BB%B4%E7%94%9F%E7%B4%A0.html&quot;&gt;维生素&lt;/a&gt;😊，罗列一些生活中需要知道健康指标。&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>接上次的<a href="https://mydearest.cn/2019/%E7%BB%B4%E7%94%9F%E7%B4%A0.html">维生素</a>😊，罗列一些生活中需要知道健康指标。</p><a id="more"></a><h1 id="血糖"><a href="#血糖" class="headerlink" title="血糖"></a>血糖</h1><p>血中的葡萄糖称为血糖。</p><p>血糖的来源包括：①食物消化、吸收；②肝内储存的糖原分解；③脂肪和蛋白质的转化。</p><p>血糖的去路包括：①氧化转变为能量；②转化为糖原储存于肝脏、肾脏和肌肉中；③转变为脂肪和蛋白质等其他营养成分加以储存。</p><p>胰岛是体内调节血糖的血糖浓度的主要器官，肝脏储存肝糖元。此外，血糖浓度还受神经、内分泌激素的调节。</p><h2 id="血糖值"><a href="#血糖值" class="headerlink" title="血糖值"></a>血糖值</h2><h3 id="空腹血糖"><a href="#空腹血糖" class="headerlink" title="空腹血糖"></a>空腹血糖</h3><p>全血血糖(手指)。血浆血糖(静脉)。</p><p>空腹血糖正常值，全血血糖：3.89～6.11 mmol/L，血浆血糖：3.90～6.90 mmol/L</p><p>空腹全血血糖 ≥ 6.70 mmol/L，血浆血糖 ≥ 7.80 mmol/L，2 次重复测定可诊断为糖尿病。</p><h3 id="餐后血糖"><a href="#餐后血糖" class="headerlink" title="餐后血糖"></a>餐后血糖</h3><p>餐后 1 小时：血糖 6.7-9.4 mmol/L。最多也不超过 11.1 mmol/L。</p><p>餐后 2 小时：血糖 ≤ 7.8 mmol/L。</p><p>餐后 3 小时：第三小时后恢复正常，各次尿糖均为阴性。</p><h3 id="孕妇血糖"><a href="#孕妇血糖" class="headerlink" title="孕妇血糖"></a>孕妇血糖</h3><p>空腹不超过 5.1 mmol/L。</p><p>餐后 1 小时不得超过 10.0 mmol/L 才是血糖的正常水平。</p><h2 id="糖尿病"><a href="#糖尿病" class="headerlink" title="糖尿病"></a>糖尿病</h2><p>糖尿病患者的空腹血糖参考值：</p><p>轻度糖尿病：7.0~8.4 mmol/L，中度糖尿病：8.4~11.1 mmol/L，重度糖尿病：大于 11.1 mmol/L。</p><h2 id="药物"><a href="#药物" class="headerlink" title="药物"></a>药物</h2><p>二甲双胍。</p><ol><li>二甲双胍片首选用单纯饮食控制及体育锻炼治疗无效的2型糖尿病，特别是肥胖的2型糖尿病。</li><li>本品与胰岛素合用，可减少胰岛素用量，防止低血糖发生。</li><li>可与磺酰脲类降血糖药合用，具协同作用。</li></ol><p>服用本品时应尽量避免饮酒。</p><h2 id="哪些食物降血糖"><a href="#哪些食物降血糖" class="headerlink" title="哪些食物降血糖"></a>哪些食物降血糖</h2><p>1.饮食宜清淡，忌辛辣，低糖、低油、低盐，按时饮食</p><p>2.可以吃：苦瓜、洋葱、山药、海带、魔芋多吃，冬瓜、芹菜、菠菜、藕等少吃</p><p>3.可以吃：柚子、苹果、橘子、樱桃、草莓、梨、桃等升糖指数比较低，西瓜吃靠近瓜皮的，不吃瓜心</p><p>4.不能吃：香蕉、山楂、柿子、枣子</p><p>5.多喝凉白开，不要憋尿</p><p>6.检测足部，保护足部</p><p>7.多做足部运动，踮脚、脚趾抓地、泡完脚后用掌心搓脚心</p><p>8.不含糖的甜味剂，比如木糖醇、三氯蔗糖、阿斯巴甜、甜菊糖苷这类甜味剂；如果含有这些的食品，可以少量食用。燕麦片</p><p>多吃：冬瓜、苦瓜、洋葱、山药、海带、魔芋、芹菜、菠菜、木耳、藕</p><h3 id="燕麦片"><a href="#燕麦片" class="headerlink" title="燕麦片"></a>燕麦片</h3><p>燕麦片是燕麦粒轧制而成，呈扁平状，直径约相当于黄豆粒，形状完整的一种食品。燕麦煮出来高度粘稠，其中 beta 葡聚糖健康成分所带来的，具有降血脂、降血糖、高饱腹的效果，长期食用具有减肥功效。此外，燕麦中含有丰富的维生素 B1、B2、E、叶酸等，可以改善血液循环、缓解生活工作带来的压力；含有的钙、磷、铁、锌、锰等矿物质也有预防骨质疏松、促进伤口愈合、防止贫血的功效。</p><h3 id="魔芋"><a href="#魔芋" class="headerlink" title="魔芋"></a>魔芋</h3><p>降血糖、降血脂、降血压、散毒、养颜、通脉、减肥、通便、开胃。</p><p>生魔芋有毒，必须煎煮 3 小时以上才可食用。</p><p>消化不良的人，每次食量不宜过多。</p><p>有皮肤病的人少食。</p><p>魔芋性寒，有伤寒感冒症状的应少食用。</p><h3 id="海带"><a href="#海带" class="headerlink" title="海带"></a>海带</h3><p>海带是一种营养价值很高的蔬菜，同时具有一定的药用价值。含有丰富的碘等矿物质元素。海带含热量低、蛋白质含量中等、矿物质丰富。研究发现，海带具有降血脂、降血糖、调节免疫、抗凝血、抗肿瘤、排铅解毒和抗氧化等多种生物功能。</p><p>吃海带后不要马上喝茶(茶含鞣酸)，也不要立刻吃酸涩的水果(酸涩水果含植物酸)。</p><p>吃多也不好，会得甲亢。</p><h3 id="山药"><a href="#山药" class="headerlink" title="山药"></a>山药</h3><p>具有滋养强壮，助消化，敛虚汗，止泻之功效，主治脾虚腹泻、肺虚咳嗽、糖尿病消渴、小便短频、遗精、妇女带下及消化不良的慢性肠炎。</p><h1 id="血压"><a href="#血压" class="headerlink" title="血压"></a>血压</h1><p>是指血液在血管内流动时作用于单位面积血管壁的侧压力，它是推动血液在血管内流动的动力。在不同血管内被分别称为动脉血压、毛细血管压和静脉血压，通常所说的血压是指体循环的动脉血压。</p><p>影响动脉血压的因素主要有五个方面：①每搏输出量；②外周阻力；③心率；④主动脉和大动脉管壁的弹性；⑤循环血量与血管容量。</p><h2 id="血压值"><a href="#血压值" class="headerlink" title="血压值"></a>血压值</h2><p>收缩压：高压。舒张压：低压。</p><p>正常成人安静状态下的血压范围较稳定，正常范围收缩压 90～139 mmHg，舒张压 60～89 mmHg，脉压 30～40 mmHg。</p><p>高血压：未使用抗高血压药的前提下，18 岁以上成人收缩压 ≥ 140 mmHg 和(或)舒张压 ≥ 90mmHg。</p><p>低血压：未使用抗高血压药的前提下，18 岁以上成人收缩压 &lt; 90 mmHg 和(或)舒张压 &lt; 60mmHg。</p><h2 id="哪些食物降血压"><a href="#哪些食物降血压" class="headerlink" title="哪些食物降血压"></a>哪些食物降血压</h2><h3 id="茄子"><a href="#茄子" class="headerlink" title="茄子"></a>茄子</h3><p>降低胆固醇，降血脂、降血压，防治胃癌，治疗慢性胃炎、肾炎水肿，防治坏血病及促进伤口愈合，清热解毒。</p><p>消化不良、容易腹泻、脾胃虚寒、便溏症状的人不宜多吃。</p><p>秋后的茄子有一定的毒素，不要吃。</p><h3 id="白萝卜"><a href="#白萝卜" class="headerlink" title="白萝卜"></a>白萝卜</h3><p>清肠排毒，促进消化，增强食欲，防癌抗癌，降血压</p><h3 id="芹菜"><a href="#芹菜" class="headerlink" title="芹菜"></a>芹菜</h3><p>降低胆固醇，降血压</p><p>【芹菜+鸡肉】容易伤元气。</p><p>【芹菜+兔肉】容易引起脱皮。</p><h1 id="BMI-指数"><a href="#BMI-指数" class="headerlink" title="BMI 指数"></a>BMI 指数</h1><p>身体质量指数，简称体质指数，又称体重.</p><p>体质指数(BMI)= 体重(kg)÷ 身高(m)^ 2</p><p>成人的BMI数值：</p><ul><li>过轻：低于 18.5</li><li>正常：18.5-23.9</li><li>过重：24-27</li><li>肥胖：28-32</li><li>非常肥胖：高于 32</li></ul><p>60 / (1.68 * 1.68) = 21.26</p><p>65 / (1.68 * 1.68) = 23.04</p><p>67 / (1.68 * 1.68) = 23.74</p><p>60 / (1.70 * 1.70) = 20.77</p><p>65 / (1.70 * 1.70) = 22.50</p><p>69 / (1.70 * 1.70) = 23.88</p><p>60 / (1.72 * 1.72) = 20.29</p><p>65 / (1.72 * 1.72) = 21.98</p><p>70 / (1.72 * 1.72) = 23.67</p><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="韭菜"><a href="#韭菜" class="headerlink" title="韭菜"></a>韭菜</h2><p>补肾，健胃，提神，降低胆固醇。</p><p>春食则香，夏食则臭。</p><p>【韭菜+菠菜】同食会有滑肠作用，容易引起腹泻。</p><p>【韭菜+牛肉】发 热动火，引起牙齿肿痛，口疮。</p><p>【韭菜+白酒】引起胃炎，胃溃肠病复发。</p><p>【韭菜+蜂蜜】同食容易引起腹泻。</p>]]></content:encoded>
      
      <comments>http://mydearest.cn/2019/%E5%81%A5%E5%BA%B7%E6%8C%87%E6%A0%87.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>EventLoop</title>
      <link>http://mydearest.cn/2019/EventLoop.html</link>
      <guid>http://mydearest.cn/2019/EventLoop.html</guid>
      <pubDate>Sun, 16 Jun 2019 04:38:46 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;描述事件队列的过程？&quot;&gt;&lt;a href=&quot;#描述事件队列的过程？&quot; class=&quot;headerlink&quot; title=&quot;描述事件队列的过程？&quot;&gt;&lt;/a&gt;描述事件队列的过程？&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;js是单线程的，会出现阻塞问题，因此有了异步队列的出现&lt;/li&gt;
&lt;li&gt;主进程同步执行任务，异步操作将添加到异步队列中&lt;/li&gt;
&lt;li&gt;等候主进程执行完毕后再执行异步队列中的操作&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="描述事件队列的过程？"><a href="#描述事件队列的过程？" class="headerlink" title="描述事件队列的过程？"></a>描述事件队列的过程？</h2><ul><li>js是单线程的，会出现阻塞问题，因此有了异步队列的出现</li><li>主进程同步执行任务，异步操作将添加到异步队列中</li><li>等候主进程执行完毕后再执行异步队列中的操作</li></ul><hr><a id="more"></a><h2 id="什么是宏任务什么是微任务？"><a href="#什么是宏任务什么是微任务？" class="headerlink" title="什么是宏任务什么是微任务？"></a>什么是宏任务什么是微任务？</h2><ul><li>异步队列中有宏任务微任务之分</li><li>一次事件循环：先运行宏任务队列中的一个，然后运行微任务队列中的所有任务。接着开始下一次循环</li></ul><h2 id="哪些是宏任务哪些是微任务？"><a href="#哪些是宏任务哪些是微任务？" class="headerlink" title="哪些是宏任务哪些是微任务？"></a>哪些是宏任务哪些是微任务？</h2><h3 id="宏任务"><a href="#宏任务" class="headerlink" title="宏任务"></a>宏任务</h3><ul><li>setTimeout</li><li>setImmediate</li><li>setIntarval</li><li>requestAnimationFrame</li><li>I/O</li><li>UI rendering</li></ul><h3 id="微任务"><a href="#微任务" class="headerlink" title="微任务"></a>微任务</h3><ul><li>process.nextTick</li><li>Promise.then</li><li>Object.observe</li><li>MutationObserver</li></ul><h3 id="练习题"><a href="#练习题" class="headerlink" title="练习题"></a>练习题</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line"><span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">3</span>)</span><br><span class="line">    resolve();</span><br><span class="line">&#125;)</span><br><span class="line">promise.then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">4</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">5</span>)</span><br><span class="line"><span class="comment">// 13542</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">&#125;,<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> intervalId = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">3</span>)</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">10</span>)</span><br><span class="line">    <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">11</span>)</span><br><span class="line">        resolve()</span><br><span class="line">    &#125;).then(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">12</span>)</span><br><span class="line">    &#125;).then(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">13</span>)</span><br><span class="line">        clearInterval(intervalId)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line"><span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">7</span>)</span><br><span class="line">&#125;).then(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">8</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">9</span>)</span><br><span class="line"><span class="comment">// 1 9 7 8 2 3 10 11 12 13</span></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://mydearest.cn/2019/EventLoop.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>前端模块化发展</title>
      <link>http://mydearest.cn/2019/%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E5%8C%96%E5%8F%91%E5%B1%95.html</link>
      <guid>http://mydearest.cn/2019/%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E5%8C%96%E5%8F%91%E5%B1%95.html</guid>
      <pubDate>Thu, 13 Jun 2019 15:37:20 GMT</pubDate>
      <description>
      
        &lt;h1 id=&quot;一、前端模块化发展简介&quot;&gt;&lt;a href=&quot;#一、前端模块化发展简介&quot; class=&quot;headerlink&quot; title=&quot;一、前端模块化发展简介&quot;&gt;&lt;/a&gt;一、前端模块化发展简介&lt;/h1&gt;&lt;h2 id=&quot;1-CommonJS&quot;&gt;&lt;a href=&quot;#1-CommonJS&quot; class=&quot;headerlink&quot; title=&quot;1.CommonJS&quot;&gt;&lt;/a&gt;1.CommonJS&lt;/h2&gt;&lt;p&gt;2009年，美国程序员Ryan Dahl创造了&lt;a href=&quot;http://nodejs.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;node.js&lt;/a&gt;项目，将javascript语言用于服务器端编程。这标志”Javascript模块化编程”正式诞生。nodeJs中的模块，一律为&lt;a href=&quot;https://en.wikipedia.org/wiki/CommonJS&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CommonJS&lt;/a&gt; 格式。&lt;/p&gt;
&lt;h3 id=&quot;1-1-语法风格&quot;&gt;&lt;a href=&quot;#1-1-语法风格&quot; class=&quot;headerlink&quot; title=&quot;1.1 语法风格&quot;&gt;&lt;/a&gt;1.1 语法风格&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//Math.js&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;.exports = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&#39;add&#39;&lt;/span&gt;: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;a, b&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; a + b;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//main.js&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt; = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;./Math&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.add(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;done&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="一、前端模块化发展简介"><a href="#一、前端模块化发展简介" class="headerlink" title="一、前端模块化发展简介"></a>一、前端模块化发展简介</h1><h2 id="1-CommonJS"><a href="#1-CommonJS" class="headerlink" title="1.CommonJS"></a>1.CommonJS</h2><p>2009年，美国程序员Ryan Dahl创造了<a href="http://nodejs.org/" target="_blank" rel="noopener">node.js</a>项目，将javascript语言用于服务器端编程。这标志”Javascript模块化编程”正式诞生。nodeJs中的模块，一律为<a href="https://en.wikipedia.org/wiki/CommonJS" target="_blank" rel="noopener">CommonJS</a> 格式。</p><h3 id="1-1-语法风格"><a href="#1-1-语法风格" class="headerlink" title="1.1 语法风格"></a>1.1 语法风格</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Math.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line"><span class="string">'add'</span>: <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main.js</span></span><br><span class="line"><span class="keyword">const</span> <span class="built_in">Math</span> = <span class="built_in">require</span>(<span class="string">'./Math'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.add(<span class="number">2</span>, <span class="number">3</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'done'</span>);</span><br></pre></td></tr></table></figure><hr><a id="more"></a><h3 id="1-2-同步加载"><a href="#1-2-同步加载" class="headerlink" title="1.2 同步加载"></a>1.2 同步加载</h3><h3 id="1-3-动态加载"><a href="#1-3-动态加载" class="headerlink" title="1.3 动态加载"></a>1.3 动态加载</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main.js</span></span><br><span class="line"><span class="keyword">const</span> <span class="built_in">Math</span> = <span class="built_in">require</span>(<span class="string">'./Ma'</span> + <span class="string">'th'</span>);<span class="comment">//动态拼接</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.add(<span class="number">2</span>, <span class="number">3</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'done'</span>);</span><br></pre></td></tr></table></figure><h3 id="1-4-浏览器不支持CommonJS规范。"><a href="#1-4-浏览器不支持CommonJS规范。" class="headerlink" title="1.4 浏览器不支持CommonJS规范。"></a>1.4 浏览器不支持CommonJS规范。</h3><p>浏览器不兼容CommonJS的根本原因，在于缺少四个Node.js环境的变量。</p><ul><li>module</li><li>exports</li><li>require</li><li>global</li></ul><p>可以使用工具进行转换，例如：<a href="http://browserify.org/" target="_blank" rel="noopener">Browserify</a></p><hr><h2 id="2-AMD"><a href="#2-AMD" class="headerlink" title="2.AMD"></a>2.AMD</h2><p>CommonJS是主要为了JS在后端的表现制定的，他是不适合前端的。</p><p><a href="http://github.com/amdjs/amdjs-api/wiki/AMD" target="_blank" rel="noopener">AMD</a>是”Asynchronous Module Definition”的缩写，意思就是”异步模块定义”。</p><p><strong>RequireJS</strong>实现了AMD规范。下面以RequireJS为例，了解一下AMD规范。</p><h3 id="2-1-语法风格"><a href="#2-1-语法风格" class="headerlink" title="2.1 语法风格"></a>2.1 语法风格</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Math.js</span></span><br><span class="line">define([], <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="string">'add'</span>: <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main.js</span></span><br><span class="line"><span class="built_in">require</span>.config(&#123;</span><br><span class="line">    paths : &#123;</span><br><span class="line">        <span class="string">"math"</span> : <span class="string">"Math"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">require</span>([<span class="string">'math'</span>], <span class="function"><span class="keyword">function</span> (<span class="params">math</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(math.add(<span class="number">2</span>, <span class="number">3</span>));</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'done'</span>);</span><br><span class="line"><span class="comment">//done</span></span><br><span class="line"><span class="comment">//5</span></span><br></pre></td></tr></table></figure><h3 id="2-2-异步加载"><a href="#2-2-异步加载" class="headerlink" title="2.2 异步加载"></a>2.2 异步加载</h3><h3 id="2-3-动态加载"><a href="#2-3-动态加载" class="headerlink" title="2.3 动态加载"></a>2.3 动态加载</h3><h3 id="2-4-依赖前置，提前执行"><a href="#2-4-依赖前置，提前执行" class="headerlink" title="2.4 依赖前置，提前执行"></a>2.4 依赖前置，提前执行</h3><hr><h2 id="3-CMD"><a href="#3-CMD" class="headerlink" title="3.CMD"></a>3.CMD</h2><p>CMD是SeaJS 在推广过程中对模块定义的规范化产出。</p><h3 id="3-1-语法风格"><a href="#3-1-语法风格" class="headerlink" title="3.1 语法风格"></a>3.1 语法风格</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// CMD</span></span><br><span class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params">require, exports, module</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="built_in">require</span>(<span class="string">'./a'</span>);</span><br><span class="line">    a.doSomething();</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="keyword">var</span> b = <span class="built_in">require</span>(<span class="string">'./b'</span>);   <span class="comment">// 依赖可以就近书写</span></span><br><span class="line">    b.doSomething();</span><br><span class="line">    <span class="comment">// ... </span></span><br><span class="line">    <span class="built_in">require</span>.async(<span class="string">'./c'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">c</span>)</span>&#123; <span class="comment">//支持异步加载</span></span><br><span class="line">        c.doSomething();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// AMD 默认推荐的是</span></span><br><span class="line">define([<span class="string">'./a'</span>, <span class="string">'./b'</span>], <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123; <span class="comment">// 依赖必须一开始就写好</span></span><br><span class="line">    a.doSomething();</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    b.doSomething();</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="3-2-AMD和CMD的区别"><a href="#3-2-AMD和CMD的区别" class="headerlink" title="3.2 AMD和CMD的区别"></a>3.2 AMD和CMD的区别</h3><p>1) <strong>对于依赖的模块，AMD 是提前执行，CMD 是延迟执行。</strong>不过 RequireJS 从 2.0 开始，也改成可以延迟执行（根据写法不同，处理方式不同）。CMD 推崇 as lazy as possible（尽可能的懒加载，也称为延迟加载，即在需要的时候才加载）。</p><p>2) <strong>CMD 推崇依赖就近，AMD 推崇依赖前置。</strong>虽然 AMD 也支持 CMD 的写法，同时还支持将 require 作为依赖项传递，但 RequireJS 的作者默认是最喜欢上面的写法，也是官方文档里默认的模块定义写法。</p><h3 id="3-3-推荐链接"><a href="#3-3-推荐链接" class="headerlink" title="3.3 推荐链接"></a>3.3 推荐链接</h3><p><a href="https://github.com/seajs/seajs/issues/277" target="_blank" rel="noopener">与 RequireJS 的异同</a></p><p><a href="https://seajs.github.io/seajs/docs/" target="_blank" rel="noopener">SeaJS官方文档</a></p><h1 id="二、Module"><a href="#二、Module" class="headerlink" title="二、Module"></a>二、Module</h1><p>ES6中Module的特点</p><ul><li>浏览器，服务器通用</li><li>静态加载</li></ul><h2 id="1-基本语法"><a href="#1-基本语法" class="headerlink" title="1. 基本语法"></a>1. 基本语法</h2><h3 id="1-1-export"><a href="#1-1-export" class="headerlink" title="1.1 export"></a>1.1 export</h3><p>一个模块就是一个独立的文件。<code>export</code>关键字用来输出该变量。可以输出变量，函数或类。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// test.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> firstName = <span class="string">'cheng'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> lastName = <span class="string">'zhang'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> age = <span class="number">18</span>;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// test.js</span></span><br><span class="line"><span class="keyword">var</span> firstName = <span class="string">'cheng'</span>;</span><br><span class="line"><span class="keyword">var</span> lastName = <span class="string">'zhang'</span>;</span><br><span class="line"><span class="keyword">var</span> age = <span class="number">18</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123; firstName, lastName, age &#125;;</span><br></pre></td></tr></table></figure><p>可以使用<code>as</code>为输出变量重命名。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> firstName = <span class="string">'cheng'</span>;</span><br><span class="line"><span class="keyword">var</span> lastName = <span class="string">'zhang'</span>;</span><br><span class="line"><span class="keyword">var</span> age = <span class="number">18</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">firstName <span class="keyword">as</span> name, </span><br><span class="line">    lastName <span class="keyword">as</span> lastname, </span><br><span class="line">    age</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>需要特别注意的是，<code>export</code><strong>命令规定的是对外的接口</strong>，必须与模块内部的变量建立一一对应关系。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 报错</span></span><br><span class="line"><span class="keyword">export</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 报错</span></span><br><span class="line"><span class="keyword">var</span> m = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">export</span> m;</span><br></pre></td></tr></table></figure><p><code>export</code>语句输出的接口，与其对应的值是<strong>动态绑定关系</strong>，即通过该接口，可以取到模块内部实时的值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> foo = <span class="string">'bar'</span>;</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> foo = <span class="string">'baz'</span>, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure><p><code>export</code>命令可以出现在模块的任何位置，只要处于<strong>模块顶层</strong>就可以。</p><h3 id="1-2-import"><a href="#1-2-import" class="headerlink" title="1.2 import"></a>1.2 import</h3><p>其他 JS 文件通过<code>import</code>命令加载模块。大括号里面的变量名，必须与被导入模块（<code>test.js</code>）对外接口的名称相同。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; firstName, lastName, age &#125; <span class="keyword">from</span> <span class="string">'./test.js'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(firstName + <span class="string">' '</span> + lastName);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//cheng zhang</span></span><br></pre></td></tr></table></figure><p><code>import</code>命令输入的变量都是<strong>只读</strong>的，因为它的本质是输入接口。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;a&#125; <span class="keyword">from</span> <span class="string">'./xxx.js'</span></span><br><span class="line"></span><br><span class="line">a = &#123;&#125;; <span class="comment">// Assignment to constant variable.</span></span><br></pre></td></tr></table></figure><p>如果<code>a</code>是一个对象，改写<code>a</code>的属性是允许的。和const一样。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;a&#125; <span class="keyword">from</span> <span class="string">'./xxx.js'</span></span><br><span class="line"></span><br><span class="line">a.foo = <span class="string">'hello'</span>; <span class="comment">// 合法操作</span></span><br></pre></td></tr></table></figure><p>可以用星号（<code>*</code>）指定一个对象，进行整体加载。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> test <span class="keyword">from</span> <span class="string">'./test.js'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(test.firstName + <span class="string">' '</span> + test.lastName);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//cheng zhang</span></span><br><span class="line"></span><br><span class="line">test.lastName = <span class="string">'yun'</span>;</span><br><span class="line"><span class="comment">//Cannot assign to read only property 'lastName' of object '[object Module]'</span></span><br><span class="line"><span class="comment">//如果是对象，可以修改对象的属性。</span></span><br></pre></td></tr></table></figure><p><code>import</code>命令<strong>具有提升效果</strong>，会提升到整个模块的头部，首先执行。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">foo();</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; foo &#125; <span class="keyword">from</span> <span class="string">'my_module'</span>;</span><br></pre></td></tr></table></figure><p>由于<code>import</code>是静态执行，所以<strong>不能使用表达式和变量</strong>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 报错</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="string">'f'</span> + <span class="string">'oo'</span> &#125; <span class="keyword">from</span> <span class="string">'my_module'</span>;</span><br></pre></td></tr></table></figure><p><code>import</code>语句<strong>会执行所加载的模块</strong>，因此可以有下面的写法。仅仅执行<code>lodash</code>模块，但是不输入任何值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'lodash'</span>;</span><br></pre></td></tr></table></figure><p>即使加载多次，也只会执行一次。也就是说，<code>import</code>语句是 <strong>Singleton 模式</strong>。</p><h3 id="1-3-单例模式解读"><a href="#1-3-单例模式解读" class="headerlink" title="1.3 单例模式解读"></a>1.3 单例模式解读</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//counter.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> counter = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">addCounter</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    counter++;</span><br><span class="line">&#125;</span><br><span class="line">addCounter();</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main.js</span></span><br><span class="line"><span class="keyword">import</span> &#123;counter, addCounter&#125; <span class="keyword">from</span> <span class="string">'./counter'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'main:'</span> + counter);</span><br><span class="line">addCounter();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'main:'</span> + counter);</span><br><span class="line"></span><br><span class="line"><span class="comment">//main:2</span></span><br><span class="line"><span class="comment">//main:3</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>module test<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"module"</span> <span class="attr">src</span>=<span class="string">'main.js'</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"module"</span> <span class="attr">src</span>=<span class="string">'main2.js'</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main2.js</span></span><br><span class="line"><span class="keyword">import</span> &#123;counter, addCounter&#125; <span class="keyword">from</span> <span class="string">'./counter'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'main2:'</span> + counter);</span><br><span class="line">addCounter();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'main2:'</span> + counter);</span><br><span class="line"></span><br><span class="line"><span class="comment">//main2:3</span></span><br><span class="line"><span class="comment">//main2:4</span></span><br></pre></td></tr></table></figure><h3 id="1-4-export-default"><a href="#1-4-export-default" class="headerlink" title="1.4 export default"></a>1.4 export default</h3><p>使用<code>export default</code>可以不用关注输出模块中的变量名。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// export-default.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'foo'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// import-default.js</span></span><br><span class="line"><span class="keyword">import</span> customName <span class="keyword">from</span> <span class="string">'./export-default'</span>;</span><br><span class="line">customName(); <span class="comment">// 'foo'</span></span><br></pre></td></tr></table></figure><p><code>import</code>命令可以为该匿名函数指定任意名字。<code>import</code>命令后面，不使用大括号。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// export-default.js</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'foo'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> foo;</span><br></pre></td></tr></table></figure><p><code>export default</code>的本质，就是输出一个叫做<code>default</code>的变量或方法。</p><p><code>imort something from ..</code>.的本质，就是<code>import {default as something} from ...</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 正确</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> a;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 错误</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">var</span> a = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 正确</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="number">42</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 报错</span></span><br><span class="line"><span class="keyword">export</span> <span class="number">42</span>;</span><br></pre></td></tr></table></figure><p>所以<code>export default</code>是比较常用的方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MyClass.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> </span>&#123; ... &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> MyClass <span class="keyword">from</span> <span class="string">'MyClass'</span>;</span><br><span class="line"><span class="keyword">let</span> o = <span class="keyword">new</span> MyClass();</span><br></pre></td></tr></table></figure><h3 id="1-5-import-amp-export混合使用"><a href="#1-5-import-amp-export混合使用" class="headerlink" title="1.5 import&amp;export混合使用"></a>1.5 import&amp;export混合使用</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> &#123; foo, bar &#125; <span class="keyword">from</span> <span class="string">'my_module'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以简单理解为</span></span><br><span class="line"><span class="keyword">import</span> &#123; foo, bar &#125; <span class="keyword">from</span> <span class="string">'my_module'</span>;</span><br><span class="line"><span class="keyword">export</span> &#123; foo, bar &#125;;</span><br></pre></td></tr></table></figure><p>上面代码中，<code>export</code>和<code>import</code>语句可以结合在一起，写成一行。但需要注意的是，写成一行以后，<code>foo</code>和<code>bar</code><strong>实际上并没有被导入当前模块</strong>，只是相当于对外转发了这两个接口，导致<strong>当前模块不能直接使用</strong><code>foo</code>和<code>bar</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 接口改名</span></span><br><span class="line"><span class="keyword">export</span> &#123; fooName <span class="keyword">as</span> newName &#125; <span class="keyword">from</span> <span class="string">'my_module'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//具名接口改为默认接口</span></span><br><span class="line"><span class="keyword">export</span> &#123; foo <span class="keyword">as</span> <span class="keyword">default</span> &#125; <span class="keyword">from</span> <span class="string">'./someModule'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//接口也可以改名为具名接口</span></span><br><span class="line"><span class="keyword">export</span> &#123; <span class="keyword">default</span> <span class="keyword">as</span> es6 &#125; <span class="keyword">from</span> <span class="string">'./someModule'</span>;</span><br></pre></td></tr></table></figure><h3 id="1-6-模块的继承"><a href="#1-6-模块的继承" class="headerlink" title="1.6 模块的继承"></a>1.6 模块的继承</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//calculator.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//calculatorPlus.js</span></span><br><span class="line"><span class="keyword">export</span> * <span class="keyword">from</span> <span class="string">'./calculator.js'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">multiply</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a * b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main.js</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> cal <span class="keyword">from</span> <span class="string">'./calculatorPlus.js'</span>;</span><br><span class="line"></span><br><span class="line">cal.add(<span class="number">2</span>, <span class="number">3</span>);<span class="comment">//5</span></span><br><span class="line">cal.multiply(<span class="number">2</span>, <span class="number">3</span>);<span class="comment">//6</span></span><br></pre></td></tr></table></figure><h3 id="1-7-import"><a href="#1-7-import" class="headerlink" title="1.7 import()"></a>1.7 import()</h3><p><code>import()</code>提案是为了解决<code>import</code><strong>动态加载</strong>，和<strong>不能写在代码块中</strong>的问题。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>(a + <span class="string">'.js'</span>)</span><br><span class="line">.then(...);</span><br><span class="line">      </span><br><span class="line"><span class="keyword">import</span>(f())</span><br><span class="line">.then(...);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (condition) &#123;</span><br><span class="line">  <span class="keyword">import</span>(<span class="string">'moduleA'</span>).then(...);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="keyword">import</span>(<span class="string">'moduleB'</span>).then(...);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-Module补充"><a href="#2-Module补充" class="headerlink" title="2. Module补充"></a>2. Module补充</h2><h3 id="2-1-浏览器加载"><a href="#2-1-浏览器加载" class="headerlink" title="2.1 浏览器加载"></a>2.1 浏览器加载</h3><p>html中加载 ES6 模块，也使用<code>&lt;script&gt;</code>标签，但是要加入<code>type=&quot;module&quot;</code>属性。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"module"</span> <span class="attr">src</span>=<span class="string">"./myModule.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--等同于--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"module"</span> <span class="attr">src</span>=<span class="string">"./myModule.js"</span> <span class="attr">defer</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"module"</span> <span class="attr">src</span>=<span class="string">"./myModule.js"</span> <span class="attr">async</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p><code>defer</code>:要等到整个页面在内存中正常渲染结束（DOM 结构完全生成，以及其他脚本执行完成），才会执行。保证执行顺序。</p></li><li><p><code>async</code>:一旦下载完，渲染引擎就会中断渲染，执行这个脚本以后，再继续渲染。不能保证执行顺序。</p></li></ul><p>对于外部的模块脚本，要注意：</p><ul><li>代码是在模块作用域之中运行，而不是在全局作用域运行。模块内部的顶层变量，外部不可见。</li><li>模块脚本自动采用严格模式，不管有没有声明<code>use strict</code>。</li><li>模块之中，可以使用<code>import</code>命令加载其他模块（<code>.js</code>后缀不可省略，需要提供绝对 URL 或相对 URL），也可以使用<code>export</code>命令输出对外接口。</li><li><strong>模块之中，顶层的<code>this</code>关键字返回<code>undefined</code>，而不是指向<code>window</code>。也就是说，在模块顶层使用<code>this</code>关键字，是无意义的</strong>。</li><li>同一个模块如果加载多次，将只执行一次。</li></ul><h3 id="2-2-循环加载"><a href="#2-2-循环加载" class="headerlink" title="2.2 循环加载"></a>2.2 循环加载</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// a.js</span></span><br><span class="line"><span class="keyword">import</span> &#123;bar&#125; <span class="keyword">from</span> <span class="string">'./b'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'a.js'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(bar);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> foo = <span class="string">'foo'</span>;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// b.js</span></span><br><span class="line"><span class="keyword">import</span> &#123;foo&#125; <span class="keyword">from</span> <span class="string">'./a'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'b.js'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(foo);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> bar = <span class="string">'bar'</span>;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>module test<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"module"</span> <span class="attr">src</span>=<span class="string">'a.js'</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Cannot access 'foo' before initialization--&gt;</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// a.js</span></span><br><span class="line"><span class="keyword">import</span> &#123;bar&#125; <span class="keyword">from</span> <span class="string">'./b'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'a.js'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(bar());</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="string">'foo'</span> &#125;</span><br><span class="line"><span class="keyword">export</span> &#123;foo&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// b.js</span></span><br><span class="line"><span class="keyword">import</span> &#123;foo&#125; <span class="keyword">from</span> <span class="string">'./a'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'b.js'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(foo());</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="string">'bar'</span> &#125;</span><br><span class="line"><span class="keyword">export</span> &#123;bar&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//b.mjs</span></span><br><span class="line"><span class="comment">//foo</span></span><br><span class="line"><span class="comment">//a.mjs</span></span><br><span class="line"><span class="comment">//bar</span></span><br></pre></td></tr></table></figure><p>因为函数具有提升作用。</p><h3 id="2-3-ES6模块和CommonJS模块的差异"><a href="#2-3-ES6模块和CommonJS模块的差异" class="headerlink" title="2.3 ES6模块和CommonJS模块的差异"></a>2.3 ES6模块和CommonJS模块的差异</h3><ol><li><p><code>import</code>和<code>export</code>是关键字，<code>require</code>不是。</p></li><li><p>CommonJS 模块输出的是一个值的拷贝，ES6 模块输出的是值的引用。(详情见上方【单例模式解读】)</p></li><li><p>CommonJS 模块是运行时加载，ES6 模块是编译时输出接口。</p><pre><code>   因为 CommonJS 加载的是一个对象（即`module.exports`属性），该对象只有在脚本运行完才会生成。而 ES6 模块不是对象，它的对外接口只是一种静态定义，在代码静态解析阶段就会生成。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//counter.js</span></span><br><span class="line"><span class="keyword">let</span> counter = <span class="number">2</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addCounter</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    counter++;</span><br><span class="line">&#125;</span><br><span class="line">addCounter();</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    counter,</span><br><span class="line">    addCounter: addCunter</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main.js</span></span><br><span class="line"><span class="keyword">var</span> counter = <span class="built_in">require</span>(<span class="string">'./addCounter.js'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'main:'</span> + counter.counter);<span class="comment">//3</span></span><br><span class="line">counter.addCounter();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'main:'</span> + counter.counter);<span class="comment">//3</span></span><br></pre></td></tr></table></figure></code></pre></li><li><p><strong><code>this</code>指向不同</strong>。ES6 模块之中，顶层的<code>this</code>指向<code>undefined</code>；CommonJS 模块的顶层<code>this</code>指向当前模块，这是两者的一个重大差异。</p></li></ol>]]></content:encoded>
      
      <comments>http://mydearest.cn/2019/%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E5%8C%96%E5%8F%91%E5%B1%95.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>PWA手记</title>
      <link>http://mydearest.cn/2019/PWA%E6%89%8B%E8%AE%B0.html</link>
      <guid>http://mydearest.cn/2019/PWA%E6%89%8B%E8%AE%B0.html</guid>
      <pubDate>Sun, 26 May 2019 13:18:30 GMT</pubDate>
      <description>
      
        &lt;p&gt;PWA作为2018最火热的技术概念之一，对提升Web应用的安全、性能和体验有着很大的意义，非常值得我们去了解与学习。&lt;/p&gt;
&lt;p&gt;PWA是Progressive Web App的英文缩写，也就是渐进式增强WEB应用。目的就是在移动端利用提供的标准化框架，在网页应用中实现和原生应用相近的用户体验。&lt;/p&gt;
&lt;p&gt;一个 PWA 应用首先是一个网页, 可以通过 Web 技术编写出一个网页应用. 随后添加上 App Manifest 和 Service Worker 来实现 PWA 的&lt;/p&gt;
&lt;p&gt;安装和离线等功能。&lt;/p&gt;
&lt;p&gt;我们需要理解的是，PWA不是某一项技术，或者某一个新的产物；而是一系列Web技术与标准的集合与应用。通过应用这些新的技术与标准，可以从安&lt;/p&gt;
&lt;h2 id=&quot;全、性能和体验三个方面，优化我们的Web-App。所以，其实PWA本质上依然是一个Web-App。&quot;&gt;&lt;a href=&quot;#全、性能和体验三个方面，优化我们的Web-App。所以，其实PWA本质上依然是一个Web-App。&quot; class=&quot;headerlink&quot; title=&quot;全、性能和体验三个方面，优化我们的Web App。所以，其实PWA本质上依然是一个Web App。&quot;&gt;&lt;/a&gt;全、性能和体验三个方面，优化我们的Web App。所以，其实PWA本质上依然是一个Web App。&lt;/h2&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>PWA作为2018最火热的技术概念之一，对提升Web应用的安全、性能和体验有着很大的意义，非常值得我们去了解与学习。</p><p>PWA是Progressive Web App的英文缩写，也就是渐进式增强WEB应用。目的就是在移动端利用提供的标准化框架，在网页应用中实现和原生应用相近的用户体验。</p><p>一个 PWA 应用首先是一个网页, 可以通过 Web 技术编写出一个网页应用. 随后添加上 App Manifest 和 Service Worker 来实现 PWA 的</p><p>安装和离线等功能。</p><p>我们需要理解的是，PWA不是某一项技术，或者某一个新的产物；而是一系列Web技术与标准的集合与应用。通过应用这些新的技术与标准，可以从安</p><h2 id="全、性能和体验三个方面，优化我们的Web-App。所以，其实PWA本质上依然是一个Web-App。"><a href="#全、性能和体验三个方面，优化我们的Web-App。所以，其实PWA本质上依然是一个Web-App。" class="headerlink" title="全、性能和体验三个方面，优化我们的Web App。所以，其实PWA本质上依然是一个Web App。"></a>全、性能和体验三个方面，优化我们的Web App。所以，其实PWA本质上依然是一个Web App。</h2><a id="more"></a><h2 id="核心技术"><a href="#核心技术" class="headerlink" title="核心技术"></a>核心技术</h2><ul><li><p>Service Worker （可以理解为服务工厂）</p></li><li><p>Manifest （应用清单）</p></li><li><p>Push Notification（推送通知）</p></li></ul><h2 id="service-worker-web-worker"><a href="#service-worker-web-worker" class="headerlink" title="service worker (web worker)"></a>service worker (web worker)</h2><ul><li>一个独立的 worker 线程，独立于当前网页进程，有自己独立的 worker context。</li><li>一旦被 install，就永远存在，除非被 uninstall</li><li>需要的时候可以直接唤醒，不需要的时候自动睡眠（有效利用资源）</li><li>可编程拦截代理请求和返回，缓存文件，缓存的文件可以被网页进程取到（包括网络离线状态）</li><li>不能直接操作DOM出于安全的考虑，必须在 HTTPS 环境下才能工作</li><li>异步实现，内部大都是通过 Promise 实现</li></ul><p>web workerweb worker  是运行在后台的JavaScript，独立于其他脚本，不会影响页面的性能。</p><p>浏览器一般有三类 web Worker</p><ul><li><p>Dedicated Worker ：专用的 worker，只能被创建它的 JS 访问，创建它的页面关闭，它的生命周期就结束了。</p></li><li><p>Shared  Worker ：共享的 worker，可以被同一域名下的 JS 访问，关联的页面都关闭时，它的生命周期就结束了。</p></li><li><p>Service Worker ：是事件驱动的 worker，生命周期与页面无关，关联页面未关闭时，它也可以退出，没有关联页面时，它也可以启动。SW 作用于浏览器与服务器之间，相当于一个代理服务器。</p></li></ul><h3 id="Service-Worker生命周期"><a href="#Service-Worker生命周期" class="headerlink" title="Service Worker生命周期"></a>Service Worker生命周期</h3><p>看成红绿灯红 下载和解析黄 正在执行 还没准备好绿 随时可使用且第一次加载页面 sw还没有激活 不会处理任何请求 只有安装和激活后才能使用。（刷新页面和跳转新页面才会生效）</p><ul><li>步骤</li></ul><ol><li>用户导航到url</li><li>注册sw 过程中浏览器下载解析执行sw</li><li>一旦执行激活安装时间</li><li>安装成功就可以控制客户端功能事件</li></ol><h3 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h3><ul><li>self: 表示 Service Worker 作用域, 也是全局变量SW 的默认作用域为基于当前文件 URL 的 ./。意思就是如果你在//example.com/foo/bar.js里注册了一个 SW，那么它默认的作用域为 //example.com/foo/。</li></ul><p>通过查看navigator.serviceWorker.controller是否为 null 来查看一个client是否被 SW 控制。</p><ul><li>caches: 表示缓存</li><li>skipWaiting: 表示强制当前处在 waiting 状态的脚本进入 activate 状态（为了在页面更新的过程当中，新的 SW 脚本能够立刻激活和生效。无需刷新或者跳转新页面。）</li><li>clients: 表示 Service Worker 接管的页面</li><li>clients.claim() 在 activate 事件回调中执行该方法表示取得页面的控制权, 这样之后打开页面都会使用版本更新的缓存。旧的 Service Worker 脚本不再控制着页面，之后会被停止。</li></ul><h3 id="Service-Worker-注册"><a href="#Service-Worker-注册" class="headerlink" title="Service Worker 注册"></a>Service Worker 注册</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 检查当前浏览器是否支持sw</span></span><br><span class="line"><span class="keyword">if</span> (<span class="string">'serviceWorker'</span> <span class="keyword">in</span> navigator) &#123;</span><br><span class="line">    <span class="comment">// 如果支持开始注册sw</span></span><br><span class="line">    navigator.serviceWorker</span><br><span class="line">        .register(<span class="string">'./service-worker.js'</span>)</span><br><span class="line">        .then(<span class="function"><span class="params">registration</span> =&gt;</span> &#123; </span><br><span class="line">            <span class="built_in">console</span>,log(<span class="string">'注册成功'</span>, registration)</span><br><span class="line">            <span class="comment">// 消息推送 获取授权</span></span><br><span class="line">            <span class="comment">// Notification.requestPermission(function(result) &#123;</span></span><br><span class="line">            <span class="comment">//         console.log('result', result)</span></span><br><span class="line">            <span class="comment">//         if (result === 'granted') &#123;</span></span><br><span class="line">            <span class="comment">//             registration.showNotification('Vibration Sample', &#123;</span></span><br><span class="line">            <span class="comment">//                 body: 'Buzz! Buzz!',</span></span><br><span class="line">            <span class="comment">//                 icon: './img/mario.png',</span></span><br><span class="line">            <span class="comment">//                 vibrate: [200, 100, 200, 100, 200, 100, 200],</span></span><br><span class="line">            <span class="comment">//                 tag: 'vibration-sample'</span></span><br><span class="line">            <span class="comment">//             &#125;);</span></span><br><span class="line">            <span class="comment">//         &#125; else &#123;</span></span><br><span class="line">            <span class="comment">//             alert(result);</span></span><br><span class="line">            <span class="comment">//         &#125;     </span></span><br><span class="line">            <span class="comment">// &#125;);</span></span><br><span class="line">            <span class="comment">// 手动更新</span></span><br><span class="line">            <span class="comment">// registration.update();</span></span><br><span class="line">        &#125;)</span><br><span class="line">        .catch(<span class="function"><span class="params">err</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'注册失败'</span>,err));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 查看是否注册成功可以在 PC 上chrome 浏览器, 输入 chrome://inspect/#service-workers</span></span><br></pre></td></tr></table></figure><h3 id="Service-Worker-安装（处理静态缓存）"><a href="#Service-Worker-安装（处理静态缓存）" class="headerlink" title="Service Worker 安装（处理静态缓存）"></a>Service Worker 安装（处理静态缓存）</h3><ol><li><p>这个状态发生在 Service Worker 注册之后，是 sw 触发的第一个事件并且只触发一次。表示开始安装，触发 install 事件回调指定一些静态资源进行离线缓存。修改你的 SW 后，浏览器会认为这是一个新的 SW，从而会再触发这个新 SW 的install事件。</p></li><li><p>e.waitUntil() 传入一个 Promise 为参数，等到该 Promise 为 resolve 状态为止。如果 Promise 被拒绝，则安装失败，SW会进入 Redundant（ 废弃 ）状态。确保 Service Worker 不会在 waitUntil() 里面的代码执行完毕之前安装完成。</p></li><li><p>sw 在安装成功和激活之前不会触发任何的 fetch 或 push 等事件。</p></li><li><p>默认情况下，页面的请求（fetch）不会通过 SW，除非它本身是通过 SW 获取的，也就是说，在安装 SW 之后，需要刷新页面才能有效果。</p></li><li><p>clients.claim()可以改变这种默认行为。</p></li></ol><p>localStorage 的用法和 Service Worker cache 的用法很相似，但是由于 localStorage 是同步的用法，所以不允许在 Service Worker 中使用。 IndexedDB 也可以在 Service Worker 内做数据存储。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 首先定义需要缓存的路径, 以及需要缓存的静态文件的列表。</span></span><br><span class="line"><span class="keyword">var</span> cacheName = <span class="string">'minimal-pwa-1'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> cacheList = [</span><br><span class="line">  <span class="string">'/'</span>,</span><br><span class="line">  <span class="string">"index.html"</span>,</span><br><span class="line">  <span class="string">"main.css"</span>,</span><br><span class="line">  <span class="string">"e.png"</span></span><br><span class="line">]</span><br><span class="line">self.addEventListener(<span class="string">'install'</span>, e =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"安装事件，注册后触发只触发一次"</span>);</span><br><span class="line">    e.waitUntil(</span><br><span class="line">        <span class="comment">// 使用指定的缓存名来打开缓存</span></span><br><span class="line">        caches.open(cacheName)</span><br><span class="line">            .then(<span class="function"><span class="params">cache</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"加入缓存"</span>, cacheList);</span><br><span class="line">                <span class="keyword">return</span> cache.addAll(cacheList);</span><br><span class="line">            &#125;)</span><br><span class="line">            <span class="comment">// 可加</span></span><br><span class="line">            .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'跳过等待'</span>)</span><br><span class="line">                <span class="keyword">return</span> self.skipWaiting()</span><br><span class="line">            &#125;)</span><br><span class="line">    );</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// self.oninstall = e =&gt; &#123;&#125;</span></span><br></pre></td></tr></table></figure><h3 id="Service-Worker-激活（更新缓存）"><a href="#Service-Worker-激活（更新缓存）" class="headerlink" title="Service Worker 激活（更新缓存）"></a>Service Worker 激活（更新缓存）</h3><p>在这个状态下没有被其他的 Service Worker 控制的客户端，允许当前的 worker 完成安装，并且清除了其他的 worker 以及关联缓存的旧缓存资源，等待新的 Service Worker 线程被激活。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 激活 缓存更新</span></span><br><span class="line">self.addEventListener(<span class="string">'activate'</span>, e =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'[ServiceWorker] Activate'</span>);</span><br><span class="line">    e.waitUntil(</span><br><span class="line">        caches.keys()</span><br><span class="line">            .then(<span class="function"><span class="params">keyList</span> =&gt;</span> <span class="built_in">Promise</span>.all(keyList.map(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (key !== cacheName) &#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">'移除旧缓存'</span>, key);</span><br><span class="line">                    <span class="keyword">return</span> caches.delete(key);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)))</span><br><span class="line">            <span class="comment">// 可加</span></span><br><span class="line">            .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> self.clients.matchAll()</span><br><span class="line">                .then(<span class="function"><span class="params">clients</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (clients &amp;&amp; clients.length) &#123;</span><br><span class="line">                    clients.forEach(<span class="function">(<span class="params">v,i</span>) =&gt;</span> &#123;</span><br><span class="line">                        <span class="comment">// 发送字符串'sw.update'</span></span><br><span class="line">                        v.postMessage(<span class="string">'sw '</span>+i+<span class="string">' update'</span>)</span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;)</span><br><span class="line">            <span class="comment">// return self.clients.claim();</span></span><br><span class="line">    );</span><br><span class="line">    <span class="comment">// return self.clients.claim();</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="已激活-（activated）"><a href="#已激活-（activated）" class="headerlink" title="已激活 （activated）"></a>已激活 （activated）</h3><p>在这个状态会处理 activate 事件回调 (提供了更新缓存策略的机会)。并可以处理功能性的事件 fetch (请求)、 sync (后台同步)、 push (推送)。</p><h3 id="废弃-（redunant）"><a href="#废弃-（redunant）" class="headerlink" title="废弃 （redunant）"></a>废弃 （redunant）</h3><p>这个状态表示一个 Service Worker 的生命周期结束。</p><p>这里特别说明一下，进入废弃 (redundant) 状态的原因可能为这几种：</p><ul><li><p>安装 (installing) 失败</p></li><li><p>激活 (activating) 失败</p></li><li><p>新版本的 Service Worker 替换了它并成为激活状态</p></li></ul><h3 id="处理动态缓存"><a href="#处理动态缓存" class="headerlink" title="处理动态缓存"></a>处理动态缓存</h3><p>监听捕获 fetch 事件，在 caches 中去 match 事件的 request ，如果 response 不为空的话就返回 response ，最后返回 fetch 请求，在 fetch 事件中我们也可以手动生成 response 返回给页面。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 捕获请求</span></span><br><span class="line">self.addEventListener(<span class="string">'fetch'</span>, e =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'fetch事件'</span>, e.request.url);</span><br><span class="line">    e.respondWith(</span><br><span class="line">        caches.match(e.request)</span><br><span class="line">            .then(<span class="function"><span class="params">response</span> =&gt;</span> response || fetch(e.request))</span><br><span class="line">    );</span><br><span class="line">    <span class="comment">// e.respondWith(</span></span><br><span class="line">    <span class="comment">//     caches.match(e.request)</span></span><br><span class="line">    <span class="comment">//         .then(response =&gt; &#123;</span></span><br><span class="line">    <span class="comment">//             if(response) &#123;</span></span><br><span class="line">    <span class="comment">//                 return response; // || fetch(e.request)</span></span><br><span class="line">    <span class="comment">//             &#125;</span></span><br><span class="line">    <span class="comment">//             // 新的内容添加到缓存中</span></span><br><span class="line">    <span class="comment">//             // 复制请求 请求是一个流 只能使用一次</span></span><br><span class="line">    <span class="comment">//             var requestToCache = e.request.clone();</span></span><br><span class="line">    <span class="comment">//             return fetch(requestToCache).then(function(response)&#123;</span></span><br><span class="line">    <span class="comment">//                 if(!response || response.status !==200) &#123;</span></span><br><span class="line">    <span class="comment">//                     // 错误信息立即返回</span></span><br><span class="line">    <span class="comment">//                     return response;</span></span><br><span class="line">    <span class="comment">//                 &#125;</span></span><br><span class="line">    <span class="comment">//                 var responseToCache = response.clone();</span></span><br><span class="line">    <span class="comment">//                 // 将响应添加到缓存中</span></span><br><span class="line">    <span class="comment">//                 caches.open(cacheName).then(function (cache)&#123;</span></span><br><span class="line">    <span class="comment">//                     cache.put(requestToCache, responseToCache);</span></span><br><span class="line">    <span class="comment">//                 &#125;)</span></span><br><span class="line">    <span class="comment">//             &#125;)</span></span><br><span class="line">    <span class="comment">//         &#125;) </span></span><br><span class="line">    <span class="comment">// );</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 自定义响应</span></span><br><span class="line">    <span class="comment">// e.respondWith(new Response('&lt;p&gt;it is a response&lt;/p&gt;', &#123;</span></span><br><span class="line">    <span class="comment">//     headers:&#123;</span></span><br><span class="line">    <span class="comment">//         'Content-Type': 'text/html'</span></span><br><span class="line">    <span class="comment">//     &#125;</span></span><br><span class="line">    <span class="comment">// &#125;))</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>通过存放到 Cache Storage 中，我们下次访问的时候如果是弱网或者断网的情况下，就可以不走网络请求，而直接就能将本地缓存的内容展示给用户，优化用户的弱网及断网体验。</p><p>两种方式的比较</p><ul><li><p>on install 的优点是第二次访问即可离线，缺点是需要将需要缓存的 URL 在编译时插入到脚本中，增加代码量和降低可维护性；</p></li><li><p>on fetch 的优点是无需更改编译过程，也不会产生额外的流量，缺点是需要多一次访问才能离线可用。</p></li></ul><h3 id="Service-Worker-调试"><a href="#Service-Worker-调试" class="headerlink" title="Service Worker 调试"></a>Service Worker 调试</h3><ul><li><p>借助 Chrome 浏览器 debug使用 Chrome 浏览器，可以通过进入控制台 Application -&gt; Service Workers 面板查看和调试。</p></li><li><p>查看缓存Service Worker 使用 Cache API 缓存只读资源，可以在 Chrome DevTools 上查看缓存的资源列表。</p></li></ul><p>http缓存：由服务器告知资源何时缓存和何时过期。sw缓存是对http缓存的增强</p><h3 id="Service-Worker-网络跟踪"><a href="#Service-Worker-网络跟踪" class="headerlink" title="Service Worker 网络跟踪"></a>Service Worker 网络跟踪</h3><p>经过 Service Worker 的 fetch 请求 Chrome 都会在 Chrome DevTools Network 标签页里标注出来，其中：</p><ul><li><p>来自 Service Worker 的内容会在 Size 字段中标注为 from ServiceWorker</p></li><li><p>Service Worker 发出的请求会在 Name 字段中添加 ‘齿轮’ 图标。</p></li></ul><h3 id="Service-Worker-功能性事件"><a href="#Service-Worker-功能性事件" class="headerlink" title="Service Worker 功能性事件"></a>Service Worker 功能性事件</h3><ul><li><p>fetch (请求)：当浏览器在当前指定的 scope 下发起请求时，会触发 fetch 事件，并得到传有 response 参数的回调函数，回调中就可以做各种代理缓存的事情了。</p></li><li><p>push (推送)：push 事件是为推送准备的。不过首先需要了解一下 Notification API 和 PUSH API。通过 PUSH API，当订阅了推送服务后，可以使用推送方式唤醒 Service Worker 以响应来自系统消息传递服务的消息，即使用户已经关闭了页面。</p></li><li><p>sync (后台同步)：sync 事件由 background sync (后台同步)发出。background sync 配合 Service Worker 推出的 API，用于为 Service Worker 提供一个可以实现注册和监听同步处理的方法。但它还不在 W3C Web API 标准中。在 Chrome 中这也只是一个实验性功能，需要访问 chrome://flags/#enable-experimental-web-platform-features ，开启该功能，然后重启生效。</p></li></ul><h2 id="APP-Manifest-与添加到主屏幕"><a href="#APP-Manifest-与添加到主屏幕" class="headerlink" title="APP Manifest 与添加到主屏幕"></a>APP Manifest 与添加到主屏幕</h2><p>允许将站点添加至主屏幕，是 PWA 提供的一项重要功能</p><ol><li><p>定义 manifest.json 配置添加到主屏幕功能</p></li><li><p>创建 manifest.json 文件，并将它放到你的站点目录中</p></li><li><p>在所有页面引入该文件</p></li><li><p>可以在 Service Worker 中监听 beforeinstallprompt 事件做一些应用内的行为处理</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123; </span><br><span class="line">    <span class="string">"name"</span> : <span class="string">"Minimal PWA"</span> , </span><br><span class="line">    <span class="string">"short_name"</span> : <span class="string">"PWA Demo"</span> , </span><br><span class="line">    <span class="string">"display"</span> : <span class="string">"standalone"</span> , </span><br><span class="line">    <span class="string">"start_url"</span> : <span class="string">"/"</span> , </span><br><span class="line">    <span class="string">"theme_color"</span> : <span class="string">"#313131"</span> , </span><br><span class="line">    <span class="string">"background_color"</span> : <span class="string">"#313131"</span> , </span><br><span class="line">    <span class="string">"icons"</span> : [ </span><br><span class="line">        &#123; </span><br><span class="line">        <span class="string">"src"</span> : <span class="string">"e.png"</span> , </span><br><span class="line">        <span class="string">"sizes"</span> : <span class="string">"256x256"</span> , </span><br><span class="line">        <span class="string">"type"</span> : <span class="string">"image/png"</span> </span><br><span class="line">        &#125; </span><br><span class="line">    ] </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>name ：定义此PWA的名称。</p></li><li><p>icons ：定义一系列的图标以适应不同型号的设备。</p></li><li><p>theme_color ：主题颜色（影响手机状态栏颜色）。</p></li><li><p>background_color ：背景颜色。</p></li><li><p>start_url ：启动地址。由于PWA实际上是一个web页面，所以需要定义PWA 在启动时应该访问哪个地址。</p></li><li><p>display ：”standalone”表示其以类似原生APP的全屏方式启动。</p></li></ul><h3 id="IOS-Safari-设置"><a href="#IOS-Safari-设置" class="headerlink" title="IOS Safari 设置"></a>IOS Safari 设置</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">应用图标： </span><br><span class="line">&lt;link rel=<span class="string">"apple-touch-icon"</span> href=<span class="string">"apple-touch-icon.png"</span> &gt; </span><br><span class="line">启动画面： </span><br><span class="line">&lt;link rel=<span class="string">"apple-touch-startup-image"</span> href=<span class="string">"launch.png"</span> &gt; </span><br><span class="line">应用名称： </span><br><span class="line">&lt;meta name=<span class="string">"apple-mobile-web-app-title"</span> content=<span class="string">"Todo-PWA"</span> &gt; </span><br><span class="line">全屏效果： </span><br><span class="line">&lt;meta name=<span class="string">"apple-mobile-web-app-capable"</span> content=<span class="string">"yes"</span> &gt; </span><br><span class="line">设置状态栏颜色： </span><br><span class="line">&lt;meta name=<span class="string">"apple-mobile-web-app-status-bar-style"</span> content=<span class="string">"#fff"</span> &gt;</span><br></pre></td></tr></table></figure><h3 id="window10-贴片图标"><a href="#window10-贴片图标" class="headerlink" title="window10 贴片图标"></a>window10 贴片图标</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta name=<span class="string">"msapplication-TileImage"</span> content=<span class="string">"images/logo/144x144.png"</span> &gt; </span><br><span class="line">&lt;meta name=<span class="string">"msapplication-TileColor"</span> content=<span class="string">"#2F3BA2"</span> &gt;</span><br></pre></td></tr></table></figure><h3 id="在线生成-manifest-json-文件"><a href="#在线生成-manifest-json-文件" class="headerlink" title="在线生成 manifest.json 文件"></a>在线生成 manifest.json 文件</h3><ul><li><p><a href="https://app-manifest.firebaseapp.com/" target="_blank" rel="noopener">https://app-manifest.firebaseapp.com/</a></p></li><li><p><a href="https://tomitm.github.io/appmanifest/" target="_blank" rel="noopener">https://tomitm.github.io/appmanifest/</a></p></li><li><p><a href="https://brucelawson.github.io/manifest/" target="_blank" rel="noopener">https://brucelawson.github.io/manifest/</a></p></li></ul><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol><li><p><a href="https://developer.mozilla.org/en-US/docs/Web/Manifest" target="_blank" rel="noopener">Web App Manifest</a></p></li><li><p><a href="https://lavas.baidu.com/doc/engage-retain-users/add-to-home-screen/introduction" target="_blank" rel="noopener">manifest.json 简介</a></p></li></ol><h2 id="App-Shell"><a href="#App-Shell" class="headerlink" title="App Shell"></a>App Shell</h2><p>App Shell，顾名思义，就是<code>壳</code>的意思，也可以理解为<code>骨架屏</code>，说白了就是在内容尚未加载完全的时候，优先展示页面的结构、占位图、主题和背景颜色等，它们都是一些被强缓存的html，css和javascript。</p><p>要用好App Shell，就必须保证这部分的资源被Service Worker缓存起来。我们在组织代码的时候，可以优先完成App Shell的部分，然后把这部分代码分别打包构建出来。</p><h3 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h3><ul><li><p>始终快速的可靠性能</p></li><li><p>如同本机一样的交互</p></li><li><p>数据的经济使用</p></li></ul><h3 id="参考资料-1"><a href="#参考资料-1" class="headerlink" title="参考资料"></a>参考资料</h3><ol><li><a href="https://developers.google.cn/web/fundamentals/architecture/app-shell" target="_blank" rel="noopener">App Shell 模型</a></li></ol><h2 id="使用Offine-Plugin把网站升级成-PWA"><a href="#使用Offine-Plugin把网站升级成-PWA" class="headerlink" title="使用Offine-Plugin把网站升级成 PWA"></a>使用Offine-Plugin把网站升级成 PWA</h2><h3 id="参考资料-2"><a href="#参考资料-2" class="headerlink" title="参考资料"></a>参考资料</h3><ol><li><p><a href="https://github.com/NekR/offline-plugin" target="_blank" rel="noopener">offline-plugin</a></p></li><li><p><a href="https://offline-plugin.now.sh" target="_blank" rel="noopener">offline-plugin DEMO</a></p></li><li><p><a href="https://segmentfault.com/a/1190000010669126" target="_blank" rel="noopener">使用offline-plugin搭配webpack轻松实现PWA</a></p></li></ol><h2 id="与PWA相关的开源框架"><a href="#与PWA相关的开源框架" class="headerlink" title="与PWA相关的开源框架"></a>与PWA相关的开源框架</h2><h3 id="Lavas"><a href="#Lavas" class="headerlink" title="Lavas"></a>Lavas</h3><p>基于 Vue 的 PWA 解决方案，帮助开发者快速搭建 PWA 应用，解决接入 PWA 的各种问题</p><ol><li><p><a href="https://lavas.baidu.com/" target="_blank" rel="noopener">Lavas 官 网</a></p></li><li><p><a href="https://github.com/lavas-project/lavas" target="_blank" rel="noopener">Lavas GitHub</a></p></li></ol><h3 id="加载库"><a href="#加载库" class="headerlink" title="加载库"></a>加载库</h3><p>importScripts() // sw里的全局函数<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">importScripts(<span class="string">'workbox-sw.prod.v1.1.0.js'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> workboxSW = <span class="keyword">new</span> self.WorkboxSW();</span><br><span class="line"></span><br><span class="line">workbox.precaching([</span><br><span class="line">  <span class="comment">// 注册成功后要立即缓存的资源列表</span></span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// html的缓存策略</span></span><br><span class="line">workbox.routing.registerRoute(</span><br><span class="line">  <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">''</span>.*\.html<span class="string">'),</span></span><br><span class="line"><span class="string">  workbox.strategies.networkFirst()</span></span><br><span class="line"><span class="string">);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">workbox.routing.registerRoute(</span></span><br><span class="line"><span class="string">  new RegExp('</span>.*\.(?:js|css)<span class="string">'),</span></span><br><span class="line"><span class="string">  workbox.strategies.cacheFirst()</span></span><br><span class="line"><span class="string">);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">workbox.routing.registerRoute(</span></span><br><span class="line"><span class="string">  new RegExp('</span>https:<span class="comment">//your\.cdn\.com/'),</span></span><br><span class="line">  workbox.strategies.staleWhileRevalidate()</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">workbox.routing.registerRoute(</span><br><span class="line">  <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'https://your\.img\.cdn\.com/'</span>),</span><br><span class="line">  workbox.strategies.cacheFirst(&#123;</span><br><span class="line">    cacheName: <span class="string">'example:img'</span></span><br><span class="line">  &#125;)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p><p>通过 workbox.precaching 中的是 install 以后要塞进 caches 中的内容，workbox.routing.registerRoute 中第一个参数是一个正则，匹配经过 fetch 事件的所有请求，如果匹配上了，就走相应的缓存策略。</p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul><li>避免改变 SW 的 URL（对index.html做了缓存，这样永远拿不到新的sw）</li></ul>]]></content:encoded>
      
      <comments>http://mydearest.cn/2019/PWA%E6%89%8B%E8%AE%B0.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>use strict</title>
      <link>http://mydearest.cn/2019/use%20strict.html</link>
      <guid>http://mydearest.cn/2019/use%20strict.html</guid>
      <pubDate>Tue, 07 May 2019 17:13:46 GMT</pubDate>
      <description>
      
        &lt;p&gt;严格模式是ES5引入的，更好的将错误检测引入代码的方法。顾名思义，使得JS在更严格的条件下运行。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;变量必须先声明，再使用&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;test&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&quot;use strict&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;foo = &lt;span class=&quot;string&quot;&gt;&#39;bar&#39;&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;// Error&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;不能对变量执行&lt;span class=&quot;keyword&quot;&gt;delete&lt;/span&gt;操作&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; foo = &lt;span class=&quot;string&quot;&gt;&quot;test&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;test&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;delete&lt;/span&gt; foo; &lt;span class=&quot;comment&quot;&gt;// Error&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;delete&lt;/span&gt; test; &lt;span class=&quot;comment&quot;&gt;// Error&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;test2&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;arg&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;delete&lt;/span&gt; arg; &lt;span class=&quot;comment&quot;&gt;// Error&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;对象的属性名不能重复&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123; &lt;span class=&quot;attr&quot;&gt;foo&lt;/span&gt;: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;attr&quot;&gt;foo&lt;/span&gt;: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt; &amp;#125; &lt;span class=&quot;comment&quot;&gt;// Error&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;禁用&lt;span class=&quot;built_in&quot;&gt;eval&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;函数的&lt;span class=&quot;built_in&quot;&gt;arguments&lt;/span&gt;参数&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;setTimeout(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;later&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// do stuff...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;setTimeout( later, &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt; );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;, &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt; );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;禁用&lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt;()&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;不能修改&lt;span class=&quot;built_in&quot;&gt;arguments&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;不能在函数内定义&lt;span class=&quot;built_in&quot;&gt;arguments&lt;/span&gt;变量&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;不能使用arugment.caller和argument.callee。因此如果你要引用匿名函数，需要对匿名函数命名。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;严格模式&lt;/code&gt;的优点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;消除Javascript语法的一些不合理、不严谨之处，减少一些怪异行为;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;消除代码运行的一些不安全之处，保证代码运行的安全；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;提高编译器效率，增加运行速度；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;为未来新版本的Javascript做好铺垫。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;注：经过测试 IE6,7,8,9 均不支持严格模式。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;缺点：&lt;/p&gt;
&lt;p&gt;现在网站的 JS 都会进行压缩，一些文件用了严格模式，而另一些没有。这时这些本来是严格模式的文件，被 merge 后，这个串就到了文件的中间，不仅没有指示严格模式，反而在压缩后浪费了字节。&lt;/p&gt;
&lt;hr&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>严格模式是ES5引入的，更好的将错误检测引入代码的方法。顾名思义，使得JS在更严格的条件下运行。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">变量必须先声明，再使用</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="meta">"use strict"</span>;</span><br><span class="line">foo = <span class="string">'bar'</span>; <span class="comment">// Error</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">不能对变量执行<span class="keyword">delete</span>操作</span><br><span class="line"><span class="keyword">var</span> foo = <span class="string">"test"</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> foo; <span class="comment">// Error</span></span><br><span class="line"><span class="keyword">delete</span> test; <span class="comment">// Error</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test2</span>(<span class="params">arg</span>) </span>&#123;</span><br><span class="line"><span class="keyword">delete</span> arg; <span class="comment">// Error</span></span><br><span class="line">&#125;</span><br><span class="line">对象的属性名不能重复</span><br><span class="line">&#123; <span class="attr">foo</span>: <span class="literal">true</span>, <span class="attr">foo</span>: <span class="literal">false</span> &#125; <span class="comment">// Error</span></span><br><span class="line"></span><br><span class="line">禁用<span class="built_in">eval</span>()</span><br><span class="line"></span><br><span class="line">函数的<span class="built_in">arguments</span>参数</span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span> <span class="title">later</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">// do stuff...</span></span><br><span class="line">setTimeout( later, <span class="number">1000</span> );</span><br><span class="line">&#125;, <span class="number">1000</span> );</span><br><span class="line"></span><br><span class="line">禁用<span class="keyword">with</span>()&#123;&#125;</span><br><span class="line"></span><br><span class="line">不能修改<span class="built_in">arguments</span></span><br><span class="line">不能在函数内定义<span class="built_in">arguments</span>变量</span><br><span class="line">不能使用arugment.caller和argument.callee。因此如果你要引用匿名函数，需要对匿名函数命名。</span><br></pre></td></tr></table></figure><p><code>严格模式</code>的优点：</p><ol><li><p>消除Javascript语法的一些不合理、不严谨之处，减少一些怪异行为;</p></li><li><p>消除代码运行的一些不安全之处，保证代码运行的安全；</p></li><li><p>提高编译器效率，增加运行速度；</p></li><li><p>为未来新版本的Javascript做好铺垫。</p></li></ol><ul><li>注：经过测试 IE6,7,8,9 均不支持严格模式。</li></ul><p>缺点：</p><p>现在网站的 JS 都会进行压缩，一些文件用了严格模式，而另一些没有。这时这些本来是严格模式的文件，被 merge 后，这个串就到了文件的中间，不仅没有指示严格模式，反而在压缩后浪费了字节。</p><hr><a id="more"></a><h2 id="详细说明"><a href="#详细说明" class="headerlink" title="详细说明"></a>详细说明</h2><p>1.使调试更加容易。那些被忽略或默默失败了的代码错误，会产生错误或抛出异常，因此尽早提醒你代码中的问题，你才能更快地指引到它们的源代码。</p><p>2.变量在赋值之前必须声明,防止意外的全局变量。如果没有严格模式，将值分配给一个未声明的变量会自动创建该名称的全局变量。这是JavaScript中最常见的错误之一。在严格模式下，这样做的话会抛出错误。</p><p>3.取消this值的强制转换。如果没有严格模式，引用null或未定义的值到 this 值会自动强制到全局变量。在严格模式下，引用 null或未定义的 this 值会抛出错误。严格模式下，this不会指向window </p><p>4.不允许重复的属性名称或参数值。当检测到对象中重复命名的属性，例如：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> object = &#123;<span class="attr">foo</span>: <span class="string">"bar"</span>, <span class="attr">foo</span>: <span class="string">"baz"</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或检测到函数中重复命名的参数时,例如：</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">val1, val2, val1</span>)</span>&#123;&#125;）</span><br><span class="line"></span><br><span class="line"><span class="comment">// 严格模式会抛出错误，因此捕捉几乎可以肯定是代码中的bug可以避免浪费大量的跟踪时间。</span></span><br></pre></td></tr></table></figure></p><p>5.使 eval() 更安全。在严格模式和非严格模式下， eval() 的行为方式有所不同。最显而易见的是，在严格模式下，变量和声明在 eval() 语句内部的函数不会在包含范围内创建（它们会在非严格模式下的包含范围中被创建，这也是一个常见的问题源）。</p><p>eval()没有被移除，但它在严格模式下发生了一些变化。最大的改变是：在eval()语句中声明的变量以及函数不会在包含域中创建。例如：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">eval</span>(<span class="string">"var x = 10;"</span>);  </span><br><span class="line"> </span><br><span class="line"><span class="comment">// 非严格模式下，x为10  </span></span><br><span class="line"><span class="comment">// 严格模式下，x没有声明，抛出一个错误  </span></span><br><span class="line">alert(x);  </span><br><span class="line">&#125;)(); </span><br><span class="line">任意由<span class="built_in">eval</span>()创建的变量或函数仍呆在<span class="built_in">eval</span>()里。然而，你可以通过从<span class="built_in">eval</span>()中返回一个值的方式实现值的传递：</span><br><span class="line"></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> result = <span class="built_in">eval</span>(<span class="string">"var x = 10, y = 20; x + y"</span>);  </span><br><span class="line"> </span><br><span class="line"><span class="comment">// 严格模式与非严格模式下都能正常工作（得到30）  </span></span><br><span class="line">alert(result);  </span><br><span class="line">&#125;());</span><br></pre></td></tr></table></figure></p><p>6.在 delete 使用无效时抛出错误。 delete 操作符（用于从对象中删除属性）不能用在对象不可配置的属性上。当试图删除一个不可配置的属性时，非严格代码将默默地失败，而严格模式将在这样的情况下抛出异常。</p><p>7.严格模式去除了with语句</p><p>8.不能修改arguments ，不能在函数内定义arguments变量  ，不能使用arugment.caller和argument.callee。因此如果你要引用匿名函数，需要对匿名函数命名。  </p><h2 id="简洁说明"><a href="#简洁说明" class="headerlink" title="简洁说明"></a>简洁说明</h2><ul><li>变量必须声明后再使用</li><li>函数的参数不能有同名属性，否则报错</li><li>不能使用with语句</li><li>不能对只读属性赋值，否则报错</li><li>不能使用前缀 0 表示八进制数，否则报错</li><li>不能删除不可删除的属性，否则报错</li><li>eval不会在它的外层作用域引入变量</li><li>eval和arguments不能被重新赋值</li><li>arguments不会自动反映函数参数的变化</li><li>不能使用arguments.callee</li><li>不能使用arguments.caller</li><li>禁止this指向全局对象</li><li>不能使用fn.caller和fn.arguments获取函数调用的堆栈</li><li>增加了保留字（比如protected、static和interface）</li></ul>]]></content:encoded>
      
      <comments>http://mydearest.cn/2019/use%20strict.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>ES6Reflect对象</title>
      <link>http://mydearest.cn/2019/ES6Reflect%E5%AF%B9%E8%B1%A1.html</link>
      <guid>http://mydearest.cn/2019/ES6Reflect%E5%AF%B9%E8%B1%A1.html</guid>
      <pubDate>Wed, 01 May 2019 18:31:52 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;Reflect 是一个内置的对象，它提供拦截 JavaScript 操作的方法。这些方法与处理器对象的方法相同。Reflect不是一个函数对象，因此它是不可构造的。&lt;/p&gt;
&lt;p&gt;Reflect这个对象在新版本的chrome是支持的， ff比较早就支持Proxy和Reflect了，要让node支持Reflect可以安装&lt;a href=&quot;https://github.com/tvcutsem/harmony-reflect/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;harmony-reflect&lt;/a&gt;;&lt;/p&gt;
&lt;p&gt;Reflect不是构造函数， 要使用的时候直接通过Reflect.method()调用， Reflect有的方法和Proxy差不多， 而且多数Reflect方法原生的Object已经重新实现了。&lt;/p&gt;
&lt;p&gt;与大多数全局对象不同，Reflect没有构造函数。你不能将其与一个new运算符一起使用，或者将Reflect对象作为一个函数来调用。Reflect的所有属性和方法都是静态的（就像Math对象）。&lt;/p&gt;
&lt;hr&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Reflect 是一个内置的对象，它提供拦截 JavaScript 操作的方法。这些方法与处理器对象的方法相同。Reflect不是一个函数对象，因此它是不可构造的。</p><p>Reflect这个对象在新版本的chrome是支持的， ff比较早就支持Proxy和Reflect了，要让node支持Reflect可以安装<a href="https://github.com/tvcutsem/harmony-reflect/" target="_blank" rel="noopener">harmony-reflect</a>;</p><p>Reflect不是构造函数， 要使用的时候直接通过Reflect.method()调用， Reflect有的方法和Proxy差不多， 而且多数Reflect方法原生的Object已经重新实现了。</p><p>与大多数全局对象不同，Reflect没有构造函数。你不能将其与一个new运算符一起使用，或者将Reflect对象作为一个函数来调用。Reflect的所有属性和方法都是静态的（就像Math对象）。</p><hr><a id="more"></a><h2 id="为什么使用"><a href="#为什么使用" class="headerlink" title="为什么使用"></a>为什么使用</h2><ul><li>更加有用的返回值</li></ul><p>Reflect有一些方法和ES5中Object方法一样样的， 比如： Reflect.getOwnPropertyDescriptor和Reflect.defineProperty,  不过, Object.defineProperty(obj, name, desc)执行成功会返回obj， 以及其它原因导致的错误， Reflect.defineProperty只会返回false或者true来表示对象的属性是否设置上了，</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="built_in">Object</span>.defineProperty(obj, name, desc);</span><br><span class="line">  <span class="comment">// property defined successfully</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">  <span class="comment">// possible failure (and might accidentally catch the wrong exception)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以重构成<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="built_in">Reflect</span>.defineProperty(obj, name, desc)) &#123;</span><br><span class="line">  <span class="comment">// success</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// failure</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li><p>函数操作</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name <span class="keyword">in</span> obj <span class="comment">// Reflect.has(obj, name)</span></span><br><span class="line"><span class="keyword">delete</span> obj[name] <span class="comment">// Reflect.deleteProperty(obj, name)</span></span><br></pre></td></tr></table></figure></li><li><p>更加可靠的函数式执行方式： 在ES中， 要执行一个函数f，并给它传一组参数args， 还要绑定this的话， 要这么写：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">f.apply(obj, args) <span class="comment">// apply有可能被篡改</span></span><br><span class="line"><span class="built_in">Function</span>.prototype.apply.call(f, obj, args) <span class="comment">// Reflect.apply(f, obj, args)</span></span><br></pre></td></tr></table></figure></li><li><p>可变参数形式的构造函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> F(...args)</span><br><span class="line"><span class="keyword">var</span> obj = <span class="built_in">Reflect</span>.construct(F, args)</span><br></pre></td></tr></table></figure></li><li><p>控制访问器或者读取器的this</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">obj.name</span><br><span class="line">obj[<span class="string">'name'</span>]</span><br><span class="line"><span class="built_in">Reflect</span>.get(obj, name, wrapper)</span><br><span class="line"><span class="built_in">Reflect</span>.set(obj, name, value, wrapper)</span><br></pre></td></tr></table></figure></li></ul><p>访问器中不想使用自己的方法，而是想要重定向this到wrapper：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span>  obj = &#123;</span><br><span class="line">    set foo(value)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.bar();</span><br><span class="line">    &#125;</span><br><span class="line">    bar()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> wrapper = &#123;</span><br><span class="line">    bar()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Reflect</span>.set(obj, <span class="string">"foo"</span>, <span class="string">"value"</span>, wrapper)</span><br></pre></td></tr></table></figure></p><ul><li>避免直接访问<strong>proto</strong></li></ul><h3 id="Reflect-apply"><a href="#Reflect-apply" class="headerlink" title="Reflect.apply"></a>Reflect.apply</h3><p>Reflect.apply其实就是ES5中的 Function.prototype.apply() 替身， 执行Reflect.apply需要三个参数</p><p>第一个参数为： 需要执行的函数；第二个参数为： 需要执行函数的上下文this；第三个参数为： 是一个数组或者伪数组， 会作为执行函数的参数；</p><h3 id="Reflect-construct"><a href="#Reflect-construct" class="headerlink" title="Reflect.construct"></a>Reflect.construct</h3><p>Reflect.construct其实就是实例化构造函数，通过传参形式的实现， 执行的方式不同， 效果其实一样， construct的第一个参数为构造函数， 第二个参数由参数组成的数组或者伪数组， 第三个参数为一个超类， 新元素会继承这个超类；<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Fn = <span class="function"><span class="keyword">function</span>(<span class="params">arg</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.args = [arg]</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log( <span class="keyword">new</span> Fn(<span class="number">1</span>), <span class="built_in">Reflect</span>.construct(Fn,[<span class="number">1</span>]) ); <span class="comment">// 输出是一样的</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> d = <span class="built_in">Reflect</span>.construct(<span class="built_in">Date</span>, [<span class="number">2019</span>, <span class="number">5</span>, <span class="number">2</span>]);</span><br><span class="line">d <span class="keyword">instanceof</span> <span class="built_in">Date</span>; <span class="comment">// true</span></span><br><span class="line">d.getFullYear(); <span class="comment">// 2019</span></span><br></pre></td></tr></table></figure></p><h3 id="Reflect-defineProperty"><a href="#Reflect-defineProperty" class="headerlink" title="Reflect.defineProperty"></a>Reflect.defineProperty</h3><p>Reflect.defineProperty返回的是一个布尔值， 通过直接赋值的方式把属性和属性值添加给对象返回的是一整个对象， 如果添加失败会抛错；<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"><span class="keyword">if</span>( <span class="built_in">Reflect</span>.defineProperty(obj, <span class="string">"x"</span>, &#123;<span class="attr">value</span> : <span class="number">7</span> &#125;) ) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"added success"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"添加失败"</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h3 id="Reflect-deleteProperty"><a href="#Reflect-deleteProperty" class="headerlink" title="Reflect.deleteProperty"></a>Reflect.deleteProperty</h3><p>Reflect.deleteProperty和Reflect.defineProperty的使用方法差不多， Reflect.deleteProperty和 delete obj.xx的操作结果是一样， 区别是使用形式不同：一个是操作符，一个是函数调用；<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Reflect</span>.deleteProperty(<span class="built_in">Object</span>.freeze(&#123;<span class="attr">foo</span>: <span class="number">1</span>&#125;), <span class="string">"foo"</span>); <span class="comment">// false</span></span><br><span class="line"><span class="keyword">delete</span> <span class="built_in">Object</span>.freeze(&#123;<span class="attr">foo</span>: <span class="number">1</span>&#125;).foo; <span class="comment">//输出：false；</span></span><br></pre></td></tr></table></figure></p><h3 id="Reflect-get"><a href="#Reflect-get" class="headerlink" title="Reflect.get"></a>Reflect.get</h3><p>这个方法的有两个必须的参数： 第一个为obj目标对象， 第二个为属性名对象， 第三个是可选的，是作为读取器的上下文(this);<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line">obj.foo = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.log( obj.foo ); <span class="comment">//输出：1;</span></span><br><span class="line"><span class="built_in">console</span>.log( <span class="built_in">Reflect</span>.get(obj, <span class="string">"foo"</span>) ) <span class="comment">//输出：1;</span></span><br></pre></td></tr></table></figure></p><h3 id="Reflect-getOwnPropertyDescritptor"><a href="#Reflect-getOwnPropertyDescritptor" class="headerlink" title="Reflect.getOwnPropertyDescritptor"></a>Reflect.getOwnPropertyDescritptor</h3><p>获取属性描述<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Reflect</span>.getOwnPropertyDescriptor(&#123;<span class="attr">x</span>: <span class="string">"hello"</span>&#125;, <span class="string">"x"</span>);</span><br><span class="line"><span class="comment">//也可以这样获取：</span></span><br><span class="line"><span class="built_in">Object</span>.getOwnPropertyDescriptor(&#123;<span class="attr">x</span>:<span class="string">"1"</span>&#125;,<span class="string">"x"</span>);</span><br><span class="line"><span class="comment">//这两个的区别是一个会包装对象， 一个不会：</span></span><br><span class="line"><span class="built_in">Reflect</span>.getOwnPropertyDescriptor(<span class="string">"hello"</span>,<span class="number">0</span>); <span class="comment">//抛出异常</span></span><br><span class="line"><span class="built_in">Object</span>.getOwnPropertyDescriptor(<span class="string">"hello"</span>,<span class="number">0</span>); <span class="comment">//输出： &#123;value: "h", writable: false, enumerable: true, configurable: false&#125;</span></span><br></pre></td></tr></table></figure></p><h3 id="Reflect-getPrototypeOf"><a href="#Reflect-getPrototypeOf" class="headerlink" title="Reflect.getPrototypeOf"></a>Reflect.getPrototypeOf</h3><p>同Object.getPrototypeOf</p><h3 id="Reflect-has"><a href="#Reflect-has" class="headerlink" title="Reflect.has"></a>Reflect.has</h3><p>同 in<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Reflect</span>.has(&#123;<span class="attr">x</span>:<span class="number">0</span>&#125;, <span class="string">"x"</span>) <span class="comment">//输出： true；</span></span><br></pre></td></tr></table></figure></p><h3 id="Reflect-isExtensible"><a href="#Reflect-isExtensible" class="headerlink" title="Reflect.isExtensible"></a>Reflect.isExtensible</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 现在这个元素是可以扩展的；</span></span><br><span class="line"><span class="keyword">var</span> empty = &#123;&#125;;</span><br><span class="line"><span class="built_in">Reflect</span>.isExtensible(empty); <span class="comment">// === true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用preventExtensions方法， 让这个对象无法扩展新属性；</span></span><br><span class="line"><span class="built_in">Reflect</span>.preventExtensions(empty);</span><br><span class="line"><span class="built_in">Reflect</span>.isExtensible(empty); <span class="comment">// === false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 这个对象无法扩展新属性， 可写的属性依然可以改动</span></span><br><span class="line"><span class="keyword">var</span> sealed = <span class="built_in">Object</span>.seal(&#123;&#125;);</span><br><span class="line"><span class="built_in">Reflect</span>.isExtensible(sealed); <span class="comment">// === false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 这个对象完全被冻结了</span></span><br><span class="line"><span class="keyword">var</span> frozen = <span class="built_in">Object</span>.freeze(&#123;&#125;);</span><br><span class="line"><span class="built_in">Reflect</span>.isExtensible(frozen); <span class="comment">// === false</span></span><br></pre></td></tr></table></figure><h3 id="Reflect-ownKeys"><a href="#Reflect-ownKeys" class="headerlink" title="Reflect.ownKeys"></a>Reflect.ownKeys</h3><p>返回对象的keys<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Reflect</span>.ownKeys(&#123;<span class="string">"a"</span>:<span class="number">0</span>,<span class="string">"b"</span>:<span class="number">1</span>,<span class="string">"c"</span>:<span class="number">2</span>,<span class="string">"d"</span>:<span class="number">3</span>&#125;)); <span class="comment">//输出 ：["a", "b", "c", "d"]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Reflect</span>.ownKeys([])); <span class="comment">// ["length"]</span></span><br></pre></td></tr></table></figure></p><p>reflect.ownKeys的排序是根据: 先显示数字， 数字根据大小排序，然后是 字符串根据插入的顺序排序， 最后是symbol类型的key也根据插入插入顺序排序;</p><h3 id="Reflect-set"><a href="#Reflect-set" class="headerlink" title="Reflect.set"></a>Reflect.set</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"><span class="built_in">Reflect</span>.set(obj, <span class="string">"prop"</span>, <span class="string">"value"</span>); <span class="comment">// 输出：true</span></span><br><span class="line"><span class="built_in">console</span>.log( obj.prop ); <span class="comment">// 输出："value"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"><span class="built_in">Reflect</span>.set(obj); <span class="comment">// 输出：true</span></span><br><span class="line"><span class="comment">// 相当于 Reflect.set(obj, undefined, undefined);</span></span><br></pre></td></tr></table></figure><h3 id="Reflect-setPrototypeOf"><a href="#Reflect-setPrototypeOf" class="headerlink" title="Reflect.setPrototypeOf"></a>Reflect.setPrototypeOf</h3><p>修改对象的__proto__属性<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Reflect</span>.setPrototypeOf(&#123;&#125;, <span class="built_in">Object</span>.prototype); <span class="comment">// 输出true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 给该对象数组[[Prototype]] 为null.</span></span><br><span class="line"><span class="built_in">Reflect</span>.setPrototypeOf(&#123;&#125;, <span class="literal">null</span>); <span class="comment">// true</span></span><br><span class="line"><span class="comment">// 此时的obj.__proto__为undefine</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//把对象冻结以后重新设置[[prototype]]</span></span><br><span class="line"><span class="built_in">Reflect</span>.setPrototypeOf(<span class="built_in">Object</span>.freeze(&#123;&#125;), <span class="literal">null</span>); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果原型链循环依赖的话就会返回false.</span></span><br><span class="line"><span class="keyword">var</span> target = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> proto = <span class="built_in">Object</span>.create(target);</span><br><span class="line"><span class="built_in">Reflect</span>.setPrototypeOf(target, proto); <span class="comment">// false</span></span><br></pre></td></tr></table></figure></p>]]></content:encoded>
      
      <comments>http://mydearest.cn/2019/ES6Reflect%E5%AF%B9%E8%B1%A1.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>深入了解HTTP</title>
      <link>http://mydearest.cn/2019/%E6%B7%B1%E5%85%A5%E4%BA%86%E8%A7%A3HTTP.html</link>
      <guid>http://mydearest.cn/2019/%E6%B7%B1%E5%85%A5%E4%BA%86%E8%A7%A3HTTP.html</guid>
      <pubDate>Mon, 29 Apr 2019 16:48:20 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;HTTP-特性&quot;&gt;&lt;a href=&quot;#HTTP-特性&quot; class=&quot;headerlink&quot; title=&quot;HTTP 特性&quot;&gt;&lt;/a&gt;HTTP 特性&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;基于TCP-IP协议 应用层协议 默认端口号80&lt;/li&gt;
&lt;li&gt;无连接无状态&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;什么是无状态&quot;&gt;&lt;a href=&quot;#什么是无状态&quot; class=&quot;headerlink&quot; title=&quot;什么是无状态&quot;&gt;&lt;/a&gt;什么是无状态&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;状态】的含义就是：客户端和服务器在某次会话中产生的数据&lt;/li&gt;
&lt;li&gt;那么对应的【无状态】就意味着：这些数据不会被保留&lt;/li&gt;
&lt;li&gt;通过增加cookie和session机制，现在的网络请求其实是有状态的&lt;/li&gt;
&lt;li&gt;在没有状态的http协议下，服务器也一定会保留你每次网络请求对数据的修改，但这跟保留每次访问的数据是不一样的，保留的只是会话产生的结果，而没有保留会话&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;HTTP-报文&quot;&gt;&lt;a href=&quot;#HTTP-报文&quot; class=&quot;headerlink&quot; title=&quot;HTTP 报文&quot;&gt;&lt;/a&gt;HTTP 报文&lt;/h2&gt;&lt;h3 id=&quot;请求报文&quot;&gt;&lt;a href=&quot;#请求报文&quot; class=&quot;headerlink&quot; title=&quot;请求报文&quot;&gt;&lt;/a&gt;请求报文&lt;/h3&gt;&lt;p&gt;HTTP 协议是以 ASCII （a s ki）码传输，建立在 TCP/IP 协议之上的应用层规范。规范把 HTTP 请求分为三个部分：状态行、请求头、消息主体。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GET 可提交的数据量受到URL长度的限制，HTTP 协议规范没有对 URL 长度进行限制。这个限制是特定的浏览器及服务器对它的限制&lt;/li&gt;
&lt;li&gt;理论上讲，POST 是没有大小限制的，HTTP 协议规范也没有进行大小限制，出于安全考虑，服务器软件在实现时会做一定限制&lt;/li&gt;
&lt;li&gt;参考上面的报文示例，可以发现 GET 和 POST 数据内容是一模一样的，只是位置不同，一个在 URL 里，一个在 HTTP 包的包体里&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="HTTP-特性"><a href="#HTTP-特性" class="headerlink" title="HTTP 特性"></a>HTTP 特性</h2><ul><li>基于TCP-IP协议 应用层协议 默认端口号80</li><li>无连接无状态</li></ul><h3 id="什么是无状态"><a href="#什么是无状态" class="headerlink" title="什么是无状态"></a>什么是无状态</h3><ul><li>状态】的含义就是：客户端和服务器在某次会话中产生的数据</li><li>那么对应的【无状态】就意味着：这些数据不会被保留</li><li>通过增加cookie和session机制，现在的网络请求其实是有状态的</li><li>在没有状态的http协议下，服务器也一定会保留你每次网络请求对数据的修改，但这跟保留每次访问的数据是不一样的，保留的只是会话产生的结果，而没有保留会话</li></ul><h2 id="HTTP-报文"><a href="#HTTP-报文" class="headerlink" title="HTTP 报文"></a>HTTP 报文</h2><h3 id="请求报文"><a href="#请求报文" class="headerlink" title="请求报文"></a>请求报文</h3><p>HTTP 协议是以 ASCII （a s ki）码传输，建立在 TCP/IP 协议之上的应用层规范。规范把 HTTP 请求分为三个部分：状态行、请求头、消息主体。</p><ul><li>GET 可提交的数据量受到URL长度的限制，HTTP 协议规范没有对 URL 长度进行限制。这个限制是特定的浏览器及服务器对它的限制</li><li>理论上讲，POST 是没有大小限制的，HTTP 协议规范也没有进行大小限制，出于安全考虑，服务器软件在实现时会做一定限制</li><li>参考上面的报文示例，可以发现 GET 和 POST 数据内容是一模一样的，只是位置不同，一个在 URL 里，一个在 HTTP 包的包体里</li></ul><hr><a id="more"></a><h3 id="POST提交的方式"><a href="#POST提交的方式" class="headerlink" title="POST提交的方式"></a>POST提交的方式</h3><p>HTTP 协议中规定 POST 提交的数据必须在 body 部分中，但是协议中没有规定数据使用哪种编码方式或者数据格式。实际上，开发者完全可以自己决定消息主体的格式，只要最后发送的 HTTP 请求满足上面的格式就可以。</p><p>但是，数据发送出去，还要服务端解析成功才有意义。一般服务端语言如 PHP、Python 等，以及它们的 framework，都内置了自动解析常见数据格式的功能。服务端通常是根据请求头（headers）中的 Content-Type 字段来获知请求中的消息主体是用何种方式编码，再对主体进行解析。所以说到 POST 提交数据方案，包含了 Content-Type 和消息主体编码方式两部分。</p><ol><li><p>application/x-www-form-urlencoded这是最常见的 POST 数据提交方式。浏览器的原生 <form> 表单，如果不设置 enctype 属性，那么最终就会以 application/x-www-form-urlencoded 方式提交数据。</form></p></li><li><p>multipart/form-data使用表单上传文件时，必须让 <form> 表单的 enctype 等于 multipart/form-data。</form></p></li></ol><p>上面提到的这两种 POST 数据的方式，都是浏览器原生支持的，而且现阶段标准中原生 <form> 表单也只支持这两种方式（通过 <form> 元素的 enctype 属性指定，默认为 application/x-www-form-urlencoded。其实 enctype 还支持 text/plain，不过用得非常少）。</form></form></p><p>随着越来越多的 Web 站点，尤其是 WebApp，全部使用 Ajax 进行数据交互之后，我们完全可以定义新的数据提交方式，例如 application/json，application/form-data，text/xml，乃至 application/x-protobuf 这种二进制格式，只要服务器可以根据 Content-Type 和 Content-Encoding 正确地解析出请求，都是没有问题的。</p><h3 id="响应报文"><a href="#响应报文" class="headerlink" title="响应报文"></a>响应报文</h3><ul><li>状态行</li><li>响应头(Response Header)</li><li>响应正文</li></ul><p>GET 请求 304获取缓存第一次请求时，服务器端返回请求数据，之后的请求，服务器根据请求中的 If-Modified-Since 字段判断响应文件没有更新，如果没有更新，服务器返回一个 304 Not Modified响应，告诉浏览器请求的资源在浏览器上没有更新，可以使用已缓存的上次获取的文件。</p><p>/<em>    </em>通过RandomSource.getRandomValues() 方法获取符合密码学要求的安全的随机值    <em>/this.getRandomNumbers = function (min, max) {    var minValue = min || ‘’;    var maxValue = max || ‘’;    var cryptoObj = window.crypto || window.msCrypto;    /</em>eslint-disable<em>/    var array = new Uint32Array(1);    /</em>eslint-enable*/    cryptoObj &amp;&amp; cryptoObj.getRandomValues(array);    var result = 0;    if (minValue || maxValue) {        if (!maxValue) {            minValue = 0;            maxValue = min;        }        result = parseInt(minValue, 10) + (array[0] % (parseInt(maxValue, 10) - parseInt(minValue, 10)));    } else {        result = array[0];    }    return result;};</p><h3 id="持久连接"><a href="#持久连接" class="headerlink" title="持久连接"></a>持久连接</h3><p>在 HTTP 1.0 版本中，并没有官方的标准来规定 Keep-Alive 如何工作，因此实际上它是被附加到 HTTP 1.0协议上，如果客户端浏览器支持 Keep-Alive ，那么就在HTTP请求头中添加一个字段 Connection: Keep-Alive，当服务器收到附带有 Connection: Keep-Alive 的请求时，它也会在响应头中添加一个同样的字段来使用 Keep-Alive 。这样一来，客户端和服务器之间的HTTP连接就会被保持，不会断开（超过 Keep-Alive 规定的时间，意外断电等情况除外），当客户端发送另外一个请求时，就使用这条已经建立的连接。</p><p>在 HTTP 1.1 版本中，默认情况下所有连接都被保持，如果加入 “Connection: close” 才关闭。目前大部分浏览器都使用 HTTP 1.1 协议，也就是说默认都会发起 Keep-Alive 的连接请求了。</p><ul><li><p>HTTP Keep-Alive 简单说就是保持当前的TCP连接，避免了重新建立连接。</p></li><li><p>HTTP 长连接不可能一直保持，例如 Keep-Alive: timeout=5, max=100，表示这个TCP通道可以保持5秒，max=100，表示这个长连接最多接收100次请求就断开。</p></li></ul><h3 id="HTTP-Pipelining（HTTP-管线化）"><a href="#HTTP-Pipelining（HTTP-管线化）" class="headerlink" title="HTTP Pipelining（HTTP 管线化）"></a>HTTP Pipelining（HTTP 管线化）</h3><p>默认情况下 HTTP 协议中每个传输层连接只能承载一个 HTTP 请求和响应，浏览器会在收到上一个请求的响应之后，再发送下一个请求。在使用持久连接的情况下，某个连接上消息的传递类似于请求1 -&gt; 响应1 -&gt; 请求2 -&gt; 响应2 -&gt; 请求3 -&gt; 响应3。</p><p>HTTP Pipelining（管线化）是将多个 HTTP 请求整批提交的技术，在传送过程中不需等待服务端的回应。使用 HTTP Pipelining 技术之后，某个连接上的消息变成了类似这样请求1 -&gt; 请求2 -&gt; 请求3 -&gt; 响应1 -&gt; 响应2 -&gt; 响应3</p><h3 id="会话跟踪"><a href="#会话跟踪" class="headerlink" title="会话跟踪"></a>会话跟踪</h3><ol><li>什么是会话？</li></ol><p>客户端打开与服务器的连接发出请求到服务器响应客户端请求的全过程称之为会话。</p><ol><li>什么是会话跟踪？</li></ol><p>会话跟踪指的是对同一个用户对服务器的连续的请求和接受响应的监视。</p><ol><li>为什么需要会话跟踪？</li></ol><p>浏览器与服务器之间的通信是通过HTTP协议进行通信的，而HTTP协议是”无状态”的协议，它不能保存客户的信息，即一次响应完成之后连接就断开了，下一次的请求需要重新连接，这样就需要判断是否是同一个用户，所以才有会话跟踪技术来实现这种要求。</p><p>Cookie</p><p>Cookie 是Web 服务器发送给客户端的一小段信息，客户端请求时可以读取该信息发送到服务器端，进而进行用户的识别。对于客户端的每次请求，服务器都会将 Cookie 发送到客户端,在客户端可以进行保存,以便下次使用。</p><p>客户端可以采用两种方式来保存这个 Cookie 对象，一种方式是保存在客户端内存中，称为临时 Cookie，浏览器关闭后这个 Cookie 对象将消失。另外一种方式是保存在客户机的磁盘上，称为永久 Cookie。以后客户端只要访问该网站，就会将这个 Cookie 再次发送到服务器上，前提是这个 Cookie 在有效期内，这样就实现了对客户的跟踪。</p><p>Cookie 是可以被客户端禁用的。</p><p>Session:</p><p>每一个用户都有一个不同的 session，各个用户之间是不能共享的，是每个用户所独享的，在 session 中可以存放信息。</p><p>在服务器端会创建一个 session 对象，产生一个 sessionID 来标识这个 session 对象，然后将这个 sessionID 放入到 Cookie 中发送到客户端，下一次访问时，sessionID 会发送到服务器，在服务器端进行识别不同的用户。</p><p>Session 的实现依赖于 Cookie，如果 Cookie 被禁用，那么 session 也将失效。</p><h3 id="跨站攻击"><a href="#跨站攻击" class="headerlink" title="跨站攻击"></a>跨站攻击</h3><h4 id="CSRF（Cross-site-request-forgery，跨站请求伪造）"><a href="#CSRF（Cross-site-request-forgery，跨站请求伪造）" class="headerlink" title="CSRF（Cross-site request forgery，跨站请求伪造）"></a>CSRF（Cross-site request forgery，跨站请求伪造）</h4><ul><li>如何防范 CSRF 攻击？</li></ul><ol><li>关键操作只接受 POST 请求</li><li>验证码</li><li>检测referer</li><li>token</li></ol><h4 id="XSS（Cross-Site-Scripting，跨站脚本攻击）"><a href="#XSS（Cross-Site-Scripting，跨站脚本攻击）" class="headerlink" title="XSS（Cross Site Scripting，跨站脚本攻击）"></a>XSS（Cross Site Scripting，跨站脚本攻击）</h4><p>XSS 全称“跨站脚本”，是注入攻击的一种。其特点是不对服务器端造成任何伤害，而是通过一些正常的站内交互途径，例如发布评论，提交含有 JavaScript 的内容文本。这时服务器端如果没有过滤或转义掉这些脚本，作为内容发布到了页面上，其他用户访问这个页面的时候就会运行这些脚本。</p><p>XSS 是实现 CSRF 的诸多途径中的一条，但绝对不是唯一的一条。一般习惯上把通过 XSS 来实现的 CSRF 称为 XSRF。</p><h3 id="http缓存"><a href="#http缓存" class="headerlink" title="http缓存"></a>http缓存</h3><ul><li>强缓存<ul><li>cache-control</li><li>Expires</li><li>Pragma</li></ul></li><li>协商缓存<ul><li>last-modified</li><li>Etag</li></ul></li></ul><h2 id="HTTPS基本过程"><a href="#HTTPS基本过程" class="headerlink" title="HTTPS基本过程"></a>HTTPS基本过程</h2><p>HTTPS即 HTTP over TLS，是一种在加密信道进行HTTP内容传输的协议</p><blockquote><p>TLS 的早期版本叫做 SSL。SSL 的 1.0, 2.0, 3.0 版本均已经被废弃，出于安全问题考虑广大浏览器也不再对老旧的 SSL 版本进行支持了，因此这里我们就统一使用 TLS 名称了。</p></blockquote>]]></content:encoded>
      
      <comments>http://mydearest.cn/2019/%E6%B7%B1%E5%85%A5%E4%BA%86%E8%A7%A3HTTP.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>维生素</title>
      <link>http://mydearest.cn/2019/%E7%BB%B4%E7%94%9F%E7%B4%A0.html</link>
      <guid>http://mydearest.cn/2019/%E7%BB%B4%E7%94%9F%E7%B4%A0.html</guid>
      <pubDate>Wed, 24 Apr 2019 16:02:31 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;维生素分类&quot;&gt;&lt;a href=&quot;#维生素分类&quot; class=&quot;headerlink&quot; title=&quot;维生素分类&quot;&gt;&lt;/a&gt;维生素分类&lt;/h2&gt;&lt;h3 id=&quot;维生素A&quot;&gt;&lt;a href=&quot;#维生素A&quot; class=&quot;headerlink&quot; title=&quot;维生素A&quot;&gt;&lt;/a&gt;维生素A&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;长期用眼。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;维生素A缺乏，会带来眼睛干涩，夜间视力下降等问题。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://cdn.mydearest.cn/blog/images/VA.jpg&quot; alt=&quot;维生素A&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="维生素分类"><a href="#维生素分类" class="headerlink" title="维生素分类"></a>维生素分类</h2><h3 id="维生素A"><a href="#维生素A" class="headerlink" title="维生素A"></a>维生素A</h3><blockquote><p>长期用眼。</p></blockquote><p>维生素A缺乏，会带来眼睛干涩，夜间视力下降等问题。</p><p><img src="http://cdn.mydearest.cn/blog/images/VA.jpg" alt="维生素A"></p><hr><a id="more"></a><h3 id="维生素C"><a href="#维生素C" class="headerlink" title="维生素C"></a>维生素C</h3><blockquote><p>果蔬没吃够的</p></blockquote><p><img src="http://cdn.mydearest.cn/blog/images/VC.jpg" alt="维生素A"></p><h3 id="维生素D"><a href="#维生素D" class="headerlink" title="维生素D"></a>维生素D</h3><blockquote><p>太阳晒的少，影响钙吸收</p></blockquote><h3 id="维生素B"><a href="#维生素B" class="headerlink" title="维生素B"></a>维生素B</h3><p>B类的维生素有很多种。</p><h4 id="硫胺素-维生素B1"><a href="#硫胺素-维生素B1" class="headerlink" title="硫胺素(维生素B1)"></a>硫胺素(维生素B1)</h4><p>运动越多，消耗能量（主要是碳水化合物）越多，硫胺素需要也越多。随着进食量增加，硫胺素摄入可能也会增加，<strong>所以一般不必额外补充。</strong></p><h4 id="核黄素（维生素B2）"><a href="#核黄素（维生素B2）" class="headerlink" title="核黄素（维生素B2）"></a>核黄素（维生素B2）</h4><p>核黄素跟蛋白质、脂肪、碳水化合物的能量产生都有关系。我国目前是成年男性1.4毫克/天，女性1.2毫克/天。运动人群，增加到推荐量的1-2倍足矣。食物补充的话，平时可以多吃肉、蛋和奶制品。花椰菜、芦笋、菠菜这类绿色蔬菜核黄素含量也比较高。<strong>这些东西吃的少的话，可以考虑补充剂。</strong></p><h4 id="烟酸（维生素B3）"><a href="#烟酸（维生素B3）" class="headerlink" title="烟酸（维生素B3）"></a>烟酸（维生素B3）</h4><p>烟酸跟蛋白质、碳水化合物、脂肪的能量产生都有关。含烟酸比较丰富的食物有肉类、谷类、豆类食物。因为色氨酸在体内能转化成烟酸，动物蛋白摄入比较多的人，<strong>烟酸一般都不会缺乏</strong>。所以，常吃较多肉的人，即便是运动人群，也基本不用额外补充烟酸。</p><h4 id="维生素B6"><a href="#维生素B6" class="headerlink" title="维生素B6"></a>维生素B6</h4><p>这种维生素主要跟糖原和蛋白质代谢有关。体内储存的糖原想变成葡萄糖，氨基酸想转换利用，都需要维生素B6，所以这东西跟运动关系密切。</p><p>维生素B6跟别的B族维生素不一样，这玩意有毒性。但一般都要达到药物剂量才会中毒。比如治疗经期按综合症、哮喘有时会用到B6。维生素B6的最高耐受上限是100毫克/天。低于这个剂量一般没有太大问题。</p><p>比较安全的补充方式还是食物，肉、蔬菜、坚果、香蕉、全谷物食品里含B6都很丰富。比如100克鸡胸肉里就有大约0.6毫克维生素B6。所以，这些东西吃的比较多的话，一般不用吃补充剂额外补充。</p><h4 id="橙子、橘子、柚子、青柠、西柚、柠檬、芦柑的关系。"><a href="#橙子、橘子、柚子、青柠、西柚、柠檬、芦柑的关系。" class="headerlink" title="橙子、橘子、柚子、青柠、西柚、柠檬、芦柑的关系。"></a>橙子、橘子、柚子、青柠、西柚、柠檬、芦柑的关系。</h4><p>橙子是橘子和柚子杂交来的，橘子和橙子杂交成了芦柑，柚子和橙子又杂交成了青柠，橙子和青柠杂交了柠檬，橙子和柚子杂交成了西柚。</p>]]></content:encoded>
      
      <comments>http://mydearest.cn/2019/%E7%BB%B4%E7%94%9F%E7%B4%A0.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>vuex学习笔记</title>
      <link>http://mydearest.cn/2019/vuex%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html</link>
      <guid>http://mydearest.cn/2019/vuex%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html</guid>
      <pubDate>Thu, 18 Apr 2019 16:25:20 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;vuex&quot;&gt;&lt;a href=&quot;#vuex&quot; class=&quot;headerlink&quot; title=&quot;vuex&quot;&gt;&lt;/a&gt;vuex&lt;/h2&gt;&lt;p&gt;数据驱动模板（管理共享状态）
核心store仓库（响应式的状态存储）
提交mutation才能修改内部状态 记录每次改变保存状态快照&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; store = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Vuex.Store(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    state:&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        count:&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mutations: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        increase(state)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            state.count++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 开启严格模式&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    strict: process.env.NODE_ENV !== &lt;span class=&quot;string&quot;&gt;&#39;production&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 在严格模式下，无论何时发生了状态变更且不是由 mutation 函数引起的，将会抛出错误。这能保证所有的状态变更都能被调试工具跟踪到。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;store.commit(&lt;span class=&quot;string&quot;&gt;&#39;increase&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;store.state.count;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;不要在发布环境下启用严格模式！严格模式会深度监测状态树来检测不合规的状态变更——请确保在发布环境下关闭严格模式，以避免性能损失。&lt;/p&gt;
&lt;hr&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="vuex"><a href="#vuex" class="headerlink" title="vuex"></a>vuex</h2><p>数据驱动模板（管理共享状态）核心store仓库（响应式的状态存储）提交mutation才能修改内部状态 记录每次改变保存状态快照</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">    state:&#123;</span><br><span class="line">        count:<span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    mutations: &#123;</span><br><span class="line">        increase(state)&#123;</span><br><span class="line">            state.count++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 开启严格模式</span></span><br><span class="line">    strict: process.env.NODE_ENV !== <span class="string">'production'</span></span><br><span class="line">    <span class="comment">// 在严格模式下，无论何时发生了状态变更且不是由 mutation 函数引起的，将会抛出错误。这能保证所有的状态变更都能被调试工具跟踪到。</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">store.commit(<span class="string">'increase'</span>);</span><br><span class="line">store.state.count;</span><br></pre></td></tr></table></figure><p>不要在发布环境下启用严格模式！严格模式会深度监测状态树来检测不合规的状态变更——请确保在发布环境下关闭严格模式，以避免性能损失。</p><hr><a id="more"></a><h3 id="state（单一状态树）"><a href="#state（单一状态树）" class="headerlink" title="state（单一状态树）"></a>state（单一状态树）</h3><p>用一个对象包含所有的应用层级状态</p><ul><li><p>从store实例中读取状态</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 计算属性</span></span><br><span class="line"><span class="keyword">const</span> Counter = &#123;</span><br><span class="line">  template: <span class="string">`&lt;div&gt;&#123;&#123; count &#125;&#125;&lt;/div&gt;`</span>,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    count () &#123;</span><br><span class="line">      <span class="keyword">return</span> store.state.count</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>从根组件注入实例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  <span class="comment">// 把 store 对象提供给 “store” 选项，这可以把 store 的实例注入所有的子组件</span></span><br><span class="line">  store,</span><br><span class="line">  components: &#123; Counter &#125;,</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div class="app"&gt;</span></span><br><span class="line"><span class="string">      &lt;counter&gt;&lt;/counter&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 读取</span></span><br><span class="line"><span class="keyword">this</span>.$store.state.count</span><br></pre></td></tr></table></figure></li><li><p>多个属性使用mapState()辅助函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">computed: mapState(&#123;</span><br><span class="line">    count: <span class="function"><span class="params">state</span> =&gt;</span> state.count,</span><br><span class="line">    name: <span class="function"><span class="params">state</span>=&gt;</span> state.name</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 如果属性与state子节点名称相同 传入字符串数组</span></span><br><span class="line"><span class="comment">// 映射 this.count 为 store.state.count</span></span><br><span class="line">mapState([<span class="string">'count'</span>])</span><br></pre></td></tr></table></figure></li></ul><h3 id="getter对state数据的派生操作（共享数据的共享函数）"><a href="#getter对state数据的派生操作（共享数据的共享函数）" class="headerlink" title="getter对state数据的派生操作（共享数据的共享函数）"></a>getter对state数据的派生操作（共享数据的共享函数）</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">    state:&#123;</span><br><span class="line">        todos: [</span><br><span class="line">            &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">text</span>: <span class="string">'...'</span>, <span class="attr">done</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">            &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">text</span>: <span class="string">'...'</span>, <span class="attr">done</span>: <span class="literal">false</span> &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    getters: &#123;</span><br><span class="line">        doneTodos: <span class="function"><span class="params">state</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> state.todos.filter(<span class="function"><span class="params">todo</span> =&gt;</span> todo.done)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 接收getter参数</span></span><br><span class="line">        doneTodosCount: <span class="function">(<span class="params">state, getters</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> getters.doneTodos.length</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 方法</span></span><br><span class="line">        getTodoById: <span class="function">(<span class="params">state</span>) =&gt;</span> (id) =&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> state.todos.find(<span class="function"><span class="params">todo</span> =&gt;</span> todo.id === id)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 访问</span></span><br><span class="line">store.getters.doneTodos <span class="comment">// -&gt; [&#123; id: 1, text: '...', done: true &#125;]</span></span><br></pre></td></tr></table></figure><ul><li>mapGetters()辅助函数<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">    <span class="comment">// 使用对象展开运算符将 getter 混入 computed 对象中</span></span><br><span class="line">    ...mapGetters([</span><br><span class="line">        <span class="string">'doneTodosCount'</span>,</span><br><span class="line">        <span class="string">'anotherGetter'</span>,</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    ])</span><br><span class="line">&#125;</span><br><span class="line">mapGetters(&#123;</span><br><span class="line">    <span class="comment">// 把 `this.doneCount` 映射为 `this.$store.getters.doneTodosCount`</span></span><br><span class="line">    doneCount: <span class="string">'doneTodosCount'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h3 id="mutation"><a href="#mutation" class="headerlink" title="mutation"></a>mutation</h3><p>提交mutation<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">store.commit(<span class="string">"increase"</span>)</span><br><span class="line"><span class="comment">// 传参</span></span><br><span class="line">store.commit(<span class="string">'increase'</span>, <span class="number">10</span>)</span><br><span class="line"><span class="comment">// 最好还是规范传payload对象</span></span><br><span class="line">store.commit(<span class="string">'increase'</span>, &#123;</span><br><span class="line">    amount:<span class="number">10</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 对象风格提交</span></span><br><span class="line">store.commit(&#123;</span><br><span class="line">  type: <span class="string">'increase'</span>,</span><br><span class="line">  amount: <span class="number">10</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>1.最好提前在你的 store 中初始化好所有所需属性。</p><p>2.当需要在对象上添加新属性时，你应该</p><p>•使用 Vue.set(obj, ‘newProp’, 123), 或者</p><p>•以新对象替换老对象。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">state.obj = &#123; ...state.obj, <span class="attr">newProp</span>: <span class="number">123</span> &#125;</span><br></pre></td></tr></table></figure></p><ul><li>常量替代事件类型<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// mutation-types.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> SOME_MUTATION = <span class="string">'SOME_MUTATION'</span></span><br></pre></td></tr></table></figure></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// store.js</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"><span class="keyword">import</span> &#123; SOME_MUTATION &#125; <span class="keyword">from</span> <span class="string">'./mutation-types'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state: &#123; ... &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    <span class="comment">// 我们可以使用 ES2015 风格的计算属性命名功能来使用一个常量作为函数名</span></span><br><span class="line">    [SOME_MUTATION] (state) &#123;</span><br><span class="line">      <span class="comment">// mutate state</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>mutation必须是同步函数</strong>一条 mutation 被记录，devtools 都需要捕捉到前一状态和后一状态的快照。devtools 不知道什么时候回调函数实际上被调用——实质上任何在回调函数中进行的状态的改变都是不可追踪的。</p><h4 id="组件中提交mutation"><a href="#组件中提交mutation" class="headerlink" title="组件中提交mutation"></a>组件中提交mutation</h4><ol><li><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$store.commit(<span class="string">'xxx'</span>)</span><br></pre></td></tr></table></figure></li><li><p>mapMutations 辅助函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">    ...mapMutations([</span><br><span class="line">      <span class="string">'increase'</span>, <span class="comment">// 将 `this.increase()` 映射为 `this.$store.commit('increase')`</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// `mapMutations` 也支持载荷：</span></span><br><span class="line">      <span class="string">'increaseBy'</span> <span class="comment">// 将 `this.increaseBy(amount)` 映射为 `this.$store.commit('increaseBy', amount)`</span></span><br><span class="line">    ]),</span><br><span class="line">    ...mapMutations(&#123;</span><br><span class="line">      add: <span class="string">'increase'</span> <span class="comment">// 将 `this.add()` 映射为 `this.$store.commit('increase')`</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="action"><a href="#action" class="headerlink" title="action"></a>action</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">store.commit(<span class="string">'increment'</span>)</span><br><span class="line"><span class="comment">// 任何由 "increment" 导致的状态变更都应该在此刻完成。</span></span><br></pre></td></tr></table></figure><p>Action 类似于 mutation，不同在于：•Action 提交的是 mutation，而不是直接变更状态。•Action 可以包含任意异步操作。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    count: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    increase (state) &#123;</span><br><span class="line">      state.count++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  actions: &#123;</span><br><span class="line">    increase (context) &#123;</span><br><span class="line">      context.commit(<span class="string">'increase'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    increaseOr(&#123;commit&#125;) &#123;</span><br><span class="line">      commit(<span class="string">'increase'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    increaseAsync (&#123; commit &#125;) &#123;</span><br><span class="line">        <span class="comment">// 支持异步操作</span></span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        commit(<span class="string">'increment'</span>)</span><br><span class="line">        &#125;, <span class="number">1000</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Action 函数接受一个与 store 实例具有相同方法和属性的 context 对象，因此你可以调用 context.commit 提交一个 mutation，或者通过 context.state 和 context.getters 来获取 state 和 getters。</p><ul><li><p>触发action</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">store.dispatch(<span class="string">'increase'</span>)</span><br></pre></td></tr></table></figure></li><li><p>支持同样的载荷方式和对象方式分发</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 以载荷形式分发</span></span><br><span class="line">store.dispatch(<span class="string">'increaseAsync'</span>, &#123;</span><br><span class="line">  amount: <span class="number">10</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以对象形式分发</span></span><br><span class="line">store.dispatch(&#123;</span><br><span class="line">  type: <span class="string">'increaseAsync'</span>,</span><br><span class="line">  amount: <span class="number">10</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 购物车操作实例</span></span><br><span class="line">actions: &#123;</span><br><span class="line">  checkout (&#123; commit, state &#125;, products) &#123;</span><br><span class="line">    <span class="comment">// 把当前购物车的物品备份起来</span></span><br><span class="line">    <span class="keyword">const</span> savedCartItems = [...state.cart.added]</span><br><span class="line">    <span class="comment">// 发出结账请求，然后乐观地清空购物车</span></span><br><span class="line">    commit(types.CHECKOUT_REQUEST)</span><br><span class="line">    <span class="comment">// 购物 API 接受一个成功回调和一个失败回调</span></span><br><span class="line">    shop.buyProducts(</span><br><span class="line">      products,</span><br><span class="line">      <span class="comment">// 成功操作</span></span><br><span class="line">      () =&gt; commit(types.CHECKOUT_SUCCESS),</span><br><span class="line">      <span class="comment">// 失败操作</span></span><br><span class="line">      () =&gt; commit(types.CHECKOUT_FAILURE, savedCartItems)</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="组件中分发action"><a href="#组件中分发action" class="headerlink" title="组件中分发action"></a>组件中分发action</h4><p>在组件中使用 this.$store.dispatch(‘xxx’) 分发 action，或者使用 mapActions 辅助函数将组件的 methods 映射为 store.dispatch 调用（需要先在根节点注入 store）<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; mapActions &#125; <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  methods: &#123;</span><br><span class="line">    ...mapActions([</span><br><span class="line">      <span class="string">'increase'</span>, <span class="comment">// 将 `this.increase()` 映射为 `this.$store.dispatch('increase')`</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// `mapActions` 也支持载荷：</span></span><br><span class="line">      <span class="string">'increaseBy'</span> <span class="comment">// 将 `this.increaseBy(amount)` 映射为 `this.$store.dispatch('increaseBy', amount)`</span></span><br><span class="line">    ]),</span><br><span class="line">    ...mapActions(&#123;</span><br><span class="line">      add: <span class="string">'increase'</span> <span class="comment">// 将 `this.add()` 映射为 `this.$store.dispatch('increase')`</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="action组合嵌套"><a href="#action组合嵌套" class="headerlink" title="action组合嵌套"></a>action组合嵌套</h4><p>store.dispatch 可以处理被触发的 action 的处理函数返回的 Promise，并且 store.dispatch 仍旧返回 Promise<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">actions: &#123;</span><br><span class="line">  actionA (&#123; commit &#125;) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        commit(<span class="string">'someMutation'</span>)</span><br><span class="line">        resolve()</span><br><span class="line">      &#125;, <span class="number">1000</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">   actionB (&#123; dispatch, commit &#125;) &#123;</span><br><span class="line">    <span class="keyword">return</span> dispatch(<span class="string">'actionA'</span>).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      commit(<span class="string">'someOtherMutation'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">store.dispatch(<span class="string">'actionA'</span>).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>采用async await</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// getData() 和 getOtherData() 返回的是 Promise</span></span><br><span class="line">actions: &#123;</span><br><span class="line">  <span class="keyword">async</span> actionA (&#123; commit &#125;) &#123;</span><br><span class="line">    commit(<span class="string">'gotData'</span>, <span class="keyword">await</span> getData())</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">async</span> actionB (&#123; dispatch, commit &#125;) &#123;</span><br><span class="line">    <span class="keyword">await</span> dispatch(<span class="string">'actionA'</span>) <span class="comment">// 等待 actionA 完成</span></span><br><span class="line">    commit(<span class="string">'gotOtherData'</span>, <span class="keyword">await</span> getOtherData())</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="module切分模块"><a href="#module切分模块" class="headerlink" title="module切分模块"></a>module切分模块</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> moduleA = &#123;</span><br><span class="line">  state: &#123; ... &#125;,</span><br><span class="line">  mutations: &#123; ... &#125;,</span><br><span class="line">  actions: &#123; ... &#125;,</span><br><span class="line">  getters: &#123; ... &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> moduleB = &#123;</span><br><span class="line">  state: &#123; ... &#125;,</span><br><span class="line">  mutations: &#123; ... &#125;,</span><br><span class="line">  actions: &#123; ... &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  modules: &#123;</span><br><span class="line">    a: moduleA,</span><br><span class="line">    b: moduleB</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">store.state.a <span class="comment">// -&gt; moduleA 的状态</span></span><br><span class="line">store.state.b <span class="comment">// -&gt; moduleB 的状态</span></span><br></pre></td></tr></table></figure><ul><li><p>模块内部的action</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> moduleA = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  actions: &#123;</span><br><span class="line">    incrementIfOddOnRootSum (&#123; state, commit, rootState &#125;) &#123;</span><br><span class="line">      <span class="keyword">if</span> ((state.count + rootState.count) % <span class="number">2</span> === <span class="number">1</span>) &#123;</span><br><span class="line">        commit(<span class="string">'increment'</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">   getters: &#123;</span><br><span class="line">    sumWithRootCount (state, getters, rootState) &#123;</span><br><span class="line">      <span class="keyword">return</span> state.count + rootState.count</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>命名空间</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  modules: &#123;</span><br><span class="line">    account: &#123;</span><br><span class="line">      namespaced: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 模块内容（module assets）</span></span><br><span class="line">      state: &#123; ... &#125;, <span class="comment">// 模块内的状态已经是嵌套的了，使用 `namespaced` 属性不会对其产生影响</span></span><br><span class="line">      getters: &#123;</span><br><span class="line">        isAdmin () &#123; ... &#125; <span class="comment">// -&gt; getters['account/isAdmin']</span></span><br><span class="line">      &#125;,</span><br><span class="line">      actions: &#123;</span><br><span class="line">        login () &#123; ... &#125; <span class="comment">// -&gt; dispatch('account/login')</span></span><br><span class="line">      &#125;,</span><br><span class="line">      mutations: &#123;</span><br><span class="line">        login () &#123; ... &#125; <span class="comment">// -&gt; commit('account/login')</span></span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 嵌套模块</span></span><br><span class="line">      modules: &#123;</span><br><span class="line">        <span class="comment">// 继承父模块的命名空间</span></span><br><span class="line">        myPage: &#123;</span><br><span class="line">          state: &#123; ... &#125;,</span><br><span class="line">          getters: &#123;</span><br><span class="line">            profile () &#123; ... &#125; <span class="comment">// -&gt; getters['account/profile']</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 进一步嵌套命名空间</span></span><br><span class="line">        posts: &#123;</span><br><span class="line">          namespaced: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">          state: &#123; ... &#125;,</span><br><span class="line">          getters: &#123;</span><br><span class="line">            popular () &#123; ... &#125; <span class="comment">// -&gt; getters['account/posts/popular']</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>在带命名空间的模块内访问全局内容（Global Assets）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">modules: &#123;</span><br><span class="line">  foo: &#123;</span><br><span class="line">    namespaced: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">    getters: &#123;</span><br><span class="line">      <span class="comment">// 在这个模块的 getter 中，`getters` 被局部化了</span></span><br><span class="line">      <span class="comment">// 你可以使用 getter 的第四个参数来调用 `rootGetters`</span></span><br><span class="line">      someGetter (state, getters, rootState, rootGetters) &#123;</span><br><span class="line">        getters.someOtherGetter <span class="comment">// -&gt; 'foo/someOtherGetter'</span></span><br><span class="line">        rootGetters.someOtherGetter <span class="comment">// -&gt; 'someOtherGetter'</span></span><br><span class="line">      &#125;,</span><br><span class="line">      someOtherGetter: <span class="function"><span class="params">state</span> =&gt;</span> &#123; ... &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    actions: &#123;</span><br><span class="line">      <span class="comment">// 在这个模块中， dispatch 和 commit 也被局部化了</span></span><br><span class="line">      <span class="comment">// 他们可以接受 `root` 属性以访问根 dispatch 或 commit</span></span><br><span class="line">      someAction (&#123; dispatch, commit, getters, rootGetters &#125;) &#123;</span><br><span class="line">        getters.someGetter <span class="comment">// -&gt; 'foo/someGetter'</span></span><br><span class="line">        rootGetters.someGetter <span class="comment">// -&gt; 'someGetter'</span></span><br><span class="line"></span><br><span class="line">        dispatch(<span class="string">'someOtherAction'</span>) <span class="comment">// -&gt; 'foo/someOtherAction'</span></span><br><span class="line">        dispatch(<span class="string">'someOtherAction'</span>, <span class="literal">null</span>, &#123; <span class="attr">root</span>: <span class="literal">true</span> &#125;) <span class="comment">// -&gt; 'someOtherAction'</span></span><br><span class="line"></span><br><span class="line">        commit(<span class="string">'someMutation'</span>) <span class="comment">// -&gt; 'foo/someMutation'</span></span><br><span class="line">        commit(<span class="string">'someMutation'</span>, <span class="literal">null</span>, &#123; <span class="attr">root</span>: <span class="literal">true</span> &#125;) <span class="comment">// -&gt; 'someMutation'</span></span><br><span class="line">      &#125;,</span><br><span class="line">      someOtherAction (ctx, payload) &#123; ... &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在带命名空间的模块注册全局 action若需要在带命名空间的模块注册全局 action，可添加 root: true，并将这个 action 的定义放在函数 handler 中。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  actions: &#123;</span><br><span class="line">    someOtherAction (&#123;dispatch&#125;) &#123;</span><br><span class="line">      dispatch(<span class="string">'someAction'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  modules: &#123;</span><br><span class="line">    foo: &#123;</span><br><span class="line">      namespaced: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">      actions: &#123;</span><br><span class="line">        someAction: &#123;</span><br><span class="line">          root: <span class="literal">true</span>,</span><br><span class="line">          handler (namespacedContext, payload) &#123; ... &#125; <span class="comment">// -&gt; 'someAction'</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>带命名空间的绑定函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">  ...mapState(&#123;</span><br><span class="line">    a: <span class="function"><span class="params">state</span> =&gt;</span> state.some.nested.module.a,</span><br><span class="line">    b: <span class="function"><span class="params">state</span> =&gt;</span> state.some.nested.module.b</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">  ...mapActions([</span><br><span class="line">    <span class="string">'some/nested/module/foo'</span>, <span class="comment">// -&gt; this['some/nested/module/foo']()</span></span><br><span class="line">    <span class="string">'some/nested/module/bar'</span> <span class="comment">// -&gt; this['some/nested/module/bar']()</span></span><br><span class="line">  ])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>简化<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">  ...mapState(<span class="string">'some/nested/module'</span>, &#123;</span><br><span class="line">    a: <span class="function"><span class="params">state</span> =&gt;</span> state.a,</span><br><span class="line">    b: <span class="function"><span class="params">state</span> =&gt;</span> state.b</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">  ...mapActions(<span class="string">'some/nested/module'</span>, [</span><br><span class="line">    <span class="string">'foo'</span>, <span class="comment">// -&gt; this.foo()</span></span><br><span class="line">    <span class="string">'bar'</span> <span class="comment">// -&gt; this.bar()</span></span><br><span class="line">  ])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>也可以通过使用 createNamespacedHelpers 创建基于某个命名空间辅助函数。它返回一个对象，对象里有新的绑定在给定命名空间值上的组件绑定辅助函数<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createNamespacedHelpers &#125; <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; mapState, mapActions &#125; = createNamespacedHelpers(<span class="string">'some/nested/module'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  computed: &#123;</span><br><span class="line">    <span class="comment">// 在 `some/nested/module` 中查找</span></span><br><span class="line">    ...mapState(&#123;</span><br><span class="line">      a: <span class="function"><span class="params">state</span> =&gt;</span> state.a,</span><br><span class="line">      b: <span class="function"><span class="params">state</span> =&gt;</span> state.b</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    <span class="comment">// 在 `some/nested/module` 中查找</span></span><br><span class="line">    ...mapActions([</span><br><span class="line">      <span class="string">'foo'</span>,</span><br><span class="line">      <span class="string">'bar'</span></span><br><span class="line">    ])</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="定义插件"><a href="#定义插件" class="headerlink" title="定义插件"></a>定义插件</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myPlugin = <span class="function"><span class="params">store</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 传入store初始化时调用</span></span><br><span class="line">    store.subscribe(<span class="function">(<span class="params">mutation, state</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="comment">// 每次mutation之后调用</span></span><br><span class="line">        <span class="comment">// mutation 的格式为 &#123;type, payload&#125;</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="表单处理"><a href="#表单处理" class="headerlink" title="表单处理"></a>表单处理</h2><p>因为提交mutation才能修改状态，所以v-model不适合绑定vuex里的state，不符合vuex的思想。<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"obj.message"</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>假设这里的 obj 是在计算属性中返回的一个属于 Vuex store 的对象，在用户输入时，v-model 会试图直接修改 obj.message。在严格模式中，由于这个修改不是在 mutation 函数中执行的, 这里会抛出一个错误。</p><ol><li>不采用v-model所以需要input绑定value，然后调用input或者change提交mutation修改状态<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">:value</span>=<span class="string">"message"</span> @<span class="attr">input</span>=<span class="string">"updateMessage"</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">    ...mapState(&#123;</span><br><span class="line">        message: <span class="function"><span class="params">state</span> =&gt;</span> state.obj.message</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;,</span><br><span class="line">method: &#123;</span><br><span class="line">    updateMessage(e)&#123;</span><br><span class="line">        <span class="keyword">this</span>.$store.commit(<span class="string">"updateMessage"</span>, e.target.value)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>采用v-model<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line">computed: &#123;</span><br><span class="line">  message: &#123;</span><br><span class="line">    get () &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.$store.state.obj.message</span><br><span class="line">    &#125;,</span><br><span class="line">    set (value) &#123;</span><br><span class="line">      <span class="keyword">this</span>.$store.commit(<span class="string">'updateMessage'</span>, value)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content:encoded>
      
      <comments>http://mydearest.cn/2019/vuex%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>macvscode更新失败：Permissiondenied解决办法</title>
      <link>http://mydearest.cn/2019/macvscode%E6%9B%B4%E6%96%B0%E5%A4%B1%E8%B4%A5%EF%BC%9APermissiondenied%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95.html</link>
      <guid>http://mydearest.cn/2019/macvscode%E6%9B%B4%E6%96%B0%E5%A4%B1%E8%B4%A5%EF%BC%9APermissiondenied%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95.html</guid>
      <pubDate>Tue, 09 Apr 2019 15:15:24 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;场景-–-mac-vscode不能安装更新&quot;&gt;&lt;a href=&quot;#场景-–-mac-vscode不能安装更新&quot; class=&quot;headerlink&quot; title=&quot;场景 – mac vscode不能安装更新&quot;&gt;&lt;/a&gt;场景 – mac vscode不能安装更新&lt;/
        
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="场景-–-mac-vscode不能安装更新"><a href="#场景-–-mac-vscode不能安装更新" class="headerlink" title="场景 – mac vscode不能安装更新"></a>场景 – mac vscode不能安装更新</h2><blockquote><p>Could not create temporary directory: Permission denied</p></blockquote><h2 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h2><p>mac下<code>/Users/username/Library/Caches/</code>用户文件不一样，root和username</p><p>导致</p><blockquote><p>drwxr-xr-x   6 username  staff   204B Jan 17 20:33 com.microsoft.VSCodedrwxr–r–   2 root    staff    68B Dec 17 13:51 com.microsoft.VSCode.ShipIt</p></blockquote><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// 1. 关闭vscode</span><br><span class="line"></span><br><span class="line">// 2. 这一步是需要输入密码的</span><br><span class="line">sudo chown $USER ~/Library/Caches/com.microsoft.VSCode.ShipIt/ </span><br><span class="line"></span><br><span class="line">// 3. 这一步是不需要输入密码的, 如果不进行第一步，第二步会报错</span><br><span class="line">sudo chown $USER ~/Library/Caches/com.microsoft.VSCode.ShipIt/*</span><br><span class="line"></span><br><span class="line">// 4. 更新xattr</span><br><span class="line">xattr -dr com.apple.quarantine /Applications/Visual\ Studio\ Code.app</span><br></pre></td></tr></table></figure><h2 id="重新安装更新-完成😁"><a href="#重新安装更新-完成😁" class="headerlink" title="重新安装更新 完成😁"></a>重新安装更新 完成😁</h2>]]></content:encoded>
      
      <comments>http://mydearest.cn/2019/macvscode%E6%9B%B4%E6%96%B0%E5%A4%B1%E8%B4%A5%EF%BC%9APermissiondenied%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>borderRadius百分比50和100究竟有什么区别</title>
      <link>http://mydearest.cn/2019/borderRadius%E7%99%BE%E5%88%86%E6%AF%9450%E5%92%8C100%E7%A9%B6%E7%AB%9F%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB.html</link>
      <guid>http://mydearest.cn/2019/borderRadius%E7%99%BE%E5%88%86%E6%AF%9450%E5%92%8C100%E7%A9%B6%E7%AB%9F%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB.html</guid>
      <pubDate>Sun, 31 Mar 2019 16:39:52 GMT</pubDate>
      <description>
      
        &lt;p&gt;border-radius的值是百分比的话，就相当于盒子的宽度和高度的百分比。我们知道在一个正方形内做一个面积最大的圆形，这个圆的半径就为正方形边长的一半。所&lt;/p&gt;
&lt;p&gt;以border-radius为50%时，则会形成圆。那么可能有人就会问，border-radius为100%时，对应圆的半径长度不就是正方形的宽高么，这种情况下，为什么还是会&lt;/p&gt;
&lt;p&gt;形成一个和值为50%一样的圆形呢？&lt;/p&gt;
&lt;hr&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>border-radius的值是百分比的话，就相当于盒子的宽度和高度的百分比。我们知道在一个正方形内做一个面积最大的圆形，这个圆的半径就为正方形边长的一半。所</p><p>以border-radius为50%时，则会形成圆。那么可能有人就会问，border-radius为100%时，对应圆的半径长度不就是正方形的宽高么，这种情况下，为什么还是会</p><p>形成一个和值为50%一样的圆形呢？</p><hr><a id="more"></a><p>　　其实这是W3C对于<a href="https://www.w3.org/TR/css-backgrounds-3/#corner-overlap" target="_blank" rel="noopener">重合曲线</a>有这样的规范：如果两个相邻角的半径和超过了对应的</p><p>盒子的边的长度，那么浏览器要重新计算保证它们不会重合。下面我们假定一个宽</p><p>高为100px的正方形A。此时设置border-top-left-radius=100%；则正方形A会变成一个半径为100px的四分之一圆弧。 </p><p><img src="http://cdn.mydearest.cn/blog/images/radius1.png" alt="radius1"></p><p>　　然后我们再给border-top-right-radius=100%。此时相邻的角的半径已经超过了对应的盒子的边的长度。浏览器需要重新计算。重新计算的规则是同时缩放两</p><p>个圆角的半径知道他们刚好符合这个方形。</p><p>　　建议使用border-radius = 50% 来避免浏览器不必要的计算。值得注意的是在涉及到与圆角相关动画的情况下，值为50%和100%，在动画效果上会有不同。</p><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>动画效果差异<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">div&#123;</span></span><br><span class="line"><span class="undefined">  width: 100px;</span></span><br><span class="line"><span class="undefined">  height: 100px;</span></span><br><span class="line"><span class="undefined">  margin-bottom: 10px;</span></span><br><span class="line"><span class="undefined">  </span></span><br><span class="line"><span class="undefined">  transition: border-radius 3s;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.half</span>&#123;</span></span><br><span class="line"><span class="undefined">  border-radius: 50%;</span></span><br><span class="line"><span class="css">  <span class="selector-tag">background</span>: <span class="selector-id">#000</span>;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.full</span>&#123;</span></span><br><span class="line"><span class="undefined">  border-radius: 100%;</span></span><br><span class="line"><span class="css">  <span class="selector-tag">background</span>: <span class="selector-id">#f00</span>;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-class">.box1</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="undefined">  border-radius: 0;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.wrap</span>&#123;</span></span><br><span class="line"><span class="css">  <span class="selector-tag">width</span><span class="selector-pseudo">:100px</span>;</span></span><br><span class="line"><span class="undefined">  height: 250px;</span></span><br><span class="line"><span class="undefined">  border: 1px solid red;</span></span><br><span class="line"><span class="undefined">  cursor: pointer;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-class">.box2</span> <span class="selector-class">.half</span>&#123;</span></span><br><span class="line"><span class="undefined">    border-radius: 0;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">background</span>: <span class="selector-id">#000</span>;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-class">.box2</span> <span class="selector-class">.full</span>&#123;</span></span><br><span class="line"><span class="undefined">    border-radius: 0;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">background</span>: <span class="selector-id">#f00</span>;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.box2</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.half</span>&#123;</span></span><br><span class="line"><span class="undefined">  border-radius: 50%;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.box2</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.full</span>&#123;</span></span><br><span class="line"><span class="css">  <span class="selector-tag">border-radius</span><span class="selector-pseudo">:100</span>%</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'wrap box1'</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"half"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"full"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'wrap box2'</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"half"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"full"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>将鼠标移到红框内<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://mydearest.cn/2019/borderRadius%E7%99%BE%E5%88%86%E6%AF%9450%E5%92%8C100%E7%A9%B6%E7%AB%9F%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>JS函数基础</title>
      <link>http://mydearest.cn/2019/JS%E5%87%BD%E6%95%B0%E5%9F%BA%E7%A1%80.html</link>
      <guid>http://mydearest.cn/2019/JS%E5%87%BD%E6%95%B0%E5%9F%BA%E7%A1%80.html</guid>
      <pubDate>Tue, 26 Mar 2019 16:27:46 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;函数的定义&quot;&gt;&lt;a href=&quot;#函数的定义&quot; class=&quot;headerlink&quot; title=&quot;函数的定义&quot;&gt;&lt;/a&gt;函数的定义&lt;/h2&gt;&lt;p&gt;函数其实就是一个封装一段代码段的&lt;strong&gt;对象&lt;/strong&gt;，那函数名其实仅是用来引用函数对象的一个普通变量&lt;/p&gt;
&lt;p&gt;写代码的时候我们避免不了要重复用一些代码，一直重复写很耗时，而且不美观也不利于维护，因此函数的出现就是来让代码重用，便于维护。&lt;/p&gt;
&lt;p&gt;一段代码，可能被反复使用，可以定义为函数，然后调用函数来使用这段代码。&lt;/p&gt;
&lt;p&gt;在JavaScript中函数就是对象。函数不同于其他对象的决定性特点是，函数存在一个被称为[[Call]]的内部属性。内部属性无法通过代码访问而是&lt;/p&gt;
&lt;p&gt;定义了代码执行时的行为。ECMAScript为JavaScript的对象定义了多种内部属性，这些内部属性都用双重中括号来标注。&lt;/p&gt;
&lt;p&gt;[[Call]]属性是函数独有的，表明该对象可以被执行。由于仅函数拥有该属性，ECMAScript定义了typeof操作符对任何具有[[Call]]属性的对&lt;/p&gt;
&lt;p&gt;象返回 &lt;code&gt;[object Function]&lt;/code&gt;&lt;/p&gt;
&lt;hr&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="函数的定义"><a href="#函数的定义" class="headerlink" title="函数的定义"></a>函数的定义</h2><p>函数其实就是一个封装一段代码段的<strong>对象</strong>，那函数名其实仅是用来引用函数对象的一个普通变量</p><p>写代码的时候我们避免不了要重复用一些代码，一直重复写很耗时，而且不美观也不利于维护，因此函数的出现就是来让代码重用，便于维护。</p><p>一段代码，可能被反复使用，可以定义为函数，然后调用函数来使用这段代码。</p><p>在JavaScript中函数就是对象。函数不同于其他对象的决定性特点是，函数存在一个被称为[[Call]]的内部属性。内部属性无法通过代码访问而是</p><p>定义了代码执行时的行为。ECMAScript为JavaScript的对象定义了多种内部属性，这些内部属性都用双重中括号来标注。</p><p>[[Call]]属性是函数独有的，表明该对象可以被执行。由于仅函数拥有该属性，ECMAScript定义了typeof操作符对任何具有[[Call]]属性的对</p><p>象返回 <code>[object Function]</code></p><hr><a id="more"></a><h2 id="函数的创建"><a href="#函数的创建" class="headerlink" title="函数的创建"></a>函数的创建</h2><p><strong>function 声明</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> 函数名(<span class="params">参数列表</span>) </span>&#123;</span><br><span class="line">  函数体;</span><br><span class="line">  <span class="keyword">return</span> 返回值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>直接量声明</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> 函数名 = <span class="function"><span class="keyword">function</span>(<span class="params">参数列表</span>) </span>&#123;</span><br><span class="line">  函数体;</span><br><span class="line">  <span class="keyword">return</span> 返回值;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>用 new 创建</strong></p><p>因为 Function 是内置类型，本身有一个 Function 的构造函数，是内置类型，所以是可以 <code>new</code> 的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> 函数名 = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">"参数名1"</span>,<span class="string">"参数名2"</span>,...,<span class="string">"函数体; return 返回值"</span>)</span><br></pre></td></tr></table></figure><p>这里注意，参数和函数体都要用引号引起来，但是一般函数的创建都不会这样创建，以前面的两种为主，那其实前面两种的创建是存在一定的差别的，下面会提到</p><h2 id="函数的参数"><a href="#函数的参数" class="headerlink" title="函数的参数"></a>函数的参数</h2><p>函数执行时必须的数据变量，它分为显示参数(Parameters)与隐式参数(Arguments)</p><h3 id="显示参数"><a href="#显示参数" class="headerlink" title="显示参数"></a>显示参数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params">name, id</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//函数体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种直接传进来的 name 和 id 就是显示参数，也就是你能看到的。其实函数传递的参数就相当于在函数体内又声明了一个局部变量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="number">10</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params">i</span>) </span>&#123;</span><br><span class="line">  i++;</span><br><span class="line">  <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br><span class="line">fun(i);</span><br></pre></td></tr></table></figure><p>上面的代码，就相当于下面的代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="number">10</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> i = <span class="number">10</span>; <span class="comment">//这个值就是传进来的参数的值</span></span><br><span class="line">  i++;</span><br><span class="line">  <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br><span class="line">fun(i); <span class="comment">//在此处传入i</span></span><br></pre></td></tr></table></figure><h3 id="隐式参数"><a href="#隐式参数" class="headerlink" title="隐式参数"></a>隐式参数</h3><p>每个 JavaScript 函数内部都有一个对象 <code>arguments</code> 对象,其实是一个类数组的对象,它会自动接受所有传入函数的参数值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params">          </span>) </span>&#123;</span><br><span class="line">  <span class="comment">//arguments[          ]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>值得一说的是,<code>arguments</code> 有下标有长度，可以通过下标来获得传入的参数，比如 <code>arguments[0]</code> 就是第一个参数, <code>length</code> 就可以遍历这个类数组对象，但是，毕竟它不是数组，所以不能进行一些数组特有的操作，比如 <code>sort</code></p><h3 id="函数重载"><a href="#函数重载" class="headerlink" title="函数重载"></a>函数重载</h3><p>强类型语言对重载的定义：函数名相同，参数不同，或者是参数类型不同都可以叫做函数的重载。</p><p>但在js中因为 arguments 的存在，JavaScript的函数根本就不存在所谓的签名，所以重载在JavaScript中实际是不存在的。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 模拟函数重载</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">abc</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">arguments</span>.length ===<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="comment">//A</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">arguments</span>.length ===<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="comment">//B</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">abc(<span class="number">11</span>);</span><br><span class="line">abc(<span class="number">11</span>,<span class="number">22</span>);</span><br></pre></td></tr></table></figure></p><h2 id="声明提前"><a href="#声明提前" class="headerlink" title="声明提前"></a>声明提前</h2><p>在开始执行程序前,js 引擎会首先查找 <code>var</code> 声明的变量和 <code>function</code> 声明的函数，将其提前到当前作用域的顶部集中创建，而将赋值操作保留在原地,这里特别说一下,未用 <code>var</code> 声明的变量不会声明提前.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">//a is not defined</span></span><br><span class="line">a = <span class="number">10</span>;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">//undefined</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">//10</span></span><br></pre></td></tr></table></figure><p>但是在它下面声明并赋值变量 <code>a</code>,因为声明提前,其实代码会变成下面这个样子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a;</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line">a = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br></pre></td></tr></table></figure><p>这样看，一切都变得很合理。。</p><p>函数也是一样</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">fun(); <span class="comment">//2</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line">fun(); <span class="comment">//2</span></span><br></pre></td></tr></table></figure><p>控制台会输出两个 2,因为 function 声明的函数也会声明提前,代码其实是下面这个样子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line">fun(); <span class="comment">//2</span></span><br><span class="line">fun(); <span class="comment">//2</span></span><br></pre></td></tr></table></figure><p>第二次声明因为方法名字一样，后者覆盖了前者，所以再调用的时候就会调用最后这个</p><p>但是声明提前会增加程序解读的难度，因此我们在写程序时，尽量避免声明提前所带来的危害</p><h3 id="声明提前的解决方法"><a href="#声明提前的解决方法" class="headerlink" title="声明提前的解决方法"></a>声明提前的解决方法</h3><p>那我们既然知道会有声明提前这种操作，就在变量和函数的声明时都放在当前作用域的顶部。</p><p>在 ES6 中 可以用 let 代替 var,不过要求在当前作用域中 let 变量之前不允许出现声明的变量</p><p>也可以用直接量声明变量的方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fun = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">&#125;;</span><br><span class="line">fun(); <span class="comment">//1</span></span><br><span class="line"><span class="keyword">var</span> fun = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">&#125;;</span><br><span class="line">fun(); <span class="comment">//2</span></span><br></pre></td></tr></table></figure><p>这种当然也会声明提前，那我们看一下声明提前后的代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fun;</span><br><span class="line"><span class="keyword">var</span> fun;</span><br><span class="line">fun = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">&#125;;</span><br><span class="line">fun(); <span class="comment">//1</span></span><br><span class="line">fun = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">&#125;;</span><br><span class="line">fun(); <span class="comment">//2</span></span><br></pre></td></tr></table></figure><p>声明提前但是赋值还是留在原地，所以虽然有声明提前，但是并不会改变我们原本想要的结果。也就解决了声明提前带来的危害。</p><h2 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h2><p>函数创建时没有指定函数名</p><p>匿名函数使用后自动释放,会节约内存,它会划分临时作用域，避免全局变量污染全局。</p><h3 id="用处"><a href="#用处" class="headerlink" title="用处"></a>用处</h3><p><strong>callback</strong></p><p>将一个函数作为参数传入另一个函数内，被其它函数调用</p><p>举个栗子🌰</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">arr.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a - b;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str.replace(<span class="regexp">/reg/g</span>, <span class="function"><span class="keyword">function</span>(<span class="params">kw,$<span class="number">1</span>,$<span class="number">2</span>,...</span>)</span>&#123;<span class="keyword">return</span> 替换值&#125;)</span><br></pre></td></tr></table></figure><h4 id="自调"><a href="#自调" class="headerlink" title="自调"></a>自调</h4><p>定义函数后自己调用自己，调用结束后，立刻释放，不占内存</p><p>举个例子🌰</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">参数列表</span>) </span>&#123;</span><br><span class="line">  函数体;</span><br><span class="line">  <span class="keyword">return</span> 返回值;</span><br><span class="line">&#125;)(参数值列表);</span><br></pre></td></tr></table></figure><p>会定义一个临时的作用域，减少使用全局变量，避免全局污染。</p><h2 id="重载"><a href="#重载" class="headerlink" title="重载"></a>重载</h2><p>相同函数名，不同参数列表的多个函数。在调用时，根据传入参数的不同，自动选择匹配的函数执行。</p><p>这样可以减少 api 的数量，减轻调用者的负担。</p><p>听起来很诱人，但是 js 语法不支持重载，原因是 js 不允许多个同名函数同时存在，后声明的函数会覆盖前面声明的。(哇。js 不支持你在这里说什么，神经病啊).</p><p>既然说重载，那肯定是可以通过某些方法实现的。这个方法就是利用 <code>arguments</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">arguments</span>.length == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">//不传值的操作</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">arguments</span>.length == <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="comment">//传一个值进行的操作</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//....等等</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实也不是真正意义上的重载，因为并没有创建同名的多个函数，但是实现的效果是和重载差不多的。</p>]]></content:encoded>
      
      <comments>http://mydearest.cn/2019/JS%E5%87%BD%E6%95%B0%E5%9F%BA%E7%A1%80.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>NodeJSHttp加载静态资源</title>
      <link>http://mydearest.cn/2019/NodeJSHttp%E5%8A%A0%E8%BD%BD%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90.html</link>
      <guid>http://mydearest.cn/2019/NodeJSHttp%E5%8A%A0%E8%BD%BD%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90.html</guid>
      <pubDate>Mon, 11 Mar 2019 16:36:52 GMT</pubDate>
      <description>
      
        &lt;p&gt;问题场景：浏览器向后台发送请求后，后台返回一个html界面。但是在浏览器中没有加载js、css等静态资源，查找原因后发现是Content-Type的原因。浏览器不知道css、js等文件的文件格式，无法成功加载静态文件。所以，需要设置正确的文件格式。&lt;/p&gt;
&lt;hr&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>问题场景：浏览器向后台发送请求后，后台返回一个html界面。但是在浏览器中没有加载js、css等静态资源，查找原因后发现是Content-Type的原因。浏览器不知道css、js等文件的文件格式，无法成功加载静态文件。所以，需要设置正确的文件格式。</p><hr><a id="more"></a><h2 id="搭建简单的本地服务"><a href="#搭建简单的本地服务" class="headerlink" title="搭建简单的本地服务"></a>搭建简单的本地服务</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);<span class="comment">//引入http模块</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//开启服务，监听8888端口</span></span><br><span class="line"><span class="comment">//端口号最好为6000以上</span></span><br><span class="line"><span class="keyword">var</span> server = http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        req用来接受客户端数据</span></span><br><span class="line"><span class="comment">        res用来向客户端发送服务器数据</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'有客户端连接'</span>);<span class="comment">//创建连接成功显示在后台</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//一参是http请求状态，200连接成功</span></span><br><span class="line">    <span class="comment">//连接成功后向客户端写入头信息</span></span><br><span class="line">    res.writeHeader(<span class="number">200</span>,&#123;</span><br><span class="line">        <span class="string">'content-type'</span> : <span class="string">'text/html;charset="utf-8"'</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    res.write(<span class="string">'这是正文部分'</span>);<span class="comment">//显示给客户端</span></span><br><span class="line">    res.end();</span><br><span class="line"></span><br><span class="line">&#125;).listen(<span class="number">8888</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'服务器开启成功'</span>);</span><br></pre></td></tr></table></figure><h2 id="访问本地站点"><a href="#访问本地站点" class="headerlink" title="访问本地站点"></a>访问本地站点</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);<span class="comment">//引入文件读取模块</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> documentRoot = <span class="string">'E:/PhpProject/html5/websocket/www'</span>;</span><br><span class="line"><span class="comment">//需要访问的文件的存放目录</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> server= http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> url = req.url; </span><br><span class="line">    <span class="comment">//客户端输入的url，例如如果输入localhost:8888/index.html</span></span><br><span class="line">    <span class="comment">//那么这里的url == /index.html </span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> file = documentRoot + url;</span><br><span class="line">    <span class="built_in">console</span>.log(url);</span><br><span class="line">    <span class="comment">//E:/PhpProject/html5/websocket/www/index.html </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    fs.readFile( file , <span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>)</span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        一参为文件路径</span></span><br><span class="line"><span class="comment">        二参为回调函数</span></span><br><span class="line"><span class="comment">            回调函数的一参为读取错误返回的信息，返回空就没有错误</span></span><br><span class="line"><span class="comment">            二参为读取成功返回的文本内容</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">        <span class="keyword">if</span>(err)&#123;</span><br><span class="line">            res.writeHeader(<span class="number">404</span>,&#123;</span><br><span class="line">                <span class="string">'content-type'</span> : <span class="string">'text/html;charset="utf-8"'</span></span><br><span class="line">            &#125;);</span><br><span class="line">            res.write(<span class="string">'&lt;h1&gt;404错误&lt;/h1&gt;&lt;p&gt;你要找的页面不存在&lt;/p&gt;'</span>);</span><br><span class="line">            res.end();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            res.writeHeader(<span class="number">200</span>,&#123;</span><br><span class="line">                <span class="string">'content-type'</span> : <span class="string">'text/html;charset="utf-8"'</span></span><br><span class="line">            &#125;);</span><br><span class="line">            res.write(data);<span class="comment">//将index.html显示在客户端</span></span><br><span class="line">            res.end();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;).listen(<span class="number">8888</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'服务器开启成功'</span>);</span><br></pre></td></tr></table></figure><h2 id="无法加载静态文件"><a href="#无法加载静态文件" class="headerlink" title="无法加载静态文件"></a>无法加载静态文件</h2><h3 id="解决方案一"><a href="#解决方案一" class="headerlink" title="解决方案一"></a>解决方案一</h3><ul><li>手动设置Content-Type<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);<span class="comment">//引入文件读取模块</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> documentRoot = <span class="string">'./dist'</span>;</span><br><span class="line"><span class="comment">//需要访问的文件的存放目录</span></span><br><span class="line"></span><br><span class="line">http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> url = req.url; </span><br><span class="line">    <span class="comment">//客户端输入的url，例如如果输入localhost:8888/index.html</span></span><br><span class="line">    <span class="comment">//那么这里的url == /index.html </span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> file = documentRoot + url;</span><br><span class="line">    <span class="built_in">console</span>.log(file);</span><br><span class="line"></span><br><span class="line">    fs.readFile(file , <span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>)</span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        一参为文件路径</span></span><br><span class="line"><span class="comment">        二参为回调函数</span></span><br><span class="line"><span class="comment">            回调函数的一参为读取错误返回的信息，返回空就没有错误</span></span><br><span class="line"><span class="comment">            二参为读取成功返回的文本内容</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">        <span class="keyword">if</span>(err)&#123;</span><br><span class="line">            res.writeHeader(<span class="number">404</span>,&#123;</span><br><span class="line">                <span class="string">'content-type'</span> : <span class="string">'text/html;charset="utf-8"'</span></span><br><span class="line">            &#125;);</span><br><span class="line">            res.write(<span class="string">'&lt;h1&gt;404错误&lt;/h1&gt;&lt;p&gt;你要找的页面不存在&lt;/p&gt;'</span>);</span><br><span class="line">            res.end();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> type = file.substr(file.lastIndexOf(<span class="string">"."</span>)+<span class="number">1</span>,file.length)</span><br><span class="line">            res.writeHeader(<span class="number">200</span>,&#123;<span class="string">'Content-type'</span>:<span class="string">"text/"</span>+type+<span class="string">';charset="utf-8"'</span>&#125;);<span class="comment">//在这里设置文件类型，告诉浏览器解析方式</span></span><br><span class="line">            <span class="comment">// 根据后缀名判断文件类型不太准确 可以使用mime模块 mime.getType(filePath)</span></span><br><span class="line">            res.write(data);<span class="comment">//将index.html显示在客户端</span></span><br><span class="line">            res.end();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;).listen(<span class="number">8888</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'服务器开启成功'</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// // 手动设置content-type</span></span><br><span class="line"><span class="comment">// http.createServer(function(req,res)&#123;</span></span><br><span class="line"><span class="comment">// var path = req.url;</span></span><br><span class="line"><span class="comment">// console.log("path: "+path)</span></span><br><span class="line"><span class="comment">// if(path == "/")&#123;</span></span><br><span class="line"><span class="comment">// path = "/index.html";</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// sendFile(res,path);</span></span><br><span class="line"><span class="comment">// &#125;).listen(8888)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// function sendFile(res,path)&#123;</span></span><br><span class="line"><span class="comment">//   var path = process.cwd()+'/dist'+path;</span></span><br><span class="line"><span class="comment">// fs.readFile(path,function(err,stdout,stderr)&#123;</span></span><br><span class="line"><span class="comment">// if(!err)&#123;</span></span><br><span class="line"><span class="comment">// var data = stdout;</span></span><br><span class="line"><span class="comment">// var type = path.substr(path.lastIndexOf(".")+1,path.length)</span></span><br><span class="line"><span class="comment">// res.writeHead(200,&#123;'Content-type':"text/"+type+';charset="utf-8"'&#125;);//在这里设置文件类型，告诉浏览器解析方式</span></span><br><span class="line"><span class="comment">// res.write(data);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// res.end();</span></span><br><span class="line"><span class="comment">//   &#125;)</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="解决方案二"><a href="#解决方案二" class="headerlink" title="解决方案二"></a>解决方案二</h3><ul><li>使用mime模块，npm install mime.</li><li>mime.getType(filePath)</li></ul>]]></content:encoded>
      
      <comments>http://mydearest.cn/2019/NodeJSHttp%E5%8A%A0%E8%BD%BD%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>switch的块级作用域</title>
      <link>http://mydearest.cn/2019/switch%E7%9A%84%E5%9D%97%E7%BA%A7%E4%BD%9C%E7%94%A8%E5%9F%9F.html</link>
      <guid>http://mydearest.cn/2019/switch%E7%9A%84%E5%9D%97%E7%BA%A7%E4%BD%9C%E7%94%A8%E5%9F%9F.html</guid>
      <pubDate>Sat, 09 Mar 2019 16:21:30 GMT</pubDate>
      <description>
      
        &lt;p&gt;ES6 或 TS 引入了块级作用域,通过let和const、class等可以定义块级作用域里的变量，块级作用域内的变量不存在变量提升，且存在暂时性死区。常见的if语句，for循环的循环体内都可以定义块级变量。那么switch语句中的块级作用域是什么呢？ 先给出结论：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;switch语句中的块级作用域，在整个switch语句中，而不是对于每一个case生成一个独立的块级作用域。&lt;/code&gt;&lt;/p&gt;
&lt;hr&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>ES6 或 TS 引入了块级作用域,通过let和const、class等可以定义块级作用域里的变量，块级作用域内的变量不存在变量提升，且存在暂时性死区。常见的if语句，for循环的循环体内都可以定义块级变量。那么switch语句中的块级作用域是什么呢？ 先给出结论：</p><p><code>switch语句中的块级作用域，在整个switch语句中，而不是对于每一个case生成一个独立的块级作用域。</code></p><hr><a id="more"></a><p>举个栗子🌰<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> number = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">switch</span>(number)&#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">let</span> name = <span class="string">'cosyer'</span>;</span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">    <span class="built_in">console</span>.log(name)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// cosyer</span></span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> number = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">switch</span>(number)&#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">let</span> name = <span class="string">'cosyer'</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">    <span class="keyword">let</span> name = <span class="string">'yu'</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">   <span class="built_in">console</span>.log(name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Uncaught SyntaxError: Identifier 'name' has already been declared</span></span><br></pre></td></tr></table></figure><h2 id="可能存在的问题"><a href="#可能存在的问题" class="headerlink" title="可能存在的问题"></a>可能存在的问题</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> number = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">switch</span>(number)&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span> : name = <span class="string">'cosyer'</span>; <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// name虽然没有声明，但是给name赋值相当于给全局的window对象复制，也就是window.name = 'cosyer'。</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> number = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">switch</span>(number)&#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">let</span> name = <span class="string">'cosyer'</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">    name = <span class="string">'yu'</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Uncaught ReferenceError: name is not defined</span></span><br></pre></td></tr></table></figure><p>这里虽然case里面定义的块级虽然不会存在变量提升，但是会存在暂时性死区,也就是说如果let name = ‘cosyer’ 没有执行，也就是name定义的过程没有执行，那么name在整个块级作用域内都是不可用的，都是undefined。</p><p>所以尽量不要在case里定义块级变量。</p>]]></content:encoded>
      
      <comments>http://mydearest.cn/2019/switch%E7%9A%84%E5%9D%97%E7%BA%A7%E4%BD%9C%E7%94%A8%E5%9F%9F.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>深入理解instanceof</title>
      <link>http://mydearest.cn/2019/%E6%B7%B1%E5%85%A5%E4%BA%86%E8%A7%A3instanceof.html</link>
      <guid>http://mydearest.cn/2019/%E6%B7%B1%E5%85%A5%E4%BA%86%E8%A7%A3instanceof.html</guid>
      <pubDate>Fri, 08 Mar 2019 13:55:30 GMT</pubDate>
      <description>
      
        &lt;p&gt;在JS中，大家通常用&lt;code&gt;typeof&lt;/code&gt;来判断基本类型，&lt;code&gt;instanceof&lt;/code&gt;来判断引用类型。&lt;/p&gt;
&lt;h2 id=&quot;typeof&quot;&gt;&lt;a href=&quot;#typeof&quot; class=&quot;headerlink&quot; title=&quot;typeof&quot;&gt;&lt;/a&gt;typeof&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;typeof一般只能返回如下几个结果：number,boolean,string,function,object,undefined字符串&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;对于Array,null等特殊对象使用typeof一律返回object，这正是typeof的局限性。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;在判断除Object类型的对象(基本类型)时比较方便。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;instanceof&quot;&gt;&lt;a href=&quot;#instanceof&quot; class=&quot;headerlink&quot; title=&quot;instanceof&quot;&gt;&lt;/a&gt;instanceof&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;object instanceof constructor&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;instanceof 运算符用来测试一个对象在其原型链中是否存在一个构造函数的 prototype 属性。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;换种说法就是左侧的对象是否是右侧对象的实例。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;相关练习&quot;&gt;&lt;a href=&quot;#相关练习&quot; class=&quot;headerlink&quot; title=&quot;相关练习&quot;&gt;&lt;/a&gt;相关练习&lt;/h2&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&#39;123&#39;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; str = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;String&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;123&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;str &lt;span class=&quot;keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>在JS中，大家通常用<code>typeof</code>来判断基本类型，<code>instanceof</code>来判断引用类型。</p><h2 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a>typeof</h2><blockquote><p>typeof一般只能返回如下几个结果：number,boolean,string,function,object,undefined字符串</p></blockquote><blockquote><p>对于Array,null等特殊对象使用typeof一律返回object，这正是typeof的局限性。</p></blockquote><blockquote><p>在判断除Object类型的对象(基本类型)时比较方便。</p></blockquote><h2 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h2><blockquote><p>object instanceof constructor</p></blockquote><blockquote><p>instanceof 运算符用来测试一个对象在其原型链中是否存在一个构造函数的 prototype 属性。</p></blockquote><blockquote><p>换种说法就是左侧的对象是否是右侧对象的实例。</p></blockquote><h2 id="相关练习"><a href="#相关练习" class="headerlink" title="相关练习"></a>相关练习</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'123'</span> <span class="keyword">instanceof</span> <span class="built_in">String</span> <span class="comment">// true</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">'123'</span>)</span><br><span class="line">str <span class="keyword">instanceof</span> <span class="built_in">String</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure><hr><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 都是Object的实例 true</span></span><br><span class="line"><span class="built_in">console</span>.log(&#123;&#125; <span class="keyword">instanceof</span> <span class="built_in">Object</span>)</span><br><span class="line"><span class="built_in">console</span>.log([] <span class="keyword">instanceof</span> <span class="built_in">Array</span>)</span><br><span class="line"><span class="built_in">console</span>.log([] <span class="keyword">instanceof</span> <span class="built_in">Object</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125; <span class="keyword">instanceof</span> <span class="built_in">Function</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125; <span class="keyword">instanceof</span> <span class="built_in">Object</span>)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params"></span>)</span>&#123;&#125; </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">BFoo</span>(<span class="params"></span>)</span>&#123;&#125; </span><br><span class="line">Foo.prototype = <span class="keyword">new</span> BFoo();</span><br><span class="line"><span class="keyword">let</span> foo = <span class="keyword">new</span> Foo();</span><br><span class="line"><span class="built_in">console</span>.log(foo <span class="keyword">instanceof</span> Foo); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(foo <span class="keyword">instanceof</span> BFoo); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span> <span class="keyword">instanceof</span> <span class="built_in">String</span>); <span class="comment">// flase</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span> <span class="keyword">instanceof</span> <span class="built_in">Object</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span> <span class="keyword">instanceof</span> <span class="built_in">Function</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span> <span class="keyword">instanceof</span> <span class="built_in">Object</span>); </span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Function</span> <span class="keyword">instanceof</span> <span class="built_in">Function</span>); </span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Function</span> <span class="keyword">instanceof</span> <span class="built_in">Object</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params"></span>)</span>&#123;&#125; </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">BFoo</span>(<span class="params"></span>)</span>&#123;&#125; </span><br><span class="line">Foo.prototype = <span class="keyword">new</span> BFoo();</span><br><span class="line"><span class="built_in">console</span>.log(Foo <span class="keyword">instanceof</span> <span class="built_in">Function</span>);</span><br><span class="line"><span class="built_in">console</span>.log(Foo <span class="keyword">instanceof</span> Foo);</span><br></pre></td></tr></table></figure><h2 id="instanceof实现"><a href="#instanceof实现" class="headerlink" title="instanceof实现"></a>instanceof实现</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">instance_of</span>(<span class="params">L, R</span>) </span>&#123;<span class="comment">//L 表示左边的object，R 表示右边的constructor</span></span><br><span class="line"> <span class="keyword">const</span> R_P = R.prototype;<span class="comment">// 取 R 的显式原型</span></span><br><span class="line"> L = L.__proto__;<span class="comment">// 取 L 的隐式原型,并且可能会顺着原型链重新赋值</span></span><br><span class="line"> <span class="keyword">while</span> (<span class="literal">true</span>) &#123; </span><br><span class="line">   <span class="keyword">if</span> (L === <span class="literal">null</span>) </span><br><span class="line">     <span class="keyword">return</span> <span class="literal">false</span>; </span><br><span class="line">   <span class="keyword">if</span> (R_P === L)<span class="comment">// 这里重点：严格比较 true </span></span><br><span class="line">     <span class="keyword">return</span> <span class="literal">true</span>; </span><br><span class="line">   L = L.__proto__; </span><br><span class="line"> &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="重点解析"><a href="#重点解析" class="headerlink" title="重点解析"></a>重点解析</h2><p><img src="https://user-images.githubusercontent.com/25027560/37870377-2bc8211a-3007-11e8-92a0-04fa96aabf13.png" alt="原型链"></p><ul><li><p>__proto__ 属性，指向了创建该对象的构造函数的原型</p></li><li><p>所有JS对象都有 __proto__ 属性，除了Object.prototype.__proto__ === null</p></li><li><p>注意Object(),它是由function生成的，所以它的<strong>proto</strong>属性指向了function的构造器Function的原型Function.prototype</p></li><li><p>注意构造器Function,它是唯一一个prototype和<strong>proto</strong>指向相同的对象</p></li><li><p>一般来说，我们日常自行创建的构造器Foo的<strong>proto</strong>属性指向function的构造器Function的原型Function.prototype，但是构造器的原型对象Foo.prototype的<strong>proto</strong>属性是直接指向Object.prototype对象的</p></li></ul>]]></content:encoded>
      
      <comments>http://mydearest.cn/2019/%E6%B7%B1%E5%85%A5%E4%BA%86%E8%A7%A3instanceof.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>深入理解JS的继承</title>
      <link>http://mydearest.cn/2019/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JS%E7%9A%84%E7%BB%A7%E6%89%BF.html</link>
      <guid>http://mydearest.cn/2019/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JS%E7%9A%84%E7%BB%A7%E6%89%BF.html</guid>
      <pubDate>Thu, 07 Mar 2019 15:56:48 GMT</pubDate>
      <description>
      
        &lt;span itemprop=&quot;image&quot; itemscope=&quot;&quot; itemtype=&quot;http://schema.org/ImageObject&quot;&gt;&lt;img itemprop=&quot;url image&quot; src=&quot;https://user-images.githubusercontent.com/25027560/38763933-ac0fdb2a-3fd8-11e8-8510-5e8a2444f49a.png&quot; class=&quot;full-image&quot; alt=&quot;Summary&quot; title=&quot;Summary&quot;&gt;&lt;meta itemprop=&quot;width&quot; content=&quot;auto&quot;&gt;&lt;meta itemprop=&quot;height&quot; content=&quot;auto&quot;&gt;&lt;/span&gt;
&lt;hr&gt;
      
      </description>
      
      <content:encoded><![CDATA[<span itemprop="image" itemscope="" itemtype="http://schema.org/ImageObject"><img itemprop="url image" src="https://user-images.githubusercontent.com/25027560/38763933-ac0fdb2a-3fd8-11e8-8510-5e8a2444f49a.png" class="full-image" alt="Summary" title="Summary"><meta itemprop="width" content="auto"><meta itemprop="height" content="auto"></span><hr><a id="more"></a><h2 id="总览"><a href="#总览" class="headerlink" title="总览"></a>总览</h2><p><img src="https://user-images.githubusercontent.com/25027560/38763933-ac0fdb2a-3fd8-11e8-8510-5e8a2444f49a.png" alt="c5925056-aa27-4b97-9f5d-2ec786ea5125"></p><h2 id="一、借助构造函数"><a href="#一、借助构造函数" class="headerlink" title="一、借助构造函数"></a>一、借助构造函数</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = <span class="string">'parent1'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 将父类的执行上下文指向子类，父类执行时的实例属性都会指向子类</span></span><br><span class="line">  Parent1.call(<span class="keyword">this</span>);<span class="comment">// apply</span></span><br><span class="line">  <span class="keyword">this</span>.type = <span class="string">'child1'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><p>子类没有继承父类的原型方法只继承了父类构造函数中的属性和方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Parent1.prototype.method = (arg) =<span class="built_in">console</span>.log(arg);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> Child1().method); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><h2 id="二、借助原型链"><a href="#二、借助原型链" class="headerlink" title="二、借助原型链"></a>二、借助原型链</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = <span class="string">'parent2'</span>;</span><br><span class="line">  <span class="keyword">this</span>.arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">  <span class="keyword">this</span>.method = (arg) =<span class="built_in">console</span>.log(arg)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.type = <span class="string">'child2'</span></span><br><span class="line">&#125;</span><br><span class="line">Child2.prototype = <span class="keyword">new</span> Parent2();</span><br></pre></td></tr></table></figure><p>原型图如下<img src="https://user-images.githubusercontent.com/25027560/38763935-b449916e-3fd8-11e8-8b76-e12f58c20d27.png" alt="f9311957-d401-4bc0-961b-65f3f49d65ea"></p><h4 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h4><p>引用类型的属性被所有实例共享，实例之间会互相影响</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> c21 = <span class="keyword">new</span> Child2();</span><br><span class="line"><span class="keyword">let</span> c22 = <span class="keyword">new</span> Child2();</span><br><span class="line"></span><br><span class="line">c21.arr.push(<span class="number">4</span>);</span><br><span class="line"><span class="built_in">console</span>.log(c21.arr, c22.arr);</span><br><span class="line"><span class="comment">// 注意，下面是直接给实例添加method属性</span></span><br><span class="line"><span class="comment">// 只是修改了method指针，没有修改原型链上的method方法</span></span><br><span class="line"><span class="comment">// 只有修改引用对象才是真正的修改</span></span><br><span class="line">c21.method = <span class="string">'c21'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(Parent2);</span><br><span class="line"><span class="built_in">console</span>.log(c21, c22);</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/25027560/38763937-bad54c58-3fd8-11e8-9248-1f6b2954daf9.png" alt="c79f3ffe-030d-4753-9f32-361a2dffb9d2"></p><h2 id="三、组合（构造-原型链）"><a href="#三、组合（构造-原型链）" class="headerlink" title="三、组合（构造+原型链）"></a>三、组合（构造+原型链）</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent3</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = <span class="string">'parent3'</span>;</span><br><span class="line">  <span class="keyword">this</span>.arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child3</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  Parent3.call(<span class="keyword">this</span>);</span><br><span class="line">  <span class="keyword">this</span>.type = <span class="string">'child3'</span></span><br><span class="line">&#125;</span><br><span class="line">Child3.prototype = <span class="keyword">new</span> Parent3();</span><br></pre></td></tr></table></figure><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><p>每个实例不会再互相影响</p><h4 id="缺点-2"><a href="#缺点-2" class="headerlink" title="缺点"></a>缺点</h4><p>实例化时，父类被构造了两次，这没有必要call一次，new一次</p><h2 id="四、组合优化一"><a href="#四、组合优化一" class="headerlink" title="四、组合优化一"></a>四、组合优化一</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent4</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = <span class="string">'parent4'</span>;</span><br><span class="line">  <span class="keyword">this</span>.arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child4</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  Parent4.call(<span class="keyword">this</span>);</span><br><span class="line">  <span class="keyword">this</span>.type = <span class="string">'child4'</span></span><br><span class="line">&#125;</span><br><span class="line">Child4.prototype = Parent4.prototype;</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/25027560/38763939-c318a5fe-3fd8-11e8-9581-9e04e57976a4.png" alt="3dcc9c3e-5e1d-45bc-bcb5-72aaea635cc2"></p><h4 id="缺点-3"><a href="#缺点-3" class="headerlink" title="缺点"></a>缺点</h4><p>无法判断实例的构造函数是父类还是子类</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> c41 = <span class="keyword">new</span> Child4();</span><br><span class="line"><span class="keyword">let</span> c42 = <span class="keyword">new</span> Child4();</span><br><span class="line"><span class="built_in">console</span>.log(c41 <span class="keyword">instanceof</span> Child4, c41 <span class="keyword">instanceof</span> Parent4);</span><br><span class="line"><span class="comment">// true true</span></span><br></pre></td></tr></table></figure><p>但其实，构造函数就是父类本身</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(c41.constructor); <span class="comment">// Parent4</span></span><br></pre></td></tr></table></figure><p>很难得才通过<code>Parent4.call(this)</code>改变了构造函数的指向，现在又改回去了？天……不想看下去了行不行，兄dei，坚持一会就是胜利，别打瞌睡</p><p><code>Child4.prototype = Parent4.prototype</code>只是把<code>Child4</code>的<code>prototype</code>属性指针指向了<code>Parent4.prototype</code>这个引用对象而已，实际上<code>Parent4.prototype.constructor = Parent4</code><img src="https://user-images.githubusercontent.com/25027560/38763942-cdc97b40-3fd8-11e8-8f45-c7bdb95f8f5f.png" alt="af779508-30f5-43ea-8af8-ff25a308ccf9"></p><h2 id="五、组合优化二"><a href="#五、组合优化二" class="headerlink" title="五、组合优化二"></a>五、组合优化二</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent5</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = <span class="string">'parent5'</span>;</span><br><span class="line">  <span class="keyword">this</span>.arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child5</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  Parent5.call(<span class="keyword">this</span>);</span><br><span class="line">  <span class="keyword">this</span>.type = <span class="string">'child5'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 组成原型链</span></span><br><span class="line">Child5.prototype = <span class="built_in">Object</span>.create(Parent5.prototype);</span><br></pre></td></tr></table></figure><p>但是，这时候，实例对象的<code>constructor</code>依然是<code>Parent5</code></p><p><img src="https://user-images.githubusercontent.com/25027560/38763943-d3d9703a-3fd8-11e8-92d4-d161a335c80c.png" alt="f611911f-9fc1-4ff8-8da6-eb7874eeb335"></p><p>所以需要重新指定实例对象的构造器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Child5.prototype.constructor = Child5;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> c51 = <span class="keyword">new</span> Child5();</span><br><span class="line"><span class="keyword">let</span> c52 = <span class="keyword">new</span> Parent5();</span><br><span class="line"><span class="built_in">console</span>.log(c51 <span class="keyword">instanceof</span> Child5, c51 <span class="keyword">instanceof</span> Parent5);</span><br><span class="line"><span class="built_in">console</span>.log(c52 <span class="keyword">instanceof</span> Child5, c52 <span class="keyword">instanceof</span> Parent5);</span><br><span class="line"><span class="built_in">console</span>.log(c51.constructor, c52.constructor);</span><br><span class="line"><span class="comment">// true true</span></span><br><span class="line"><span class="comment">// false true</span></span><br><span class="line"><span class="comment">// Child5 Parent5</span></span><br></pre></td></tr></table></figure><h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p><a href="https://mydearest.cn/js%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1%E5%AE%9E%E7%8E%B0%E7%BB%A7%E6%89%BF.html">js创建对象实现继承</a></p>]]></content:encoded>
      
      <comments>http://mydearest.cn/2019/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JS%E7%9A%84%E7%BB%A7%E6%89%BF.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>深入理解JS的类型、值和类型转换</title>
      <link>http://mydearest.cn/2019/ECMAScript%202016%E3%80%812017%E3%80%812018%20%E6%96%B0%E7%89%B9%E6%80%A7%20.html</link>
      <guid>http://mydearest.cn/2019/ECMAScript%202016%E3%80%812017%E3%80%812018%20%E6%96%B0%E7%89%B9%E6%80%A7%20.html</guid>
      <pubDate>Wed, 06 Mar 2019 16:23:52 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/25027560/38468332-c0336d1c-3b76-11e8-93b5-94f73acab1c6.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p><img src="https://user-images.githubusercontent.com/25027560/38468332-c0336d1c-3b76-11e8-93b5-94f73acab1c6.png" alt="image"></p><hr><a id="more"></a><h2 id="一、ECMAScript-2016"><a href="#一、ECMAScript-2016" class="headerlink" title="一、ECMAScript 2016"></a>一、ECMAScript 2016</h2><h3 id="1、Array-prototype-includes"><a href="#1、Array-prototype-includes" class="headerlink" title="1、Array.prototype.includes"></a>1、Array.prototype.includes</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/includes" target="_blank" rel="noopener">Array.prototype.includes() - JavaScript | MDN</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="literal">NaN</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (arr.indexOf(<span class="number">3</span>) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="literal">true</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (arr.includes(<span class="number">3</span>)) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="literal">true</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">arr.indexOf(<span class="literal">NaN</span>)</span><br><span class="line"><span class="comment">// -1  无法识别NaN</span></span><br><span class="line">arr.includes(<span class="literal">NaN</span>);</span><br><span class="line"><span class="comment">// true   可以识别NaN</span></span><br></pre></td></tr></table></figure><h3 id="2、指数（幂）运算符"><a href="#2、指数（幂）运算符" class="headerlink" title="2、指数（幂）运算符 **"></a>2、指数（幂）运算符 **</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="comment">// 8</span></span><br><span class="line"></span><br><span class="line"><span class="number">2</span> ** <span class="number">3</span></span><br><span class="line"><span class="comment">// 8</span></span><br></pre></td></tr></table></figure><h2 id="二、ECMAScript-2017"><a href="#二、ECMAScript-2017" class="headerlink" title="二、ECMAScript 2017"></a>二、ECMAScript 2017</h2><h3 id="1、Object-values"><a href="#1、Object-values" class="headerlink" title="1、Object.values()"></a>1、Object.values()</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/values" target="_blank" rel="noopener">Object.values() - JavaScript | MDN</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">foo</span>: <span class="string">"bar"</span>, <span class="attr">baz</span>: <span class="number">42</span> &#125;;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.values(obj)); <span class="comment">// ['bar', 42]</span></span><br></pre></td></tr></table></figure><h3 id="2、Object-entries"><a href="#2、Object-entries" class="headerlink" title="2、Object.entries()"></a>2、Object.entries()</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/entries" target="_blank" rel="noopener">Object.entries() - JavaScript | MDN</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">foo</span>: <span class="string">'bar'</span>, <span class="attr">baz</span>: <span class="number">42</span> &#125;;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.entries(obj)); <span class="comment">// [ ['foo', 'bar'], ['baz', 42] ]</span></span><br></pre></td></tr></table></figure><h3 id="3、字符串填充-String-padding"><a href="#3、字符串填充-String-padding" class="headerlink" title="3、字符串填充 String padding"></a>3、字符串填充 String padding</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/padStart" target="_blank" rel="noopener">String.prototype.padStart() - JavaScript | MDN</a><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/padEnd" target="_blank" rel="noopener">String.prototype.padEnd() - JavaScript | MDN</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'abc'</span>.padStart(<span class="number">10</span>);         <span class="comment">// "       abc"</span></span><br><span class="line"><span class="string">'abc'</span>.padStart(<span class="number">10</span>, <span class="string">"foo"</span>);  <span class="comment">// "foofoofabc"</span></span><br><span class="line"><span class="string">'abc'</span>.padStart(<span class="number">6</span>,<span class="string">"123465"</span>); <span class="comment">// "123abc"</span></span><br><span class="line"><span class="string">'abc'</span>.padStart(<span class="number">8</span>, <span class="string">"0"</span>);     <span class="comment">// "00000abc"</span></span><br><span class="line"><span class="string">'abc'</span>.padStart(<span class="number">1</span>);          <span class="comment">// "abc"</span></span><br><span class="line"></span><br><span class="line"><span class="string">'abc'</span>.padEnd(<span class="number">10</span>);          <span class="comment">// "abc       "</span></span><br><span class="line"><span class="string">'abc'</span>.padEnd(<span class="number">10</span>, <span class="string">"foo"</span>);   <span class="comment">// "abcfoofoof"</span></span><br><span class="line"><span class="string">'abc'</span>.padEnd(<span class="number">6</span>, <span class="string">"123456"</span>); <span class="comment">// "abc123"</span></span><br><span class="line"><span class="string">'abc'</span>.padEnd(<span class="number">1</span>);           <span class="comment">// "abc"</span></span><br></pre></td></tr></table></figure><p>注意，Emojis和双字节字符会占据两位</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'heart'</span>.padStart(<span class="number">10</span>, <span class="string">"❤️"</span>); <span class="comment">// '❤️❤️❤heart'</span></span><br></pre></td></tr></table></figure><h3 id="4、Object-getOwnPropertyDescriptors"><a href="#4、Object-getOwnPropertyDescriptors" class="headerlink" title="4、Object.getOwnPropertyDescriptors"></a>4、Object.getOwnPropertyDescriptors</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor" target="_blank" rel="noopener">Object.getOwnPropertyDescriptor() - JavaScript | MDN</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.getOwnPropertyDescriptor(obj, prop)</span><br></pre></td></tr></table></figure><p><code>Object.getOwnPropertyDescriptor()</code>方法返回指定对象上一个自有属性对应的属性描述符。（自有属性指的是直接赋予该对象的属性，不需要从原型链上进行查找的属性）</p><h3 id="5、函数参数结尾逗号"><a href="#5、函数参数结尾逗号" class="headerlink" title="5、函数参数结尾逗号"></a>5、函数参数结尾逗号</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">a, b,</span>) </span>&#123;&#125;</span><br><span class="line"><span class="comment">// 注意，参数b后面多了个逗号，不会报语法错误</span></span><br></pre></td></tr></table></figure><h3 id="6、Async-Await"><a href="#6、Async-Await" class="headerlink" title="6、Async/Await"></a>6、Async/Await</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/async_function" target="_blank" rel="noopener">async function - JavaScript | MDN</a></p><h2 id="三、ECMAScript-2018"><a href="#三、ECMAScript-2018" class="headerlink" title="三、ECMAScript 2018"></a>三、ECMAScript 2018</h2><h3 id="1、共享内存与原子操作"><a href="#1、共享内存与原子操作" class="headerlink" title="1、共享内存与原子操作"></a>1、共享内存与原子操作</h3><p>即使有event loop的”伪多线程“和Service Worker的强力增援，但依然掩盖不了JS是单线程的事实。</p><p>共享内存与原子操作，给JS带来了多线程的功能，允许开发人员自行管理内存来开发高性能高并发的程序。</p><p>直到目前为止，我们只能通过<code>postMessage</code>在JS主线程和web worker之间通信，传输数据。</p><h3 id="2、非转义序列的模板字符串"><a href="#2、非转义序列的模板字符串" class="headerlink" title="2、非转义序列的模板字符串"></a>2、非转义序列的模板字符串</h3><p><a href="http://esnext.justjavac.com/proposal/template-literal-revision.html" target="_blank" rel="noopener">非转义序列的模板字符串 | esnext | es6 es7 es2017 es2018 es2019</a></p><h3 id="3、对象展开运算符"><a href="#3、对象展开运算符" class="headerlink" title="3、对象展开运算符"></a>3、对象展开运算符</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123; firstName, age, ...rest &#125; = &#123;</span><br><span class="line">  firstName: <span class="string">'a'</span>,</span><br><span class="line">  age: <span class="number">18</span>,</span><br><span class="line">  a: <span class="number">1</span>,</span><br><span class="line">  b: <span class="number">2</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">firstName; <span class="comment">// 'a',</span></span><br><span class="line">age; <span class="comment">// 18</span></span><br><span class="line">rest;</span><br><span class="line"><span class="comment">// 重点看这里 &#123; a: 1, b: 2 &#125;</span></span><br></pre></td></tr></table></figure><h3 id="4、Promise-prototype-finally"><a href="#4、Promise-prototype-finally" class="headerlink" title="4、Promise.prototype.finally()"></a>4、Promise.prototype.finally()</h3><h3 id="5、异步迭代器"><a href="#5、异步迭代器" class="headerlink" title="5、异步迭代器"></a>5、异步迭代器</h3><p>提供了<code>for-await-of</code>，异步迭代，等待每个promise被resolve再执行下一个</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promises = [</span><br><span class="line">  <span class="keyword">new</span> <span class="built_in">Promise</span>(resolve =resolve(<span class="number">1</span>)),</span><br><span class="line">  <span class="keyword">new</span> <span class="built_in">Promise</span>(resolve =resolve(<span class="number">2</span>)),</span><br><span class="line">  <span class="keyword">new</span> <span class="built_in">Promise</span>(resolve =resolve(<span class="number">3</span>))</span><br><span class="line">];</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// old</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">test1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> obj <span class="keyword">of</span> promises) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(obj);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">test1(); <span class="comment">// </span></span><br><span class="line"><span class="comment">// Promise &#123;&lt;resolved&gt;: 1&#125;</span></span><br><span class="line"><span class="comment">// Promise &#123;&lt;resolved&gt;: 2&#125;</span></span><br><span class="line"><span class="comment">// Promise &#123;&lt;resolved&gt;: 3&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// new</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">test2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> <span class="keyword">await</span> (<span class="keyword">const</span> obj <span class="keyword">of</span> promises) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(obj);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">test2();</span><br><span class="line"><span class="comment">// 1, 2, 3</span></span><br></pre></td></tr></table></figure><h3 id="6、正则表达式相关"><a href="#6、正则表达式相关" class="headerlink" title="6、正则表达式相关"></a>6、正则表达式相关</h3><ul><li><code>dotAll</code> 模式，使 . 可以匹配任意字符</li><li>命名捕获组，可以理解为增加一个引用</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> regex = <span class="regexp">/(\d&#123;4&#125;)-(\d&#123;2&#125;)-(\d&#123;2&#125;)/</span>;</span><br><span class="line"><span class="keyword">const</span> matchers = regex.exec(<span class="string">'2015-01-02'</span>);</span><br><span class="line">matchers[<span class="number">0</span>];    <span class="comment">// 2015-01-02</span></span><br><span class="line">matchers[<span class="number">1</span>];    <span class="comment">// 2015</span></span><br><span class="line">matchers[<span class="number">2</span>];    <span class="comment">// 01</span></span><br><span class="line">matchers[<span class="number">3</span>];    <span class="comment">// 02</span></span><br></pre></td></tr></table></figure><ul><li>反向断言 Lookbehind Assertions</li><li>Unicode转义 Unicode Property Escapes</li></ul>]]></content:encoded>
      
      <comments>http://mydearest.cn/2019/ECMAScript%202016%E3%80%812017%E3%80%812018%20%E6%96%B0%E7%89%B9%E6%80%A7%20.html#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
