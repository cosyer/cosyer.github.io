<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>cosyer&#39;s Blog</title>
    <link>http://mydearest.cn/</link>
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>陈宇的博客</description>
    <pubDate>Thu, 10 Dec 2020 12:12:20 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>实现一个网页终端</title>
      <link>http://mydearest.cn/2020/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E7%BD%91%E9%A1%B5%E7%BB%88%E7%AB%AF.html</link>
      <guid>http://mydearest.cn/2020/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E7%BD%91%E9%A1%B5%E7%BB%88%E7%AB%AF.html</guid>
      <pubDate>Tue, 08 Dec 2020 12:36:30 GMT</pubDate>
      <description>
      
        &lt;p&gt;先简单说一下原理吧，在网页上和服务器上建立一个ws连接，然后网页获取用户输入传给服务端，服务端解析用户输入，在服务端shell执行命令并将执行输出通过ws传给网页渲染到页面上。&lt;/p&gt;
&lt;p&gt;以上原理说起来简单，但是完全自己实现是不太现实的。下面我把实现用到的库和插件以及使用方式简单说一下。&lt;/p&gt;
&lt;hr&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>先简单说一下原理吧，在网页上和服务器上建立一个ws连接，然后网页获取用户输入传给服务端，服务端解析用户输入，在服务端shell执行命令并将执行输出通过ws传给网页渲染到页面上。</p><p>以上原理说起来简单，但是完全自己实现是不太现实的。下面我把实现用到的库和插件以及使用方式简单说一下。</p><hr><a id="more"></a><h2 id="xterm-js"><a href="#xterm-js" class="headerlink" title="xterm.js"></a>xterm.js</h2><p>xterm.js 是一个用来实现网页上终端UI的库。</p><p>简单的使用示例：<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"terminal"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> terminalIns = <span class="keyword">new</span> Terminal();</span></span><br><span class="line"><span class="javascript">  terminalIns.open(<span class="built_in">document</span>.getElementById(<span class="string">'terminal'</span>));</span></span><br><span class="line"><span class="actionscript">  terminalIns.write(<span class="string">'Hello from \x1B[1;3;31mxterm.js\x1B[0m $ '</span>)</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="node-pty"><a href="#node-pty" class="headerlink" title="node-pty"></a>node-pty</h2><p>node-pty 是在node.js上用户执行shell命令，并获取标准输出的仓库，可以配合xterm.js通过ws来实现远程终端。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> os = <span class="built_in">require</span>(<span class="string">'os'</span>);</span><br><span class="line"><span class="keyword">var</span> pty = <span class="built_in">require</span>(<span class="string">'node-pty'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> shell = os.platform() === <span class="string">'win32'</span> ? <span class="string">'powershell.exe'</span> : <span class="string">'bash'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ptyProcess = pty.spawn(shell, [], &#123;</span><br><span class="line">  name: <span class="string">'xterm-color'</span>,</span><br><span class="line">  cols: <span class="number">80</span>,</span><br><span class="line">  rows: <span class="number">30</span>,</span><br><span class="line">  cwd: process.env.HOME,</span><br><span class="line">  env: process.env</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">ptyProcess.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  process.stdout.write(data);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">ptyProcess.write(<span class="string">'ls\r'</span>);</span><br><span class="line">ptyProcess.resize(<span class="number">100</span>, <span class="number">40</span>);</span><br><span class="line">ptyProcess.write(<span class="string">'ls\r'</span>);</span><br></pre></td></tr></table></figure><h2 id="sockjs"><a href="#sockjs" class="headerlink" title="sockjs"></a>sockjs</h2><p>sockjs 这个没啥好说的，实现WebSocket的库。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">const</span> sockjs = <span class="built_in">require</span>(<span class="string">'sockjs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> echo = sockjs.createServer(&#123; <span class="attr">prefix</span>:<span class="string">'/echo'</span> &#125;);</span><br><span class="line">echo.on(<span class="string">'connection'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">conn</span>) </span>&#123;</span><br><span class="line">  conn.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">message</span>) </span>&#123;</span><br><span class="line">    conn.write(message);</span><br><span class="line">  &#125;);</span><br><span class="line">  conn.on(<span class="string">'close'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = http.createServer();</span><br><span class="line">echo.attach(server);</span><br><span class="line">server.listen(<span class="number">9999</span>, <span class="string">'0.0.0.0'</span>);</span><br></pre></td></tr></table></figure><h2 id="实现流程"><a href="#实现流程" class="headerlink" title="实现流程"></a>实现流程</h2><ol><li>在服务端通过sockjs起一个ws的服务</li><li>并实例化node-pty通过sockjs的ws服务来接受客户端的命令执行并将反馈通过ws输出到客户端</li><li>在网页端通过xterm.js初始化一个网页终端UI</li><li>将网页端的xterm.js实例与服务端的node-pty建立连接，这里需要用到xterm.js的一个插件xterm-addon-attach这个插件接受一个WebSocket实例作为参数与服务端建立连接</li></ol><h2 id="考试题"><a href="#考试题" class="headerlink" title="考试题"></a>考试题</h2><ol><li><p>docker命令以下哪些为高危操作 AA docker rm容器idB docker inspect容器IDC docker mv容器IDD docker rm -f镜像ID</p></li><li><p>查看容器属性的方法 CA docker infoB docker logC docker inspectD docker describe</p></li><li><p>有关docker正确的是 ABCDA docker info 可以查看到集群内容器的数量B docker ps容器ID (参数-a:显示所有容器，包括未运行的; -n: 列出最近创建的n个容器)C docker pause暂停容器中所有的进程D docker run创建一个新的容器并且启动它</p></li><li><p>构建Docker镜像应该遵循哪些原则? ABCDA 尽量选取满足需求但较小的基础系统镜像， 建议选择debian:wheezy镜像， 仅有43MB大小B 请理编译生成文件、 安装包的缓存等临时文件C 安装各个软件时候要指定准确的版本号， 并避免引入不需要的依赖D 从安全的角度考虑， 应用尽量使用系统的库和依赖</p></li><li><p>以下哪个是核心Kubernetes对象？DA PodsB ServicesC VolumesD 以上所有</p></li><li><p>1.8 版本的 Kubernetes 引入了什么？AA Taints and TolerationsB Cluster level LoggingC SecretsD Federated Clusters</p></li><li><p>Kubernetes集群数据存储在以下哪个位置？CA KUBE-API服务器B KubeletC ETCDD 以上都不是</p></li><li><p>Paas平台添加单体应用默认需要必填哪些表单项 DA 分支名称B 环境类型C 语言类型D 以上所有</p></li><li><p>Paas平台应用流状态有哪些 DA 代码质量检查B 构建镜像C 正式发布D 以上所有</p></li><li><p>Paas平台测试/发布单的提交人是指？AA 创建发起测试/发布单的人员B 操作审核测试/发布单的人员C 项目的负责人D 以上都不是</p></li></ol>]]></content:encoded>
      
      <comments>http://mydearest.cn/2020/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E7%BD%91%E9%A1%B5%E7%BB%88%E7%AB%AF.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>Nest概述</title>
      <link>http://mydearest.cn/2020/Nest%E6%A6%82%E8%BF%B0.html</link>
      <guid>http://mydearest.cn/2020/Nest%E6%A6%82%E8%BF%B0.html</guid>
      <pubDate>Mon, 30 Nov 2020 01:25:42 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;先决条件&quot;&gt;&lt;a href=&quot;#先决条件&quot; class=&quot;headerlink&quot; title=&quot;先决条件&quot;&gt;&lt;/a&gt;先决条件&lt;/h2&gt;&lt;p&gt;一分钟安装&lt;code&gt;nodejs&lt;/code&gt;，版本(&lt;strong&gt;&amp;gt;=10.13.0&lt;/strong&gt;)&lt;/p&gt;
&lt;h2 id=&quot;创建项目&quot;&gt;&lt;a href=&quot;#创建项目&quot; class=&quot;headerlink&quot; title=&quot;创建项目&quot;&gt;&lt;/a&gt;创建项目&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm i -g @nestjs/cli&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;nest new project&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;初始项目结构&quot;&gt;&lt;a href=&quot;#初始项目结构&quot; class=&quot;headerlink&quot; title=&quot;初始项目结构&quot;&gt;&lt;/a&gt;初始项目结构&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 将创建 project 目录， 安装node模块和一些其他样板文件，并将创建一个 src 目录，目录中包含几个核心文件。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;src&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── app.controller.ts &lt;span class=&quot;comment&quot;&gt;# 带有单个路由的基本控制器示例。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── app.module.ts &lt;span class=&quot;comment&quot;&gt;# 应用程序的根模块&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;└── main.ts &lt;span class=&quot;comment&quot;&gt;# 应用程序入口文件。它使用 NestFactory 用来创建 Nest 应用实例。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight ts&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// main.ts&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &amp;#123; NestFactory &amp;#125; &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;@nestjs/core&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &amp;#123; AppModule &amp;#125; &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;./app.module&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;bootstrap&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; app = &lt;span class=&quot;keyword&quot;&gt;await&lt;/span&gt; NestFactory.create(AppModule);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;await&lt;/span&gt; app.listen(&lt;span class=&quot;number&quot;&gt;3000&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;bootstrap();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;平台&quot;&gt;&lt;a href=&quot;#平台&quot; class=&quot;headerlink&quot; title=&quot;平台&quot;&gt;&lt;/a&gt;平台&lt;/h3&gt;&lt;p&gt;Nest 旨在成为一个与平台无关的框架。 通过平台，可以创建可重用的逻辑部件，开发人员可以利用这些部件来跨越多种不同类型的应用程序。 从技术
上讲，Nest 可以在创建适配器后使用任何 Node HTTP 框架。 有两个支持开箱即用的 HTTP 平台：express 和 fastify。 您可以选择最适合您
需求的产品。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;平台&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;express&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Express 是一个众所周知的 node.js 简约 Web 框架。 这是一个经过实战考验，适用于生产的库，拥有大量社区资源。 默认情况下使&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;用 &lt;code&gt;@nestjs/platform-express&lt;/code&gt; 包。 许多用户都可以使用 Express ，并且无需采取任何操作即可启用它。|
|fastify|Fastify 是一个高性能，低开销的框架，专注于提供最高的效率和速度。 在&lt;a href=&quot;https://docs.nestjs.cn/7/techniques?
id=%e6%80%a7%e8%83%bd%ef%bc%88fastify%ef%bc%89&quot;&gt;这里&lt;/a&gt;阅读如何使用它。|&lt;/p&gt;
&lt;p&gt;无论使用哪种平台，它都会暴露自己的 API。 它们分别是 NestExpressApplication 和 NestFastifyApplication。&lt;/p&gt;
&lt;p&gt;将类型传递给 NestFactory.create() 函数时，如下例所示，app 对象将具有专用于该特定平台的函数。 但是，请注意，除非您确实要访问底层平
台API，否则无需指定类型。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; app = &lt;span class=&quot;keyword&quot;&gt;await&lt;/span&gt; NestFactory.create&amp;lt;NestExpressApplication&amp;gt;(AppModule);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;运行应用程序&quot;&gt;&lt;a href=&quot;#运行应用程序&quot; class=&quot;headerlink&quot; title=&quot;运行应用程序&quot;&gt;&lt;/a&gt;运行应用程序&lt;/h3&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm run start&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// http://localhost:3000 Hello World&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="先决条件"><a href="#先决条件" class="headerlink" title="先决条件"></a>先决条件</h2><p>一分钟安装<code>nodejs</code>，版本(<strong>&gt;=10.13.0</strong>)</p><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm i -g @nestjs/cli</span><br><span class="line"></span><br><span class="line">nest new project</span><br></pre></td></tr></table></figure><h3 id="初始项目结构"><a href="#初始项目结构" class="headerlink" title="初始项目结构"></a>初始项目结构</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将创建 project 目录， 安装node模块和一些其他样板文件，并将创建一个 src 目录，目录中包含几个核心文件。</span></span><br><span class="line">src</span><br><span class="line">├── app.controller.ts <span class="comment"># 带有单个路由的基本控制器示例。</span></span><br><span class="line">├── app.module.ts <span class="comment"># 应用程序的根模块</span></span><br><span class="line">└── main.ts <span class="comment"># 应用程序入口文件。它使用 NestFactory 用来创建 Nest 应用实例。</span></span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; NestFactory &#125; <span class="keyword">from</span> <span class="string">'@nestjs/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; AppModule &#125; <span class="keyword">from</span> <span class="string">'./app.module'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">bootstrap</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> app = <span class="keyword">await</span> NestFactory.create(AppModule);</span><br><span class="line">  <span class="keyword">await</span> app.listen(<span class="number">3000</span>);</span><br><span class="line">&#125;</span><br><span class="line">bootstrap();</span><br></pre></td></tr></table></figure><h3 id="平台"><a href="#平台" class="headerlink" title="平台"></a>平台</h3><p>Nest 旨在成为一个与平台无关的框架。 通过平台，可以创建可重用的逻辑部件，开发人员可以利用这些部件来跨越多种不同类型的应用程序。 从技术上讲，Nest 可以在创建适配器后使用任何 Node HTTP 框架。 有两个支持开箱即用的 HTTP 平台：express 和 fastify。 您可以选择最适合您需求的产品。</p><table><thead><tr><th style="text-align:left">平台</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">express</td><td style="text-align:left">Express 是一个众所周知的 node.js 简约 Web 框架。 这是一个经过实战考验，适用于生产的库，拥有大量社区资源。 默认情况下使</td></tr></tbody></table><p>用 <code>@nestjs/platform-express</code> 包。 许多用户都可以使用 Express ，并且无需采取任何操作即可启用它。||fastify|Fastify 是一个高性能，低开销的框架，专注于提供最高的效率和速度。 在<a href="https://docs.nestjs.cn/7/techniques?id=%e6%80%a7%e8%83%bd%ef%bc%88fastify%ef%bc%89">这里</a>阅读如何使用它。|</p><p>无论使用哪种平台，它都会暴露自己的 API。 它们分别是 NestExpressApplication 和 NestFastifyApplication。</p><p>将类型传递给 NestFactory.create() 函数时，如下例所示，app 对象将具有专用于该特定平台的函数。 但是，请注意，除非您确实要访问底层平台API，否则无需指定类型。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> app = <span class="keyword">await</span> NestFactory.create&lt;NestExpressApplication&gt;(AppModule);</span><br></pre></td></tr></table></figure><h3 id="运行应用程序"><a href="#运行应用程序" class="headerlink" title="运行应用程序"></a>运行应用程序</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm run start</span><br><span class="line"></span><br><span class="line"><span class="comment">// http://localhost:3000 Hello World</span></span><br></pre></td></tr></table></figure><hr><a id="more"></a><h2 id="控制器"><a href="#控制器" class="headerlink" title="控制器"></a>控制器</h2><blockquote><p>控制器负责处理传入的 请求 和向客户端返回 响应 。</p></blockquote><p><img src="http://cdn.mydearest.cn/blog/images/nest-controller.png" alt="控制器"></p><p>控制器的目的是接收应用的特定请求。路由机制控制哪个控制器接收哪些请求。通常，每个控制器有多个路由，不同的路由可以执行不同的操作。</p><p>为了创建一个基本的控制器，我们使用类和装饰器。装饰器将类与所需的元数据相关联，并使 Nest 能够创建路由映射（将请求绑定到相应的控制器）。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// cats.controller.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; Controller, Get &#125; <span class="keyword">from</span> <span class="string">'@nestjs/common'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Request &#125; <span class="keyword">from</span> <span class="string">'express'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span>(<span class="string">'cats'</span>)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> CatsController &#123;</span><br><span class="line">  <span class="meta">@Get</span>()</span><br><span class="line">  findAll(<span class="meta">@Req</span>() request: Request): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'This action returns all cats'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>要使用 CLI 创建控制器，只需执行 <code>nest g controller cats</code> 命令。为了在 express 中使用 Typescript （如 request: Request 上面的参数示例所示），请安装 @types/express 。</p></blockquote><ul><li>装饰器和普通表达对象的比较|装饰器|普通表达对象||:—|:—||@Request()|req||@Response() @Res()*|res||@Next()|next||@Session()|req.session||@Param(key?: string)|req.params / req.params[key]||@Body(key?: string)|req.body / req.body[key]||@Query(key?: string)|req.query / req.query[key]||@Headers(name?: string)|req.headers / req.headers[name]||@Ip()|req.ip|</li></ul><h3 id="Http请求方法"><a href="#Http请求方法" class="headerlink" title="Http请求方法"></a>Http请求方法</h3><ul><li>@Get()</li><li>@Post()</li><li>@Put()</li><li>@Options()</li><li>@Patch()</li><li>@Delete()</li><li>@Head()</li><li>@All()</li></ul><h3 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Get</span>(<span class="string">'ab*cd'</span>)</span><br><span class="line">findAll() &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'This route uses a wildcard'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="状态码-响应头"><a href="#状态码-响应头" class="headerlink" title="状态码/响应头"></a>状态码/响应头</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; HttpCode, Header &#125; <span class="keyword">from</span> <span class="string">'@nestjs/common'</span>;</span><br><span class="line"><span class="meta">@Post</span>()</span><br><span class="line"><span class="meta">@HttpCode</span>(<span class="number">204</span>)</span><br><span class="line"><span class="meta">@Header</span>(<span class="string">'Cache-Control'</span>, <span class="string">'none'</span>)</span><br><span class="line">create() &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'This action adds a new cat'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Get</span>()</span><br><span class="line"><span class="meta">@Redirect</span>(<span class="string">'https://nestjs.com'</span>, <span class="number">301</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 动态重定向</span></span><br><span class="line"><span class="meta">@Get</span>(<span class="string">'docs'</span>)</span><br><span class="line"><span class="meta">@Redirect</span>(<span class="string">'https://docs.nestjs.com'</span>, <span class="number">302</span>)</span><br><span class="line">getDocs(<span class="meta">@Query</span>(<span class="string">'version'</span>) version) &#123;</span><br><span class="line">  <span class="keyword">if</span> (version &amp;&amp; version === <span class="string">'5'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; url: <span class="string">'https://docs.nestjs.com/v5/'</span> &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="路由参数"><a href="#路由参数" class="headerlink" title="路由参数"></a>路由参数</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Get</span>(<span class="string">':id'</span>)</span><br><span class="line">findOne(<span class="meta">@Param</span>() params): <span class="built_in">string</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(params.id);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`This action returns a #<span class="subst">$&#123;params.id&#125;</span> cat`</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="子域路由"><a href="#子域路由" class="headerlink" title="子域路由"></a>子域路由</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span>(&#123; host: <span class="string">'admin.example.com'</span> &#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AdminController &#123;</span><br><span class="line">  <span class="meta">@Get</span>()</span><br><span class="line">  index(): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Admin page'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>因为 Fastify 缺乏对嵌套路由器的支持，当使用子域路由时，应该使用(默认) Express 适配器。</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span>(&#123; host: <span class="string">':account.example.com'</span> &#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AccountController &#123;</span><br><span class="line"><span class="meta">@Get</span>()</span><br><span class="line">getInfo(<span class="meta">@HostParam</span>(<span class="string">'account'</span>) account: <span class="built_in">string</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> account;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Async-await"><a href="#Async-await" class="headerlink" title="Async/await"></a>Async/await</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Get</span>()</span><br><span class="line"><span class="keyword">async</span> findAll(): <span class="built_in">Promise</span>&lt;<span class="built_in">any</span>[]&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> [];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// RxJS observable 流</span></span><br><span class="line"><span class="meta">@Get</span>()</span><br><span class="line">findAll(): Observable&lt;<span class="built_in">any</span>[]&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> of([]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="请求负载"><a href="#请求负载" class="headerlink" title="请求负载"></a>请求负载</h3><ul><li>DTO(数据传输对象)模式</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// create-cat.dto.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> CreateCatDto &#123;</span><br><span class="line">  readonly name: <span class="built_in">string</span>;</span><br><span class="line">  readonly age: <span class="built_in">number</span>;</span><br><span class="line">  readonly breed: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Post</span>()</span><br><span class="line"><span class="keyword">async</span> create(<span class="meta">@Body</span>() createCatDto: CreateCatDto) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'This action adds a new cat'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注册controller"><a href="#注册controller" class="headerlink" title="注册controller"></a>注册controller</h3><p>控制器已经准备就绪，可以使用，但是 Nest 不知道 CatsController 是否存在，所以它不会创建这个类的一个实例。</p><p>控制器总是属于模块，这就是为什么我们将 controllers 数组保存在 @module() 装饰器中。<figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app.module.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; Module &#125; <span class="keyword">from</span> <span class="string">'@nestjs/common'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; CatsController &#125; <span class="keyword">from</span> <span class="string">'./cats/cats.controller'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Module</span>(&#123;</span><br><span class="line">  controllers: [CatsController],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppModule &#123;&#125;</span><br></pre></td></tr></table></figure></p><h2 id="提供者"><a href="#提供者" class="headerlink" title="提供者"></a>提供者</h2><blockquote><p>Providers 是 Nest 的一个基本概念。许多基本的 Nest 类可能被视为 provider - service, repository, factory, helper 等等。 他们都可以通过 constructor 注入依赖关系。 这意味着对象可以彼此创建各种关系，并且“连接”对象实例的功能在很大程度上可以委托给 Nest运行时系统。 Provider 只是一个用 @Injectable() 装饰器注释的类。</p></blockquote><p><img src="http://cdn.mydearest.cn/blog/images/nest-provider.png" alt=""></p><h3 id="服务"><a href="#服务" class="headerlink" title="服务"></a>服务</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// interfaces/cat.interface.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> Cat &#123;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">  age: <span class="built_in">number</span>;</span><br><span class="line">  breed: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// cats.service.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; Injectable &#125; <span class="keyword">from</span> <span class="string">'@nestjs/common'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Cat &#125; <span class="keyword">from</span> <span class="string">'./interfaces/cat.interface'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> CatsService &#123;</span><br><span class="line">  <span class="keyword">private</span> readonly cats: Cat[] = [];</span><br><span class="line"></span><br><span class="line">  create(cat: Cat) &#123;</span><br><span class="line">    <span class="keyword">this</span>.cats.push(cat);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  findAll(): Cat[] &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.cats;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>要使用 CLI 创建服务类，只需执行 <code>nest g service cats</code> 命令。</p></blockquote><h3 id="controller中注入使用"><a href="#controller中注入使用" class="headerlink" title="controller中注入使用"></a>controller中注入使用</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Controller, Get, Post, Body &#125; <span class="keyword">from</span> <span class="string">'@nestjs/common'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; CreateCatDto &#125; <span class="keyword">from</span> <span class="string">'./dto/create-cat.dto'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; CatsService &#125; <span class="keyword">from</span> <span class="string">'./cats.service'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Cat &#125; <span class="keyword">from</span> <span class="string">'./interfaces/cat.interface'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span>(<span class="string">'cats'</span>)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> CatsController &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="keyword">private</span> catsService: CatsService</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Post</span>()</span><br><span class="line">  <span class="keyword">async</span> create(<span class="meta">@Body</span>() createCatDto: CreateCatDto) &#123;</span><br><span class="line">    <span class="keyword">this</span>.catsService.create(createCatDto);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Get</span>()</span><br><span class="line">  <span class="keyword">async</span> findAll(): <span class="built_in">Promise</span>&lt;Cat[]&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.catsService.findAll();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="基于属性的注入"><a href="#基于属性的注入" class="headerlink" title="基于属性的注入"></a>基于属性的注入</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Injectable, Inject &#125; <span class="keyword">from</span> <span class="string">'@nestjs/common'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> HttpService&lt;T&gt; &#123;</span><br><span class="line">  <span class="meta">@Inject</span>(<span class="string">'HTTP_OPTIONS'</span>)</span><br><span class="line">  <span class="keyword">private</span> readonly httpClient: T;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注册提供者-服务"><a href="#注册提供者-服务" class="headerlink" title="注册提供者/服务"></a>注册提供者/服务</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Module &#125; <span class="keyword">from</span> <span class="string">'@nestjs/common'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; CatsController &#125; <span class="keyword">from</span> <span class="string">'./cats/cats.controller'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; CatsService &#125; <span class="keyword">from</span> <span class="string">'./cats/cats.service'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Module</span>(&#123;</span><br><span class="line">  controllers: [CatsController],</span><br><span class="line">  providers: [CatsService],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppModule &#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">src</span><br><span class="line">├── cats</span><br><span class="line">│    ├──dto</span><br><span class="line">│    │   └──create-cat.dto.ts</span><br><span class="line">│    ├── interfaces</span><br><span class="line">│    │       └──cat.interface.ts</span><br><span class="line">│    ├──cats.service.ts</span><br><span class="line">│    └──cats.controller.ts</span><br><span class="line">├──app.module.ts</span><br><span class="line">└──main.ts</span><br></pre></td></tr></table></figure><h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><blockquote><p>模块是具有 @Module() 装饰器的类。 @Module() 装饰器提供了元数据，Nest 用它来组织应用程序结构。</p></blockquote><p><img src="http://cdn.mydearest.cn/blog/images/nest-module.png" alt="模块"></p><p>@module() 装饰器接受一个描述模块属性的对象：</p><ul><li>providers    由 Nest 注入器实例化的提供者，并且可以至少在整个模块中共享</li><li>controllers    必须创建的一组控制器</li><li>imports    导入模块的列表，这些模块导出了此模块中所需提供者</li><li>exports    由本模块提供并应在其他模块中可用的提供者的子集。</li></ul><h3 id="细分功能模块"><a href="#细分功能模块" class="headerlink" title="细分功能模块"></a>细分功能模块</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// cats/cats.module.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; Module &#125; <span class="keyword">from</span> <span class="string">'@nestjs/common'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; CatsController &#125; <span class="keyword">from</span> <span class="string">'./cats.controller'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; CatsService &#125; <span class="keyword">from</span> <span class="string">'./cats.service'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Module</span>(&#123;</span><br><span class="line">  controllers: [CatsController],</span><br><span class="line">  providers: [CatsService],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> CatsModule &#123;&#125;</span><br></pre></td></tr></table></figure><blockquote><p>要使用 CLI 创建模块，只需执行 <code>nest g module cats</code> 命令。</p></blockquote><ul><li>导入到根模块<figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Module &#125; <span class="keyword">from</span> <span class="string">'@nestjs/common'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; CatsModule &#125; <span class="keyword">from</span> <span class="string">'./cats/cats.module'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Module</span>(&#123;</span><br><span class="line">  imports: [CatsModule],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> ApplicationModule &#123;&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="目录结构-1"><a href="#目录结构-1" class="headerlink" title="目录结构"></a>目录结构</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">src</span><br><span class="line">├──cats</span><br><span class="line">│    ├──dto</span><br><span class="line">│    │   └──create-cat.dto.ts</span><br><span class="line">│    ├──interfaces</span><br><span class="line">│    │     └──cat.interface.ts</span><br><span class="line">│    ├─cats.service.ts</span><br><span class="line">│    ├─cats.controller.ts</span><br><span class="line">│    └──cats.module.ts</span><br><span class="line">├──app.module.ts</span><br><span class="line">└──main.ts</span><br></pre></td></tr></table></figure><h3 id="共享模块"><a href="#共享模块" class="headerlink" title="共享模块"></a>共享模块</h3><p>在 Nest 中，默认情况下，模块是单例，因此您可以轻松地在多个模块之间共享同一个提供者实例。<img src="http://cdn.mydearest.cn/blog/images/nest-shared.png" alt="共享模块"></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// cats.module.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; Module &#125; <span class="keyword">from</span> <span class="string">'@nestjs/common'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; CatsController &#125; <span class="keyword">from</span> <span class="string">'./cats.controller'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; CatsService &#125; <span class="keyword">from</span> <span class="string">'./cats.service'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Module</span>(&#123;</span><br><span class="line">  controllers: [CatsController],</span><br><span class="line">  providers: [CatsService],</span><br><span class="line">  exports: [CatsService]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> CatsModule &#123;&#125;</span><br></pre></td></tr></table></figure><blockquote><p>现在，每个导入 CatsModule 的模块都可以访问 CatsService ，并且它们将共享相同的 CatsService 实例。</p></blockquote><h3 id="模块导出"><a href="#模块导出" class="headerlink" title="模块导出"></a>模块导出</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Module</span>(&#123;</span><br><span class="line">  imports: [CommonModule],</span><br><span class="line">  exports: [CommonModule],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> CoreModule &#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Module &#125; <span class="keyword">from</span> <span class="string">'@nestjs/common'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; CatsController &#125; <span class="keyword">from</span> <span class="string">'./cats.controller'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; CatsService &#125; <span class="keyword">from</span> <span class="string">'./cats.service'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Module</span>(&#123;</span><br><span class="line">  controllers: [CatsController],</span><br><span class="line">  providers: [CatsService],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> CatsModule &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="keyword">private</span> readonly catsService: CatsService</span>) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>但是，由于循环依赖性，模块类不能注入到提供者中。</p></blockquote><h3 id="全局模块"><a href="#全局模块" class="headerlink" title="全局模块"></a>全局模块</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Module, Global &#125; <span class="keyword">from</span> <span class="string">'@nestjs/common'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; CatsController &#125; <span class="keyword">from</span> <span class="string">'./cats.controller'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; CatsService &#125; <span class="keyword">from</span> <span class="string">'./cats.service'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Global</span>()</span><br><span class="line"><span class="meta">@Module</span>(&#123;</span><br><span class="line">  controllers: [CatsController],</span><br><span class="line">  providers: [CatsService],</span><br><span class="line">  exports: [CatsService],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> CatsModule &#123;&#125;</span><br></pre></td></tr></table></figure><p>@Global 装饰器使模块成为全局作用域。 全局模块应该只注册一次，最好由根或核心模块注册。 在上面的例子中，CatsService 组件将无处不在，而想要使用 CatsService 的模块则不需要在 imports 数组中导入 CatsModule。</p><blockquote><p>使一切全局化并不是一个好的解决方案。 全局模块可用于减少必要模板文件的数量。 imports 数组仍然是使模块 API 透明的最佳方式。</p></blockquote><h3 id="动态模块"><a href="#动态模块" class="headerlink" title="动态模块"></a>动态模块</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Module, DynamicModule &#125; <span class="keyword">from</span> <span class="string">'@nestjs/common'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; createDatabaseProviders &#125; <span class="keyword">from</span> <span class="string">'./database.providers'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Connection &#125; <span class="keyword">from</span> <span class="string">'./connection.provider'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Module</span>(&#123;</span><br><span class="line">  providers: [Connection],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> DatabaseModule &#123;</span><br><span class="line">  <span class="comment">// forRoot() 可以同步或异步（Promise）返回动态模块。</span></span><br><span class="line">  <span class="keyword">static</span> forRoot(entities = [], options?): DynamicModule &#123;</span><br><span class="line">    <span class="keyword">const</span> providers = createDatabaseProviders(options, entities);</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="comment">// global: true,</span></span><br><span class="line">      <span class="keyword">module</span>: DatabaseModule,</span><br><span class="line">      providers: providers,</span><br><span class="line">      exports: providers,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Module &#125; <span class="keyword">from</span> <span class="string">'@nestjs/common'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; DatabaseModule &#125; <span class="keyword">from</span> <span class="string">'./database/database.module'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; User &#125; <span class="keyword">from</span> <span class="string">'./users/entities/user.entity'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Module</span>(&#123;</span><br><span class="line">  imports: [DatabaseModule.forRoot([User])],</span><br><span class="line">  exports: [DatabaseModule], <span class="comment">// 省略forRoot方法的调用</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppModule &#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h2><blockquote><p>中间件是在路由处理程序之前调用的函数。中间件函数可以访问请求和响应对象，以及应用程序请求响应周期中的 <code>next()</code> 中间件函数。next()中间件函数通常由名为next的变量表示。</p></blockquote><p><img src="http://cdn.mydearest.cn/blog/images/nest-middleware.png" alt="中间件"></p><blockquote><p>Nest 中间件实际上等价于 express 中间件。 </p></blockquote><ul><li>中间件函数可以执行以下任务:</li></ul><ol><li>执行任何代码。</li><li>对请求和响应对象进行更改。</li><li>结束请求-响应周期。</li><li>调用堆栈中的下一个中间件函数。</li><li>如果当前的中间件函数没有结束请求-响应周期, 它必须调用 next() 将控制传递给下一个中间件函数。否则, 请求将被挂起。</li></ol><h3 id="实现一个简单的日志中间件"><a href="#实现一个简单的日志中间件" class="headerlink" title="实现一个简单的日志中间件"></a>实现一个简单的日志中间件</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Injectable, NestMiddleware &#125; <span class="keyword">from</span> <span class="string">'@nestjs/common'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Request, Response &#125; <span class="keyword">from</span> <span class="string">'express'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> LoggerMiddleware <span class="keyword">implements</span> NestMiddleware &#123;</span><br><span class="line">  use(req: Request, res: Response, next: <span class="built_in">Function</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Request...'</span>);</span><br><span class="line">    next();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="依赖注入-1"><a href="#依赖注入-1" class="headerlink" title="依赖注入"></a>依赖注入</h3><p>Nest中间件完全支持依赖注入。 就像提供者和控制器一样，它们能够注入属于同一模块的依赖项（通过 constructor ）。</p><h3 id="应用中间件"><a href="#应用中间件" class="headerlink" title="应用中间件"></a>应用中间件</h3><p>中间件不能在 @Module() 装饰器中列出。我们必须使用模块类的 configure() 方法来设置它们。包含中间件的模块必须实现 NestModule 接口。我们将 LoggerMiddleware 设置在 ApplicationModule 层上。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app.module.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; Module, NestModule, RequestMethod, MiddlewareConsumer &#125; <span class="keyword">from</span> <span class="string">'@nestjs/common'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; LoggerMiddleware &#125; <span class="keyword">from</span> <span class="string">'./common/middleware/logger.middleware'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; CatsModule &#125; <span class="keyword">from</span> <span class="string">'./cats/cats.module'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Module</span>(&#123;</span><br><span class="line">  imports: [CatsModule],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppModule <span class="keyword">implements</span> NestModule &#123;</span><br><span class="line">  configure(consumer: MiddlewareConsumer) &#123;</span><br><span class="line">    consumer</span><br><span class="line">      .apply(LoggerMiddleware)</span><br><span class="line">      .forRoutes(<span class="string">'cats'</span>);</span><br><span class="line">      <span class="comment">// 限制为特定方法</span></span><br><span class="line">      <span class="comment">// .forRoutes(&#123; path: 'cats', method: RequestMethod.GET &#125;);</span></span><br><span class="line">      <span class="comment">// MiddlewareConsumer 中间件消费者</span></span><br><span class="line">      <span class="comment">// 要排除的路由</span></span><br><span class="line">      <span class="comment">// .exclude(</span></span><br><span class="line">      <span class="comment">//   &#123; path: 'cats', method: RequestMethod.GET &#125;,</span></span><br><span class="line">      <span class="comment">//   &#123; path: 'cats', method: RequestMethod.POST &#125;,</span></span><br><span class="line">      <span class="comment">//   'cats/(.*)',</span></span><br><span class="line">      <span class="comment">// )</span></span><br><span class="line">      <span class="comment">// .forRoutes(CatsController);</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="函数式中间件"><a href="#函数式中间件" class="headerlink" title="函数式中间件"></a>函数式中间件</h3><p>我们使用的 LoggerMiddleware 类非常简单。它没有成员，没有额外的方法，没有依赖关系。为什么我们不能只使用一个简单的函数？</p><blockquote><p>中间件没有任何依赖关系时，我们可以考虑使用函数式中间件。</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// logger.middleware.ts改成</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">logger</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`Request...`</span>);</span><br><span class="line">  next();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line">consumer</span><br><span class="line">  .apply(logger)</span><br><span class="line">  .forRoutes(CatsController);</span><br></pre></td></tr></table></figure><h3 id="多个中间件"><a href="#多个中间件" class="headerlink" title="多个中间件"></a>多个中间件</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">consumer.apply(cors(), helmet(), logger).forRoutes(CatsController);</span><br></pre></td></tr></table></figure><h3 id="全局中间件"><a href="#全局中间件" class="headerlink" title="全局中间件"></a>全局中间件</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// INestApplication实例提供的 use()方法</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">await</span> NestFactory.create(AppModule);</span><br><span class="line">app.use(logger);</span><br><span class="line"><span class="keyword">await</span> app.listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure><h2 id="异常过滤器"><a href="#异常过滤器" class="headerlink" title="异常过滤器"></a>异常过滤器</h2><blockquote><p>内置的异常层负责处理整个应用程序中的所有抛出的异常。当捕获到未处理的异常时，最终用户将收到友好的响应。</p></blockquote><p><img src="http://cdn.mydearest.cn/blog/images/nest-filter.png" alt="异常过滤器"></p><p>此操作由内置的全局异常过滤器执行，该过滤器处理类型 HttpException（及其子类）的异常。每个发生的异常都由全局异常过滤器处理, 当这个异常无法被识别时 (既不是 HttpException 也不是继承的类 HttpException ) , 用户将收到以下 JSON 响应</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"statusCode"</span>: <span class="number">500</span>,</span><br><span class="line">  <span class="string">"message"</span>: <span class="string">"Internal server error"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="基础异常类-HttpException"><a href="#基础异常类-HttpException" class="headerlink" title="基础异常类 HttpException"></a>基础异常类 HttpException</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Get</span>()</span><br><span class="line"><span class="keyword">async</span> findAll() &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> HttpException(<span class="string">'Forbidden'</span>, HttpStatus.FORBIDDEN);</span><br><span class="line">  <span class="comment">// throw new HttpException(&#123;</span></span><br><span class="line">  <span class="comment">//   status: HttpStatus.FORBIDDEN,</span></span><br><span class="line">  <span class="comment">//   error: 'This is a custom message',</span></span><br><span class="line">  <span class="comment">// &#125;, HttpStatus.FORBIDDEN);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//   "status": 403,</span></span><br><span class="line"><span class="comment">//   "error": "This is a custom message"</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure><h3 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> ForbiddenException <span class="keyword">extends</span> HttpException &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">super</span>(<span class="string">'Forbidden'</span>, HttpStatus.FORBIDDEN);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="meta">@Get</span>()</span><br><span class="line"><span class="keyword">async</span> findAll() &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> ForbiddenException();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="内置HTTP异常"><a href="#内置HTTP异常" class="headerlink" title="内置HTTP异常"></a>内置HTTP异常</h3><p>Nest 提供了一系列继承自核心异常 HttpException 的可用异常。</p><ul><li>BadRequestException</li><li>UnauthorizedException</li><li>NotFoundException</li><li>ForbiddenException</li><li>NotAcceptableException</li><li>RequestTimeoutException</li><li>ConflictException</li><li>GoneException</li><li>PayloadTooLargeException</li><li>UnsupportedMediaTypeException</li><li>UnprocessableException</li><li>InternalServerErrorException</li><li>NotImplementedException</li><li>BadGatewayException</li><li>ServiceUnavailableException</li><li>GatewayTimeoutException</li></ul><h3 id="异常过滤器-1"><a href="#异常过滤器-1" class="headerlink" title="异常过滤器"></a>异常过滤器</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// http-exception.filter.ts   </span></span><br><span class="line"><span class="keyword">import</span> &#123; ExceptionFilter, Catch, ArgumentsHost, HttpException &#125; <span class="keyword">from</span> <span class="string">'@nestjs/common'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Request, Response &#125; <span class="keyword">from</span> <span class="string">'express'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// @Catch() 装饰器绑定所需的元数据到异常过滤器上。它告诉 Nest这个特定的过滤器正在寻找 HttpException 而不是其他的。</span></span><br><span class="line"><span class="comment">// 在实践中，@Catch() 可以传递多个参数，所以你可以通过逗号分隔来为多个类型的异常设置过滤器。</span></span><br><span class="line"><span class="meta">@Catch</span>(HttpException)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> HttpExceptionFilter <span class="keyword">implements</span> ExceptionFilter &#123;</span><br><span class="line">  <span class="keyword">catch</span>(exception: HttpException, host: ArgumentsHost) &#123;</span><br><span class="line">    <span class="comment">// ArgumentsHost参数主机是一个功能强大的实用程序对象  来获取所需的 Request 和 Response 对象</span></span><br><span class="line">    <span class="keyword">const</span> ctx = host.switchToHttp();</span><br><span class="line">    <span class="keyword">const</span> response = ctx.getResponse&lt;Response&gt;();</span><br><span class="line">    <span class="keyword">const</span> request = ctx.getRequest&lt;Request&gt;();</span><br><span class="line">    <span class="keyword">const</span> status = exception.getStatus();</span><br><span class="line"></span><br><span class="line">    response</span><br><span class="line">      .status(status)</span><br><span class="line">      .json(&#123;</span><br><span class="line">        statusCode: status,</span><br><span class="line">        timestamp: <span class="keyword">new</span> <span class="built_in">Date</span>().toISOString(),</span><br><span class="line">        path: request.url,</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>所有异常过滤器都应该实现通用的 ExceptionFilter<T> 接口。它需要你使用有效签名提供 catch(exception: T, host: ArgumentsHost)方法。T 表示异常的类型。</T></p></blockquote><h3 id="绑定过滤器"><a href="#绑定过滤器" class="headerlink" title="绑定过滤器"></a>绑定过滤器</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// cats.controller.ts</span></span><br><span class="line"><span class="meta">@Post</span>()</span><br><span class="line"><span class="meta">@UseFilters</span>(<span class="keyword">new</span> HttpExceptionFilter())</span><br><span class="line"><span class="keyword">async</span> create(<span class="meta">@Body</span>() createCatDto: CreateCatDto) &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> ForbiddenException();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Post</span>()</span><br><span class="line"><span class="comment">// 也可以不实例化</span></span><br><span class="line"><span class="meta">@UseFilters</span>(HttpExceptionFilter)</span><br><span class="line"><span class="keyword">async</span> create(<span class="meta">@Body</span>() createCatDto: CreateCatDto) &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> ForbiddenException();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 作用于整个controller</span></span><br><span class="line"><span class="meta">@UseFilters</span>(<span class="keyword">new</span> HttpExceptionFilter())</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> CatsController &#123;&#125;</span><br></pre></td></tr></table></figure><blockquote><p>尽可能使用类而不是实例。由于 Nest 可以轻松地在整个模块中重复使用同一类的实例，因此可以减少内存使用。</p></blockquote><h3 id="全局过滤器"><a href="#全局过滤器" class="headerlink" title="全局过滤器"></a>全局过滤器</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">bootstrap</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> app = <span class="keyword">await</span> NestFactory.create(AppModule);</span><br><span class="line">  app.useGlobalFilters(<span class="keyword">new</span> HttpExceptionFilter());</span><br><span class="line">  <span class="keyword">await</span> app.listen(<span class="number">3000</span>);</span><br><span class="line">&#125;</span><br><span class="line">bootstrap();</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 模块设置过滤器</span></span><br><span class="line"><span class="keyword">import</span> &#123; Module &#125; <span class="keyword">from</span> <span class="string">'@nestjs/common'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; APP_FILTER &#125; <span class="keyword">from</span> <span class="string">'@nestjs/core'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Module</span>(&#123;</span><br><span class="line">  providers: [</span><br><span class="line">    &#123;</span><br><span class="line">      provide: APP_FILTER,</span><br><span class="line">      useClass: HttpExceptionFilter,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppModule &#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="捕获异常"><a href="#捕获异常" class="headerlink" title="捕获异常"></a>捕获异常</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// any-exception.filter.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  ExceptionFilter,</span><br><span class="line">  Catch,</span><br><span class="line">  ArgumentsHost,</span><br><span class="line">  HttpException,</span><br><span class="line">  HttpStatus,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'@nestjs/common'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Catch</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AllExceptionsFilter <span class="keyword">implements</span> ExceptionFilter &#123;</span><br><span class="line">  <span class="keyword">catch</span>(exception: unknown, host: ArgumentsHost) &#123;</span><br><span class="line">    <span class="keyword">const</span> ctx = host.switchToHttp();</span><br><span class="line">    <span class="keyword">const</span> response = ctx.getResponse();</span><br><span class="line">    <span class="keyword">const</span> request = ctx.getRequest();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> status =</span><br><span class="line">      exception <span class="keyword">instanceof</span> HttpException</span><br><span class="line">        ? exception.getStatus()</span><br><span class="line">        : HttpStatus.INTERNAL_SERVER_ERROR;</span><br><span class="line"></span><br><span class="line">    response.status(status).json(&#123;</span><br><span class="line">      statusCode: status,</span><br><span class="line">      timestamp: <span class="keyword">new</span> <span class="built_in">Date</span>().toISOString(),</span><br><span class="line">      path: request.url,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h2><blockquote><p>管道是具有 @Injectable() 装饰器的类。管道应实现 PipeTransform 接口。<img src="http://cdn.mydearest.cn/blog/images/nest-filter.png" alt="异常过滤器"></p></blockquote><p>管道有两个类型:</p><ul><li>转换：管道将输入数据转换为所需的数据输出</li><li>验证：对输入数据进行验证，如果验证成功继续传递; 验证失败则抛出异常;</li></ul><h3 id="内置管道"><a href="#内置管道" class="headerlink" title="内置管道"></a>内置管道</h3><ul><li>ValidationPipe</li><li>ParseIntPipe</li><li>ParseBoolPipe</li><li>ParseArrayPipe</li><li>ParseUUIDPipe</li><li>DefaultValuePipe</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ValidationPipe</span></span><br><span class="line"><span class="keyword">import</span> &#123; PipeTransform, Injectable, ArgumentMetadata &#125; <span class="keyword">from</span> <span class="string">'@nestjs/common'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> ValidationPipe <span class="keyword">implements</span> PipeTransform &#123;</span><br><span class="line">  <span class="comment">// 参数 value和metadata元数据</span></span><br><span class="line">  transform(value: <span class="built_in">any</span>, metadata: ArgumentMetadata) &#123;</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// PipeTransform&lt;T, R&gt; 是一个通用接口，其中 T 表示 value 的类型，R 表示 transform() 方法的返回类型。</span></span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> ArgumentMetadata &#123;</span><br><span class="line">  <span class="keyword">type</span>: <span class="string">'body'</span> | <span class="string">'query'</span> | <span class="string">'param'</span> | <span class="string">'custom'</span>;</span><br><span class="line">  metatype?: Type&lt;unknown&gt;;</span><br><span class="line">  data?: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="验证管道"><a href="#验证管道" class="headerlink" title="验证管道"></a>验证管道</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; PipeTransform, Injectable, ArgumentMetadata, BadRequestException &#125; <span class="keyword">from</span> <span class="string">'@nestjs/common'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; ObjectSchema &#125; <span class="keyword">from</span> <span class="string">'@hapi/joi'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> JoiValidationPipe <span class="keyword">implements</span> PipeTransform &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="keyword">private</span> schema: ObjectSchema</span>) &#123;&#125;</span><br><span class="line">  <span class="comment">// 要么返回该值，要么抛出一个错误</span></span><br><span class="line">  transform(value: <span class="built_in">any</span>, metadata: ArgumentMetadata) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; error &#125; = <span class="keyword">this</span>.schema.validate(value);</span><br><span class="line">    <span class="keyword">if</span> (error) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> BadRequestException(<span class="string">'Validation failed'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="绑定管道-UsePipes"><a href="#绑定管道-UsePipes" class="headerlink" title="绑定管道 UsePipes"></a>绑定管道 UsePipes</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Post</span>()</span><br><span class="line"><span class="meta">@UsePipes</span>(<span class="keyword">new</span> JoiValidationPipe(createCatSchema))</span><br><span class="line"><span class="keyword">async</span> create(<span class="meta">@Body</span>() createCatDto: CreateCatDto) &#123;</span><br><span class="line">  <span class="keyword">this</span>.catsService.create(createCatDto);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局</span></span><br><span class="line">app.useGlobalPipes(<span class="keyword">new</span> ValidationPipe());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 模块</span></span><br><span class="line"><span class="keyword">import</span> &#123; Module &#125; <span class="keyword">from</span> <span class="string">'@nestjs/common'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; APP_PIPE &#125; <span class="keyword">from</span> <span class="string">'@nestjs/core'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Module</span>(&#123;</span><br><span class="line">  providers: [</span><br><span class="line">    &#123;</span><br><span class="line">      provide: APP_PIPE,</span><br><span class="line">      useClass: ValidationPipe</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppModule &#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="类验证修饰符"><a href="#类验证修饰符" class="headerlink" title="类验证修饰符"></a>类验证修饰符</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; IsString, IsInt &#125; <span class="keyword">from</span> <span class="string">'class-validator'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> CreateCatDto &#123;</span><br><span class="line">  <span class="meta">@IsString</span>()</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@IsInt</span>()</span><br><span class="line">  age: <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@IsString</span>()</span><br><span class="line">  breed: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="守卫"><a href="#守卫" class="headerlink" title="守卫"></a>守卫</h2><blockquote><p>守卫是一个使用 @Injectable() 装饰器的类。 守卫应该实现 CanActivate 接口。</p></blockquote><p><img src="http://cdn.mydearest.cn/blog/images/nest-guard.png" alt="守卫"></p><p>守卫有一个单独的责任。它们根据运行时出现的某些条件（例如权限，角色，访问控制列表等）来确定给定的请求是否由路由处理程序处理。 这通常称为授权。</p><ul><li>守卫在中间件之后执行，但是在任何拦截器和管道之前执行。</li></ul><h3 id="授权守卫"><a href="#授权守卫" class="headerlink" title="授权守卫"></a>授权守卫</h3><p>授权是保护的一个很好的用例，因为只有当调用者(通常是经过身份验证的特定用户)具有足够的权限时，特定的路由才可用。我们现在要构建的 AuthGuard 假设用户是经过身份验证的(因此，请求头附加了一个token)。它将提取和验证token，并使用提取的信息来确定请求是否可以继续。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// auth.guard.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; Injectable, CanActivate, ExecutionContext &#125; <span class="keyword">from</span> <span class="string">'@nestjs/common'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Observable &#125; <span class="keyword">from</span> <span class="string">'rxjs'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AuthGuard <span class="keyword">implements</span> CanActivate &#123;</span><br><span class="line">  canActivate(</span><br><span class="line">    context: ExecutionContext,</span><br><span class="line">  ): <span class="built_in">boolean</span> | <span class="built_in">Promise</span>&lt;<span class="built_in">boolean</span>&gt; | Observable&lt;<span class="built_in">boolean</span>&gt; &#123;</span><br><span class="line">    <span class="comment">// 执行上下文扩展了参数主机 获取request对象</span></span><br><span class="line">    <span class="keyword">const</span> request = context.switchToHttp().getRequest();</span><br><span class="line">    <span class="keyword">return</span> validateRequest(request);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// export interface ExecutionContext extends ArgumentsHost &#123;</span></span><br><span class="line"><span class="comment">//   getClass&lt;T = any&gt;(): Type&lt;T&gt;;</span></span><br><span class="line"><span class="comment">//   getHandler(): Function;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure><h3 id="角色守卫"><a href="#角色守卫" class="headerlink" title="角色守卫"></a>角色守卫</h3><p>这个守卫只允许具有特定角色的用户访问。</p><h3 id="绑定守卫"><a href="#绑定守卫" class="headerlink" title="绑定守卫"></a>绑定守卫</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 同理 装饰器 全局绑定 模块绑定</span></span><br><span class="line"><span class="meta">@UseGuards</span>(RolesGuard)</span><br><span class="line"></span><br><span class="line">app.useGlobalGuards(<span class="keyword">new</span> RolesGuard());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; Module &#125; <span class="keyword">from</span> <span class="string">'@nestjs/common'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; APP_GUARD &#125; <span class="keyword">from</span> <span class="string">'@nestjs/core'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Module</span>(&#123;</span><br><span class="line">  providers: [</span><br><span class="line">    &#123;</span><br><span class="line">      provide: APP_GUARD,</span><br><span class="line">      useClass: RolesGuard,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppModule &#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="反射器"><a href="#反射器" class="headerlink" title="反射器"></a>反射器</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置元数据</span></span><br><span class="line"><span class="meta">@Post</span>()</span><br><span class="line"><span class="meta">@SetMetadata</span>(<span class="string">'roles'</span>, [<span class="string">'admin'</span>])</span><br><span class="line"><span class="keyword">async</span> create(<span class="meta">@Body</span>() createCatDto: CreateCatDto) &#123;</span><br><span class="line">  <span class="keyword">this</span>.catsService.create(createCatDto);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 也可以设置装饰器</span></span><br><span class="line">roles.decorator.ts</span><br><span class="line"><span class="keyword">import</span> &#123; SetMetadata &#125; <span class="keyword">from</span> <span class="string">'@nestjs/common'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> Roles = <span class="function">(<span class="params">...roles: <span class="built_in">string</span>[]</span>) =&gt;</span> SetMetadata(<span class="string">'roles'</span>, roles);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="meta">@Roles</span>(<span class="string">"admin"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 取值</span></span><br><span class="line"><span class="keyword">import</span> &#123; Injectable, CanActivate, ExecutionContext &#125; <span class="keyword">from</span> <span class="string">'@nestjs/common'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Reflector &#125; <span class="keyword">from</span> <span class="string">'@nestjs/core'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> RolesGuard <span class="keyword">implements</span> CanActivate &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="keyword">private</span> reflector: Reflector</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  canActivate(context: ExecutionContext): <span class="built_in">boolean</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> roles = <span class="keyword">this</span>.reflector.get&lt;<span class="built_in">string</span>[]&gt;(<span class="string">'roles'</span>, context.getHandler());</span><br><span class="line">    <span class="keyword">if</span> (!roles) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> request = context.switchToHttp().getRequest();</span><br><span class="line">    <span class="keyword">const</span> user = request.user;</span><br><span class="line">    <span class="keyword">return</span> matchRoles(roles, user.roles);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h2><p>拦截器是使用 <code>@Injectable()</code> 装饰器注解的类。拦截器应该实现 <code>NestInterceptor</code> 接口。</p><p><img src="http://cdn.mydearest.cn/blog/images/nest-interceptor.png" alt="拦截器"></p><p>功能有：</p><ul><li>在函数执行之前/之后绑定额外的逻辑</li><li>转换从函数返回的结果</li><li>转换从函数抛出的异常</li><li>扩展基本函数行为</li><li>根据所选条件完全重写函数 (例如, 缓存目的)</li></ul><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>每个拦截器都有 intercept() 方法，它接收2个参数。 </p><ul><li><p>第一个是 ExecutionContext 实例（与守卫完全相同的对象）。 ExecutionContext 继承自 ArgumentsHost 。 ArgumentsHost 是传递给原始处理程序的参数的一个包装 ，它根据应用程序的类型包含不同的参数数组。</p></li><li><p>第二个参数是 CallHandler。如果不手动调用 handle() 方法，则主处理程序根本不会进行求值。这是什么意思？基本上，CallHandler是一个包装执行流的对象，因此推迟了最终的处理程序执行。</p></li></ul><h3 id="截取切面"><a href="#截取切面" class="headerlink" title="截取切面"></a>截取切面</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// logging.interceptor.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; Injectable, NestInterceptor, ExecutionContext, CallHandler &#125; <span class="keyword">from</span> <span class="string">'@nestjs/common'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Observable, of &#125; <span class="keyword">from</span> <span class="string">'rxjs'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; tap &#125; <span class="keyword">from</span> <span class="string">'rxjs/operators'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> LoggingInterceptor <span class="keyword">implements</span> NestInterceptor &#123;</span><br><span class="line">  intercept(context: ExecutionContext, next: CallHandler): Observable&lt;<span class="built_in">any</span>&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Before...'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> now = <span class="built_in">Date</span>.now();</span><br><span class="line">    <span class="keyword">return</span> next</span><br><span class="line">      .handle()</span><br><span class="line">      .pipe(</span><br><span class="line">        tap(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">`After... <span class="subst">$&#123;<span class="built_in">Date</span>.now() - now&#125;</span>ms`</span>)),</span><br><span class="line">        <span class="comment">// map(data =&gt; (&#123; data &#125;)) 响应映射</span></span><br><span class="line">        <span class="comment">// catchError(err =&gt; throwError(new BadGatewayException()) 异常映射</span></span><br><span class="line">      );</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// stearm</span></span><br><span class="line">    <span class="comment">// const isCached = true;</span></span><br><span class="line">    <span class="comment">// if (isCached) &#123;</span></span><br><span class="line">    <span class="comment">//   return of([]);</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">// return next.handle();</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="绑定拦截器"><a href="#绑定拦截器" class="headerlink" title="绑定拦截器"></a>绑定拦截器</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 装饰器</span></span><br><span class="line"><span class="meta">@UseInterceptors</span>(<span class="keyword">new</span> LoggingInterceptor())</span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局</span></span><br><span class="line">app.useGlobalInterceptors(<span class="keyword">new</span> LoggingInterceptor());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 模块</span></span><br><span class="line"><span class="keyword">import</span> &#123; Module &#125; <span class="keyword">from</span> <span class="string">'@nestjs/common'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; APP_INTERCEPTOR &#125; <span class="keyword">from</span> <span class="string">'@nestjs/core'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Module</span>(&#123;</span><br><span class="line">  providers: [</span><br><span class="line">    &#123;</span><br><span class="line">      provide: APP_INTERCEPTOR,</span><br><span class="line">      useClass: LoggingInterceptor,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppModule &#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="自定义装饰器"><a href="#自定义装饰器" class="headerlink" title="自定义装饰器"></a>自定义装饰器</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// user.decorator.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; createParamDecorator, ExecutionContext &#125; <span class="keyword">from</span> <span class="string">'@nestjs/common'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> User = createParamDecorator(</span><br><span class="line">  (data: unknown, ctx: ExecutionContext) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> request = ctx.switchToHttp().getRequest();</span><br><span class="line">    <span class="keyword">return</span> request.user;</span><br><span class="line">  &#125;,</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用传递数据</span></span><br><span class="line"><span class="meta">@Get</span>()</span><br><span class="line"><span class="keyword">async</span> findOne(<span class="meta">@User</span>(<span class="string">"name"</span>) user: UserEntity) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用管道"><a href="#使用管道" class="headerlink" title="使用管道"></a>使用管道</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Get</span>()</span><br><span class="line"><span class="keyword">async</span> findOne(<span class="meta">@User</span>(<span class="keyword">new</span> ValidationPipe()) user: UserEntity) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="多个装饰器"><a href="#多个装饰器" class="headerlink" title="多个装饰器"></a>多个装饰器</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; applyDecorators &#125; <span class="keyword">from</span> <span class="string">'@nestjs/common'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">Auth</span>(<span class="params">...roles: Role[]</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> applyDecorators(</span><br><span class="line">    SetMetadata(<span class="string">'roles'</span>, roles),</span><br><span class="line">    UseGuards(AuthGuard, RolesGuard),</span><br><span class="line">    ApiBearerAuth(),</span><br><span class="line">    ApiUnauthorizedResponse(&#123; description: <span class="string">'Unauthorized"'</span> &#125;),</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="meta">@Get</span>(<span class="string">'users'</span>)</span><br><span class="line"><span class="meta">@Auth</span>(<span class="string">'admin'</span>)</span><br><span class="line">findAllUsers() &#123;&#125;</span><br></pre></td></tr></table></figure><p>结束🔚，有时间再介绍下<code>GraphQL</code>。</p>]]></content:encoded>
      
      <comments>http://mydearest.cn/2020/Nest%E6%A6%82%E8%BF%B0.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>react源码解析系列三(React Fiber)</title>
      <link>http://mydearest.cn/2020/react%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E7%B3%BB%E5%88%97%E4%B8%89(React%20Fiber).html</link>
      <guid>http://mydearest.cn/2020/react%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E7%B3%BB%E5%88%97%E4%B8%89(React%20Fiber).html</guid>
      <pubDate>Mon, 23 Nov 2020 02:20:28 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;Fiber&quot;&gt;&lt;a href=&quot;#Fiber&quot; class=&quot;headerlink&quot; title=&quot;Fiber&quot;&gt;&lt;/a&gt;Fiber&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;每一个ReactElement对应一个Fiber对象&lt;/p&gt;
&lt;p&gt;记录节点的各种状态&lt;/
        
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="Fiber"><a href="#Fiber" class="headerlink" title="Fiber"></a>Fiber</h2><blockquote><p>每一个ReactElement对应一个Fiber对象</p><p>记录节点的各种状态</p><p>串联整个应用形成的结构</p></blockquote><p>例如：FiberRoot的current指向RootFiber 的 child —-&gt;App 的child —&gt; div 的child—-&gt;input 的sibling</p><p>属性：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="comment">// 指向父节点（每个节点只会有一个父节点）</span></span><br><span class="line"></span><br><span class="line">child <span class="comment">// 子节点</span></span><br><span class="line"></span><br><span class="line">sibling <span class="comment">// 兄弟节点</span></span><br></pre></td></tr></table></figure><h3 id="Update"><a href="#Update" class="headerlink" title="Update"></a>Update</h3><blockquote><p>用于记录组件状态的改变</p><p>存放于Fiber对象的UpdateQueue中：UpdateQue单项链表的结构</p><p>多个Update可以同时存在：例如一个事件里面存在三个setState，创建三个update放到UpdateQueue中</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建或更新updatequeue</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">enqueueUpdate</span>&lt;<span class="title">State</span>&gt;(<span class="params">fiber: Fiber, update: Update&lt;State&gt;</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Update queues are created lazily.</span></span><br><span class="line">  <span class="keyword">const</span> alternate = fiber.alternate;</span><br><span class="line">  <span class="keyword">let</span> queue1;</span><br><span class="line">  <span class="keyword">let</span> queue2;</span><br><span class="line">  <span class="keyword">if</span> (alternate === <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="comment">// There's only one fiber.</span></span><br><span class="line">    queue1 = fiber.updateQueue;</span><br><span class="line">    queue2 = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (queue1 === <span class="literal">null</span>) &#123;</span><br><span class="line">      queue1 = fiber.updateQueue = createUpdateQueue(fiber.memoizedState);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// There are two owners.</span></span><br><span class="line">    queue1 = fiber.updateQueue;</span><br><span class="line">    queue2 = alternate.updateQueue;</span><br><span class="line">    <span class="keyword">if</span> (queue1 === <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (queue2 === <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// Neither fiber has an update queue. Create new ones.</span></span><br><span class="line">        queue1 = fiber.updateQueue = createUpdateQueue(fiber.memoizedState);</span><br><span class="line">        queue2 = alternate.updateQueue = createUpdateQueue(</span><br><span class="line">          alternate.memoizedState,</span><br><span class="line">        );</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Only one fiber has an update queue. Clone to create a new one.</span></span><br><span class="line">        queue1 = fiber.updateQueue = cloneUpdateQueue(queue2);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (queue2 === <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// Only one fiber has an update queue. Clone to create a new one.</span></span><br><span class="line">        queue2 = alternate.updateQueue = cloneUpdateQueue(queue1);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Both owners have an update queue.</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (queue2 === <span class="literal">null</span> || queue1 === queue2) &#123;</span><br><span class="line">    <span class="comment">// There's only a single queue.</span></span><br><span class="line">    appendUpdateToQueue(queue1, update);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// There are two queues. We need to append the update to both queues,</span></span><br><span class="line">    <span class="comment">// while accounting for the persistent structure of the list — we don't</span></span><br><span class="line">    <span class="comment">// want the same update to be added multiple times.</span></span><br><span class="line">    <span class="keyword">if</span> (queue1.lastUpdate === <span class="literal">null</span> || queue2.lastUpdate === <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="comment">// One of the queues is not empty. We must add the update to both queues.</span></span><br><span class="line">      appendUpdateToQueue(queue1, update);</span><br><span class="line">      appendUpdateToQueue(queue2, update);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// Both queues are non-empty. The last update is the same in both lists,</span></span><br><span class="line">      <span class="comment">// because of structural sharing. So, only append to one of the lists.</span></span><br><span class="line">      appendUpdateToQueue(queue1, update);</span><br><span class="line">      <span class="comment">// But we still need to update the `lastUpdate` pointer of queue2.</span></span><br><span class="line">      queue2.lastUpdate = update;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (__DEV__) &#123;</span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">      fiber.tag === ClassComponent &amp;&amp;</span><br><span class="line">      (currentlyProcessingQueue === queue1 ||</span><br><span class="line">        (queue2 !== <span class="literal">null</span> &amp;&amp; currentlyProcessingQueue === queue2)) &amp;&amp;</span><br><span class="line">      !didWarnUpdateInsideUpdate</span><br><span class="line">    ) &#123;</span><br><span class="line">      warningWithoutStack(</span><br><span class="line">        <span class="literal">false</span>,</span><br><span class="line">        <span class="string">'An update (setState, replaceState, or forceUpdate) was scheduled '</span> +</span><br><span class="line">          <span class="string">'from inside an update function. Update functions should be pure, '</span> +</span><br><span class="line">          <span class="string">'with zero side-effects. Consider using componentDidUpdate or a '</span> +</span><br><span class="line">          <span class="string">'callback.'</span>,</span><br><span class="line">      );</span><br><span class="line">      didWarnUpdateInsideUpdate = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="expirationTime"><a href="#expirationTime" class="headerlink" title="expirationTime"></a>expirationTime</h3><p>详解见：<a href="https://react.jokcy.me/book/update/expiration-time.html" target="_blank" rel="noopener">https://react.jokcy.me/book/update/expiration-time.html</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ReactFiberReconciler.js中</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">updateContainer</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  element: ReactNodeList,</span></span></span><br><span class="line"><span class="function"><span class="params">  container: OpaqueRoot,</span></span></span><br><span class="line"><span class="function"><span class="params">  parentComponent: ?React$Component&lt;any, any&gt;,</span></span></span><br><span class="line"><span class="function"><span class="params">  callback: ?Function,</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">ExpirationTime</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> current = container.current; <span class="comment">// Fiber对象</span></span><br><span class="line">    <span class="comment">//!important</span></span><br><span class="line">  <span class="keyword">const</span> currentTime = requestCurrentTime();</span><br><span class="line">  <span class="keyword">const</span> expirationTime = computeExpirationForFiber(currentTime, current); </span><br><span class="line">    </span><br><span class="line">  <span class="keyword">return</span> updateContainerAtExpirationTime(</span><br><span class="line">    element,</span><br><span class="line">    container,</span><br><span class="line">    parentComponent,</span><br><span class="line">    expirationTime,</span><br><span class="line">    callback,</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="requestCurrentTime"><a href="#requestCurrentTime" class="headerlink" title="requestCurrentTime"></a>requestCurrentTime</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 目前粗略的理解目前为止到js加载完成的时间差</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">requestCurrentTime</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//  已经进入到渲染阶段了</span></span><br><span class="line">  <span class="keyword">if</span> (isRendering) &#123;</span><br><span class="line">    <span class="comment">// We're already rendering. Return the most recently read time.</span></span><br><span class="line">    <span class="keyword">return</span> currentSchedulerTime;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// Check if there's pending work.</span></span><br><span class="line">  findHighestPriorityRoot(); <span class="comment">// 从调度队列找到权限最高的root</span></span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    nextFlushedExpirationTime === NoWork ||</span><br><span class="line">    nextFlushedExpirationTime === Never</span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="comment">// If there's no pending work, or if the pending work is offscreen, we can</span></span><br><span class="line">    <span class="comment">// read the current time without risk of tearing.</span></span><br><span class="line">    recomputeCurrentRendererTime(); <span class="comment">// 如下</span></span><br><span class="line">    currentSchedulerTime = currentRendererTime;</span><br><span class="line">    <span class="keyword">return</span> currentSchedulerTime;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// There's already pending work. We might be in the middle of a browser</span></span><br><span class="line">  <span class="comment">// event. If we were to read the current time, it could cause multiple updates</span></span><br><span class="line">  <span class="comment">// within the same event to receive different expiration times, leading to</span></span><br><span class="line">  <span class="comment">// tearing. Return the last read time. During the next idle callback, the</span></span><br><span class="line">  <span class="comment">// time will be updated.</span></span><br><span class="line">  <span class="keyword">return</span> currentSchedulerTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="recomputeCurrentRendererTime"><a href="#recomputeCurrentRendererTime" class="headerlink" title="recomputeCurrentRendererTime"></a>recomputeCurrentRendererTime</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">recomputeCurrentRendererTime</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 从js加载完成到现在为止的时间间隔</span></span><br><span class="line">  <span class="keyword">const</span> currentTimeMs = now() - originalStartTimeMs; <span class="comment">// originalStartTimeMs： 初始的now（）</span></span><br><span class="line">  currentRendererTime = msToExpirationTime(currentTimeMs);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="msToExpirationTime"><a href="#msToExpirationTime" class="headerlink" title="msToExpirationTime"></a>msToExpirationTime</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> UNIT_SIZE = <span class="number">10</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">msToExpirationTime</span>(<span class="params">ms: number</span>): <span class="title">ExpirationTime</span> </span>&#123;</span><br><span class="line">  <span class="comment">// Always add an offset so that we don't clash with the magic number for NoWork.</span></span><br><span class="line">  <span class="keyword">return</span> ((ms / UNIT_SIZE) | <span class="number">0</span>) + MAGIC_NUMBER_OFFSET;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="computeExpirationForFiber"><a href="#computeExpirationForFiber" class="headerlink" title="computeExpirationForFiber"></a>computeExpirationForFiber</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">computeExpirationForFiber</span>(<span class="params">currentTime: ExpirationTime, fiber: Fiber</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> expirationTime;</span><br><span class="line">  <span class="keyword">if</span> (expirationContext !== NoWork) &#123;</span><br><span class="line">    <span class="comment">// An explicit expiration context was set;</span></span><br><span class="line">    expirationTime = expirationContext;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isWorking) &#123;</span><br><span class="line">    <span class="keyword">if</span> (isCommitting) &#123;</span><br><span class="line">      <span class="comment">// Updates that occur during the commit phase should have sync priority</span></span><br><span class="line">      <span class="comment">// by default.</span></span><br><span class="line">      expirationTime = Sync;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// Updates during the render phase should expire at the same time as</span></span><br><span class="line">      <span class="comment">// the work that is being rendered.</span></span><br><span class="line">      expirationTime = nextRenderExpirationTime;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// No explicit expiration context was set, and we're not currently</span></span><br><span class="line">    <span class="comment">// performing work. Calculate a new expiration time.</span></span><br><span class="line">    <span class="keyword">if</span> (fiber.mode &amp; ConcurrentMode) &#123;</span><br><span class="line">      <span class="keyword">if</span> (isBatchingInteractiveUpdates) &#123;</span><br><span class="line">        <span class="comment">// This is an interactive update</span></span><br><span class="line">        expirationTime = computeInteractiveExpiration(currentTime); <span class="comment">// 如下</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// This is an async update</span></span><br><span class="line">        expirationTime = computeAsyncExpiration(currentTime); <span class="comment">// 如下</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// If we're in the middle of rendering a tree, do not update at the same</span></span><br><span class="line">      <span class="comment">// expiration time that is already rendering.</span></span><br><span class="line">      <span class="keyword">if</span> (nextRoot !== <span class="literal">null</span> &amp;&amp; expirationTime === nextRenderExpirationTime) &#123;</span><br><span class="line">        expirationTime += <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// This is a sync update</span></span><br><span class="line">      expirationTime = Sync;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (isBatchingInteractiveUpdates) &#123;</span><br><span class="line">    <span class="comment">// This is an interactive update. Keep track of the lowest pending</span></span><br><span class="line">    <span class="comment">// interactive expiration time. This allows us to synchronously flush</span></span><br><span class="line">    <span class="comment">// all interactive updates when needed.</span></span><br><span class="line">    <span class="keyword">if</span> (expirationTime &gt; lowestPriorityPendingInteractiveExpirationTime) &#123;</span><br><span class="line">      lowestPriorityPendingInteractiveExpirationTime = expirationTime;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> expirationTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="computeInteractiveExpiration"><a href="#computeInteractiveExpiration" class="headerlink" title="computeInteractiveExpiration"></a>computeInteractiveExpiration</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> HIGH_PRIORITY_EXPIRATION = __DEV__ ? <span class="number">500</span> : <span class="number">150</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> HIGH_PRIORITY_BATCH_SIZE = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">computeInteractiveExpiration</span>(<span class="params">currentTime: ExpirationTime</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> computeExpirationBucket(</span><br><span class="line">    currentTime,</span><br><span class="line">    HIGH_PRIORITY_EXPIRATION,</span><br><span class="line">    HIGH_PRIORITY_BATCH_SIZE,</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="computeAsyncExpiration"><a href="#computeAsyncExpiration" class="headerlink" title="computeAsyncExpiration"></a>computeAsyncExpiration</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> LOW_PRIORITY_EXPIRATION = <span class="number">5000</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> LOW_PRIORITY_BATCH_SIZE = <span class="number">250</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">computeAsyncExpiration</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  currentTime: ExpirationTime,</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">ExpirationTime</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> computeExpirationBucket(</span><br><span class="line">    currentTime,</span><br><span class="line">    LOW_PRIORITY_EXPIRATION,</span><br><span class="line">    LOW_PRIORITY_BATCH_SIZE,</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="computeExpirationBucket"><a href="#computeExpirationBucket" class="headerlink" title="computeExpirationBucket"></a>computeExpirationBucket</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">computeExpirationBucket</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  currentTime,</span></span></span><br><span class="line"><span class="function"><span class="params">  expirationInMs,</span></span></span><br><span class="line"><span class="function"><span class="params">  bucketSizeMs,</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">ExpirationTime</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    MAGIC_NUMBER_OFFSET +</span><br><span class="line">    ceiling(</span><br><span class="line">      currentTime - MAGIC_NUMBER_OFFSET + expirationInMs / UNIT_SIZE,</span><br><span class="line">      bucketSizeMs / UNIT_SIZE,</span><br><span class="line">    )</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>计算为了将固定时间间断的，多次setState数据的更新当成一次更新，在这个时间间断内优先级是一样的</p>]]></content:encoded>
      
      <comments>http://mydearest.cn/2020/react%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E7%B3%BB%E5%88%97%E4%B8%89(React%20Fiber).html#disqus_thread</comments>
    </item>
    
    <item>
      <title>测试的分类</title>
      <link>http://mydearest.cn/2020/%E6%B5%8B%E8%AF%95%E7%9A%84%E5%88%86%E7%B1%BB.html</link>
      <guid>http://mydearest.cn/2020/%E6%B5%8B%E8%AF%95%E7%9A%84%E5%88%86%E7%B1%BB.html</guid>
      <pubDate>Thu, 12 Nov 2020 02:14:30 GMT</pubDate>
      <description>
      
        &lt;p&gt;一直以来，我都听到过各式各样的测试——单元测试、黑盒测试、压力测试等等，但是很难对所有的测试方式有一个总体的认知。&lt;/p&gt;
&lt;p&gt;在经过大量的谷歌之后，我终于把各种种类的测试弄清白了，下面针对每一种测试做一个简单的一句话介绍，更详细的介绍可以自行搜索。&lt;/p&gt;
&lt;hr&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>一直以来，我都听到过各式各样的测试——单元测试、黑盒测试、压力测试等等，但是很难对所有的测试方式有一个总体的认知。</p><p>在经过大量的谷歌之后，我终于把各种种类的测试弄清白了，下面针对每一种测试做一个简单的一句话介绍，更详细的介绍可以自行搜索。</p><hr><a id="more"></a><h2 id="按测试阶段分类"><a href="#按测试阶段分类" class="headerlink" title="按测试阶段分类"></a>按测试阶段分类</h2><ul><li>单元测试：针对单个函数、类进行测试</li><li>集成测试：将各单元组合之后进行测试，用来验证各个组件之间能否互相配合，正常工作</li><li>系统测试：针对整个系统进行全面的测试，涵盖功能和非功能（兼容性、性能等）方面</li><li>端到端测试：与系统测试类似，模仿完全真实的用户环境，如网络通信、数据库交互等，也会验证其他关联系统。通常会手动测试，很难自动化</li><li>验收测试：验证交付的产品是否符合预期的各项要求，测试内容通常是系统测试的子集</li><li>alpha 测试：验收测试的一种，由内部用户在测试环境进行测试</li><li>beta 测试：验收测试的一种，由外部用户在正式环境下进行测试</li></ul><h2 id="是否查看源代码"><a href="#是否查看源代码" class="headerlink" title="是否查看源代码"></a>是否查看源代码</h2><ul><li>黑盒测试：不关心内部细节，只要输入和输出符合要求即可</li><li>白盒测试：验证代码中的每条语句，每个分支都能正确运行</li><li>分支测试：白盒测试的一种，在单元测试期间进行，通过遍历每个分支进行彻底的测试</li><li>灰盒测试：既考虑产品设计要求，又考虑代码的实现细节</li></ul><h2 id="是否运行程序"><a href="#是否运行程序" class="headerlink" title="是否运行程序"></a>是否运行程序</h2><ul><li>静态测试：不运行程序，仅通过语法分析来检查程序的正确性。代表：ESLint</li><li>动态测试：通过运行程序，检查运行结果与预期结果的差异</li></ul><h2 id="是否验证产品功能"><a href="#是否验证产品功能" class="headerlink" title="是否验证产品功能"></a>是否验证产品功能</h2><ul><li>功能测试：验证产品功能是否符合预期</li><li>非功能测试：可用性、兼容性、性能、负载、压力、可伸缩性、安全性等</li><li>可用性测试：验证新用户是否可以轻松理解如何使用产品</li><li>可访问性测试：残疾人能否正常使用产品</li><li>兼容性测试：验证在不同版本的终端上是否能正确运行</li><li>边界值测试：检查输入为边界值时程序能否正确运行</li><li>负载测试：考察当前软硬件环境下系统所能承受的最大负荷</li><li>压力测试：在一定的负载下系统长时间运行的稳定性</li><li>性能测试：检查系统是否满足性能要求</li><li>体积测试：当遇到大量数据时是否会影响系统性能</li><li>安全测试：检查系统是否存在安全漏洞</li></ul><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul><li>猴子测试：无需理解程序，由随机的输入进行测试</li><li>突变测试：修改一小段源代码，验证现有测试用例能否识别此缺陷</li><li>恢复测试：验证系统能否从灾难（断电、断网等）中恢复</li><li>冒烟测试：对一个新版本进行系统大规模的测试之前，先验证一下软件的基本功能是否实现，是否具备可测性</li><li>回归测试：验证代码更改是否不会影响产品的现有功能</li></ul><blockquote><p>还有很多种测试，由于比较偏门所以我没有列出来。</p></blockquote><p>我参考了大量这个<a href="https://www.softwaretestinghelp.com/types-of-software-testing/" target="_blank" rel="noopener">网站</a>的内容，感兴趣的可以看看。</p>]]></content:encoded>
      
      <comments>http://mydearest.cn/2020/%E6%B5%8B%E8%AF%95%E7%9A%84%E5%88%86%E7%B1%BB.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>react源码解析系列二(React Render)</title>
      <link>http://mydearest.cn/2020/react%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E7%B3%BB%E5%88%97%E4%BA%8C(React%20Render).html</link>
      <guid>http://mydearest.cn/2020/react%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E7%B3%BB%E5%88%97%E4%BA%8C(React%20Render).html</guid>
      <pubDate>Wed, 11 Nov 2020 13:48:30 GMT</pubDate>
      <description>
      
        &lt;p&gt;创建更新的方式&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;render || hydrate&lt;/li&gt;
&lt;li&gt;setState&lt;/li&gt;
&lt;li&gt;forceUpdate&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;render的步骤&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;创建 ReactRoot&lt;/li&gt;
&lt;li&gt;创建FiberRoot RootFiber&lt;/li&gt;
&lt;li&gt;创建更新&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;后续的是进入调度后，由调度器进行管理&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>创建更新的方式</p><ol><li>render || hydrate</li><li>setState</li><li>forceUpdate</li></ol><p>render的步骤</p><ol><li>创建 ReactRoot</li><li>创建FiberRoot RootFiber</li><li>创建更新</li></ol><blockquote><p>后续的是进入调度后，由调度器进行管理</p></blockquote><hr><a id="more"></a><ol><li>首先ReactDOM定义<figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">ReactDOM = &#123;</span><br><span class="line">  render(</span><br><span class="line">    element: React$Element&lt;any&gt;,</span><br><span class="line">    container: DOMContainer,</span><br><span class="line">    callback: ?<span class="built_in">Function</span>,</span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="keyword">return</span> legacyRenderSubtreeIntoContainer(</span><br><span class="line">      <span class="literal">null</span>,</span><br><span class="line">      element,</span><br><span class="line">      container,</span><br><span class="line">      <span class="literal">false</span>,</span><br><span class="line">      callback,</span><br><span class="line">    )</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>创建ReactRoot对象，调用render方法调用DOMRenderer.createContainer创建FiberRoot<figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// reactDom.js</span></span><br><span class="line"><span class="keyword">const</span> ReactDOM: <span class="built_in">Object</span> = &#123;... hydrate, render...&#125;</span><br><span class="line"></span><br><span class="line">  hydrate(element: React$Node, <span class="attr">container</span>: DOMContainer, <span class="attr">callback</span>: ?<span class="built_in">Function</span>) &#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> throw or warn if we couldn't hydrate?服务端渲染时用到</span></span><br><span class="line">    <span class="keyword">return</span> legacyRenderSubtreeIntoContainer(</span><br><span class="line">      <span class="literal">null</span>,</span><br><span class="line">      element,</span><br><span class="line">      container,</span><br><span class="line">      <span class="literal">true</span>,</span><br><span class="line">      callback,</span><br><span class="line">    );</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  render(</span><br><span class="line">    element: React$Element&lt;any&gt;,</span><br><span class="line">    container: DOMContainer,</span><br><span class="line">    callback: ?<span class="built_in">Function</span>,</span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="keyword">return</span> legacyRenderSubtreeIntoContainer(</span><br><span class="line">      <span class="literal">null</span>,</span><br><span class="line">      element,</span><br><span class="line">      container,</span><br><span class="line">      <span class="literal">false</span>,</span><br><span class="line">      callback,</span><br><span class="line">    );</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure></li></ol><p><strong>render和hydrate更新的区别在于legacyRenderSubtreeIntoContainer第四个参数</strong></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">legacyRenderSubtreeIntoContainer</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  parentComponent: ?React$Component&lt;any, any&gt;, <span class="regexp">//</span> 一般是null 渲染root及诶单</span></span></span><br><span class="line"><span class="function"><span class="params">  children: ReactNodeList, <span class="regexp">//</span> &lt;App<span class="regexp">/&gt;</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="regexp">  container: DOMContainer, /</span><span class="regexp">/ document.getElementById('root')</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="regexp">  forceHydrate: boolean, /</span><span class="regexp">/ 是否调和原来存在于dom节点的html节点主要用于服务端渲染</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="regexp">  callback: ?Function, /</span><span class="regexp">/ 创建成功的回调</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="regexp">) &#123;</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="regexp">  /</span><span class="regexp">/ TODO: Ensure all entry points contain this check</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="regexp">  invariant(</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="regexp">    isValidContainer(container),</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="regexp">    'Target container is not a DOM element.',</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="regexp">  );</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="regexp"></span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="regexp">  if (__DEV__) &#123;</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="regexp">    topLevelUpdateWarnings(container);</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="regexp">  &#125;</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="regexp"></span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="regexp">  /</span><span class="regexp">/ TODO: Without `any` type, Flow says "Property cannot be accessed on any</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="regexp">  /</span><span class="regexp">/ member of intersection type." Whyyyyyy.</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="regexp">  let root: Root = (container._reactRootContainer: any);</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="regexp">  if (!root) &#123;</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="regexp">    /</span><span class="regexp">/ Initial mount</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="regexp">    root = container._reactRootContainer = legacyCreateRootFromDOMContainer(</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="regexp">      container,</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="regexp">      forceHydrate,</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="regexp">    );</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="regexp">    if (typeof callback === 'function') &#123;</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="regexp">      const originalCallback = callback;</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="regexp">      callback = function() &#123;</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="regexp">        const instance = getPublicRootInstance(root._internalRoot);</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="regexp">        originalCallback.call(instance);</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="regexp">      &#125;;</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="regexp">    &#125;</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="regexp">    /</span><span class="regexp">/ Initial mount should not be batched.</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="regexp">    unbatchedUpdates(() =&gt; &#123;</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="regexp">      if (parentComponent != null) &#123;  /</span><span class="regexp">/ buchengli</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="regexp">        root.legacy_renderSubtreeIntoContainer(</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="regexp">          parentComponent,</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="regexp">          children,</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="regexp">          callback,</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="regexp">        );</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="regexp">      &#125; else &#123;</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="regexp">        root.render(children, callback);</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="regexp">      &#125;</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="regexp">    &#125;);</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="regexp">  &#125; else &#123;</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="regexp">    if (typeof callback === 'function') &#123;</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="regexp">      const originalCallback = callback;</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="regexp">      callback = function() &#123;</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="regexp">        const instance = getPublicRootInstance(root._internalRoot);</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="regexp">        originalCallback.call(instance);</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="regexp">      &#125;;</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="regexp">    &#125;</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="regexp">    /</span><span class="regexp">/ Update</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="regexp">    if (parentComponent != null) &#123;</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="regexp">      root.legacy_renderSubtreeIntoContainer(</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="regexp">        parentComponent,</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="regexp">        children,</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="regexp">        callback,</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="regexp">      );</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="regexp">    &#125; else &#123;</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="regexp">      root.render(children, callback);</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="regexp">    &#125;</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="regexp">  &#125;</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="regexp">  return getPublicRootInstance(root._internalRoot);</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="regexp">&#125;</span></span></span></span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root = container._reactRootContainer = legacyCreateRootFromDOMContainer(</span><br><span class="line">      container,</span><br><span class="line">      forceHydrate,</span><br><span class="line">    );</span><br></pre></td></tr></table></figure><p>这里调用legacyCreateRootFromDOMContainer函数</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">legacyCreateRootFromDOMContainer</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  container: DOMContainer,</span></span></span><br><span class="line"><span class="function"><span class="params">  forceHydrate: boolean,</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">Root</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> shouldHydrate =</span><br><span class="line">    forceHydrate || shouldHydrateDueToLegacyHeuristic(container);</span><br><span class="line">  <span class="comment">// First clear any existing content.</span></span><br><span class="line">  <span class="keyword">if</span> (!shouldHydrate) &#123;</span><br><span class="line">    <span class="keyword">let</span> warned = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">let</span> rootSibling;</span><br><span class="line">    <span class="keyword">while</span> ((rootSibling = container.lastChild)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (__DEV__) &#123;</span><br><span class="line">        <span class="keyword">if</span> (</span><br><span class="line">          !warned &amp;&amp;</span><br><span class="line">          rootSibling.nodeType === ELEMENT_NODE &amp;&amp;</span><br><span class="line">          (rootSibling: any).hasAttribute(ROOT_ATTRIBUTE_NAME)</span><br><span class="line">        ) &#123;</span><br><span class="line">          warned = <span class="literal">true</span>;</span><br><span class="line">          warningWithoutStack(</span><br><span class="line">            <span class="literal">false</span>,</span><br><span class="line">            <span class="string">'render(): Target node has markup rendered by React, but there '</span> +</span><br><span class="line">              <span class="string">'are unrelated nodes as well. This is most commonly caused by '</span> +</span><br><span class="line">              <span class="string">'white-space inserted around server-rendered markup.'</span>,</span><br><span class="line">          );</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      container.removeChild(rootSibling); <span class="comment">// 删除原有节点</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (__DEV__) &#123;</span><br><span class="line">    <span class="keyword">if</span> (shouldHydrate &amp;&amp; !forceHydrate &amp;&amp; !warnedAboutHydrateAPI) &#123;</span><br><span class="line">      warnedAboutHydrateAPI = <span class="literal">true</span>;</span><br><span class="line">      lowPriorityWarning(</span><br><span class="line">        <span class="literal">false</span>,</span><br><span class="line">        <span class="string">'render(): Calling ReactDOM.render() to hydrate server-rendered markup '</span> +</span><br><span class="line">          <span class="string">'will stop working in React v17. Replace the ReactDOM.render() call '</span> +</span><br><span class="line">          <span class="string">'with ReactDOM.hydrate() if you want React to attach to the server HTML.'</span>,</span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// Legacy roots are not async by default.</span></span><br><span class="line">  <span class="keyword">const</span> isConcurrent = <span class="literal">false</span>;  <span class="comment">// 指定false</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> ReactRoot(container, isConcurrent, shouldHydrate);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>DOMRenderer的ReactFiberReconciler(与平台无关的调度调和代码)，方法updateContainer参数是超时时间，expirationTime。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">updateContainer</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  element: ReactNodeList,</span></span></span><br><span class="line"><span class="function"><span class="params">  container: OpaqueRoot,</span></span></span><br><span class="line"><span class="function"><span class="params">  parentComponent: ?React$Component&lt;any, any&gt;,</span></span></span><br><span class="line"><span class="function"><span class="params">  callback: ?Function,</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">ExpirationTime</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> current = container.current;</span><br><span class="line">  <span class="keyword">const</span> currentTime = requestCurrentTime();</span><br><span class="line">  <span class="keyword">const</span> expirationTime = computeExpirationForFiber(currentTime, current);</span><br><span class="line">  <span class="keyword">return</span> updateContainerAtExpirationTime(</span><br><span class="line">    element,</span><br><span class="line">    container,</span><br><span class="line">    parentComponent,</span><br><span class="line">    expirationTime,</span><br><span class="line">    callback,</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>接下来 update，赋值给Fiber.updateQueue调用scheduleWork</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">scheduleRootUpdate</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  current: Fiber,</span></span></span><br><span class="line"><span class="function"><span class="params">  element: ReactNodeList,</span></span></span><br><span class="line"><span class="function"><span class="params">  expirationTime: ExpirationTime,</span></span></span><br><span class="line"><span class="function"><span class="params">  callback: ?Function,</span></span></span><br><span class="line"><span class="function"><span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> update = createUpdate(expirationTime)</span><br><span class="line"></span><br><span class="line">  update.payload = &#123; element &#125;</span><br><span class="line"></span><br><span class="line">  callback = callback === <span class="literal">undefined</span> ? <span class="literal">null</span> : callback</span><br><span class="line">  <span class="keyword">if</span> (callback !== <span class="literal">null</span>) &#123;</span><br><span class="line">    warningWithoutStack(</span><br><span class="line">      <span class="keyword">typeof</span> callback === <span class="string">'function'</span>,</span><br><span class="line">      <span class="string">'render(...): Expected the last optional `callback` argument to be a '</span> +</span><br><span class="line">        <span class="string">'function. Instead received: %s.'</span>,</span><br><span class="line">      callback,</span><br><span class="line">    )</span><br><span class="line">    update.callback = callback</span><br><span class="line">  &#125;</span><br><span class="line">  enqueueUpdate(current, update)</span><br><span class="line"></span><br><span class="line">  scheduleWork(current, expirationTime)</span><br><span class="line">  <span class="keyword">return</span> expirationTime</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建Reactroot =&gt; FiberRoot  开始整个应用的起点</p><h2 id="fiberRoot"><a href="#fiberRoot" class="headerlink" title="fiberRoot"></a>fiberRoot</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// root节点，render方法接收的第二个参数，顶层节点</span></span><br><span class="line"> containerInfo: any,</span><br><span class="line">  <span class="comment">// 只有在持久更新中会用到，也就是不支持增量更新的平台，react-dom不会用到</span></span><br><span class="line">  pendingChildren: any,</span><br><span class="line">  <span class="comment">// 当前应用对应的Fiber对象，是Root Fiber</span></span><br><span class="line">  current: Fiber,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 一下的优先级是用来区分</span></span><br><span class="line">  <span class="comment">// 1) 没有提交(committed)的任务</span></span><br><span class="line">  <span class="comment">// 2) 没有提交的挂起任务</span></span><br><span class="line">  <span class="comment">// 3) 没有提交的可能被挂起的任务</span></span><br><span class="line">  <span class="comment">// 我们选择不追踪每个单独的阻塞登记，为了兼顾性能</span></span><br><span class="line">  <span class="comment">// The earliest and latest priority levels that are suspended from committing.</span></span><br><span class="line">  <span class="comment">// 最老和新的在提交的时候被挂起的任务</span></span><br><span class="line">  earliestSuspendedTime: ExpirationTime,</span><br><span class="line">  latestSuspendedTime: ExpirationTime,</span><br><span class="line">  <span class="comment">// The earliest and latest priority levels that are not known to be suspended.</span></span><br><span class="line">  <span class="comment">// 最老和最新的不确定是否会挂起的优先级（所有任务进来一开始都是这个状态）</span></span><br><span class="line">  earliestPendingTime: ExpirationTime,</span><br><span class="line">  latestPendingTime: ExpirationTime,</span><br><span class="line">  <span class="comment">// The latest priority level that was pinged by a resolved promise and can</span></span><br><span class="line">  <span class="comment">// be retried.</span></span><br><span class="line">  <span class="comment">// 最新的通过一个promise被reslove并且可以重新尝试的优先级</span></span><br><span class="line">  latestPingedTime: ExpirationTime,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 如果有错误被抛出并且没有更多的更新存在，我们尝试在处理错误前同步重新从头渲染</span></span><br><span class="line">  <span class="comment">// 在`renderRoot`出现无法处理的错误时会被设置为`true`</span></span><br><span class="line">  didError: boolean,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 正在等待提交的任务的`expirationTime`</span></span><br><span class="line">  pendingCommitExpirationTime: ExpirationTime,</span><br><span class="line">  <span class="comment">// 已经完成的任务的FiberRoot对象，如果你只有一个Root，那他永远只可能是这个Root对应的Fiber，或者是null</span></span><br><span class="line">  <span class="comment">// 在commit阶段只会处理这个值对应的任务</span></span><br><span class="line">  finishedWork: Fiber | <span class="literal">null</span>,</span><br><span class="line">  <span class="comment">// 在任务被挂起的时候通过setTimeout设置的返回内容，用来下一次如果有新的任务挂起时清理还没触发的timeout</span></span><br><span class="line">  timeoutHandle: TimeoutHandle | NoTimeout,</span><br><span class="line">  <span class="comment">// 顶层context对象，只有主动调用`renderSubtreeIntoContainer`时才会有用</span></span><br><span class="line">  context: <span class="built_in">Object</span> | <span class="literal">null</span>,</span><br><span class="line">  pendingContext: <span class="built_in">Object</span> | <span class="literal">null</span>,</span><br><span class="line">  <span class="comment">// 用来确定第一次渲染的时候是否需要融合</span></span><br><span class="line">  +hydrate: boolean,</span><br><span class="line">  <span class="comment">// 当前root上剩余的过期时间</span></span><br><span class="line">  <span class="comment">// <span class="doctag">TODO:</span> 提到renderer里面区处理</span></span><br><span class="line">  nextExpirationTimeToWorkOn: ExpirationTime,</span><br><span class="line">  <span class="comment">// 当前更新对应的过期时间</span></span><br><span class="line">  expirationTime: ExpirationTime,</span><br><span class="line">  <span class="comment">// List of top-level batches. This list indicates whether a commit should be</span></span><br><span class="line">  <span class="comment">// deferred. Also contains completion callbacks.</span></span><br><span class="line">  <span class="comment">// <span class="doctag">TODO:</span> Lift this into the renderer</span></span><br><span class="line">  <span class="comment">// 顶层批次（批处理任务？）这个变量指明一个commit是否应该被推迟</span></span><br><span class="line">  <span class="comment">// 同时包括完成之后的回调</span></span><br><span class="line">  <span class="comment">// 貌似用在测试的时候？</span></span><br><span class="line">  firstBatch: Batch | <span class="literal">null</span>,</span><br><span class="line">  <span class="comment">// root之间关联的链表结构</span></span><br><span class="line">  nextScheduledRoot: FiberRoot | <span class="literal">null</span>,</span><br><span class="line">|&#125;;</span><br></pre></td></tr></table></figure><h2 id="Fiber"><a href="#Fiber" class="headerlink" title="Fiber"></a>Fiber</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Fiber对应一个组件需要被处理或者已经处理了，一个组件可以有一个或者多个Fiber</span></span><br><span class="line">type Fiber = &#123;|</span><br><span class="line">  <span class="comment">// 标记不同的组件类型</span></span><br><span class="line">  tag: WorkTag,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ReactElement里面的key</span></span><br><span class="line">  key: <span class="literal">null</span> | string,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ReactElement.type，也就是我们调用`createElement`的第一个参数</span></span><br><span class="line">  elementType: any,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// The resolved function/class/ associated with this fiber.</span></span><br><span class="line">  <span class="comment">// 异步组件resolved之后返回的内容，一般是`function`或者`class`</span></span><br><span class="line">  type: any,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// The local state associated with this fiber.</span></span><br><span class="line">  <span class="comment">// 跟当前Fiber相关本地状态（比如浏览器环境就是DOM节点）</span></span><br><span class="line">  stateNode: any,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 指向他在Fiber节点树中的`parent`，用来在处理完这个节点之后向上返回</span></span><br><span class="line">  <span class="keyword">return</span>: Fiber | <span class="literal">null</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 单链表树结构</span></span><br><span class="line">  <span class="comment">// 指向自己的第一个子节点</span></span><br><span class="line">  child: Fiber | <span class="literal">null</span>,</span><br><span class="line">  <span class="comment">// 指向自己的兄弟结构</span></span><br><span class="line">  <span class="comment">// 兄弟节点的return指向同一个父节点</span></span><br><span class="line">  sibling: Fiber | <span class="literal">null</span>,</span><br><span class="line">  index: number,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ref属性</span></span><br><span class="line">  ref: <span class="literal">null</span> | <span class="function">(<span class="params">((handle: mixed</span>) =&gt;</span> <span class="keyword">void</span>) &amp; &#123;<span class="attr">_stringRef</span>: ?string&#125;) | RefObject,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 新的变动带来的新的props</span></span><br><span class="line">  pendingProps: any, </span><br><span class="line">  <span class="comment">// 上一次渲染完成之后的props</span></span><br><span class="line">  memoizedProps: any,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 该Fiber对应的组件产生的Update会存放在这个队列里面</span></span><br><span class="line">  updateQueue: UpdateQueue&lt;any&gt; | <span class="literal">null</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 上一次渲染的时候的state</span></span><br><span class="line">  memoizedState: any,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 一个列表，存放这个Fiber依赖的context</span></span><br><span class="line">  firstContextDependency: ContextDependency&lt;mixed&gt; | <span class="literal">null</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 用来描述当前Fiber和他子树的`Bitfield`</span></span><br><span class="line">  <span class="comment">// 共存的模式表示这个子树是否默认是异步渲染的</span></span><br><span class="line">  <span class="comment">// Fiber被创建的时候他会继承父Fiber</span></span><br><span class="line">  <span class="comment">// 其他的标识也可以在创建的时候被设置</span></span><br><span class="line">  <span class="comment">// 但是在创建之后不应该再被修改，特别是他的子Fiber创建之前</span></span><br><span class="line">  mode: TypeOfMode,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Effect</span></span><br><span class="line">  <span class="comment">// 用来记录Side Effect</span></span><br><span class="line">  effectTag: SideEffectTag,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 单链表用来快速查找下一个side effect</span></span><br><span class="line">  nextEffect: Fiber | <span class="literal">null</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 子树中第一个side effect</span></span><br><span class="line">  firstEffect: Fiber | <span class="literal">null</span>,</span><br><span class="line">  <span class="comment">// 子树中最后一个side effect</span></span><br><span class="line">  lastEffect: Fiber | <span class="literal">null</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 代表任务在未来的哪个时间点应该被完成</span></span><br><span class="line">  <span class="comment">// 不包括他的子树产生的任务</span></span><br><span class="line">  expirationTime: ExpirationTime,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 快速确定子树中是否有不在等待的变化</span></span><br><span class="line">  childExpirationTime: ExpirationTime,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 在Fiber树更新的过程中，每个Fiber都会有一个跟其对应的Fiber</span></span><br><span class="line">  <span class="comment">// 我们称他为`current &lt;==&gt; workInProgress`</span></span><br><span class="line">  <span class="comment">// 在渲染完成之后他们会交换位置</span></span><br><span class="line">  alternate: Fiber | <span class="literal">null</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 下面是调试相关的，收集每个Fiber和子树渲染时间的</span></span><br><span class="line"></span><br><span class="line">  actualDuration?: number,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// If the Fiber is currently active in the "render" phase,</span></span><br><span class="line">  <span class="comment">// This marks the time at which the work began.</span></span><br><span class="line">  <span class="comment">// This field is only set when the enableProfilerTimer flag is enabled.</span></span><br><span class="line">  actualStartTime?: number,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Duration of the most recent render time for this Fiber.</span></span><br><span class="line">  <span class="comment">// This value is not updated when we bailout for memoization purposes.</span></span><br><span class="line">  <span class="comment">// This field is only set when the enableProfilerTimer flag is enabled.</span></span><br><span class="line">  selfBaseDuration?: number,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Sum of base times for all descedents of this Fiber.</span></span><br><span class="line">  <span class="comment">// This value bubbles up during the "complete" phase.</span></span><br><span class="line">  <span class="comment">// This field is only set when the enableProfilerTimer flag is enabled.</span></span><br><span class="line">  treeBaseDuration?: number,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Conceptual aliases</span></span><br><span class="line">  <span class="comment">// workInProgress : Fiber -&gt;  alternate The alternate used for reuse happens</span></span><br><span class="line">  <span class="comment">// to be the same as work in progress.</span></span><br><span class="line">  <span class="comment">// __DEV__ only</span></span><br><span class="line">  _debugID?: number,</span><br><span class="line">  _debugSource?: Source | <span class="literal">null</span>,</span><br><span class="line">  _debugOwner?: Fiber | <span class="literal">null</span>,</span><br><span class="line">  _debugIsCurrentlyTiming?: boolean,</span><br><span class="line">|&#125;;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://mydearest.cn/2020/react%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E7%B3%BB%E5%88%97%E4%BA%8C(React%20Render).html#disqus_thread</comments>
    </item>
    
    <item>
      <title>react源码解析系列一(React相关API)</title>
      <link>http://mydearest.cn/2020/react%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E7%B3%BB%E5%88%97%E4%B8%80(React%E7%9B%B8%E5%85%B3API).html</link>
      <guid>http://mydearest.cn/2020/react%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E7%B3%BB%E5%88%97%E4%B8%80(React%E7%9B%B8%E5%85%B3API).html</guid>
      <pubDate>Tue, 03 Nov 2020 11:21:48 GMT</pubDate>
      <description>
      
        &lt;p&gt;今天开始学习react源码相关的内容，源码基于版本&lt;code&gt;v16.6.0&lt;/code&gt;。React16相较于之前的版本是核心上的一次重写，虽然主要的API都没有变化，但是增加了很多能力。并且首次引入了&lt;code&gt;Fiber&lt;/code&gt;的概念，之后新的功能都是围绕&lt;code&gt;Fiber&lt;/code&gt;进行实现，比如&lt;code&gt;AsyncMode&lt;/code&gt;，&lt;code&gt;Profiler&lt;/code&gt;等。&lt;/p&gt;
&lt;h2 id=&quot;React与ReactDom的区别&quot;&gt;&lt;a href=&quot;#React与ReactDom的区别&quot; class=&quot;headerlink&quot; title=&quot;React与ReactDom的区别&quot;&gt;&lt;/a&gt;React与ReactDom的区别&lt;/h2&gt;&lt;p&gt;问题：&lt;strong&gt;&lt;em&gt;react仅仅1000多行代码，而react-dom却将近2w行&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;答： React主要定义基础的概念，比如节点定义和描述相关，真正的实现代码都是在ReactDom里面的，也就是“平台无关”概念，针对不同的平台有不同的实现，但
基本的概念都定义在React里。&lt;/p&gt;
&lt;h2 id=&quot;React16-6-0使用FlowType做类型检查&quot;&gt;&lt;a href=&quot;#React16-6-0使用FlowType做类型检查&quot; class=&quot;headerlink&quot; title=&quot;React16.6.0使用FlowType做类型检查&quot;&gt;&lt;/a&gt;React16.6.0使用FlowType做类型检查&lt;/h2&gt;&lt;p&gt;Flow 是 facebook 出品的 JavaScript 静态类型检查⼯具。所谓类型检查，就是在编译期尽早发现（由类型错误引起的）bug，⼜不影响代码运⾏（不需要运⾏时动态检查类型），使编写 JavaScript 具有和编写 Java 等强类型语⾔相近的体验。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/facebook/flow&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;官方网站&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;简单示例🌰
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm install -g flow-bin&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;flow init&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;touch index.js&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// index.js 进行类型注释&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*@flow*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;x: number, y: number&lt;/span&gt;): &lt;span class=&quot;title&quot;&gt;number&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; x + y&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;add(&lt;span class=&quot;string&quot;&gt;&#39;Hello&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;11&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 报错&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>今天开始学习react源码相关的内容，源码基于版本<code>v16.6.0</code>。React16相较于之前的版本是核心上的一次重写，虽然主要的API都没有变化，但是增加了很多能力。并且首次引入了<code>Fiber</code>的概念，之后新的功能都是围绕<code>Fiber</code>进行实现，比如<code>AsyncMode</code>，<code>Profiler</code>等。</p><h2 id="React与ReactDom的区别"><a href="#React与ReactDom的区别" class="headerlink" title="React与ReactDom的区别"></a>React与ReactDom的区别</h2><p>问题：<strong><em>react仅仅1000多行代码，而react-dom却将近2w行</em></strong></p><p>答： React主要定义基础的概念，比如节点定义和描述相关，真正的实现代码都是在ReactDom里面的，也就是“平台无关”概念，针对不同的平台有不同的实现，但基本的概念都定义在React里。</p><h2 id="React16-6-0使用FlowType做类型检查"><a href="#React16-6-0使用FlowType做类型检查" class="headerlink" title="React16.6.0使用FlowType做类型检查"></a>React16.6.0使用FlowType做类型检查</h2><p>Flow 是 facebook 出品的 JavaScript 静态类型检查⼯具。所谓类型检查，就是在编译期尽早发现（由类型错误引起的）bug，⼜不影响代码运⾏（不需要运⾏时动态检查类型），使编写 JavaScript 具有和编写 Java 等强类型语⾔相近的体验。</p><p><a href="https://github.com/facebook/flow" target="_blank" rel="noopener">官方网站</a></p><p>简单示例🌰<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install -g flow-bin</span><br><span class="line">flow init</span><br><span class="line">touch index.js</span><br></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js 进行类型注释</span></span><br><span class="line"><span class="comment">/*@flow*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x: number, y: number</span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br><span class="line">add(<span class="string">'Hello'</span>, <span class="number">11</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 报错</span></span><br></pre></td></tr></table></figure><hr><a id="more"></a><h2 id="React暴露的Api"><a href="#React暴露的Api" class="headerlink" title="React暴露的Api"></a>React暴露的Api</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> React = &#123;</span><br><span class="line">  Children: &#123;</span><br><span class="line">    map,</span><br><span class="line">    forEach,</span><br><span class="line">    count,</span><br><span class="line">    toArray,</span><br><span class="line">    only,</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  createRef,</span><br><span class="line">  Component,</span><br><span class="line">  PureComponent,</span><br><span class="line"></span><br><span class="line">  createContext,</span><br><span class="line">  forwardRef,</span><br><span class="line"></span><br><span class="line">  Fragment: REACT_FRAGMENT_TYPE,</span><br><span class="line">  StrictMode: REACT_STRICT_MODE_TYPE,</span><br><span class="line">  unstable_AsyncMode: REACT_ASYNC_MODE_TYPE,</span><br><span class="line">  unstable_Profiler: REACT_PROFILER_TYPE,</span><br><span class="line"></span><br><span class="line">  createElement: __DEV__ ? createElementWithValidation : createElement,</span><br><span class="line">  cloneElement: __DEV__ ? cloneElementWithValidation : cloneElement,</span><br><span class="line">  createFactory: __DEV__ ? createFactoryWithValidation : createFactory,</span><br><span class="line">  isValidElement: isValidElement,</span><br><span class="line"></span><br><span class="line">  version: ReactVersion,</span><br><span class="line"></span><br><span class="line">  __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: ReactSharedInternals,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="JSX转换成什么"><a href="#JSX转换成什么" class="headerlink" title="JSX转换成什么"></a>JSX转换成什么</h2><ul><li>核心<code>React.createElement</code><code>ReactElement</code>通过<code>createElement</code>创建，调用该方法需要传入三个参数<ul><li>type</li><li>config</li><li>children</li></ul></li></ul><h3 id="type指代这个ReactElement的类型"><a href="#type指代这个ReactElement的类型" class="headerlink" title="type指代这个ReactElement的类型"></a>type指代这个ReactElement的类型</h3><ul><li>字符串比如<code>div</code>原生DOM，称为<code>HostComponent</code><strong>首字母小写</strong></li><li>自定义组件变量(<code>functional Component</code>/<code>ClassComponent</code>)<strong>首字母大写</strong>不大写会识别为原生DOM解析</li><li>原生提供的组件<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Fragment: REACT_FRAGMENT_TYPE,</span><br><span class="line">StrictMode: REACT_STRICT_MODE_TYPE,</span><br><span class="line">unstable_AsyncMode: REACT_ASYNC_MODE_TYPE,</span><br><span class="line">unstable_Profiler: REACT_PROFILER_TYPE,</span><br></pre></td></tr></table></figure>这四个都是<code>React</code>提供的组件，但它们其实都只是占位符，都是一个<code>Symbol</code>，在<code>React</code>实际检测到他们的时候会做一些特殊的处理，比如<code>StrictMode</code>和<code>AsyncMode</code>会让他们的子节点对应的<code>Fiber</code>的<code>mode</code>都变成和它们一样的<code>mode</code>。</li></ul><h3 id="config"><a href="#config" class="headerlink" title="config"></a>config</h3><p>react会把关键参数解析出来，例如<code>key</code>、<code>ref</code>，在<code>createElement</code>中识别分离，这些参数不会和其他参数一起处理而是单独作为变量出现在<code>ReactElement</code>上。</p><h3 id="children"><a href="#children" class="headerlink" title="children"></a>children</h3><p>第三个参数就是children，而且可以有任意多的参数，表示兄弟节点。可以通过<code>this.props.children</code>访问到。</p><h3 id="相关源码以及注解⬇️"><a href="#相关源码以及注解⬇️" class="headerlink" title="相关源码以及注解⬇️"></a>相关源码以及注解⬇️</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">createElement</span>(<span class="params">type, config, children</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (config != <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (hasValidRef(config)) &#123; <span class="comment">// 从第二个参数筛选出ref和key</span></span><br><span class="line">      ref = config.ref;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (hasValidKey(config)) &#123;</span><br><span class="line">      key = <span class="string">''</span> + config.key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Remaining properties are added to a new props object</span></span><br><span class="line">    <span class="keyword">for</span> (propName <span class="keyword">in</span> config) &#123;</span><br><span class="line">      <span class="keyword">if</span> (</span><br><span class="line">        hasOwnProperty.call(config, propName) &amp;&amp;</span><br><span class="line">        !RESERVED_PROPS.hasOwnProperty(propName) <span class="comment">// 内置的ref、id就是这解析出来的</span></span><br><span class="line">      ) &#123;</span><br><span class="line">        props[propName] = config[propName];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// </span></span><br><span class="line">  <span class="keyword">const</span> childrenLength = <span class="built_in">arguments</span>.length - <span class="number">2</span>; <span class="comment">// 3以后的参数都是children</span></span><br><span class="line">  <span class="keyword">if</span> (childrenLength === <span class="number">1</span>) &#123;</span><br><span class="line">    props.children = children;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (childrenLength &gt; <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> childArray = <span class="built_in">Array</span>(childrenLength); <span class="comment">// 大于1 放到数组</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; childrenLength; i++) &#123;</span><br><span class="line">      childArray[i] = <span class="built_in">arguments</span>[i + <span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    props.children = childArray; <span class="comment">// 放到chidren props.children拿的就是这个</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Resolve default props</span></span><br><span class="line">  <span class="keyword">if</span> (type &amp;&amp; type.defaultProps) &#123; <span class="comment">// 设置props的默认值</span></span><br><span class="line">    <span class="keyword">const</span> defaultProps = type.defaultProps;</span><br><span class="line">    <span class="keyword">for</span> (propName <span class="keyword">in</span> defaultProps) &#123;</span><br><span class="line">      <span class="keyword">if</span> (props[propName] === <span class="literal">undefined</span>) &#123; <span class="comment">// 如果props是undefined才会使用默认值</span></span><br><span class="line">        props[propName] = defaultProps[propName];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> ReactElement(</span><br><span class="line">    type,</span><br><span class="line">    key,</span><br><span class="line">    ref,</span><br><span class="line">    self,</span><br><span class="line">    source,</span><br><span class="line">    ReactCurrentOwner.current,</span><br><span class="line">    props,</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ReactElement = <span class="function"><span class="keyword">function</span>(<span class="params">type, key, ref, self, source, owner, props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> element = &#123;</span><br><span class="line">    <span class="comment">// This tag allows us to uniquely identify this as a React Element</span></span><br><span class="line">    $$<span class="keyword">typeof</span>: REACT_ELEMENT_TYPE,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Built-in properties that belong on the element</span></span><br><span class="line">    type: type,</span><br><span class="line">    key: key,</span><br><span class="line">    ref: ref,</span><br><span class="line">    props: props,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Record the component responsible for creating this element.</span></span><br><span class="line">    _owner: owner,</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> element</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ReactElement"><a href="#ReactElement" class="headerlink" title="ReactElement"></a>ReactElement</h3><p><code>ReactElement</code>只是一个用来承载信息的容器，它会告诉后续的操作这个节点的以下信息：</p><ul><li>type类型，用于判断如何创建节点</li><li>key和ref这些特殊信息</li><li>props新的属性内容</li><li>$$typeof用于确定是否属于<code>ReactElement</code></li></ul><blockquote><p>React通过提供这种类型的数据，来脱离平台的限制。</p></blockquote><h3 id="typeof"><a href="#typeof" class="headerlink" title="$$typeof"></a>$$typeof</h3><p>在最后创建<code>ReactElement</code>我们👀看到了这么一个变量<code>$$typeof</code>。这是啥呢？React元素，会有一个<code>$$typeof</code>来表示该元素是什么类型。当本地有<code>Symbol</code>，则使用<code>Symbol</code>生成，没有时使用16进制。但有一个特例：<code>ReactDOM.createPortal</code>的时候是<code>REACT_PORTAL_TYPE</code>，不过它不是通过<code>createElement</code>创建的，所以它也不属于<code>ReactElement</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> REACT_ELEMENT_TYPE = <span class="number">0xeac7</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> REACT_PORTAL_TYPE = <span class="number">0xeaca</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> REACT_FRAGMENT_TYPE = <span class="number">0xeacb</span>;</span><br><span class="line">....</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">Symbol</span> === <span class="string">'function'</span> &amp;&amp; <span class="built_in">Symbol</span>.for) &#123;</span><br><span class="line">  <span class="keyword">const</span> symbolFor = <span class="built_in">Symbol</span>.for;</span><br><span class="line">  REACT_ELEMENT_TYPE = symbolFor(<span class="string">'react.element'</span>);</span><br><span class="line">  REACT_PORTAL_TYPE = symbolFor(<span class="string">'react.portal'</span>);</span><br><span class="line">  REACT_FRAGMENT_TYPE = symbolFor(<span class="string">'react.fragment'</span>);</span><br><span class="line">  ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="cloneElement"><a href="#cloneElement" class="headerlink" title="cloneElement"></a>cloneElement</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一个参数传入ReactElement，第二、三个参数和createElement一致</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">cloneElement</span>(<span class="params">element, config, children</span>) </span>&#123;</span><br><span class="line">  invariant(</span><br><span class="line">    !(element === <span class="literal">null</span> || element === <span class="literal">undefined</span>),</span><br><span class="line">    <span class="string">'React.cloneElement(...): The argument must be a React element, but you passed %s.'</span>,</span><br><span class="line">    element,</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> propName;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 复制传入的element props</span></span><br><span class="line">  <span class="keyword">const</span> props = <span class="built_in">Object</span>.assign(&#123;&#125;, element.props);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 提取内嵌的key和ref 不进行覆盖是原有的</span></span><br><span class="line">  <span class="keyword">let</span> key = element.key;</span><br><span class="line">  <span class="keyword">let</span> ref = element.ref;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> self = element._self;</span><br><span class="line">  <span class="comment">// Source is preserved since cloneElement is unlikely to be targeted by a</span></span><br><span class="line">  <span class="comment">// transpiler, and the original source is probably a better indicator of the</span></span><br><span class="line">  <span class="comment">// true owner.</span></span><br><span class="line">  <span class="keyword">const</span> source = element._source;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Owner will be preserved, unless ref is overridden</span></span><br><span class="line">  <span class="keyword">let</span> owner = element._owner;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// config和children的解析是一样的</span></span><br><span class="line">  <span class="keyword">if</span> (config != <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (hasValidRef(config)) &#123;</span><br><span class="line">      <span class="comment">// Silently steal the ref from the parent.</span></span><br><span class="line">      ref = config.ref;</span><br><span class="line">      owner = ReactCurrentOwner.current;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (hasValidKey(config)) &#123;</span><br><span class="line">      key = <span class="string">''</span> + config.key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Remaining properties override existing props</span></span><br><span class="line">    <span class="keyword">let</span> defaultProps;</span><br><span class="line">    <span class="keyword">if</span> (element.type &amp;&amp; element.type.defaultProps) &#123;</span><br><span class="line">      defaultProps = element.type.defaultProps;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (propName <span class="keyword">in</span> config) &#123;</span><br><span class="line">      <span class="keyword">if</span> (</span><br><span class="line">        hasOwnProperty.call(config, propName) &amp;&amp;</span><br><span class="line">        !RESERVED_PROPS.hasOwnProperty(propName)</span><br><span class="line">      ) &#123;</span><br><span class="line">        <span class="keyword">if</span> (config[propName] === <span class="literal">undefined</span> &amp;&amp; defaultProps !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">          <span class="comment">// Resolve default props</span></span><br><span class="line">          props[propName] = defaultProps[propName];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          props[propName] = config[propName];</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Children can be more than one argument, and those are transferred onto</span></span><br><span class="line">  <span class="comment">// the newly allocated props object.</span></span><br><span class="line">  <span class="keyword">const</span> childrenLength = <span class="built_in">arguments</span>.length - <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">if</span> (childrenLength === <span class="number">1</span>) &#123;</span><br><span class="line">    props.children = children;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (childrenLength &gt; <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> childArray = <span class="built_in">Array</span>(childrenLength);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; childrenLength; i++) &#123;</span><br><span class="line">      childArray[i] = <span class="built_in">arguments</span>[i + <span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    props.children = childArray;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> ReactElement(element.type, key, ref, self, source, owner, props);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>React.cloneElement()几乎等同于<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;element.type &#123;...element.props&#125; &#123;...props&#125;&gt;&#123;children&#125;&lt;<span class="regexp">/element.type&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote><h3 id="劫持组件"><a href="#劫持组件" class="headerlink" title="劫持组件"></a>劫持组件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">AddStyle</span>(<span class="params">&#123;children&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> React.cloneElement(children, &#123;</span><br><span class="line">    style: &#123;</span><br><span class="line">      background: <span class="string">'#dfdfdf'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, <span class="string">'hello world'</span>)</span><br><span class="line">&#125;</span><br><span class="line">&lt;AddStyle&gt;</span><br><span class="line">  &lt;div&gt;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>AddStyle&gt;</span><br></pre></td></tr></table></figure><h2 id="Component和PureComponent两个基类-ReactBaseClasses-js"><a href="#Component和PureComponent两个基类-ReactBaseClasses-js" class="headerlink" title="Component和PureComponent两个基类(ReactBaseClasses.js)"></a>Component和PureComponent两个基类(ReactBaseClasses.js)</h2><blockquote><p>以element为样板克隆返回新的React元素，返回的props为新和旧的props进行浅层合并后的结果。新的子元素会替代旧的子元素，但是key和ref会保留。</p></blockquote><p>源码解析↓<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Component</span>(<span class="params">props, context, updater</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.props = props;</span><br><span class="line">  <span class="keyword">this</span>.context = context;</span><br><span class="line">  <span class="comment">// 使用string ref</span></span><br><span class="line">  <span class="keyword">this</span>.refs = emptyObject;</span><br><span class="line">  <span class="keyword">this</span>.updater = updater || ReactNoopUpdateQueue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Component.prototype.isReactComponent = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">Component.prototype.setState = <span class="function"><span class="keyword">function</span>(<span class="params">partialState, callback</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 校验第一个参数</span></span><br><span class="line">  <span class="comment">// partialState: 要更新的对象</span></span><br><span class="line">  <span class="comment">// 新的react版本推荐setState使用方法 =&gt; this.setState((preState) =&gt; (&#123;count:preState.count+1&#125;))</span></span><br><span class="line">  invariant(</span><br><span class="line">    <span class="keyword">typeof</span> partialState === <span class="string">'object'</span> ||</span><br><span class="line">      <span class="keyword">typeof</span> partialState === <span class="string">'function'</span> ||</span><br><span class="line">      partialState == <span class="literal">null</span>,</span><br><span class="line">    <span class="string">'setState(...): takes an object of state variables to update or a '</span> +</span><br><span class="line">      <span class="string">'function which returns an object of state variables.'</span>,</span><br><span class="line">  );</span><br><span class="line">  <span class="comment">// 更新队列 实现在react-dom里 整个Component的初始化入口</span></span><br><span class="line">  <span class="keyword">this</span>.updater.enqueueSetState(<span class="keyword">this</span>, partialState, callback, <span class="string">'setState'</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 强制更新</span></span><br><span class="line">Component.prototype.forceUpdate = <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 同样也在react-dom里实现</span></span><br><span class="line">  <span class="keyword">this</span>.updater.enqueueForceUpdate(<span class="keyword">this</span>, callback, <span class="string">'forceUpdate'</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ComponentDummy</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">ComponentDummy.prototype = Component.prototype;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 和Component一致</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">PureComponent</span>(<span class="params">props, context, updater</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.props = props;</span><br><span class="line">  <span class="keyword">this</span>.context = context;</span><br><span class="line">  <span class="keyword">this</span>.refs = emptyObject;</span><br><span class="line">  <span class="keyword">this</span>.updater = updater || ReactNoopUpdateQueue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 继承</span></span><br><span class="line"><span class="keyword">const</span> pureComponentPrototype = (PureComponent.prototype = <span class="keyword">new</span> ComponentDummy());</span><br><span class="line">pureComponentPrototype.constructor = PureComponent;</span><br><span class="line"><span class="comment">// 复制拷贝 唯一的区别是标记上的区别 isPureReactComponent</span></span><br><span class="line"><span class="built_in">Object</span>.assign(pureComponentPrototype, Component.prototype);</span><br><span class="line">pureComponentPrototype.isPureReactComponent = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure></p><p>有标识则会进行浅比较state和props。<strong>React中对比一个ClassComponent是否需要更新，只有两个地方。一是看有没有shouldComponentUpdate方法，二就是这里的PureComponent判断</strong><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (ctor.prototype &amp;&amp; ctor.prototype.isPureReactComponent) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState)</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="设计思想"><a href="#设计思想" class="headerlink" title="设计思想"></a>设计思想</h2><ul><li>平台思想(React和ReactDOM分包)抽象出概念，彻底剥离实现层，react只是处理了类型和参数的转换，不具体的实现任何业务。各个平台的实现放到ReactDom里处理。</li></ul><p>未完待续…</p><h2 id="createRef-amp-ref"><a href="#createRef-amp-ref" class="headerlink" title="createRef &amp; ref"></a>createRef &amp; ref</h2><blockquote><p>核心：Refs 提供了一种方式，允许我们访问 DOM 节点或在 render 方法中创建的 React 元素。</p></blockquote><p><em>三种使用方式</em></p><ul><li>string ref 即将抛弃不推荐</li><li>obj</li><li>function</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  componentDidMount() &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.refs.myDiv.textContent = <span class="string">'string ref'</span>;</span><br><span class="line">      <span class="keyword">this</span>.objRef.current.textContent = <span class="string">'object ref'</span>;</span><br><span class="line">      <span class="keyword">this</span>.funRef.textContent = <span class="string">'function ref'</span>;</span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    &lt;&gt;</span><br><span class="line">      &lt;p ref=<span class="string">"myDiv"</span> &gt;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">      &lt;p ref=&#123;this.objRef&#125; &gt;&lt;/</span>p&gt;</span><br><span class="line">      &lt;p ref=&#123;(node) =&gt; <span class="keyword">this</span>.funRef = node&#125;&gt;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>&gt;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="createRef"><a href="#createRef" class="headerlink" title="createRef"></a>createRef</h3><p>Refs 是使用 React.createRef() 创建的，并通过 ref 属性附加到 React 元素。在构造组件时，通常将 Refs 分配给实例属性，以便可以在整个组件中引用它们。</p><p>如果想使用ref,只需要拿current对象即可，</p><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">createRef</span>(<span class="params"></span>): <span class="title">RefObject</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> refObject = &#123;</span><br><span class="line">    current: <span class="literal">null</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> refObject;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="访问Refs"><a href="#访问Refs" class="headerlink" title="访问Refs"></a>访问Refs</h3><p>当 ref 被传递给 render 中的元素时，对该节点的引用可以在 ref 的 current 属性中被访问。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> node = <span class="keyword">this</span>.myRef.current;</span><br></pre></td></tr></table></figure></p><ul><li>当 ref 属性用于 HTML 元素时，current 属性为底层 DOM 元素。</li><li>当 ref 属性用于自定义 class 组件时，current 属性为接收组件的挂载实例。</li><li>不能在函数组件上使用 ref 属性，因为它们没有实例。可以通过<code>useRef</code>可以在函数组件内部使用 ref 属性，只要它指向一个 DOM 元素或 class 组件</li></ul><h2 id="forwardRef"><a href="#forwardRef" class="headerlink" title="forwardRef"></a>forwardRef</h2><blockquote><p>forwardRef是用来解决HOC组件传递ref的问题的。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> TargetComponent = React.forwardRef(<span class="function">(<span class="params">props, ref</span>) =&gt;</span> (</span><br><span class="line">  &lt;TargetComponent ref=&#123;ref&#125; /&gt;</span><br><span class="line">))</span><br></pre></td></tr></table></figure><blockquote><p>这也是为什么要提供createRef作为新的ref使用方法的原因，如果用string ref就没法当作参数传递了。</p></blockquote><h3 id="源码-1"><a href="#源码-1" class="headerlink" title="源码"></a>源码</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">forwardRef</span>&lt;<span class="title">Props</span>, <span class="title">ElementType</span>: <span class="title">React$ElementType</span>&gt;(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  render: (props: Props, ref: React$Ref&lt;ElementType&gt;</span>) =&gt; <span class="title">React$Node</span>,</span></span><br><span class="line"><span class="function">) </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">const</span> elementType = &#123;</span><br><span class="line">    $$<span class="keyword">typeof</span>: REACT_FORWARD_REF_TYPE,</span><br><span class="line">    render,</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> elementType;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 返回对象 reactElement的type还是REACT_ELEMENT_TYPE</span></span><br></pre></td></tr></table></figure><h2 id="Context"><a href="#Context" class="headerlink" title="Context"></a>Context</h2><blockquote><p>Context 提供了一个无需为每层组件手动添加 props，就能在组件间进行数据传递的方法。</p></blockquote><h3 id="老api-gt-childContextType-17大版本移除-老api性能差会多次渲染"><a href="#老api-gt-childContextType-17大版本移除-老api性能差会多次渲染" class="headerlink" title="老api -&gt; childContextType 17大版本移除 老api性能差会多次渲染"></a>老api -&gt; childContextType 17大版本移除 老api性能差会多次渲染</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Parent</span></span><br><span class="line">getChildContext () &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">value</span>: <span class="keyword">this</span>.state.text &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Parent.childContextTypes = &#123;</span><br><span class="line">  <span class="comment">// 都需要声明</span></span><br><span class="line">  value: PropTypes.string</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Child 使用</span></span><br><span class="line">&#123;<span class="keyword">this</span>.state.context.value&#125;</span><br><span class="line"></span><br><span class="line">Child.childContextTypes = &#123;</span><br><span class="line">  <span class="comment">// 都需要声明 因为可能有多个父级</span></span><br><span class="line">  value: PropTypes.string</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="新api-gt-createContext"><a href="#新api-gt-createContext" class="headerlink" title="新api -&gt; createContext"></a>新api -&gt; createContext</h3><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// createContext的Provider和Consumer是一一对应的</span></span><br><span class="line"><span class="keyword">const</span> &#123; Provider, Consumer &#125; = React.createContext(<span class="string">'defaultValue'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ProviderComp = <span class="function">(<span class="params">props</span>) =&gt;</span> (</span><br><span class="line">  &lt;Provider value=&#123;<span class="string">'realValue'</span>&#125;&gt;</span><br><span class="line">    &#123;props.children&#125;</span><br><span class="line">  &lt;<span class="regexp">/Provider&gt;</span></span><br><span class="line"><span class="regexp">)</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">const ConsumerComp = () =&gt; (</span></span><br><span class="line"><span class="regexp">  &lt;Consumer&gt;</span></span><br><span class="line"><span class="regexp">    &#123;(value) =&gt; &lt;p&gt;&#123;value&#125;&lt;/</span>p&gt;&#125;</span><br><span class="line">  &lt;<span class="regexp">/Consumber&gt;</span></span><br><span class="line"><span class="regexp">)</span></span><br></pre></td></tr></table></figure><p>当 Provider 的 value 值发生变化时，它内部的所有消费组件都会重新渲染。Provider 及其内部 consumer 组件都不受制于 shouldComponentUpdate 函数，因此当 consumer 组件在其祖先组件退出更新的情况下也能更新。</p><h4 id="源码-2"><a href="#源码-2" class="headerlink" title="源码"></a>源码</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//calculateChangedBits方法,使用Object.is()计算新老context变化    </span></span><br><span class="line"><span class="comment">//defaultValue 当Provider组件属性value不存在时 会使用默认值defaultValue</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createContext</span>(<span class="params">defaultValue, calculateChangedBits</span>) </span>&#123;      </span><br><span class="line">  <span class="keyword">if</span> (calculateChangedBits === <span class="literal">undefined</span>) &#123;</span><br><span class="line">    calculateChangedBits = <span class="literal">null</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    &#123;</span><br><span class="line">      !(calculateChangedBits === <span class="literal">null</span> || <span class="keyword">typeof</span> calculateChangedBits === <span class="string">'function'</span>) ? warningWithoutStack$<span class="number">1</span>(<span class="literal">false</span>, <span class="string">'createContext: Expected the optional second argument to be a '</span> + <span class="string">'function. Instead received: %s'</span>, calculateChangedBits) : <span class="keyword">void</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> context = &#123;</span><br><span class="line">    $$<span class="keyword">typeof</span>: REACT_CONTEXT_TYPE, <span class="comment">//context的$$typeof在createElement中的type中的type对象中存储</span></span><br><span class="line">    _calculateChangedBits: calculateChangedBits,<span class="comment">//计算新老context变化</span></span><br><span class="line">    <span class="comment">//_currentValue和_currentValue2作用一样,只是作用平台不同</span></span><br><span class="line">    _currentValue: defaultValue, <span class="comment">//Provider的value属性</span></span><br><span class="line">    _currentValue2: defaultValue,</span><br><span class="line">    _threadCount: <span class="number">0</span>, <span class="comment">//用来追踪context的并发渲染器数量</span></span><br><span class="line">    Provider: <span class="literal">null</span>, <span class="comment">//提供组件</span></span><br><span class="line">    Consumer: <span class="literal">null</span>  <span class="comment">//应用组件</span></span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">//返回一个context对象  </span></span><br><span class="line">  <span class="keyword">return</span> context;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ConcurrentMode"><a href="#ConcurrentMode" class="headerlink" title="ConcurrentMode"></a>ConcurrentMode</h2><blockquote><p>ConcurrentMode有一个特性，在一个子树当中渲染了ConcurrentMode之后，它下面的所有节点产生的更新都是一个低优先级的更新。方便react区分一些优先级高低的任务，在进行更新的过程中，优先执行一些较高的任务。</p></blockquote><h3 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;ConcurrentMode&gt;</span><br><span class="line">  &lt;List/&gt;</span><br><span class="line">&lt;<span class="regexp">/ConcurrentMode&gt;</span></span><br></pre></td></tr></table></figure><h3 id="源码-3"><a href="#源码-3" class="headerlink" title="源码"></a>源码</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// React.js</span></span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  REACT_CONCURRENT_MODE_TYPE,</span><br><span class="line">  REACT_FRAGMENT_TYPE,</span><br><span class="line">  REACT_PROFILER_TYPE,</span><br><span class="line">  REACT_STRICT_MODE_TYPE,</span><br><span class="line">  REACT_SUSPENSE_TYPE,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'shared/ReactSymbols'</span>;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (enableStableConcurrentModeAPIs) &#123;</span><br><span class="line">  React.ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;</span><br><span class="line">  React.Profiler = REACT_PROFILER_TYPE;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  React.unstable_ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;</span><br><span class="line">  React.unstable_Profiler = REACT_PROFILER_TYPE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">// ReactSymbols.js</span></span><br><span class="line"><span class="keyword">const</span> hasSymbol = <span class="keyword">typeof</span> <span class="built_in">Symbol</span> === <span class="string">'function'</span> &amp;&amp; <span class="built_in">Symbol</span>.for;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> REACT_CONCURRENT_MODE_TYPE = hasSymbol</span><br><span class="line">  ? <span class="built_in">Symbol</span>.for(<span class="string">'react.concurrent_mode'</span>)</span><br><span class="line">  : <span class="number">0xeacf</span>;</span><br><span class="line">  </span><br><span class="line"><span class="comment">// 可以看出ConcurrentMode组件就是一个简单的Symbol，它也没有任何的属性 </span></span><br><span class="line"><span class="comment">// 思考它是如何承载children的?</span></span><br></pre></td></tr></table></figure><h2 id="suspense-amp-lazy"><a href="#suspense-amp-lazy" class="headerlink" title="suspense &amp; lazy"></a>suspense &amp; lazy</h2><h3 id="使用-2"><a href="#使用-2" class="headerlink" title="使用"></a>使用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; lazy, Suspense &#125; <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> LazyComp = lazy(<span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">"../views/LazyComp"</span>));</span><br><span class="line"><span class="comment">// 延迟加载回调</span></span><br><span class="line"><span class="keyword">const</span> SuspenseComponent = <span class="function">(<span class="params">Component</span>) =&gt;</span> <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;Suspense fallback=<span class="string">"loading data"</span>&gt;</span><br><span class="line">      &lt;Component &#123;...props&#125;&gt;&lt;<span class="regexp">/Component&gt;</span></span><br><span class="line"><span class="regexp">      &lt;LazyComp /</span>&gt;</span><br><span class="line">    &lt;<span class="regexp">/Suspense&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;;</span></span><br></pre></td></tr></table></figure><p>在 Suspense 内部有多个组件，它要等所有组件都 resolve 之后，它才会把 fallback 去掉，然后显示出这里面的内容，有任何一个还处于 pending 状态的，那么它还是会显示 fallback的内容. </p><h3 id="源码-4"><a href="#源码-4" class="headerlink" title="源码"></a>源码</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Suspense: REACT_SUSPENSE_TYPE, <span class="comment">// Suspense也是Symbol 也是一个标识</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> type &#123;LazyComponent, Thenable&#125; <span class="keyword">from</span> <span class="string">'shared/ReactLazyComponent'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;REACT_LAZY_TYPE&#125; <span class="keyword">from</span> <span class="string">'shared/ReactSymbols'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// lazy 是一个方法，接收一个方法并且返回一个 Thenable(就是Promise对象)</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">lazy</span>&lt;<span class="title">T</span>, <span class="title">R</span>&gt;(<span class="params">ctor: (</span>) =&gt; <span class="title">Thenable</span>&lt;<span class="title">T</span>, <span class="title">R</span>&gt;): <span class="title">LazyComponent</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    $$<span class="keyword">typeof</span>: REACT_LAZY_TYPE,</span><br><span class="line">    _ctor: ctor, <span class="comment">// 记载了传入的生产thenable对象的方法</span></span><br><span class="line">    <span class="comment">// React uses these fields to store the result.</span></span><br><span class="line">    _status: <span class="number">-1</span>, <span class="comment">// 用来记录 Thenable 的一个状态</span></span><br><span class="line">    _result: <span class="literal">null</span>, <span class="comment">// 用来记录这个对象 resolve 之后返回的那个属性 lazy()最终返回出来的组件会放到_result 里面，</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>㊗️💐恭喜初中毕业了😃❀❀❀</p><h2 id="Children详解"><a href="#Children详解" class="headerlink" title="Children详解"></a>Children详解</h2><p>children由<code>map</code>, <code>forEach</code>, <code>count</code>, <code>toArray</code>, <code>only</code>组成。看起来和数组的方法很类似，用于处理<code>this.props.children</code>这种不透明数据结构的应用程序。由于children几个方法的核心都是<code>mapIntoArray</code>，因此这里只对map做分析，其他的可以自己去查看。</p><p>React.Children 提供了用于处理 props.children 不透明数据结构的实用方法。</p><ul><li>React.Children.map</li><li>React.Children.forEach</li><li>React.Children.count</li><li>React.Children.only: 验证 children 是否只有一个子节点（一个 React 元素），如果有则返回它，否则此方法会抛出错误。</li><li>React.Children.toArray: 将 children 这个复杂的数据结构以数组的方式扁平展开并返回，并为每个子节点分配一个 key。</li></ul><h3 id="react-children-map"><a href="#react-children-map" class="headerlink" title="react.children.map"></a>react.children.map</h3><p>map的使用实例，虽然处理函数给的是多维数组，但是通过map处理后，返回的结果其实被处理成为了一维数组。</p><ul><li>如果是fragment，将会被视为一个子组件，不会被遍历。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(React.Children.map(<span class="keyword">this</span>.props.children, c =&gt; [[c],[c],[c]]));</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;&#123;</span><br><span class="line">        React.Children.map(<span class="keyword">this</span>.props.children, c =&gt; [[c],[c],[c]])</span><br><span class="line">      &#125;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">class App extends React.Component &#123;</span></span><br><span class="line"><span class="regexp">  render() &#123;</span></span><br><span class="line"><span class="regexp">    return(</span></span><br><span class="line"><span class="regexp">      &lt;div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;Child&gt;&lt;p&gt;hello1&lt;/</span>p&gt;<span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>hello2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>&lt;<span class="regexp">/Child&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 渲染结果：</span></span><br><span class="line">&lt;p&gt;hello1&lt;<span class="regexp">/p&gt;  </span></span><br><span class="line"><span class="regexp">&lt;p&gt;hello1&lt;/</span>p&gt; </span><br><span class="line">&lt;p&gt;hello1&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">&lt;p&gt;hello2&lt;/</span>p&gt;</span><br><span class="line">&lt;p&gt;hello2&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">&lt;p&gt;hello2&lt;/</span>p&gt;</span><br></pre></td></tr></table></figure></li></ul><p><img src="http://cdn.mydearest.cn/blog/images/react-children-map.png" alt="map流程两个递归"></p><p>打印dom结构，发现每个节点都各自生成了一个key，下面会解析生成该key的步骤。<img src="http://cdn.mydearest.cn/blog/images/react-origin.png" alt="源码1"></p><h2 id="memo"><a href="#memo" class="headerlink" title="memo"></a>memo</h2><p>与 React.PureComponent 非常相似，适用于函数组件，但不适用于 class 组件。</p><p>since React 16.6</p><p><strong>memo用法</strong></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyComponent</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="comment">/* 使用 props 渲染 */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">areEqual</span>(<span class="params">prevProps, nextProps</span>) </span>&#123;</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">  如果把 nextProps 传入 render 方法的返回结果与</span></span><br><span class="line"><span class="comment">  将 prevProps 传入 render 方法的返回结果一致则返回 true，</span></span><br><span class="line"><span class="comment">  否则返回 false</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> React.memo(MyComponent, areEqual);</span><br></pre></td></tr></table></figure><p><strong>memo源码</strong></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// * react/packages/react/src/memo.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">memo</span>&lt;<span class="title">Props</span>&gt;(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  type: React$ElementType,</span></span></span><br><span class="line"><span class="function"><span class="params">  compare?: (oldProps: Props, newProps: Props</span>) =&gt; <span class="title">boolean</span>,</span></span><br><span class="line"><span class="function">) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (__DEV__) &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    $$<span class="keyword">typeof</span>: REACT_MEMO_TYPE,</span><br><span class="line">    type,</span><br><span class="line">    compare: compare === <span class="literal">undefined</span> ? <span class="literal">null</span> : compare,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Fragment"><a href="#Fragment" class="headerlink" title="Fragment"></a>Fragment</h2><blockquote><p>不额外创建 DOM 元素的情况下，让 render() 方法中返回多个元素。</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// * react/packages/react/src/React.js</span></span><br><span class="line"><span class="keyword">const</span> React = &#123;</span><br><span class="line">  ...,</span><br><span class="line">  Fragment: REACT_FRAGMENT_TYPE,</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// * react/packages/shared/ReactSymbols.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> REACT_FRAGMENT_TYPE = hasSymbol</span><br><span class="line">  ? <span class="built_in">Symbol</span>.for(<span class="string">'react.fragment'</span>)</span><br><span class="line">  : <span class="number">0xeacb</span>;</span><br></pre></td></tr></table></figure><h2 id="StrictMode"><a href="#StrictMode" class="headerlink" title="StrictMode"></a>StrictMode</h2><p>用于检查子节点有没有潜在的问题。严格模式检查仅在开发模式下运行；它们不会影响生产构建。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// * 不会对 Header 和 Footer 组件运行严格模式检查。但是，ComponentOne 和 ComponentTwo 以及它们的所有后代元素都将进行检查。</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ExampleApplication</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;Header /&gt;</span><br><span class="line">      &lt;React.StrictMode&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          &lt;ComponentOne /&gt;</span><br><span class="line">          &lt;ComponentTwo /&gt;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>React.StrictMode&gt;</span><br><span class="line">      &lt;Footer /&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// * react/packages/react/src/React.js</span></span><br><span class="line"><span class="keyword">const</span> React = &#123;</span><br><span class="line">  ...,</span><br><span class="line">  StrictMode: REACT_STRICT_MODE_TYPE,</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// * react/packages/shared/ReactSymbols.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> REACT_STRICT_MODE_TYPE = hasSymbol</span><br><span class="line">  ? <span class="built_in">Symbol</span>.for(<span class="string">'react.strict_mode'</span>)</span><br><span class="line">  : <span class="number">0xeacc</span>;</span><br></pre></td></tr></table></figure><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="https://juejin.im/post/6855129007852109837" target="_blank" rel="noopener">https://juejin.im/post/6855129007852109837</a></p><p><a href="https://react.jokcy.me/book/api/react.html" target="_blank" rel="noopener">https://react.jokcy.me/book/api/react.html</a></p><p><a href="http://muyunyun.cn/blog/#/README" target="_blank" rel="noopener">http://muyunyun.cn/blog/#/README</a></p>]]></content:encoded>
      
      <comments>http://mydearest.cn/2020/react%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E7%B3%BB%E5%88%97%E4%B8%80(React%E7%9B%B8%E5%85%B3API).html#disqus_thread</comments>
    </item>
    
    <item>
      <title>收集有用的网站</title>
      <link>http://mydearest.cn/2020/useful-website.html</link>
      <guid>http://mydearest.cn/2020/useful-website.html</guid>
      <pubDate>Fri, 09 Oct 2020 08:32:26 GMT</pubDate>
      <description>
      
        &lt;p&gt;This page will collect some useful websets.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Alvin9999/new-pac/wiki/ss%E5%85%8D%E8%B4%B9%E8%B4%A6%E5%8F%B7&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ss free account&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Alvin9999/new-pac/wiki/v2ray%E5%85%8D%E8%B4%B9%E8%B4%A6%E5%8F%B7&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;v2ray free account&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/abhisheknaiidu/awesome-github-profile-readme&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;awesome-github-profile-readme&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;probot&quot;&gt;&lt;a href=&quot;#probot&quot; class=&quot;headerlink&quot; title=&quot;probot&quot;&gt;&lt;/a&gt;probot&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://probot.github.io/apps/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;probot&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://probot.github.io/apps/auto-comment/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Auto-comment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://probot.github.io/apps/pull/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;pull&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/svanboxel/delete-merged-branch&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;delete-merged-branch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://probot.github.io/apps/stale/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;stale&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>This page will collect some useful websets.</p><ul><li><a href="https://github.com/Alvin9999/new-pac/wiki/ss%E5%85%8D%E8%B4%B9%E8%B4%A6%E5%8F%B7" target="_blank" rel="noopener">ss free account</a></li><li><a href="https://github.com/Alvin9999/new-pac/wiki/v2ray%E5%85%8D%E8%B4%B9%E8%B4%A6%E5%8F%B7" target="_blank" rel="noopener">v2ray free account</a></li><li><a href="https://github.com/abhisheknaiidu/awesome-github-profile-readme" target="_blank" rel="noopener">awesome-github-profile-readme</a></li></ul><h2 id="probot"><a href="#probot" class="headerlink" title="probot"></a>probot</h2><ul><li><a href="https://probot.github.io/apps/" target="_blank" rel="noopener">probot</a><ul><li><a href="https://probot.github.io/apps/auto-comment/" target="_blank" rel="noopener">Auto-comment</a></li><li><a href="https://probot.github.io/apps/pull/" target="_blank" rel="noopener">pull</a></li><li><a href="https://github.com/svanboxel/delete-merged-branch" target="_blank" rel="noopener">delete-merged-branch</a></li><li><a href="https://probot.github.io/apps/stale/" target="_blank" rel="noopener">stale</a></li></ul></li></ul><hr><a id="more"></a><h2 id="办公工具"><a href="#办公工具" class="headerlink" title="办公工具"></a>办公工具</h2><ul><li><a href="https://www.atlassian.com/software/confluence" target="_blank" rel="noopener">wiki</a></li><li><a href="https://www.weaver.com.cn/" target="_blank" rel="noopener">泛微oa</a></li></ul><h2 id="build-sites"><a href="#build-sites" class="headerlink" title="build sites"></a>build sites</h2><ul><li><a href="https://www.netlify.com/" target="_blank" rel="noopener">netlify</a></li><li><a href="https://vercel.com/" target="_blank" rel="noopener">vercel</a><ul><li><a href="https://zhuanlan.zhihu.com/p/164585697" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/164585697</a></li></ul></li></ul><h2 id="组件UI开发工具"><a href="#组件UI开发工具" class="headerlink" title="组件UI开发工具"></a>组件UI开发工具</h2><ul><li><a href="https://github.com/storybookjs/storybook" target="_blank" rel="noopener">storybook</a></li></ul><h2 id="文档站"><a href="#文档站" class="headerlink" title="文档站"></a>文档站</h2><ul><li>Gitbooks</li><li><a href="https://docsify.js.org/#/" target="_blank" rel="noopener">docsify</a></li><li><a href="https://docusaurus.io/" target="_blank" rel="noopener">docusaurus</a></li><li><a href="https://www.docz.site/" target="_blank" rel="noopener">docz</a></li><li><a href="https://vuepress.vuejs.org/zh/" target="_blank" rel="noopener">vuepress</a></li></ul><h2 id="chrome插件"><a href="#chrome插件" class="headerlink" title="chrome插件"></a>chrome插件</h2><ul><li><a href="https://www.extfans.com/" target="_blank" rel="noopener">extfans</a></li></ul><h2 id="动画特效"><a href="#动画特效" class="headerlink" title="动画特效"></a>动画特效</h2><p><a href="https://render.alipay.com/p/s/mars-editor/" target="_blank" rel="noopener">Mars Player</a></p><h2 id="ps"><a href="#ps" class="headerlink" title="ps"></a>ps</h2><ul><li><a href="https://www.3d66.com/" target="_blank" rel="noopener">3d66</a></li></ul><h3 id="ps2020破解"><a href="#ps2020破解" class="headerlink" title="ps2020破解"></a>ps2020破解</h3><p><a href="https://justcode.ikeepstudying.com/2020/09/photoshop-2020-for-mac-%E5%AE%89%E8%A3%85%E7%A0%B4%E8%A7%A3%E7%89%88%EF%BC%81%EF%BC%882020-09-14-%E4%BA%B2%E6%B5%8B%E5%8F%AF%E7%94%A8%EF%BC%89/" target="_blank" rel="noopener">https://justcode.ikeepstudying.com/2020/09/photoshop-2020-for-mac-%E5%AE%89%E8%A3%85%E7%A0%B4%E8%A7%A3%E7%89%88%EF%BC%81%EF%BC%882020-09-14-%E4%BA%B2%E6%B5%8B%E5%8F%AF%E7%94%A8%EF%BC%89/</a></p><h2 id="命名function"><a href="#命名function" class="headerlink" title="命名function"></a>命名function</h2><p><a href="https://namingmyfunction.vercel.app/" target="_blank" rel="noopener">I don’t know how to name my function</a></p><h2 id="在线生成ascii字符画"><a href="#在线生成ascii字符画" class="headerlink" title="在线生成ascii字符画"></a>在线生成ascii字符画</h2><h3 id="根据文字生成字符画："><a href="#根据文字生成字符画：" class="headerlink" title="根据文字生成字符画："></a>根据文字生成字符画：</h3><ul><li><a href="http://patorjk.com/software/taag" target="_blank" rel="noopener">http://patorjk.com/software/taag</a></li><li><a href="http://www.network-science.de/ascii/" target="_blank" rel="noopener">http://www.network-science.de/ascii/</a></li></ul><h3 id="根据图片生成字符画："><a href="#根据图片生成字符画：" class="headerlink" title="根据图片生成字符画："></a>根据图片生成字符画：</h3><ul><li><p><a href="http://www.degraeve.com/img2txt.php" target="_blank" rel="noopener">http://www.degraeve.com/img2txt.php</a><a href="http://life.chacuo.net/convertphoto2char" target="_blank" rel="noopener">http://life.chacuo.net/convertphoto2char</a></p></li><li><p><a href="https://css-doodle.com/" target="_blank" rel="noopener">https://css-doodle.com/</a></p></li></ul><h3 id="根据流程图生成字符画："><a href="#根据流程图生成字符画：" class="headerlink" title="根据流程图生成字符画："></a>根据流程图生成字符画：</h3><ul><li><a href="http://asciiflow.com/" target="_blank" rel="noopener">http://asciiflow.com/</a></li></ul><h2 id="github中文区排行榜"><a href="#github中文区排行榜" class="headerlink" title="github中文区排行榜"></a>github中文区排行榜</h2><p><a href="https://github.com/jaywcjlove/github-rank" target="_blank" rel="noopener">代码仓库</a><a href="https://jaywcjlove.gitee.io/github-rank/users.china.html" target="_blank" rel="noopener">github中文区排行榜</a></p><h2 id="idea-中相见恨晚的技巧"><a href="#idea-中相见恨晚的技巧" class="headerlink" title="idea 中相见恨晚的技巧"></a>idea 中相见恨晚的技巧</h2><p><a href="https://atips.cn/idea/" target="_blank" rel="noopener">idea 中相见恨晚的技巧</a></p><h2 id="沙雕"><a href="#沙雕" class="headerlink" title="沙雕"></a>沙雕</h2><p><a href="https://shadiao.app/" target="_blank" rel="noopener">沙雕</a></p><h2 id="PPT"><a href="#PPT" class="headerlink" title="PPT"></a>PPT</h2><ul><li><a href="http://www.ypppt.com/" target="_blank" rel="noopener">优品PPT</a></li><li><a href="http://www.1ppt.com/" target="_blank" rel="noopener">第一PPT</a></li></ul><h2 id="终端比较"><a href="#终端比较" class="headerlink" title="终端比较"></a>终端比较</h2><ul><li><a href="https://www.v2ex.com/t/642177" target="_blank" rel="noopener">https://www.v2ex.com/t/642177</a></li></ul><h2 id="mac软件下载"><a href="#mac软件下载" class="headerlink" title="mac软件下载"></a>mac软件下载</h2><ul><li><a href="https://www.softpedia.com/" target="_blank" rel="noopener">https://www.softpedia.com/</a></li></ul><h2 id="神曲"><a href="#神曲" class="headerlink" title="神曲"></a>神曲</h2><ul><li>拔剑神曲 GC-βίος</li><li>核爆神曲 AZ-aLIEz MKAlieZ</li><li>变身神曲 巨人-at’aek ON taitn</li><li>爆衣神曲 kill la kill-Before my body is dry</li><li>断剑神曲 Perfect Time</li><li>反击神曲 AZ-Keep on keeping on</li><li>窒息神曲 AZ-BRE@TH//LESS</li></ul>]]></content:encoded>
      
      <comments>http://mydearest.cn/2020/useful-website.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>elasticsearch、redis部署</title>
      <link>http://mydearest.cn/2020/elasticsearch%E3%80%81redis%E9%83%A8%E7%BD%B2.html</link>
      <guid>http://mydearest.cn/2020/elasticsearch%E3%80%81redis%E9%83%A8%E7%BD%B2.html</guid>
      <pubDate>Fri, 18 Sep 2020 03:14:08 GMT</pubDate>
      <description>
      
        &lt;h1 id=&quot;skywalking&quot;&gt;&lt;a href=&quot;#skywalking&quot; class=&quot;headerlink&quot; title=&quot;skywalking&quot;&gt;&lt;/a&gt;skywalking&lt;/h1&gt;&lt;h2 id=&quot;预安装JDK&quot;&gt;&lt;a href=&quot;#预安装JDK&quot; class=&quot;headerlink&quot; title=&quot;预安装JDK&quot;&gt;&lt;/a&gt;预安装JDK&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/cosyer/p/7827995.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Linux系统（Centos yum）下安装Java环境&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;elasticsearch&quot;&gt;&lt;a href=&quot;#elasticsearch&quot; class=&quot;headerlink&quot; title=&quot;elasticsearch&quot;&gt;&lt;/a&gt;elasticsearch&lt;/h2&gt;&lt;h3 id=&quot;官网下载-https-www-elastic-co-cn-downloads-elasticsearch&quot;&gt;&lt;a href=&quot;#官网下载-https-www-elastic-co-cn-downloads-elasticsearch&quot; class=&quot;headerlink&quot; title=&quot;官网下载 https://www.elastic.co/cn/downloads/elasticsearch&quot;&gt;&lt;/a&gt;官网下载 &lt;a href=&quot;https://www.elastic.co/cn/downloads/elasticsearch&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.elastic.co/cn/downloads/elasticsearch&lt;/a&gt;&lt;/h3&gt;&lt;h3 id=&quot;解压&quot;&gt;&lt;a href=&quot;#解压&quot; class=&quot;headerlink&quot; title=&quot;解压&quot;&gt;&lt;/a&gt;解压&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 解压&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tar -zxvf elasticsearch-6.1.0.tar.gz&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 配置 config/elasticsearch.yml&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cluster.name: myskywalking&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;path.data: /opt/data/es/data&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;path.logs: /opt/data/es/logs&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;bootstrap.memory_lock: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;network.host: 193.160.59.45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 单机运行&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;./bin/elasticsearch -V&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 后台运行&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;./bin/elasticsearch -d&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 访问&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;http://127.0.0.1:9200&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;常见问题&quot;&gt;&lt;a href=&quot;#常见问题&quot; class=&quot;headerlink&quot; title=&quot;常见问题&quot;&gt;&lt;/a&gt;常见问题&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;需要非root用户启动&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;【报错】max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144] 内存过小
解决:&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 1.sudo vi /etc/sysctl.conf 文件最后添加一行&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#    vm.max_map_count=262144&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 2.加载设置好的系统参数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#    sudo sysctl -p&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="skywalking"><a href="#skywalking" class="headerlink" title="skywalking"></a>skywalking</h1><h2 id="预安装JDK"><a href="#预安装JDK" class="headerlink" title="预安装JDK"></a>预安装JDK</h2><p><a href="https://www.cnblogs.com/cosyer/p/7827995.html" target="_blank" rel="noopener">Linux系统（Centos yum）下安装Java环境</a></p><h2 id="elasticsearch"><a href="#elasticsearch" class="headerlink" title="elasticsearch"></a>elasticsearch</h2><h3 id="官网下载-https-www-elastic-co-cn-downloads-elasticsearch"><a href="#官网下载-https-www-elastic-co-cn-downloads-elasticsearch" class="headerlink" title="官网下载 https://www.elastic.co/cn/downloads/elasticsearch"></a>官网下载 <a href="https://www.elastic.co/cn/downloads/elasticsearch" target="_blank" rel="noopener">https://www.elastic.co/cn/downloads/elasticsearch</a></h3><h3 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 解压</span></span><br><span class="line">tar -zxvf elasticsearch-6.1.0.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置 config/elasticsearch.yml</span></span><br><span class="line">cluster.name: myskywalking</span><br><span class="line">path.data: /opt/data/es/data</span><br><span class="line">path.logs: /opt/data/es/logs</span><br><span class="line">bootstrap.memory_lock: <span class="literal">false</span></span><br><span class="line">network.host: 193.160.59.45</span><br><span class="line"></span><br><span class="line"><span class="comment"># 单机运行</span></span><br><span class="line">./bin/elasticsearch -V</span><br><span class="line"></span><br><span class="line"><span class="comment"># 后台运行</span></span><br><span class="line">./bin/elasticsearch -d</span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问</span></span><br><span class="line">http://127.0.0.1:9200</span><br></pre></td></tr></table></figure><h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3><ol><li><p>需要非root用户启动</p></li><li><p>【报错】max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144] 内存过小解决:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.sudo vi /etc/sysctl.conf 文件最后添加一行</span></span><br><span class="line"><span class="comment">#    vm.max_map_count=262144</span></span><br><span class="line"><span class="comment"># 2.加载设置好的系统参数</span></span><br><span class="line"><span class="comment">#    sudo sysctl -p</span></span><br></pre></td></tr></table></figure></li></ol><hr><a id="more"></a><h2 id="下载-skywalking-https-github-com-apache-skywalking-对于5-0版本的Skywalking要求ES的版本也为5-x"><a href="#下载-skywalking-https-github-com-apache-skywalking-对于5-0版本的Skywalking要求ES的版本也为5-x" class="headerlink" title="下载 skywalking https://github.com/apache/skywalking (对于5.0版本的Skywalking要求ES的版本也为5.x)"></a>下载 skywalking <a href="https://github.com/apache/skywalking" target="_blank" rel="noopener">https://github.com/apache/skywalking</a> (对于5.0版本的Skywalking要求ES的版本也为5.x)</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 解压</span></span><br><span class="line">tar -xvzf apache-skywalking-apm-incubating-5.0.0-GA.tar.gz -C /usr/<span class="built_in">local</span>/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改配置 /usr/local/apache-skywalking-apm-incubating/config/application.yml </span></span><br><span class="line">host: 本机ip</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改skywalking-webapp配置文件</span></span><br><span class="line">listOfServers: 本机ip:10800</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">sh /usr/<span class="built_in">local</span>/apache-skywalking-apm-incubating/bin/startup.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问</span></span><br><span class="line">http://127.0.0.1:8080</span><br></pre></td></tr></table></figure><h1 id="eureka"><a href="#eureka" class="headerlink" title="eureka"></a>eureka</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动</span></span><br><span class="line">nohup java -jar clustereureka-0.0.1-SNAPSHOT-ui.jar --spring.profiles.active=cluster2 &gt; eureka_log.log &amp;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改</span></span><br><span class="line">jar xvf clustereureka-0.0.1-SNAPSHOT.jar</span><br><span class="line"><span class="comment"># 修改里面的jar包</span></span><br><span class="line">jar xvf spring-cloud-netflix-eureka-server-2.1.0.RELEASE.jar</span><br><span class="line"><span class="comment"># 重新打包</span></span><br><span class="line">jar -cfM0 clustereureka-0.0.1-SNAPSHOT.jar ./</span><br><span class="line"><span class="comment"># /BOOT-INF/classes </span></span><br><span class="line">application-cluster1.yml  application-cluster2.yml  application-cluster3.yml 对应修改hostname，defaultZone其他注册中心地址</span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问</span></span><br><span class="line">http://127.0.0.1:7072</span><br></pre></td></tr></table></figure><h1 id="redis-stat"><a href="#redis-stat" class="headerlink" title="redis-stat"></a>redis-stat</h1><h2 id="预安装redis"><a href="#预安装redis" class="headerlink" title="预安装redis"></a>预安装redis</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载</span></span><br><span class="line">wget http://download.redis.io/releases/redis-4.0.8.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压</span></span><br><span class="line">tar xzvf redis-4.0.8.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装</span></span><br><span class="line"><span class="built_in">cd</span> redis-4.0.8</span><br><span class="line">make</span><br><span class="line"><span class="built_in">cd</span> src</span><br><span class="line">make install PREFIX=/usr/<span class="built_in">local</span>/redis</span><br><span class="line"></span><br><span class="line"><span class="comment"># 移动配置文件</span></span><br><span class="line">cp ./redis.conf /usr/<span class="built_in">local</span>/redis/bin/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置redis为后台启动 /usr/local/redis/redis.conf </span></span><br><span class="line">将daemonize no 改成daemonize yes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">./redis-server redis.conf</span><br><span class="line"></span><br><span class="line">redis-server &amp;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加入开机启动</span></span><br><span class="line">vi /etc/rc.local //在里面添加内容：/usr/<span class="built_in">local</span>/redis/bin/redis-server /usr/<span class="built_in">local</span>/redis/etc/redis.conf (意思就是开机调用这段开启redis的命令)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将redis-cli,redis-server拷贝到bin下，让redis-cli指令可以在任意目录下直接使用</span></span><br><span class="line">cp /usr/<span class="built_in">local</span>/redis/bin/redis-server /usr/<span class="built_in">local</span>/bin/</span><br><span class="line">cp /usr/<span class="built_in">local</span>/redis/bin/redis-cli /usr/<span class="built_in">local</span>/bin/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问</span></span><br><span class="line">/usr/<span class="built_in">local</span>/redis/bin/redis-cli</span><br></pre></td></tr></table></figure><h2 id="下载-https-github-com-junegunn-redis-stat"><a href="#下载-https-github-com-junegunn-redis-stat" class="headerlink" title="下载 https://github.com/junegunn/redis-stat"></a>下载 <a href="https://github.com/junegunn/redis-stat" target="_blank" rel="noopener">https://github.com/junegunn/redis-stat</a></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动 不支持nohup后台启动</span></span><br><span class="line">screen java -jar redis-stat-0.4.14.jar --server</span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问</span></span><br><span class="line">http://127.0.0.1:63790</span><br></pre></td></tr></table></figure><h1 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h1><h2 id="下载-https-nginx-org-download"><a href="#下载-https-nginx-org-download" class="headerlink" title="下载 https://nginx.org/download/"></a>下载 <a href="https://nginx.org/download/" target="_blank" rel="noopener">https://nginx.org/download/</a></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 一键安装上面四个依赖</span></span><br><span class="line">yum -y install gcc pcre-devel zlib-devel openssl openssl-devel</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压</span></span><br><span class="line">tar -zxvf nginx-1.9.9.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入nginx目录</span></span><br><span class="line"><span class="built_in">cd</span> nginx-1.9.9</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置</span></span><br><span class="line">./configure --prefix=/usr/<span class="built_in">local</span>/nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># make</span></span><br><span class="line">make</span><br><span class="line">make install</span><br><span class="line"></span><br><span class="line"><span class="comment"># cd到刚才配置的安装目录/usr/loca/nginx/</span></span><br><span class="line">./sbin/nginx -t</span><br><span class="line"></span><br><span class="line"><span class="comment"># 正常情况的信息输出：</span></span><br><span class="line">nginx: the configuration file /usr/<span class="built_in">local</span>/nginx/conf/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /usr/<span class="built_in">local</span>/nginx/conf/nginx.conf <span class="built_in">test</span> is successful</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">./sbin/nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问</span></span><br><span class="line">http://127.0.0.1:80</span><br><span class="line"></span><br><span class="line"><span class="comment"># 无法访问 80端口没有开启。no</span></span><br><span class="line">firewall-cmd --query-port=80/tcp</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启80端口</span></span><br><span class="line">firewall-cmd --add-port=80/tcp --permanent</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启防火墙</span></span><br><span class="line">systemctl restart firewalld</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置开机自启动</span></span><br><span class="line">vim /etc/rc.d/rc.local</span><br><span class="line"></span><br><span class="line">/usr/<span class="built_in">local</span>/nginx/sbin/nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启nginx</span></span><br><span class="line">/usr/<span class="built_in">local</span>/nginx/sbin/nginx -s reload</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://mydearest.cn/2020/elasticsearch%E3%80%81redis%E9%83%A8%E7%BD%B2.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>HTML中p标签中插入div标签会发生什么</title>
      <link>http://mydearest.cn/2020/HTML%E4%B8%ADp%E6%A0%87%E7%AD%BE%E4%B8%AD%E6%8F%92%E5%85%A5div%E6%A0%87%E7%AD%BE%E4%BC%9A%E5%8F%91%E7%94%9F%E4%BB%80%E4%B9%88.html</link>
      <guid>http://mydearest.cn/2020/HTML%E4%B8%ADp%E6%A0%87%E7%AD%BE%E4%B8%AD%E6%8F%92%E5%85%A5div%E6%A0%87%E7%AD%BE%E4%BC%9A%E5%8F%91%E7%94%9F%E4%BB%80%E4%B9%88.html</guid>
      <pubDate>Wed, 02 Sep 2020 03:13:55 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;面试遇到了问题:&lt;code&gt;&amp;lt;p&amp;gt;中能不能插入&amp;lt;div&amp;gt;? 插入&amp;lt;div&amp;gt;会如何?&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;先直接实践下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://cdn.mydearest.cn/blog/images/di
        
      
      </description>
      
      <content:encoded><![CDATA[<p>面试遇到了问题:<code>&lt;p&gt;中能不能插入&lt;div&gt;? 插入&lt;div&gt;会如何?</code></p><p>先直接实践下：</p><p><img src="http://cdn.mydearest.cn/blog/images/div1.png" alt="div1"></p><blockquote><p>我们可以看到,<div>把<p>分成了两段, 并且div外字段并不在</p><p>内。把div变成行内块级元素也不行。</p></div></p></blockquote><p><img src="http://cdn.mydearest.cn/blog/images/div2.png" alt="div2"></p><p>解答:可以在HTML标准(<a href="https://www.w3.org/TR/html401/struct/text.html#h-9.3.1)中看到" target="_blank" rel="noopener">https://www.w3.org/TR/html401/struct/text.html#h-9.3.1)中看到</a>,</p><blockquote><p></p><p>虽然是块级元素, 但是只能包含行内元素, 不能包含块级元素(包括</p><p>自己)</p></blockquote><p><img src="http://cdn.mydearest.cn/blog/images/div3.png" alt="div3"></p><p>over!</p>]]></content:encoded>
      
      <comments>http://mydearest.cn/2020/HTML%E4%B8%ADp%E6%A0%87%E7%AD%BE%E4%B8%AD%E6%8F%92%E5%85%A5div%E6%A0%87%E7%AD%BE%E4%BC%9A%E5%8F%91%E7%94%9F%E4%BB%80%E4%B9%88.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>Docker</title>
      <link>http://mydearest.cn/2020/react-native%E5%B0%8F%E7%BB%93.html</link>
      <guid>http://mydearest.cn/2020/react-native%E5%B0%8F%E7%BB%93.html</guid>
      <pubDate>Tue, 28 Jul 2020 03:38:27 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;react-native开发使用的是JS,但是并不是纯正的JS,而是一种JSX语言，就是在JS中嵌入XML语言，因此，只要有一些JS的语法基础的原生开发者，就可以肯容易理解JSX的语法了，在RN中，推荐使用ES6的语法。&lt;/p&gt;
&lt;h2 id=&quot;性能&quot;&gt;&lt;a href=&quot;#性能&quot; class=&quot;headerlink&quot; title=&quot;性能&quot;&gt;&lt;/a&gt;性能&lt;/h2&gt;&lt;p&gt;使用react-native开发的最大的有点在于开发效率，加入APP并不复杂的话，那么完全可以使用纯JS开发，也就是Android和iOS公用一套界面和逻辑。极大的提高了开发效率。在性能上，RN的表现比原生弱一些，但
是远好于H5。所以总体来看，其实RN的未来还是可以期待的。&lt;/p&gt;
&lt;h2 id=&quot;运行机制&quot;&gt;&lt;a href=&quot;#运行机制&quot; class=&quot;headerlink&quot; title=&quot;运行机制&quot;&gt;&lt;/a&gt;运行机制&lt;/h2&gt;&lt;p&gt;RN是运行JS的，Android是运行Java字节码的，所以，实际上JS代码的最终运行是通过一层封装，把JS的代码映射成原生代码，而界面上的元素最终使用的也是原生的组件，而不是自己渲染（所以在性能上，RN比H5要
好很多）。&lt;/p&gt;
&lt;h2 id=&quot;Component简介&quot;&gt;&lt;a href=&quot;#Component简介&quot; class=&quot;headerlink&quot; title=&quot;Component简介&quot;&gt;&lt;/a&gt;Component简介&lt;/h2&gt;&lt;p&gt;在Android中，主要交互容器是activity或Fragment,而在RN中，界面的交互容器是Component：组件。我觉得Component和原生的Fragment其实很像，都存在于activity中，都受制于activity的生命周期，都可卸
载和装载。&lt;/p&gt;
&lt;hr&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>react-native开发使用的是JS,但是并不是纯正的JS,而是一种JSX语言，就是在JS中嵌入XML语言，因此，只要有一些JS的语法基础的原生开发者，就可以肯容易理解JSX的语法了，在RN中，推荐使用ES6的语法。</p><h2 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h2><p>使用react-native开发的最大的有点在于开发效率，加入APP并不复杂的话，那么完全可以使用纯JS开发，也就是Android和iOS公用一套界面和逻辑。极大的提高了开发效率。在性能上，RN的表现比原生弱一些，但是远好于H5。所以总体来看，其实RN的未来还是可以期待的。</p><h2 id="运行机制"><a href="#运行机制" class="headerlink" title="运行机制"></a>运行机制</h2><p>RN是运行JS的，Android是运行Java字节码的，所以，实际上JS代码的最终运行是通过一层封装，把JS的代码映射成原生代码，而界面上的元素最终使用的也是原生的组件，而不是自己渲染（所以在性能上，RN比H5要好很多）。</p><h2 id="Component简介"><a href="#Component简介" class="headerlink" title="Component简介"></a>Component简介</h2><p>在Android中，主要交互容器是activity或Fragment,而在RN中，界面的交互容器是Component：组件。我觉得Component和原生的Fragment其实很像，都存在于activity中，都受制于activity的生命周期，都可卸载和装载。</p><hr><a id="more"></a><h2 id="原有架构和问题"><a href="#原有架构和问题" class="headerlink" title="原有架构和问题"></a>原有架构和问题</h2><ol><li>用户编写的React代码</li><li>React代码转换之后的js</li><li>The Bridge</li><li>Native side</li></ol><ul><li>组件和 API 太过依赖 JSBridge 的初始化，而且通讯能力也局限于这一条通道。</li><li>JS和Native之间并不真正直接通信，它们的通信依赖于跨Bridge传输的异步JSON消息。</li></ul><blockquote><p>UI 的渲染过程分为三层：JS 业务层、shadow tree、原生 UI 层。</p></blockquote><p>其中 JS 和 shadow tree 是通过 JSBridge 来同步数据的，JS 层会将所有 UI node 生成一串 JSON 数据，传递到原生 shadow 层，原生 shadow 层通过传入 node 数据，新增新 UI 或者删除一些不需要的 UI 组件。</p><p>从渲染的层次来看，React Native 是多线程运行的，最常见的是 JS 线程和原生端的线程，一旦线程间异常，JSBridge 整体将会阻塞，我们经常也能看到 JS 运行异常了，实际 JS 线程已经无响应了，但原生端还能响应滚动事件。</p><h2 id="新的架构"><a href="#新的架构" class="headerlink" title="新的架构"></a>新的架构</h2><blockquote><p>RN 在 0.59 版本使用 JSI 取代了先前的 JSBridge。分为两部分：</p><ul><li>Fabric，新架构的UI manager</li><li>TurboModules，这个与native端交互的新一代实现</li></ul></blockquote><p>现在不需要序列化成JSON并双向传递等一系列操作，实现了Native和 JS间的直接同步通讯。</p>]]></content:encoded>
      
      <comments>http://mydearest.cn/2020/react-native%E5%B0%8F%E7%BB%93.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>Vue中axios的封装</title>
      <link>http://mydearest.cn/2020/Vue%E4%B8%ADaxios%E7%9A%84%E5%B0%81%E8%A3%85.html</link>
      <guid>http://mydearest.cn/2020/Vue%E4%B8%ADaxios%E7%9A%84%E5%B0%81%E8%A3%85.html</guid>
      <pubDate>Tue, 21 Jul 2020 04:14:10 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;聊聊-Vue-中-axios-的封装&quot;&gt;&lt;a href=&quot;#聊聊-Vue-中-axios-的封装&quot; class=&quot;headerlink&quot; title=&quot;聊聊 Vue 中 axios 的封装&quot;&gt;&lt;/a&gt;聊聊 Vue 中 axios 的封装&lt;/h2&gt;&lt;p&gt;axios 是 Vue 官方推荐的一个 HTTP 库，用 axios 官方简介来介绍它，就是：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Axios 是一个基于 promise 的 HTTP 库，可以用在浏览器和 node.js 中。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;作为一个优秀的 HTTP 库，axios 打败了曾经由 Vue 官方团队维护的 vue-resource，获得了 Vue 作者尤小右的大力推荐，成为了 Vue 项目中 HTTP 库的最佳选择。&lt;/p&gt;
&lt;p&gt;虽然，axios 是个优秀的 HTTP 库，但是，直接在项目中使用并不是那么方便，所以，我们需要对其进行一定程度上的配置封装，减少重复代码，方便调用。下面，我们就来聊聊 Vue 中 axios 的封装。&lt;/p&gt;
&lt;hr&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="聊聊-Vue-中-axios-的封装"><a href="#聊聊-Vue-中-axios-的封装" class="headerlink" title="聊聊 Vue 中 axios 的封装"></a>聊聊 Vue 中 axios 的封装</h2><p>axios 是 Vue 官方推荐的一个 HTTP 库，用 axios 官方简介来介绍它，就是：</p><blockquote><p>Axios 是一个基于 promise 的 HTTP 库，可以用在浏览器和 node.js 中。</p></blockquote><p>作为一个优秀的 HTTP 库，axios 打败了曾经由 Vue 官方团队维护的 vue-resource，获得了 Vue 作者尤小右的大力推荐，成为了 Vue 项目中 HTTP 库的最佳选择。</p><p>虽然，axios 是个优秀的 HTTP 库，但是，直接在项目中使用并不是那么方便，所以，我们需要对其进行一定程度上的配置封装，减少重复代码，方便调用。下面，我们就来聊聊 Vue 中 axios 的封装。</p><hr><a id="more"></a><h3 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h3><p>其实，网上关于 axios 封装的代码不少，但是大部分都是在入口文件（main.js）中进行 axios 全局对象属性定义的形式进行配置，类似于如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">axios.defaults.timeout = <span class="number">10000</span></span><br></pre></td></tr></table></figure><p>该方案有两个不足，首先，axios 封装代码耦合进入入口文件，不方便后期维护；其次，使用 axios 全局对象属性定义的方式进行配置，代码过于零散。</p><ol><li><p>针对问题一，我使用了 Vue 源码结构中的一大核心思想——将功能拆分为文件，方便后期的维护。单独创建一个 <code>http.js</code> 或者 <code>http.ts</code> 文件，在文件中引入 axios 并对其进行封装配置，最后将其导出并挂载到 Vue 的原型上即可。此时，每次修改 axios 配置，只需要修改对应的文件即可，不会影响到不相关的功能。</p></li><li><p>针对问题二，采用 axios 官方推荐的，通过配置项创建 axios 实例的方式进行配置封装。</p></li></ol><p>代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// http.js</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line"><span class="comment">// 创建 axios 实例</span></span><br><span class="line"><span class="keyword">const</span> service = axios.create(&#123;</span><br><span class="line">  <span class="comment">// 配置项</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="根据环境设置-baseURL"><a href="#根据环境设置-baseURL" class="headerlink" title="根据环境设置 baseURL"></a>根据环境设置 baseURL</h3><p>baseURL 属性是请求地址前缀，将自动加在 url 前面，除非 url 是个绝对地址。正常情况下，在开发环境下和生产模式下有着不同的 baseURL，所以，我们需要根据不同的环境切换不同的 baseURL。</p><p>在开发模式下，由于有着 devServer 的存在，需要根据固定的 url 前缀进行请求地址重写，所以，在开发环境下，将 baseURL 设为某个固定的值，比如：<code>/apis</code>。</p><p>在生产模式下，根据 Java 模块的请求前缀的不同，可以设置不同的 baseURL。</p><p>具体代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据 process.env.NODE_ENV 区分状态，切换不同的 baseURL</span></span><br><span class="line"><span class="keyword">const</span> service = axios.create(&#123;</span><br><span class="line">baseURL: process.env.NODE_ENV === <span class="string">'production'</span> ? <span class="string">`/java`</span> : <span class="string">'/apis'</span>,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="统一设置请求头"><a href="#统一设置请求头" class="headerlink" title="统一设置请求头"></a>统一设置请求头</h3><p>在这里和大家聊一个问题，什么是封装？在我看来，封装是通过更少的调用代码覆盖更多的调用场景。</p><p>由于，大部分情况下，请求头都是固定的，只有少部分情况下，会需要一些特殊的请求头，所以，在这里，我采用的方案是，将普适性的请求头作为基础配置。当需要特殊请求头时，将特殊请求头作为参数传入，覆盖基础配置。</p><p>代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> service = axios.create(&#123;</span><br><span class="line">    ...</span><br><span class="line">headers: &#123;</span><br><span class="line">        <span class="keyword">get</span>: &#123;</span><br><span class="line">          <span class="string">'Content-Type'</span>: <span class="string">'application/x-www-form-urlencoded;charset=utf-8'</span></span><br><span class="line">          <span class="comment">// 在开发中，一般还需要单点登录或者其他功能的通用请求头，可以一并配置进来</span></span><br><span class="line">        &#125;,</span><br><span class="line">        post: &#123;</span><br><span class="line">          <span class="string">'Content-Type'</span>: <span class="string">'application/json;charset=utf-8'</span></span><br><span class="line">          <span class="comment">// 在开发中，一般还需要单点登录或者其他功能的通用请求头，可以一并配置进来</span></span><br><span class="line">        &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="跨域、超时、响应码处理"><a href="#跨域、超时、响应码处理" class="headerlink" title="跨域、超时、响应码处理"></a>跨域、超时、响应码处理</h3><p>axios 中，提供是否允许跨域的属性——withCredentials，以及配置超时时间的属性——timeout，通过这两个属性，可以轻松处理跨域和超时的问题。</p><p>下面，我们来说说响应码处理：</p><p>axios 提供了 validateStatus 属性，用于定义对于给定的HTTP 响应状态码是 resolve 或 reject promise。所以，正常设置的情况下，我们会将状态码为 2 系列或者 304 的请求设为 resolve 状态，其余为 reject 状态。结果就是，我们可以在业务代码里，使用 catch 统一捕获响应错误的请求，从而进行统一处理。</p><p>但是，由于我在代码里面使用了 async-await，而众所周知，async-await 捕获 catch 的方式极为麻烦，所以，在此处，我选择将所有响应都设为 resolve 状态，统一在 then 处理。</p><p>此部分代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> service = axios.create(&#123;</span><br><span class="line"><span class="comment">// 跨域请求时是否需要使用凭证</span></span><br><span class="line">withCredentials: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// 请求 30s 超时</span></span><br><span class="line">timeout: <span class="number">30000</span>,</span><br><span class="line">validateStatus: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">// 使用async-await，处理reject情况较为繁琐，所以全部返回resolve，在业务代码中处理异常</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="请求、响应处理"><a href="#请求、响应处理" class="headerlink" title="请求、响应处理"></a>请求、响应处理</h3><p>在不使用 axios 的情况下，每次请求或者接受响应，都需要将请求或者响应序列化。</p><p>而在 axios 中， <code>transformRequest</code> 允许在向服务器发送请求前，修改请求数据；<code>transformResponse</code> 在传递给 then/catch 前，允许修改响应数据。</p><p>通过这两个钩子，可以省去大量重复的序列化代码。</p><p>代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> service = axios.create(&#123;</span><br><span class="line">    <span class="comment">// 在向服务器发送请求前，序列化请求数据</span></span><br><span class="line">    transformRequest: [<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">        data = <span class="built_in">JSON</span>.stringify(data)</span><br><span class="line">        <span class="keyword">return</span> data</span><br><span class="line">    &#125;],</span><br><span class="line">    <span class="comment">// 在传递给 then/catch 前，修改响应数据</span></span><br><span class="line">    transformResponse: [<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> data === <span class="string">'string'</span> &amp;&amp; data.startsWith(<span class="string">'&#123;'</span>)) &#123;</span><br><span class="line">            data = <span class="built_in">JSON</span>.parse(data)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> data</span><br><span class="line">    &#125;]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h3><p>拦截器，分为请求拦截器以及响应拦截器，分别在请求或响应被 then 或 catch 处理前拦截它们。</p><p>之前提到过，由于 async-await 中 catch 难以处理的问题，所以将出错的情况也作为 resolve 状态进行处理。但这带来了一个问题，请求或响应出错的情况下，结果没有数据协议中定义的 msg 字段（消息）。所以，我们需要在出错的时候，手动生成一个符合返回格式的返回数据。</p><p>由于，在业务中，没有需要在请求拦截器中做额外处理的需求，所以，请求拦截器的 resolve 状态，只需直接返回就可以了。</p><p>请求拦截器代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 请求拦截器</span></span><br><span class="line">service.interceptors.request.use((config) =&#123;</span><br><span class="line"><span class="keyword">return</span> config</span><br><span class="line">&#125;, (error) =&#123;</span><br><span class="line"><span class="comment">// 错误抛到业务代码</span></span><br><span class="line">    error.data = &#123;&#125;</span><br><span class="line">    error.data.msg = <span class="string">'服务器异常，请联系管理员！'</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(error)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>再来聊聊响应拦截器，还是之前的那个问题，除了请求或响应错误，还有一种情况也会导致返回的消息体不符合协议规范，那就是状态码不为 2 系列或 304 时。此时，我们还是需要做一样的处理——手动生成一个符合返回格式的返回数据。但是，有一点不一样，我们还需要根据不同的状态码生成不同的提示信息，以方便处理上线后的问题。</p><p>响应拦截器代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据不同的状态码，生成不同的提示信息</span></span><br><span class="line"><span class="keyword">const</span> showStatus = (status) =&#123;</span><br><span class="line">    <span class="keyword">let</span> message = <span class="string">''</span></span><br><span class="line">    <span class="comment">// 这一坨代码可以使用策略模式进行优化</span></span><br><span class="line">    <span class="keyword">switch</span> (status) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">400</span>:</span><br><span class="line">            message = <span class="string">'请求错误(400)'</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">401</span>:</span><br><span class="line">            message = <span class="string">'未授权，请重新登录(401)'</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">403</span>:</span><br><span class="line">            message = <span class="string">'拒绝访问(403)'</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">404</span>:</span><br><span class="line">            message = <span class="string">'请求出错(404)'</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">408</span>:</span><br><span class="line">            message = <span class="string">'请求超时(408)'</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">500</span>:</span><br><span class="line">            message = <span class="string">'服务器错误(500)'</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">501</span>:</span><br><span class="line">            message = <span class="string">'服务未实现(501)'</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">502</span>:</span><br><span class="line">            message = <span class="string">'网络错误(502)'</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">503</span>:</span><br><span class="line">            message = <span class="string">'服务不可用(503)'</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">504</span>:</span><br><span class="line">            message = <span class="string">'网络超时(504)'</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">505</span>:</span><br><span class="line">            message = <span class="string">'HTTP版本不受支持(505)'</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            message = <span class="string">`连接出错(<span class="subst">$&#123;status&#125;</span>)!`</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;message&#125;</span>，请检查网络或联系管理员！`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 响应拦截器</span></span><br><span class="line">service.interceptors.response.use((response) =&#123;</span><br><span class="line">    <span class="keyword">const</span> status = response.status</span><br><span class="line">    <span class="keyword">let</span> msg = <span class="string">''</span></span><br><span class="line">    <span class="keyword">if</span> (status &lt; <span class="number">200</span> || status &gt;= <span class="number">300</span>) &#123;</span><br><span class="line">        <span class="comment">// 处理http错误，抛到业务代码 业务的code response.data.code</span></span><br><span class="line">        msg = showStatus(status)</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> response.data === <span class="string">'string'</span>) &#123;</span><br><span class="line">            response.data = &#123; msg &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            response.data.msg = msg</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line">&#125;, (error) =&#123;</span><br><span class="line">    <span class="comment">// 错误抛到业务代码</span></span><br><span class="line">    error.data = &#123;&#125;</span><br><span class="line">    error.data.msg = <span class="string">'请求超时或服务器异常，请检查网络或联系管理员！'</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(error)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><em>tips：友情提示，上面那一坨 switch-case 代码，可以使用策略模式进行优化~</em></p><h3 id="支持-TypeScript"><a href="#支持-TypeScript" class="headerlink" title="支持 TypeScript"></a>支持 TypeScript</h3><p>由于前段时间，我在部门内推了 TypeScript，为了满足自己的强迫症，将所有 js 文件改写为了 ts 文件。由于 axios 本身有 TypeScript 相关的支持，所以只需要把对应的类型导入，然后赋值即可。</p><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// http.ts</span></span><br><span class="line"><span class="keyword">import</span> axios, &#123; AxiosRequestConfig, AxiosResponse &#125; <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> showStatus = (status: <span class="built_in">number</span>) =&#123;</span><br><span class="line">  <span class="keyword">let</span> message = <span class="string">''</span></span><br><span class="line">  <span class="keyword">switch</span> (status) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">400</span>:</span><br><span class="line">      message = <span class="string">'请求错误(400)'</span></span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">401</span>:</span><br><span class="line">      message = <span class="string">'未授权，请重新登录(401)'</span></span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">403</span>:</span><br><span class="line">      message = <span class="string">'拒绝访问(403)'</span></span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">404</span>:</span><br><span class="line">      message = <span class="string">'请求出错(404)'</span></span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">408</span>:</span><br><span class="line">      message = <span class="string">'请求超时(408)'</span></span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">500</span>:</span><br><span class="line">      message = <span class="string">'服务器错误(500)'</span></span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">501</span>:</span><br><span class="line">      message = <span class="string">'服务未实现(501)'</span></span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">502</span>:</span><br><span class="line">      message = <span class="string">'网络错误(502)'</span></span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">503</span>:</span><br><span class="line">      message = <span class="string">'服务不可用(503)'</span></span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">504</span>:</span><br><span class="line">      message = <span class="string">'网络超时(504)'</span></span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">505</span>:</span><br><span class="line">      message = <span class="string">'HTTP版本不受支持(505)'</span></span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      message = <span class="string">`连接出错(<span class="subst">$&#123;status&#125;</span>)!`</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;message&#125;</span>，请检查网络或联系管理员！`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> service = axios.create(&#123;</span><br><span class="line">  <span class="comment">// 联调</span></span><br><span class="line">  baseURL: process.env.NODE_ENV === <span class="string">'production'</span> ? <span class="string">`/`</span> : <span class="string">'/apis'</span>,</span><br><span class="line">  headers: &#123;</span><br><span class="line">    <span class="keyword">get</span>: &#123;</span><br><span class="line">      <span class="string">'Content-Type'</span>: <span class="string">'application/x-www-form-urlencoded;charset=utf-8'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    post: &#123;</span><br><span class="line">      <span class="string">'Content-Type'</span>: <span class="string">'application/json;charset=utf-8'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 是否跨站点访问控制请求</span></span><br><span class="line">  withCredentials: <span class="literal">true</span>,</span><br><span class="line">  timeout: <span class="number">30000</span>,</span><br><span class="line">  transformRequest: [(data) =&#123;</span><br><span class="line">    data = <span class="built_in">JSON</span>.stringify(data)</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line">  &#125;],</span><br><span class="line">  validateStatus () &#123;</span><br><span class="line">    <span class="comment">// 使用async-await，处理reject情况较为繁琐，所以全部返回resolve，在业务代码中处理异常</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  transformResponse: [(data) =&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> data === <span class="string">'string'</span> &amp;&amp; data.startsWith(<span class="string">'&#123;'</span>)) &#123;</span><br><span class="line">      data = <span class="built_in">JSON</span>.parse(data)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line">  &#125;]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 请求拦截器</span></span><br><span class="line">service.interceptors.request.use((config: AxiosRequestConfig) =&#123;</span><br><span class="line">    <span class="keyword">return</span> config</span><br><span class="line">&#125;, (error) =&#123;</span><br><span class="line">    <span class="comment">// 错误抛到业务代码</span></span><br><span class="line">    error.data = &#123;&#125;</span><br><span class="line">    error.data.msg = <span class="string">'服务器异常，请联系管理员！'</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(error)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 响应拦截器</span></span><br><span class="line">service.interceptors.response.use((response: AxiosResponse) =&#123;</span><br><span class="line">    <span class="keyword">const</span> status = response.status</span><br><span class="line">    <span class="keyword">let</span> msg = <span class="string">''</span></span><br><span class="line">    <span class="keyword">if</span> (status &lt; <span class="number">200</span> || status &gt;= <span class="number">300</span>) &#123;</span><br><span class="line">        <span class="comment">// 处理http错误，抛到业务代码</span></span><br><span class="line">        msg = showStatus(status)</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> response.data === <span class="string">'string'</span>) &#123;</span><br><span class="line">            response.data = &#123;msg&#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            response.data.msg = msg</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line">&#125;, (error) =&#123;</span><br><span class="line">    <span class="comment">// 错误抛到业务代码</span></span><br><span class="line">    error.data = &#123;&#125;</span><br><span class="line">    error.data.msg = <span class="string">'请求超时或服务器异常，请检查网络或联系管理员！'</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(error)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> service</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://mydearest.cn/2020/Vue%E4%B8%ADaxios%E7%9A%84%E5%B0%81%E8%A3%85.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>对称加密、非对称加密、摘要、数字签名、数字证书</title>
      <link>http://mydearest.cn/2020/%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%E3%80%81%E9%9D%9E%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%E3%80%81%E6%91%98%E8%A6%81%E3%80%81%E6%95%B0%E5%AD%97%E7%AD%BE%E5%90%8D%E3%80%81%E6%95%B0%E5%AD%97%E8%AF%81%E4%B9%A6.html</link>
      <guid>http://mydearest.cn/2020/%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%E3%80%81%E9%9D%9E%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%E3%80%81%E6%91%98%E8%A6%81%E3%80%81%E6%95%B0%E5%AD%97%E7%AD%BE%E5%90%8D%E3%80%81%E6%95%B0%E5%AD%97%E8%AF%81%E4%B9%A6.html</guid>
      <pubDate>Thu, 09 Jul 2020 01:51:49 GMT</pubDate>
      <description>
      
        &lt;p&gt;作为一个开发人员，或多或少都听说过对称加密、非对称加密、摘要、数字签名、数字证书这几个概念，它们是用来保证在互联网通信过程中数据传输安全的。有人可能会有疑惑，我给传输数
据加个密不就安全了，为什么还要搞这么多花样出来？本文主要通过一个案例来讲解这几个概念的实际作用。&lt;/p&gt;
&lt;p&gt;在此之前，我先简单介绍一下这几个概念。&lt;/p&gt;
&lt;h2 id=&quot;对称加密&quot;&gt;&lt;a href=&quot;#对称加密&quot; class=&quot;headerlink&quot; title=&quot;对称加密&quot;&gt;&lt;/a&gt;对称加密&lt;/h2&gt;&lt;p&gt;对称加密是指用来加密和解密的是同一个秘钥。其特点是加密速度快，但是秘钥容易被黑客截获，所以安全性不高。密钥不可能一开始在发送方和接收方都全部生成好了 需要在一方生成之后传递给另一方 如果在传递过程密钥被劫持 整个加密就不安全了。常见的有AES、DES算法。&lt;/p&gt;
&lt;h2 id=&quot;非对称加密&quot;&gt;&lt;a href=&quot;#非对称加密&quot; class=&quot;headerlink&quot; title=&quot;非对称加密&quot;&gt;&lt;/a&gt;非对称加密&lt;/h2&gt;&lt;p&gt;非对称加密是指用来加密和解密的是不同的秘钥，它们是成对出现的，称为公钥和私钥，知道其中一个秘钥是无法推导出另外一个秘钥的。用公钥加密的内容需要用私钥才能解密，用私钥加密
的内容需要用公钥才能解密。非对称加密的特点是安全性高，缺点是加密速度慢。公钥对外公开 如果密文是私钥加密 那么任何人都能用公钥解密。常见的有RSA、ECC算法。&lt;/p&gt;
&lt;h2 id=&quot;混合加密&quot;&gt;&lt;a href=&quot;#混合加密&quot; class=&quot;headerlink&quot; title=&quot;混合加密&quot;&gt;&lt;/a&gt;混合加密&lt;/h2&gt;&lt;p&gt;在传递过程把我们的对称加密中的密钥用非对称加密的方式去传递就好了。
&lt;img src=&quot;http://cdn.mydearest.cn/blog/images/mix.png&quot; alt=&quot;mix&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h2&gt;&lt;p&gt;所谓的摘要就是一段信息或者一个文件通过某个哈希算法(也叫摘要算法)而得到的一串字符。摘要算法的特点就是不同的文件计算出的摘要是不同的(也有可能相同，但是可能性非常非常低)，
比如一个1G的视频文件，哪怕只是改动其中一个字节，最后计算得到的摘要也是完全不同的，所以摘要算法通常是用来判断文件是否被篡改过。其还有一个特点就是通过摘要是无法推导出源文
件的信息的。常用的摘要(散列)算法有MD5、SHA等。&lt;/p&gt;
&lt;h2 id=&quot;数字签名&quot;&gt;&lt;a href=&quot;#数字签名&quot; class=&quot;headerlink&quot; title=&quot;数字签名&quot;&gt;&lt;/a&gt;数字签名&lt;/h2&gt;&lt;p&gt;数字签名就是一个文件的摘要加密后的信息。数字签名是和源文件一起发送给接收方的，接收方收到后对文件用摘要算法算出一个摘要，然后和数字签名中的摘要进行比对，两者不一致的话说
明文件被篡改了。&lt;/p&gt;
&lt;h2 id=&quot;数字证书&quot;&gt;&lt;a href=&quot;#数字证书&quot; class=&quot;headerlink&quot; title=&quot;数字证书&quot;&gt;&lt;/a&gt;数字证书&lt;/h2&gt;&lt;p&gt;数字证书是一个经证书授权中心生成的文件，数字证书里一般会包含公钥、公钥拥有者名称、CA的数字签名、有效期、授权中心名称、证书序列号等信息。其中CA的数字签名是验证证书是否被
篡改的关键，它其实就是对证书里面除了CA的数字签名以外的内容进行摘要算法得到一个摘要，然后CA机构用他自己的私钥对这个摘要进行加密就生成了CA的数字签名，CA机构会公开它的公
钥，验证证书时就是用这个公钥解密CA的数字签名，然后用来验证证书是否被篡改。&lt;/p&gt;
&lt;hr&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>作为一个开发人员，或多或少都听说过对称加密、非对称加密、摘要、数字签名、数字证书这几个概念，它们是用来保证在互联网通信过程中数据传输安全的。有人可能会有疑惑，我给传输数据加个密不就安全了，为什么还要搞这么多花样出来？本文主要通过一个案例来讲解这几个概念的实际作用。</p><p>在此之前，我先简单介绍一下这几个概念。</p><h2 id="对称加密"><a href="#对称加密" class="headerlink" title="对称加密"></a>对称加密</h2><p>对称加密是指用来加密和解密的是同一个秘钥。其特点是加密速度快，但是秘钥容易被黑客截获，所以安全性不高。密钥不可能一开始在发送方和接收方都全部生成好了 需要在一方生成之后传递给另一方 如果在传递过程密钥被劫持 整个加密就不安全了。常见的有AES、DES算法。</p><h2 id="非对称加密"><a href="#非对称加密" class="headerlink" title="非对称加密"></a>非对称加密</h2><p>非对称加密是指用来加密和解密的是不同的秘钥，它们是成对出现的，称为公钥和私钥，知道其中一个秘钥是无法推导出另外一个秘钥的。用公钥加密的内容需要用私钥才能解密，用私钥加密的内容需要用公钥才能解密。非对称加密的特点是安全性高，缺点是加密速度慢。公钥对外公开 如果密文是私钥加密 那么任何人都能用公钥解密。常见的有RSA、ECC算法。</p><h2 id="混合加密"><a href="#混合加密" class="headerlink" title="混合加密"></a>混合加密</h2><p>在传递过程把我们的对称加密中的密钥用非对称加密的方式去传递就好了。<img src="http://cdn.mydearest.cn/blog/images/mix.png" alt="mix"></p><h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>所谓的摘要就是一段信息或者一个文件通过某个哈希算法(也叫摘要算法)而得到的一串字符。摘要算法的特点就是不同的文件计算出的摘要是不同的(也有可能相同，但是可能性非常非常低)，比如一个1G的视频文件，哪怕只是改动其中一个字节，最后计算得到的摘要也是完全不同的，所以摘要算法通常是用来判断文件是否被篡改过。其还有一个特点就是通过摘要是无法推导出源文件的信息的。常用的摘要(散列)算法有MD5、SHA等。</p><h2 id="数字签名"><a href="#数字签名" class="headerlink" title="数字签名"></a>数字签名</h2><p>数字签名就是一个文件的摘要加密后的信息。数字签名是和源文件一起发送给接收方的，接收方收到后对文件用摘要算法算出一个摘要，然后和数字签名中的摘要进行比对，两者不一致的话说明文件被篡改了。</p><h2 id="数字证书"><a href="#数字证书" class="headerlink" title="数字证书"></a>数字证书</h2><p>数字证书是一个经证书授权中心生成的文件，数字证书里一般会包含公钥、公钥拥有者名称、CA的数字签名、有效期、授权中心名称、证书序列号等信息。其中CA的数字签名是验证证书是否被篡改的关键，它其实就是对证书里面除了CA的数字签名以外的内容进行摘要算法得到一个摘要，然后CA机构用他自己的私钥对这个摘要进行加密就生成了CA的数字签名，CA机构会公开它的公钥，验证证书时就是用这个公钥解密CA的数字签名，然后用来验证证书是否被篡改。</p><hr><a id="more"></a><h2 id="案例讲解"><a href="#案例讲解" class="headerlink" title="案例讲解"></a>案例讲解</h2><p>场景：张三要找人装修一个房子，原则是谁的出价便宜就给谁装修，所以对于报价文件就是属于机密文件。下面我们来看下不同的方式传输报价文件都会有什么风险。</p><h3 id="通过对称加密有什么风险"><a href="#通过对称加密有什么风险" class="headerlink" title="通过对称加密有什么风险"></a>通过对称加密有什么风险</h3><p>现在李四想接这个装修的活，他做了一份报价文件(文件名:lisi.txt，文件内容:报价50万)。然后李四用一个对称秘钥123对这个文件进行加密。最后李四将这个秘钥和加密的文件发给张三，张三收到后用这个秘钥解密，知道了李四的报价是50万。同时王五也想接这个装修的活，他本来是想报价55万的，但是又担心报价太高而丢掉这个活。恰巧王五是个黑客高手，于是他截获了李四发给张三的秘钥和加密文件，知道了李四报价是50万。最后王五将自己的报价改成了49万发给张三，结果王五接下了这个装修活。</p><blockquote><p>结论：用对称加密的话，一旦秘钥被黑客截获，加密就形同虚设，所以安全性比较低。</p></blockquote><h3 id="如果用非对称加密会怎么样"><a href="#如果用非对称加密会怎么样" class="headerlink" title="如果用非对称加密会怎么样"></a>如果用非对称加密会怎么样</h3><p>首先张三会生成一对秘钥，私钥是zhangsan1，公钥是zhangsan2，私钥张三自己保存，将公钥公布出去。</p><p>李四将报价文件list.txt用张三公布的公钥zhangsan2进行加密后传给张三，然后张三用私钥zhangsan1进行解密得到李四的报价是50万。</p><p>这个时候即使王五截获到了李四发给张三的报价文件，由于王五没有张三的私钥，所以他是无法解密文件的，也就无法知道李四的报价。最后王五因为报价55万而丢掉了这个装修的机会。</p><p>所以用非对称加密是可以保证数据传输安全的。不过这里说一句题外话，既然非对称加密安全性高，那为什么不淘汰掉对称加密呢？其实关键就在于加密速度，非对称加密计算量很大，所以加密速度是很慢的，如果发送消息非常频繁，使用非对称加密的话就会对性能造成很大影响。所以在实际开发过程中通常是对称加密和非对称加密结合使用的。也就是对称加密的秘钥是用非对称加密后发送的，这样能保证对称加密的秘钥不被黑客截获，然后在发送业务数据时就用对称加密。这样既保证了安全性也保证了加密速度。</p><blockquote><p>结论：非对称加密可以防止黑客截获加密后的内容，安全性高。</p></blockquote><h3 id="数字签名有什么用"><a href="#数字签名有什么用" class="headerlink" title="数字签名有什么用"></a>数字签名有什么用</h3><p>前面都说了非对称加密是安全的，那为什么还要数字签名呢？</p><p>设想一下，王五截获了李四的报价文件，王五虽然无法知道李四的实际报价，但是他完全可以伪造一份李四的报价(文件名:lisi.txt，文件内容:报价60万)，然后将这份伪造文件用张三公布的公钥zhangsan2进行加密后替换原来的报价文件。张三收到后解密发现报价是60万，于是张三就以为李四报的价是60万，最后决定将装修的活给报价55万的王五来做。</p><p>发生这个问题的关键就在于张三无法知道报价文件是否被篡改过。要解决这个问题就需要用到数字签名。首先李四需要自己生成一对非对称加密的秘钥，私钥lisi1自己保存，公钥lisi2发给张三。然后李四对自己的报价文件通过摘要算法得到一个摘要(假设摘要是aaa)，再用自己的私钥lisi1加密这个摘要就得到了报价文件的数字签名，最后将加密的报价文件和数字签名一起发给张三，张三收到后先用李四发过来的公钥lisi2解密数字签名得到摘要aaa，然后用自己的私钥zhangsan1解密加密的文件得到报价源文件，然后对报价源文件进行摘要算法，看计算得到的结果是不是aaa，如果不是aaa的话就说明报价文件被篡改了。</p><p>在这种情况下，如果王五截获了李四发给张三的文件。王五是无法解密报价文件的。如果王五伪造一份报价文件的话，等张三收到后就会发现报价文件和数字签名不匹配。那王五能不能伪造报价文件的同时也伪造签名呢？因为王五没有李四的私钥，所以没法对伪造的报价文件的摘要进行加密，所以也就没法伪造签名。</p><blockquote><p>结论：非对称加密虽然能确保加密文件内容不被窃取，但不能保证文件不被篡改。数字签名就是用来验证文件是否被篡改过。</p></blockquote><h3 id="数字证书有什么用"><a href="#数字证书有什么用" class="headerlink" title="数字证书有什么用"></a>数字证书有什么用</h3><p>既然非对称加密可以保证文件内容的安全性，数字签名又可以保证文件不被篡改，那还要数字证书有什么用呢？</p><p>我们再来设想一下，王五自己也生成了一对用于非对称加密的秘钥，私钥是wangwu1，公钥是wangwu2。前面李四将自己的公钥lisi2发给张三的过程中被王五给截获了，王五用自己的公钥wangwu2替换了李四的公钥lisi2，所以张三最后收到的公钥实际上是王五的，但张三对这并不知情。后面李四发的数字签名和加密的报价文件都被王五截获，并且王五伪造了一份报价文件，同时用自己的私钥加密报价文件的摘要生成伪造的签名并发给张三，张三收到后进行验证发现数字签名和报价文件是匹配的，就以为这份报价文件是真实的。</p><p>出现这个问题的关键就在于张三没法确认收到的公钥到底是不是李四发的，这个时候数字证书就起到作用了。李四到权威的数字证书机构申请数字证书，证书里面包含了公钥(lisi2)和公钥的拥有者(李四)等相关信息，然后李四将证书发给张三，张三通过证书里面的信息就可以知道公钥到底是不是李四的了。</p><p>那证书在发送过程中有没有可能被王五截获并篡改呢？要知道证书里面还包含CA的数字签名，这个签名是证书机构用他们自己的私钥对证书的摘要进行加密的，而公钥是公开的。所以即便王五截获并篡改了证书内容，他也无法伪造证书机构的签名，张三在收到证书后通过验证签名也会发现证书被篡改了。</p>]]></content:encoded>
      
      <comments>http://mydearest.cn/2020/%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%E3%80%81%E9%9D%9E%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%E3%80%81%E6%91%98%E8%A6%81%E3%80%81%E6%95%B0%E5%AD%97%E7%AD%BE%E5%90%8D%E3%80%81%E6%95%B0%E5%AD%97%E8%AF%81%E4%B9%A6.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>关于node的那些事(进阶篇)</title>
      <link>http://mydearest.cn/2020/%E5%85%B3%E4%BA%8Enode%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B(%E8%BF%9B%E9%98%B6%E7%AF%87).html</link>
      <guid>http://mydearest.cn/2020/%E5%85%B3%E4%BA%8Enode%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B(%E8%BF%9B%E9%98%B6%E7%AF%87).html</guid>
      <pubDate>Wed, 01 Jul 2020 16:31:02 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;👨提问：注册路由时-app-get、app-use、app-all-的区别是什么？&quot;&gt;&lt;a href=&quot;#👨提问：注册路由时-app-get、app-use、app-all-的区别是什么？&quot; class=&quot;headerlink&quot; title=&quot;👨提问：注册路由时 app.get、app.use、app.all 的区别是什么？&quot;&gt;&lt;/a&gt;👨提问：注册路由时 app.get、app.use、app.all 的区别是什么？&lt;/h2&gt;&lt;h3 id=&quot;app-use-path-callback&quot;&gt;&lt;a href=&quot;#app-use-path-callback&quot; class=&quot;headerlink&quot; title=&quot;app.use(path,callback)&quot;&gt;&lt;/a&gt;app.use(path,callback)&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;app.use是express用来调用中间件的方法。中间件通常不处理请求和响应，一般只处理输入数据，并将其交给队列中的下一个处理程序，比如下面这个例子app.use
(‘/user’)，那么只要路径以 /user 开始即可匹配，如 /user/tree 就可以匹配。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;app-all&quot;&gt;&lt;a href=&quot;#app-all&quot; class=&quot;headerlink&quot; title=&quot;app.all()&quot;&gt;&lt;/a&gt;app.all()&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;app.all 是路由中指代所有的请求方式，用作路由处理，匹配完整路径，在app.use之后可以理解为包含了app.get、app.post等的定义，比如app.all(‘/
user/tree’),能同时覆盖：get(‘/user/tree’) 、 post(‘/user/tree’)、 put(‘/user/tree’) ,不过相对于app.use()的前缀匹配，它则是匹配具体的路
由。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;all完整匹配，use只匹配前缀&lt;/code&gt;&lt;/p&gt;
&lt;hr&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="👨提问：注册路由时-app-get、app-use、app-all-的区别是什么？"><a href="#👨提问：注册路由时-app-get、app-use、app-all-的区别是什么？" class="headerlink" title="👨提问：注册路由时 app.get、app.use、app.all 的区别是什么？"></a>👨提问：注册路由时 app.get、app.use、app.all 的区别是什么？</h2><h3 id="app-use-path-callback"><a href="#app-use-path-callback" class="headerlink" title="app.use(path,callback)"></a>app.use(path,callback)</h3><blockquote><p>app.use是express用来调用中间件的方法。中间件通常不处理请求和响应，一般只处理输入数据，并将其交给队列中的下一个处理程序，比如下面这个例子app.use(‘/user’)，那么只要路径以 /user 开始即可匹配，如 /user/tree 就可以匹配。</p></blockquote><h3 id="app-all"><a href="#app-all" class="headerlink" title="app.all()"></a>app.all()</h3><blockquote><p>app.all 是路由中指代所有的请求方式，用作路由处理，匹配完整路径，在app.use之后可以理解为包含了app.get、app.post等的定义，比如app.all(‘/user/tree’),能同时覆盖：get(‘/user/tree’) 、 post(‘/user/tree’)、 put(‘/user/tree’) ,不过相对于app.use()的前缀匹配，它则是匹配具体的路由。</p></blockquote><p><code>all完整匹配，use只匹配前缀</code></p><hr><a id="more"></a><h2 id="express-response有哪些常用方法"><a href="#express-response有哪些常用方法" class="headerlink" title="express response有哪些常用方法?"></a>express response有哪些常用方法?</h2><p>express response对象是对Node.js原生对象ServerResponse的扩展，express response常见的有：res.end()、res.send()、res.render()、res.redirect()，而这几个有什么不同呢？更多请看文档<a href="https://www.expressjs.com.cn/4x/api.html#res" target="_blank" rel="noopener">express Response</a></p><h3 id="res-end"><a href="#res-end" class="headerlink" title="res.end()"></a>res.end()</h3><p>结束response - 如果服务端没有数据回传给客户端则可以直接用res.end返回，以此来结束响应过程。</p><h3 id="res-send-body"><a href="#res-send-body" class="headerlink" title="res.send(body)"></a>res.send(body)</h3><p>如果服务端有数据可以使用res.send,可以忽略res.end，body参数可以是一个Buffer对象，一个String对象或一个Array。</p><h3 id="res-render"><a href="#res-render" class="headerlink" title="res.render"></a>res.render</h3><p>res.render用来渲染模板文件，也可以结合模版引擎来使用，下面看个简单的demo (express+ejs模版引擎)</p><p><a href="http://cdn.mydearest.cn/blog/images/node-ejs.png" target="_blank" rel="noopener">node-ejs</a></p><ul><li>配置<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">app.set(<span class="string">'views'</span>, path.join(__dirname, <span class="string">'views'</span>)); <span class="comment">// views：模版文件存放的位置，默认是在项目根目录下</span></span><br><span class="line">app.set(<span class="string">'view engine'</span>, <span class="string">'ejs'</span>); <span class="comment">// view engine：使用什么模版引擎</span></span><br></pre></td></tr></table></figure></li></ul><p>其次是根据使用的模版引擎语法编写模版，最后通过res.render(view,locals, callback)导出，具体使用参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">view：模板的路径</span><br><span class="line">locals：渲染模板时传进去的本地变量</span><br><span class="line">callback：如果定义了回调函数，则当渲染工作完成时才被调用，返回渲染好的字符串（正确）或者错误信息 ❌</span><br></pre></td></tr></table></figure><h3 id="res-redirect"><a href="#res-redirect" class="headerlink" title="res.redirect"></a>res.redirect</h3><p>重定义到path所指定的URL，同时也可以重定向时定义好HTTP状态码（默认为302）<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">res.redirect(<span class="string">'http://baidu.com'</span>);</span><br><span class="line">res.redirect(<span class="number">301</span>, <span class="string">'http://baidu.com'</span>);</span><br></pre></td></tr></table></figure></p><h2 id="node如何利用多核CPU以及创建集群"><a href="#node如何利用多核CPU以及创建集群" class="headerlink" title="node如何利用多核CPU以及创建集群?"></a>node如何利用多核CPU以及创建集群?</h2><p>众所周知，nodejs是基于chrome浏览器的V8引擎构建的，一个nodejs进程只能使用一个CPU(一个CPU运行一个node实例)，举个例子：我们现在有一台8核的服务器，那么如果不利用多核CPU，是很一种浪费资源的行为，这个时候可以通过启动多个进程来利用多核CPU。</p><p>Node.js给我们提供了cluster模块，用于nodejs多核处理，同时可以通过它来搭建一个用于负载均衡的node服务集群。创建多进程。</p><blockquote><p>本质还是通过 child_process.fork() 专门用于衍生新的 Node.js 进程,衍生的 Node.js 子进程独立于父进程，但两者之间建立的 IPC 通信通道除外， 每个进程都有自己的内存，带有自己的 V8 实例</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> cluster = <span class="built_in">require</span>(<span class="string">'cluster'</span>)</span><br><span class="line"><span class="keyword">const</span> os = <span class="built_in">require</span>(<span class="string">'os'</span>)</span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">const</span> ejs = <span class="built_in">require</span>(<span class="string">'ejs'</span>)</span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> numCPUs = os.cpus().length</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (cluster.isMaster) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i =<span class="number">0</span> ;i&lt;numCPUs.length;++i) &#123;</span><br><span class="line">        cluster.fork()</span><br><span class="line">    &#125;</span><br><span class="line">    cluster.on(<span class="string">'exit'</span>, (worker, code, signal) =&gt; &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`worker <span class="subst">$&#123;worker.process.pid&#125;</span> died`</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    app.listen(<span class="number">3000</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`worker <span class="subst">$&#123;worker.process.pid&#125;</span> started`</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 一个端口被多个进程监听</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lsof -i -P -n | grep 3000</span><br><span class="line">ps -ef | grep pid</span><br></pre></td></tr></table></figure><h2 id="开启多个子线程"><a href="#开启多个子线程" class="headerlink" title="开启多个子线程"></a>开启多个子线程</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;</span><br><span class="line">    Worker, isMainThread, parentPort, workerData</span><br><span class="line">&#125; = <span class="built_in">require</span>(<span class="string">'worker_threads'</span>);</span><br><span class="line"><span class="keyword">const</span> worker = <span class="keyword">new</span> Worker(__filename, &#123;</span><br><span class="line">    workerData: script</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>线程间如何传输数据: parentPort postMessage on 发送监听消息</li><li><p>共享内存： SharedArrayBuffer 通过这个共享内存</p></li><li><p>在服务中若需要执行 shell 命令，那么就需要开启一个进程</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> exec = <span class="built_in">require</span>(<span class="string">'child_process'</span>).exec;</span><br><span class="line">exec(<span class="string">'ls'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">error, stdout, stderr</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(error) &#123;</span><br><span class="line">        <span class="built_in">console</span>.error(<span class="string">'error: '</span> + error);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'stdout: '</span> + stdout);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h2 id="node是怎样支持https"><a href="#node是怎样支持https" class="headerlink" title="node是怎样支持https?"></a>node是怎样支持https?</h2><p>https实现，离不开证书，通过openssl生成公钥私钥（不做详细介绍），然后基于 express的 https模块 实现，设置options配置, options有两个选项，一个是证书本体，一个是密码。</p><h2 id="node和客户端怎么解决跨域的问题？"><a href="#node和客户端怎么解决跨域的问题？" class="headerlink" title="node和客户端怎么解决跨域的问题？"></a>node和客户端怎么解决跨域的问题？</h2><p>app.all(‘*’,(req,res,next)=&gt;{}) 效果相当于app.use((req,res,next)=&gt;{}), 这也是app.all的一个比较常见的应用，就是用来处理跨域请求。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">app.all(<span class="string">'*'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">    res.header(<span class="string">'Access-Control-Allow-Origin'</span>, <span class="string">'*'</span>);</span><br><span class="line">    res.header(<span class="string">'Access-Control-Allow-Headers'</span>, <span class="string">'X-Requested-With'</span>);</span><br><span class="line">    res.header(<span class="string">'Access-Control-Allow-Methods'</span>, <span class="string">'PUT, POST, GET, DELETE, OPTIONS'</span>);</span><br><span class="line">    res.header(<span class="string">'Content-Type'</span>, <span class="string">'application/json;charset=utf-8'</span>);</span><br><span class="line">    <span class="keyword">if</span> (req.method == <span class="string">'OPTIONS'</span>) &#123;</span><br><span class="line">        res.send(<span class="number">200</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        next();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><ul><li>cors模块</li></ul><h2 id="两个node程序之间怎样交互"><a href="#两个node程序之间怎样交互" class="headerlink" title="两个node程序之间怎样交互?"></a>两个node程序之间怎样交互?</h2><p>通过fork，原理是子程序用process.on来监听父程序的消息，用 process.send给父程序发消息，父程序里用child.on,child.send进行交互，来实现父进程和子进程互相发送消息。</p><blockquote><p>child-process和process的stdin,stdout,stderror是一样的吗?概念都是一样的，输入，输出，错误，都是流．区别是在父程序眼里，子程序的stdout是输入流，stdin是输出流</p></blockquote><h2 id="执行中间件（洋葱模型）"><a href="#执行中间件（洋葱模型）" class="headerlink" title="执行中间件（洋葱模型）"></a>执行中间件（洋葱模型）</h2><p>我们通过 use 注册中间件，中间件函数有两个参数第一个是上下文，第二个是 next，在中间件函数执行过程中，若遇到 next() ，那么就会进入到下一个中间件中执行，下一个中间执行完成后，在返回上一个中间件执行 next() 后面的方法，这便是中间件的执行逻辑。</p><h2 id="介绍下-stream"><a href="#介绍下-stream" class="headerlink" title="介绍下 stream"></a>介绍下 stream</h2><p>流在 nodejs 用的很广泛，但对于大部分开发者来说，更多的是使用流，比如说 HTTP 中的 request respond ，标准输入输出，文件读取（createReadStream）， gulp 构建工具等等。流，可以理解成是一个管道，比如读取一个文件，常用的方法是从硬盘读取到内存中，在从内存中读取，这种方式对于小文件没问题，但若是大文件，效率就非常低，还有可能内存不足，采用流的方式，就好像给大文件插上一根吸管，持续的一点点读取文件的内容，管道的另一端收到数据，就可以进行处理，了解 Linux 的朋友应该非常熟悉这个概念。</p><ul><li>Node.js 中有四种基本的流类型：</li></ul><ol><li>Writable - 可写入数据的流（例如 fs.createWriteStream()）。</li><li>Readable - 可读取数据的流（例如 fs.createReadStream()）。</li><li>Duplex - 可读又可写的流（例如 net.Socket）。</li><li>Transform - 在读写过程中可以修改或转换数据的 Duplex 流（例如 zlib.createDeflate()）。接触比较多的还是第一二种pipe 来消费可读流</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="comment">// 直接读取文件</span></span><br><span class="line">fs.open(<span class="string">'./xxx.js'</span>, <span class="string">'r'</span>, (err, data) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(err)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 流的方式读取、写入</span></span><br><span class="line"><span class="keyword">let</span> readStream = fs.createReadStream(<span class="string">'./a.js'</span>);</span><br><span class="line"><span class="keyword">let</span> writeStream = fs.createWriteStream(<span class="string">'./b.js'</span>)</span><br><span class="line">readStream.pipe(writeStream).on(<span class="string">'data'</span>, (chunk) =&gt; &#123; <span class="comment">// 可读流被可写流消费</span></span><br><span class="line">    <span class="built_in">console</span>.log(chunk)</span><br><span class="line">    writeStream.write(chunk);</span><br><span class="line">&#125;).on(<span class="string">'finish'</span>, () =&gt; <span class="built_in">console</span>.log(<span class="string">'finish'</span>))</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://mydearest.cn/2020/%E5%85%B3%E4%BA%8Enode%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B(%E8%BF%9B%E9%98%B6%E7%AF%87).html#disqus_thread</comments>
    </item>
    
    <item>
      <title>实现图片懒加载</title>
      <link>http://mydearest.cn/2020/%E5%AE%9E%E7%8E%B0%E5%9B%BE%E7%89%87%E6%87%92%E5%8A%A0%E8%BD%BD.html</link>
      <guid>http://mydearest.cn/2020/%E5%AE%9E%E7%8E%B0%E5%9B%BE%E7%89%87%E6%87%92%E5%8A%A0%E8%BD%BD.html</guid>
      <pubDate>Wed, 01 Jul 2020 15:58:45 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;图片懒加载在一些图片密集型的网站中运用比较多，通过图片懒加载可以让一些不可视的图片不去加载，避免一次性加载过多的图片导致请求阻塞（浏览器一般对同一域名
下的并发请求的连接数有限制），这样就可以提高网站的加载速度，提高用户体验。 &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://cdn.mydearest.cn/blog/images/lazyload.png&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;效果预览&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>图片懒加载在一些图片密集型的网站中运用比较多，通过图片懒加载可以让一些不可视的图片不去加载，避免一次性加载过多的图片导致请求阻塞（浏览器一般对同一域名下的并发请求的连接数有限制），这样就可以提高网站的加载速度，提高用户体验。 </p><p><a href="http://cdn.mydearest.cn/blog/images/lazyload.png" target="_blank" rel="noopener">效果预览</a></p><hr><a id="more"></a><h2 id="如何做"><a href="#如何做" class="headerlink" title="如何做"></a>如何做</h2><h3 id="步骤一"><a href="#步骤一" class="headerlink" title="步骤一"></a>步骤一</h3><p>首先我们需要让我们html中需要懒加载的img标签的src设置缩略图或者不设置src，然后自定义一个属性，值为真正的图片或者原图的地址（比如下面的data-src），并且定义一个类名，表示该图片是需要懒加载的（比如下面例子的lazy-image），这有两个作用：</p><ol><li>为以后获取需要懒加载图片的img元素 </li><li>可以给这个类名设置背景图片，作为图片未加载前的过度图片，比如显示为loading的图片。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;img data-src=<span class="string">"https://tb1.bdstatic.com/tb/cms/liveshow/ent_slid2.jpg"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"lazy-image"</span>/&gt; </span><br><span class="line"><span class="comment">// css部分 </span></span><br><span class="line">.lazy-image &#123; </span><br><span class="line">    background: url(<span class="string">'../img/loading.gif'</span>) no-repeat center; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="步骤二"><a href="#步骤二" class="headerlink" title="步骤二"></a>步骤二</h3><p>页面加载完后，我们需要获取所有需要懒加载的图片的元素集合，判断是否在可视区域，如果是在可视区域的话，设置元素的src属性值为真正图片的地址。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">inViewShow() &#123;     </span><br><span class="line">    <span class="keyword">let</span> imageElements = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">document</span>.querySelectorAll(<span class="string">'.lazy-image'</span>))    </span><br><span class="line">    <span class="keyword">let</span> len = imageElements.length     </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;         </span><br><span class="line">        <span class="keyword">let</span> imageElement = imageElements[i]        </span><br><span class="line">        <span class="keyword">const</span> rect = imageElement.getBoundingClientRect() <span class="comment">// 出现在视野的时候加载图片         </span></span><br><span class="line">        <span class="keyword">if</span>(rect.top &lt; <span class="built_in">document</span>.documentElement.clientHeight) &#123;             </span><br><span class="line">            imageElement.src = imageElement.dataset.src <span class="comment">// 移除掉已经显示的             </span></span><br><span class="line">            imageElements.splice(i, <span class="number">1</span>)             </span><br><span class="line">            len--             </span><br><span class="line">            i--         </span><br><span class="line">        &#125;     </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里判断是否出现在可视区域内，是通过获取元素的getBoundingClientRect属性的top值和页面的clientHeight进行对比，如果top值小于clientHeight，则说明元素出现在可视区域了。BoundingClientRect是获取某个元素相对于视窗的位置集合，见下图，注意bottom和right和我们平时的bottom和right不一样。 </p><p><a href="http://cdn.mydearest.cn/blog/images/lazyload2.png" target="_blank" rel="noopener">lazyload2</a></p><h3 id="步骤三"><a href="#步骤三" class="headerlink" title="步骤三"></a>步骤三</h3><p>用户滚动窗口的时候，遍历所有需要懒加载的元素，通过每个元素的BoundingClientRect属性来判断元素是否出现在可视区域内，判断方法同第二步一样。 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'scroll'</span>, inViewShow)</span><br></pre></td></tr></table></figure><p>这里我们可以优化下，可以通过函数节流优化滚动事件的处理函数。</p><h3 id="补充-利用高级特性Intersection-Observer来判断元素是否可见。"><a href="#补充-利用高级特性Intersection-Observer来判断元素是否可见。" class="headerlink" title="补充-利用高级特性Intersection Observer来判断元素是否可见。"></a>补充-利用高级特性Intersection Observer来判断元素是否可见。</h3><p>上面我们利用元素的BoundingClientRect的top属性和body的clientHeight来判断元素是否可见，这种传统方式获取元素是否可见的一个缺点是我们还需要绑定scroll事件，scroll事件是伴随着大量计算的，会造成资源浪费，虽然我们可以通过节流函数来提高性能，但还是会有性能浪费的问题，而Intersection Observer可以不用监听scroll事件，做到元素一可见便调用回调，在回调里面我们来判断元素是否可见。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="string">"IntersectionObserver"</span> <span class="keyword">in</span> <span class="built_in">window</span>) &#123;        </span><br><span class="line">    <span class="keyword">let</span> lazyImageObserver = <span class="keyword">new</span> IntersectionObserver(<span class="function">(<span class="params">entries, observer</span>) =&gt;</span> &#123;          </span><br><span class="line">        entries.forEach(<span class="function">(<span class="params">entry, index</span>) =&gt;</span> &#123;            </span><br><span class="line">            <span class="comment">// 如果元素可见            </span></span><br><span class="line">            <span class="keyword">if</span> (entry.intersectionRatio &gt; <span class="number">0</span>) &#123;              </span><br><span class="line">                <span class="keyword">let</span> lazyImage = entry.target              </span><br><span class="line">                lazyImage.src = lazyImage.dataset.src              </span><br><span class="line">                lazyImage.classList.remove(<span class="string">"lazy-image"</span>)              </span><br><span class="line">                lazyImageObserver.unobserve(lazyImage)              </span><br><span class="line">                <span class="comment">// this.lazyImages.splice(index, 1)            </span></span><br><span class="line">            &#125;          </span><br><span class="line">        &#125;)        </span><br><span class="line">    &#125;)        </span><br><span class="line">    <span class="keyword">this</span>.lazyImages.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">lazyImage</span>) </span>&#123;          </span><br><span class="line">        lazyImageObserver.observe(lazyImage);        </span><br><span class="line">    &#125;)      </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="仓库代码"><a href="#仓库代码" class="headerlink" title="仓库代码"></a>仓库代码</h2><p><a href="https://github.com/cosyer/jelly/tree/gh-pages/lazyload" target="_blank" rel="noopener">lazyload</a></p><p><a href="https://cosyer.github.io/jelly/lazyload/" target="_blank" rel="noopener">在线预览</a></p>]]></content:encoded>
      
      <comments>http://mydearest.cn/2020/%E5%AE%9E%E7%8E%B0%E5%9B%BE%E7%89%87%E6%87%92%E5%8A%A0%E8%BD%BD.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>超详细的TypeScript教程</title>
      <link>http://mydearest.cn/2020/%E8%B6%85%E8%AF%A6%E7%BB%86%E7%9A%84TypeScript%E6%95%99%E7%A8%8B.html</link>
      <guid>http://mydearest.cn/2020/%E8%B6%85%E8%AF%A6%E7%BB%86%E7%9A%84TypeScript%E6%95%99%E7%A8%8B.html</guid>
      <pubDate>Sun, 28 Jun 2020 09:12:42 GMT</pubDate>
      <description>
      
        &lt;h1 id=&quot;typescript&quot;&gt;&lt;a href=&quot;#typescript&quot; class=&quot;headerlink&quot; title=&quot;typescript&quot;&gt;&lt;/a&gt;typescript&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.typescriptlang.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;TypeScript&lt;/a&gt; 是一种由微软开发的自由和开源的编程语言。它是 JavaScript 的一个超集，而且本质上向这个语言添加了可选的静态类型和基于类的面向对象编程。&lt;/p&gt;
&lt;h2 id=&quot;区别&quot;&gt;&lt;a href=&quot;#区别&quot; class=&quot;headerlink&quot; title=&quot;区别&quot;&gt;&lt;/a&gt;区别&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;TypeScript&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;JavaScript&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;JavaScript 的超集用于解决大型项目的代码复杂性&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;一种脚本语言，用于创建动态网页&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;可以在编译期间发现并纠正错误&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;作为一种解释型语言，只能在运行时发现错误&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;强类型，支持静态和动态类型&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;弱类型，没有静态类型选项&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;最终被编译成 JavaScript 代码，使浏览器可以理解&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;可以直接在浏览器中使用&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;支持模块、泛型和接口&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;不支持模块，泛型或接口&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;支持 ES3，ES4，ES5 和 ES6 等&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;不支持编译其他 ES3，ES4，ES5 或 ES6 功能&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;社区的支持仍在增长，而且还不是很大&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;大量的社区支持以及大量文档和解决问题的支持&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h3&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm install -g typescript&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;编译&quot;&gt;&lt;a href=&quot;#编译&quot; class=&quot;headerlink&quot; title=&quot;编译&quot;&gt;&lt;/a&gt;编译&lt;/h3&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;tsc helloworld.ts&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// helloworld.ts =&amp;gt; helloworld.js&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;a href=&quot;https://www.typescriptlang.org/play&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;在线学习语法和特性&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="typescript"><a href="#typescript" class="headerlink" title="typescript"></a>typescript</h1><p><a href="https://www.typescriptlang.org/" target="_blank" rel="noopener">TypeScript</a> 是一种由微软开发的自由和开源的编程语言。它是 JavaScript 的一个超集，而且本质上向这个语言添加了可选的静态类型和基于类的面向对象编程。</p><h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><table><thead><tr><th style="text-align:center">TypeScript</th><th style="text-align:center">JavaScript</th></tr></thead><tbody><tr><td style="text-align:center">JavaScript 的超集用于解决大型项目的代码复杂性</td><td style="text-align:center">一种脚本语言，用于创建动态网页</td></tr><tr><td style="text-align:center">可以在编译期间发现并纠正错误</td><td style="text-align:center">作为一种解释型语言，只能在运行时发现错误</td></tr><tr><td style="text-align:center">强类型，支持静态和动态类型</td><td style="text-align:center">弱类型，没有静态类型选项</td></tr><tr><td style="text-align:center">最终被编译成 JavaScript 代码，使浏览器可以理解</td><td style="text-align:center">可以直接在浏览器中使用</td></tr><tr><td style="text-align:center">支持模块、泛型和接口</td><td style="text-align:center">不支持模块，泛型或接口</td></tr><tr><td style="text-align:center">支持 ES3，ES4，ES5 和 ES6 等</td><td style="text-align:center">不支持编译其他 ES3，ES4，ES5 或 ES6 功能</td></tr><tr><td style="text-align:center">社区的支持仍在增长，而且还不是很大</td><td style="text-align:center">大量的社区支持以及大量文档和解决问题的支持</td></tr></tbody></table><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g typescript</span><br></pre></td></tr></table></figure><h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tsc helloworld.ts</span><br><span class="line"><span class="comment">// helloworld.ts =&gt; helloworld.js</span></span><br></pre></td></tr></table></figure><p><a href="https://www.typescriptlang.org/play" target="_blank" rel="noopener">在线学习语法和特性</a></p><hr><a id="more"></a><h2 id="类型-11种"><a href="#类型-11种" class="headerlink" title="类型 (11种)"></a>类型 (11种)</h2><h3 id="Boolean"><a href="#Boolean" class="headerlink" title="Boolean"></a>Boolean</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> isDone: boolean = <span class="literal">false</span>;</span><br><span class="line"><span class="comment">// ES5：var isDone = false;</span></span><br></pre></td></tr></table></figure><h3 id="Number"><a href="#Number" class="headerlink" title="Number"></a>Number</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> count: number = <span class="number">10</span>;</span><br><span class="line"><span class="comment">// ES5：var count = 10;</span></span><br></pre></td></tr></table></figure><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name: string = <span class="string">"cosyer"</span>;</span><br><span class="line"><span class="comment">// ES5：var name = 'cosyer';</span></span><br></pre></td></tr></table></figure><h3 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> list: number[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="comment">// ES5：var list = [1,2,3];</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> list: <span class="built_in">Array</span>&lt;number&gt; = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]; <span class="comment">// Array&lt;number&gt;泛型语法</span></span><br><span class="line"><span class="comment">// ES5：var list = [1,2,3];</span></span><br></pre></td></tr></table></figure><h3 id="Enum"><a href="#Enum" class="headerlink" title="Enum"></a>Enum</h3><p>使用枚举我们可以定义一些带名字的常量。使用枚举可以清晰地表达意图或创建一组有区别的用例。 TypeScript 支持数字的和基于字符串的枚举。</p><h4 id="数字枚举"><a href="#数字枚举" class="headerlink" title="数字枚举"></a>数字枚举</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">enum Direction &#123;</span><br><span class="line">  NORTH,</span><br><span class="line">  SOUTH,</span><br><span class="line">  EAST,</span><br><span class="line">  WEST,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> dir: Direction = Direction.NORTH;</span><br></pre></td></tr></table></figure><p>默认情况下，NORTH 的初始值为 0，其余的成员会从 1 开始自动增长。换句话说，Direction.SOUTH 的值为 1，Direction.EAST 的值为 2，Direction.WEST 的值为 3。上面的枚举示例代码经过编译后会生成以下代码：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">"use strict"</span>;</span><br><span class="line"><span class="keyword">var</span> Direction;</span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">Direction</span>) </span>&#123;</span><br><span class="line">  Direction[(Direction[<span class="string">"NORTH"</span>] = <span class="number">0</span>)] = <span class="string">"NORTH"</span>;</span><br><span class="line">  Direction[(Direction[<span class="string">"SOUTH"</span>] = <span class="number">1</span>)] = <span class="string">"SOUTH"</span>;</span><br><span class="line">  Direction[(Direction[<span class="string">"EAST"</span>] = <span class="number">2</span>)] = <span class="string">"EAST"</span>;</span><br><span class="line">  Direction[(Direction[<span class="string">"WEST"</span>] = <span class="number">3</span>)] = <span class="string">"WEST"</span>;</span><br><span class="line">&#125;)(Direction || (Direction = &#123;&#125;));</span><br><span class="line"><span class="keyword">var</span> dir = Direction.NORTH;</span><br></pre></td></tr></table></figure>也可以设置 NORTH 的初始值，比如：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">enum Direction &#123;</span><br><span class="line">  NORTH = <span class="number">3</span>,</span><br><span class="line">  SOUTH,</span><br><span class="line">  EAST,</span><br><span class="line">  WEST,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="字符串枚举"><a href="#字符串枚举" class="headerlink" title="字符串枚举"></a>字符串枚举</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">enum Direction &#123;</span><br><span class="line">  NORTH = <span class="string">"NORTH"</span>,</span><br><span class="line">  SOUTH = <span class="string">"SOUTH"</span>,</span><br><span class="line">  EAST = <span class="string">"EAST"</span>,</span><br><span class="line">  WEST = <span class="string">"WEST"</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译生成：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">"use strict"</span>;</span><br><span class="line"><span class="keyword">var</span> Direction;</span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">Direction</span>) </span>&#123;</span><br><span class="line">    Direction[<span class="string">"NORTH"</span>] = <span class="string">"NORTH"</span>;</span><br><span class="line">    Direction[<span class="string">"SOUTH"</span>] = <span class="string">"SOUTH"</span>;</span><br><span class="line">    Direction[<span class="string">"EAST"</span>] = <span class="string">"EAST"</span>;</span><br><span class="line">    Direction[<span class="string">"WEST"</span>] = <span class="string">"WEST"</span>;</span><br><span class="line">&#125;)(Direction || (Direction = &#123;&#125;));</span><br></pre></td></tr></table></figure></p><h4 id="异构枚举"><a href="#异构枚举" class="headerlink" title="异构枚举"></a>异构枚举</h4><p>异构枚举的成员值是数字和字符串的混合：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">enum Enum &#123;</span><br><span class="line">  A,</span><br><span class="line">  B,</span><br><span class="line">  C = <span class="string">"C"</span>,</span><br><span class="line">  D = <span class="string">"D"</span>,</span><br><span class="line">  E = <span class="number">8</span>,</span><br><span class="line">  F,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>编译生成：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">"use strict"</span>;</span><br><span class="line"><span class="keyword">var</span> Enum;</span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">Enum</span>) </span>&#123;</span><br><span class="line">    Enum[Enum[<span class="string">"A"</span>] = <span class="number">0</span>] = <span class="string">"A"</span>;</span><br><span class="line">    Enum[Enum[<span class="string">"B"</span>] = <span class="number">1</span>] = <span class="string">"B"</span>;</span><br><span class="line">    Enum[<span class="string">"C"</span>] = <span class="string">"C"</span>;</span><br><span class="line">    Enum[<span class="string">"D"</span>] = <span class="string">"D"</span>;</span><br><span class="line">    Enum[Enum[<span class="string">"E"</span>] = <span class="number">8</span>] = <span class="string">"E"</span>;</span><br><span class="line">    Enum[Enum[<span class="string">"F"</span>] = <span class="number">9</span>] = <span class="string">"F"</span>;</span><br><span class="line">&#125;)(Enum || (Enum = &#123;&#125;));</span><br></pre></td></tr></table></figure>数字枚举相对字符串枚举多了 “反向映射”：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(Enum.A) <span class="comment">//输出：0</span></span><br><span class="line"><span class="built_in">console</span>.log(Enum[<span class="number">0</span>]) <span class="comment">// 输出：A</span></span><br></pre></td></tr></table></figure></p><h3 id="Any"><a href="#Any" class="headerlink" title="Any"></a>Any</h3><p>在 TypeScript 中，任何类型都可以被归为 any 类型。这让 any 类型成为了类型系统的顶级类型（也被称作全局超级类型）。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> notSure: any = <span class="number">666</span>;</span><br><span class="line">notSure = <span class="string">"cosyer"</span>;</span><br><span class="line">notSure = <span class="literal">false</span>;</span><br></pre></td></tr></table></figure>any 类型本质上是类型系统的一个逃逸舱。作为开发者，这给了我们很大的自由：TypeScript 允许我们对 any 类型的值执行任何操作，而无需事先执行任何形式的检查。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> value: any;</span><br><span class="line"></span><br><span class="line">value.foo.bar; <span class="comment">// OK</span></span><br><span class="line">value.trim(); <span class="comment">// OK</span></span><br><span class="line">value(); <span class="comment">// OK</span></span><br><span class="line"><span class="keyword">new</span> value(); <span class="comment">// OK</span></span><br><span class="line">value[<span class="number">0</span>][<span class="number">1</span>]; <span class="comment">// OK</span></span><br></pre></td></tr></table></figure>在许多场景下，这太宽松了。使用 any 类型，可以很容易地编写类型正确但在运行时有问题的代码。如果我们使用 any 类型，就无法使用 TypeScript 提供的大量的保护机制。为了解决 any 带来的问题，TypeScript 3.0 引入了 unknown 类型。AnyScript 2333.</p><h3 id="Unknown"><a href="#Unknown" class="headerlink" title="Unknown"></a>Unknown</h3><p>就像所有类型都可以赋值给 any，所有类型也都可以赋值给 unknown。这使得 unknown 成为 TypeScript 类型系统的另一种顶级类型（另一种是 any）。下面我们来看一下 unknown 类型的使用示例：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> value: unknown;</span><br><span class="line"></span><br><span class="line">value = <span class="literal">true</span>; <span class="comment">// OK</span></span><br><span class="line">value = <span class="number">42</span>; <span class="comment">// OK</span></span><br><span class="line">value = <span class="string">"Hello World"</span>; <span class="comment">// OK</span></span><br><span class="line">value = []; <span class="comment">// OK</span></span><br><span class="line">value = &#123;&#125;; <span class="comment">// OK</span></span><br><span class="line">value = <span class="built_in">Math</span>.random; <span class="comment">// OK</span></span><br><span class="line">value = <span class="literal">null</span>; <span class="comment">// OK</span></span><br><span class="line">value = <span class="literal">undefined</span>; <span class="comment">// OK</span></span><br><span class="line">value = <span class="keyword">new</span> <span class="built_in">TypeError</span>(); <span class="comment">// OK</span></span><br><span class="line">value = <span class="built_in">Symbol</span>(<span class="string">"type"</span>); <span class="comment">// OK</span></span><br></pre></td></tr></table></figure></p><p>对 value 变量的所有赋值都被认为是类型正确的。但是，当我们尝试将类型为 unknown 的值赋值给其他类型的变量时会发生什么？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> value: unknown;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> value1: unknown = value; <span class="comment">// OK</span></span><br><span class="line"><span class="keyword">let</span> value2: any = value; <span class="comment">// OK</span></span><br><span class="line"><span class="keyword">let</span> value3: boolean = value; <span class="comment">// Error</span></span><br><span class="line"><span class="keyword">let</span> value4: number = value; <span class="comment">// Error</span></span><br><span class="line"><span class="keyword">let</span> value5: string = value; <span class="comment">// Error</span></span><br><span class="line"><span class="keyword">let</span> value6: object = value; <span class="comment">// Error</span></span><br><span class="line"><span class="keyword">let</span> value7: any[] = value; <span class="comment">// Error</span></span><br><span class="line"><span class="keyword">let</span> value8: <span class="built_in">Function</span> = value; <span class="comment">// Error</span></span><br></pre></td></tr></table></figure><p>unknown 类型只能被赋值给 any 类型和 unknown 类型本身。直观地说，这是有道理的：只有能够保存任意类型值的容器才能保存 unknown 类型的值。毕竟我们不知道变量 value 中存储了什么类型的值。</p><p>将 value 变量类型设置为 unknown 后，这些操作都不再被认为是类型正确的。通过将 any 类型改变为 unknown 类型，我们已将允许所有更改的默认设置，更改为禁止任何更改。</p><h3 id="Tuple"><a href="#Tuple" class="headerlink" title="Tuple"></a>Tuple</h3><p>众所周知，数组一般由同种类型的值组成，但有时我们需要在单个变量中存储不同类型的值，这时候我们就可以使用元组。在 JavaScript 中是没有元组的，元组是 TypeScript 中特有的类型，其工作方式类似于数组。</p><p>元组可用于定义具有有限数量的未命名属性的类型。每个属性都有一个关联的类型。使用元组时，必须提供每个属性的值。为了更直观地理解元组的概念，我们来看一个具体的例子：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> tupleType: [string, boolean]; <span class="comment">// 强制类型匹配</span></span><br><span class="line">tupleType = [<span class="string">"cosyer"</span>, <span class="literal">true</span>];</span><br></pre></td></tr></table></figure></p><h3 id="Void"><a href="#Void" class="headerlink" title="Void"></a>Void</h3><p>某种程度上来说，void 类型像是与 any 类型相反，它表示没有任何类型。当一个函数没有返回值时，你通常会见到其返回值类型是 void：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明函数返回值为void</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">warnUser</span>(<span class="params"></span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"This is my warning message"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>需要注意的是，声明一个 void 类型的变量没有什么作用，因为它的值只能为 undefined 或 null：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> unusable: <span class="keyword">void</span> = <span class="literal">undefined</span>;</span><br></pre></td></tr></table></figure></p><h3 id="Null-Undefined"><a href="#Null-Undefined" class="headerlink" title="Null/Undefined"></a>Null/Undefined</h3><p>TypeScript 里，undefined 和 null 两者有各自的类型分别为 undefined 和 null。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> u: <span class="literal">undefined</span> = <span class="literal">undefined</span>;</span><br><span class="line"><span class="keyword">let</span> n: <span class="literal">null</span> = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure>默认情况下 null 和 undefined 是所有类型的子类型。 就是说你可以把 null 和 undefined 赋值给 number 类型的变量。然而，如果你指定了–strictNullChecks 标记，null 和 undefined 只能赋值给 void 和它们各自的类型。</p><h3 id="Never"><a href="#Never" class="headerlink" title="Never"></a>Never</h3><p>never 类型表示的是那些永不存在的值的类型。 例如，never 类型是那些总是会抛出异常或根本就不会有返回值的函数表达式或箭头函数表达式的返回值类型。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回never的函数必须存在无法达到的终点</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">error</span>(<span class="params">message: string</span>): <span class="title">never</span> </span>&#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(message);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">infiniteLoop</span>(<span class="params"></span>): <span class="title">never</span> </span>&#123;</span><br><span class="line">  <span class="keyword">while</span> (<span class="literal">true</span>) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 TypeScript 中，可以利用 never 类型的特性来实现全面性检查，具体示例如下：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">type Foo = string | number;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">controlFlowAnalysisWithNever</span>(<span class="params">foo: Foo</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> foo === <span class="string">"string"</span>) &#123;</span><br><span class="line">    <span class="comment">// 这里 foo 被收窄为 string 类型</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> foo === <span class="string">"number"</span>) &#123;</span><br><span class="line">    <span class="comment">// 这里 foo 被收窄为 number 类型</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// foo 在这里是 never</span></span><br><span class="line">    <span class="keyword">const</span> check: never = foo;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>注意在 else 分支里面，我们把收窄为 never 的 foo 赋值给一个显示声明的 never 变量。如果一切逻辑正确，那么这里应该能够编译通过。但是假如后来有一天你的同事修改了 Foo 的类型：type Foo = string | number | boolean;复制代码然而他忘记同时修改 controlFlowAnalysisWithNever 方法中的控制流程，这时候 else 分支的 foo 类型会被收窄为 boolean 类型，导致无法赋值给 never 类型，这时就会产生一个编译错误。通过这个方式，我们可以确保controlFlowAnalysisWithNever 方法总是穷尽了 Foo 的所有可能类型。 通过这个示例，我们可以得出一个结论：<code>使用 never 避免出现新增了联合类型没有对应的实现，目的就是写出类型绝对安全的代码。</code></p><h2 id="类型断言"><a href="#类型断言" class="headerlink" title="类型断言"></a>类型断言</h2><h3 id="尖括号"><a href="#尖括号" class="headerlink" title="尖括号"></a>尖括号</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> someValue: any = <span class="string">"this is a string"</span>;</span><br><span class="line"><span class="keyword">let</span> strLength: number = (<span class="xml"><span class="tag">&lt;<span class="name">string</span>&gt;</span>someValue).length;</span></span><br></pre></td></tr></table></figure><h3 id="as"><a href="#as" class="headerlink" title="as"></a>as</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> someValue: any = <span class="string">"this is a string"</span>;</span><br><span class="line"><span class="keyword">let</span> strLength: number = (someValue <span class="keyword">as</span> string).length;</span><br></pre></td></tr></table></figure><h2 id="类型守卫"><a href="#类型守卫" class="headerlink" title="类型守卫"></a>类型守卫</h2><p>类型保护是可执行运行时检查的一种表达式，用于确保该类型在一定的范围内。换句话说，类型保护可以保证一个字符串是一个字符串，尽管它的值也可以是一个数值。类型保护与特性检测并不是完全不同，其主要思想是尝试检测属性、方法或原型，以确定如何处理值。目前主要有四种的方式来实现类型保护：</p><h3 id="in-关键字"><a href="#in-关键字" class="headerlink" title="in 关键字"></a>in 关键字</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">interface Admin &#123;</span><br><span class="line">  name: string;</span><br><span class="line">  privileges: string[];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface Employee &#123;</span><br><span class="line">  name: string;</span><br><span class="line">  startDate: <span class="built_in">Date</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">type UnknownEmployee = Employee | Admin;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printEmployeeInformation</span>(<span class="params">emp: UnknownEmployee</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"Name: "</span> + emp.name);</span><br><span class="line">  <span class="keyword">if</span> (<span class="string">"privileges"</span> <span class="keyword">in</span> emp) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Privileges: "</span> + emp.privileges);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="string">"startDate"</span> <span class="keyword">in</span> emp) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Start Date: "</span> + emp.startDate);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="typeof-关键字"><a href="#typeof-关键字" class="headerlink" title="typeof 关键字"></a>typeof 关键字</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">padLeft</span>(<span class="params">value: string, padding: string | number</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> padding === <span class="string">"number"</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Array</span>(padding + <span class="number">1</span>).join(<span class="string">" "</span>) + value;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> padding === <span class="string">"string"</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> padding + value;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">`Expected string or number, got '<span class="subst">$&#123;padding&#125;</span>'.`</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>typeof 类型保护只支持两种形式：typeof v === “typename” 和 typeof v !== typename，”typename” 必须是 “number”， “string”， “boolean” 或 “symbol”。 但是 TypeScript 并不会阻止你与其它字符串比较，语言不会把那些表达式识别为类型保护。</p><h3 id="instanceof-关键字"><a href="#instanceof-关键字" class="headerlink" title="instanceof 关键字"></a>instanceof 关键字</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">interface Padder &#123;</span><br><span class="line">  getPaddingString(): string;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpaceRepeatingPadder</span> <span class="title">implements</span> <span class="title">Padder</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(private numSpaces: number) &#123;&#125;</span><br><span class="line">  getPaddingString() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Array</span>(<span class="keyword">this</span>.numSpaces + <span class="number">1</span>).join(<span class="string">" "</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StringPadder</span> <span class="title">implements</span> <span class="title">Padder</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(private value: string) &#123;&#125;</span><br><span class="line">  getPaddingString() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> padder: Padder = <span class="keyword">new</span> SpaceRepeatingPadder(<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (padder <span class="keyword">instanceof</span> SpaceRepeatingPadder) &#123;</span><br><span class="line">  <span class="comment">// padder的类型收窄为 'SpaceRepeatingPadder'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自定义类型保护的类型谓词"><a href="#自定义类型保护的类型谓词" class="headerlink" title="自定义类型保护的类型谓词"></a>自定义类型保护的类型谓词</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isNumber</span>(<span class="params">x: any</span>): <span class="title">x</span> <span class="title">is</span> <span class="title">number</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> x === <span class="string">"number"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isString</span>(<span class="params">x: any</span>): <span class="title">x</span> <span class="title">is</span> <span class="title">string</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> x === <span class="string">"string"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="联合类型和类型别名"><a href="#联合类型和类型别名" class="headerlink" title="联合类型和类型别名"></a>联合类型和类型别名</h2><h3 id="联合类型"><a href="#联合类型" class="headerlink" title="联合类型"></a>联合类型</h3><p>联合类型通常与 null 或 undefined 一起使用：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sayHello = <span class="function">(<span class="params">name: string | <span class="literal">undefined</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>例如，这里 name 的类型是 string | undefined 意味着可以将 string 或 undefined 的值传递给sayHello 函数。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sayHello(<span class="string">"cosyer"</span>);</span><br><span class="line">sayHello(<span class="literal">undefined</span>);</span><br></pre></td></tr></table></figure></p><h3 id="可辨识联合"><a href="#可辨识联合" class="headerlink" title="可辨识联合"></a>可辨识联合</h3><p>TypeScript 可辨识联合（Discriminated Unions）类型，也称为代数数据类型或标签联合类型。它包含 3 个要点：<code>可辨识、联合类型和类型守卫。</code></p><p>这种类型的本质是结合联合类型和字面量类型的一种类型保护方法。<code>如果一个类型是多个类型的联合类型，且多个类型含有一个公共属性，那么就可以利用这个公共属性，来创建不同的类型保护区块。</code></p><h4 id="可辨识"><a href="#可辨识" class="headerlink" title="可辨识"></a>可辨识</h4><p>可辨识要求联合类型中的每个元素都含有一个单例类型属性(公共属性)，比如：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">enum CarTransmission &#123;</span><br><span class="line">  Automatic = <span class="number">200</span>,</span><br><span class="line">  Manual = <span class="number">300</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface Motorcycle &#123;</span><br><span class="line">  vType: <span class="string">"motorcycle"</span>; <span class="comment">// discriminant</span></span><br><span class="line">  make: number; <span class="comment">// year</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface Car &#123;</span><br><span class="line">  vType: <span class="string">"car"</span>; <span class="comment">// discriminant</span></span><br><span class="line">  transmission: CarTransmission</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface Truck &#123;</span><br><span class="line">  vType: <span class="string">"truck"</span>; <span class="comment">// discriminant</span></span><br><span class="line">  capacity: number; <span class="comment">// in tons</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>在上述代码中，我们分别定义了 Motorcycle、 Car 和 Truck 三个接口，在这些接口中都包含一个 vType 属性，该属性被称为可辨识的属性，而其它的属性只跟特性的接口相关。</p><h4 id="联合类型-1"><a href="#联合类型-1" class="headerlink" title="联合类型"></a>联合类型</h4><p>基于前面定义了三个接口，我们可以创建一个 Vehicle 联合类型：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type Vehicle = Motorcycle | Car | Truck;</span><br></pre></td></tr></table></figure>现在我们就可以开始使用 Vehicle 联合类型，对于 Vehicle 类型的变量，它可以表示不同类型的车辆。</p><h4 id="类型守卫-1"><a href="#类型守卫-1" class="headerlink" title="类型守卫"></a>类型守卫</h4><p>下面我们来定义一个 evaluatePrice 方法，该方法用于根据车辆的类型、容量和评估因子来计算价格，具体实现如下：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> EVALUATION_FACTOR = <span class="built_in">Math</span>.PI; </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">evaluatePrice</span>(<span class="params">vehicle: Vehicle</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> vehicle.capacity * EVALUATION_FACTOR;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> myTruck: Truck = &#123; <span class="attr">vType</span>: <span class="string">"truck"</span>, <span class="attr">capacity</span>: <span class="number">9.5</span> &#125;;</span><br><span class="line">evaluatePrice(myTruck);</span><br></pre></td></tr></table></figure>对于以上代码，TypeScript 编译器将会提示以下错误信息：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Property <span class="string">'capacity'</span> does not exist on type <span class="string">'Vehicle'</span>.</span><br><span class="line">Property <span class="string">'capacity'</span> does not exist on type <span class="string">'Motorcycle'</span>.</span><br></pre></td></tr></table></figure></p><p>原因是在 Motorcycle 接口中，并不存在 capacity 属性，而对于 Car 接口来说，它也不存在 capacity 属性。那么，现在我们应该如何解决以上问题呢？这时，我们可以使用类型守卫。下面我们来重构一下前面定义的 evaluatePrice 方法，重构后的代码如下：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">evaluatePrice</span>(<span class="params">vehicle: Vehicle</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span>(vehicle.vType) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"car"</span>:</span><br><span class="line">      <span class="keyword">return</span> vehicle.transmission * EVALUATION_FACTOR;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"truck"</span>:</span><br><span class="line">      <span class="keyword">return</span> vehicle.capacity * EVALUATION_FACTOR;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"motorcycle"</span>:</span><br><span class="line">      <span class="keyword">return</span> vehicle.make * EVALUATION_FACTOR;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="类型别名"><a href="#类型别名" class="headerlink" title="类型别名"></a>类型别名</h3><p>类型别名用来给一个类型起个新名字(alias)。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">type Message = string | string[];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> greet = <span class="function">(<span class="params">message: Message</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h2 id="交叉类型"><a href="#交叉类型" class="headerlink" title="交叉类型"></a>交叉类型</h2><p>TypeScript 交叉类型是将多个类型合并为一个类型。 这让我们可以把现有的多种类型叠加到一起成为一种类型，它包含了所需的所有类型的特性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">interface IPerson &#123;</span><br><span class="line">  id: string;</span><br><span class="line">  age: number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface IWorker &#123;</span><br><span class="line">  companyId: string;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">type IStaff = IPerson &amp; IWorker;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> staff: IStaff = &#123;</span><br><span class="line">  id: <span class="string">'E1006'</span>,</span><br><span class="line">  age: <span class="number">33</span>,</span><br><span class="line">  companyId: <span class="string">'EFT'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.dir(staff)</span><br></pre></td></tr></table></figure><p>在上面示例中，我们首先为 IPerson 和 IWorker 类型定义了不同的成员，然后通过 &amp; 运算符定义了 IStaff 交叉类型，所以该类型同时拥有 IPerson 和 IWorker 这两种类型的成员。</p><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="区别-1"><a href="#区别-1" class="headerlink" title="区别"></a>区别</h3><table><thead><tr><th style="text-align:center">TypeScript</th><th style="text-align:center">JavaScript</th></tr></thead><tbody><tr><td style="text-align:center">含有类型</td><td style="text-align:center">无类型</td></tr><tr><td style="text-align:center">箭头函数</td><td style="text-align:center">箭头函数（ES2015）</td></tr><tr><td style="text-align:center">函数类型</td><td style="text-align:center">无函数类型</td></tr><tr><td style="text-align:center">必填和可选参数</td><td style="text-align:center">所有参数都是可选的</td></tr><tr><td style="text-align:center">默认参数</td><td style="text-align:center">默认参数</td></tr><tr><td style="text-align:center">剩余参数</td><td style="text-align:center">剩余参数</td></tr><tr><td style="text-align:center">函数重载</td><td style="text-align:center">无函数重载</td></tr></tbody></table><h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3><p>简单看下示例，详细可见<a href="https://mydearest.cn/jsthis.html">JavaScript 中 this 的详解</a><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">myBooks.forEach(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'reading'</span>));</span><br><span class="line"></span><br><span class="line">myBooks.forEach(<span class="function"><span class="params">title</span> =&gt;</span> <span class="built_in">console</span>.log(title));</span><br><span class="line"></span><br><span class="line">myBooks.forEach(<span class="function">(<span class="params">title, idx, arr</span>) =&gt;</span></span><br><span class="line">  <span class="built_in">console</span>.log(idx + <span class="string">'-'</span> + title);</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">myBooks.forEach(<span class="function">(<span class="params">title, idx, arr</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(idx + <span class="string">'-'</span> + title);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h3 id="参数类型和返回类型"><a href="#参数类型和返回类型" class="headerlink" title="参数类型和返回类型"></a>参数类型和返回类型</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createUserId</span>(<span class="params">name: string, id: number</span>): <span class="title">string</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> name + id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="函数类型"><a href="#函数类型" class="headerlink" title="函数类型"></a>函数类型</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> IdGenerator: <span class="function">(<span class="params">chars: string, nums: number</span>) =&gt;</span> string;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createUserId</span>(<span class="params">name: string, id: number</span>): <span class="title">string</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> name + id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">IdGenerator = createUserId;</span><br></pre></td></tr></table></figure><h3 id="可选参数和默认参数"><a href="#可选参数和默认参数" class="headerlink" title="可选参数和默认参数"></a>可选参数和默认参数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 可选参数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createUserId</span>(<span class="params">name: string, id: number, age?: number</span>): <span class="title">string</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> name + id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认参数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createUserId</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  name: string = <span class="string">"cosyer"</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">  id: number,</span></span></span><br><span class="line"><span class="function"><span class="params">  age?: number</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">string</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> name + id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在声明函数时，可以通过 ? 号来定义可选参数，比如 age?: number 这种形式。在实际使用时，需要注意的是可选参数要放在普通参数的后面，不然会导致编译错误。</p><h3 id="剩余参数"><a href="#剩余参数" class="headerlink" title="剩余参数"></a>剩余参数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">push</span>(<span class="params">array, ...items</span>) </span>&#123;</span><br><span class="line">  items.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</span><br><span class="line">    array.push(item);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a = [];</span><br><span class="line">push(a, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure><h3 id="函数重载"><a href="#函数重载" class="headerlink" title="函数重载"></a>函数重载</h3><p>函数重载或方法重载是使用相同名称和不同参数数量或类型创建多个方法的一种能力。要解决前面遇到的问题，方法就是为同一个函数提供多个函数类型定义来进行函数重载，编译器会根据这个列表去处理函数的调用。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a: number, b: number</span>): <span class="title">number</span>;</span></span><br><span class="line"><span class="function"><span class="title">function</span> <span class="title">add</span>(<span class="params">a: string, b: string</span>): <span class="title">string</span>;</span></span><br><span class="line"><span class="function"><span class="title">function</span> <span class="title">add</span>(<span class="params">a: string, b: number</span>): <span class="title">string</span>;</span></span><br><span class="line"><span class="function"><span class="title">function</span> <span class="title">add</span>(<span class="params">a: number, b: string</span>): <span class="title">string</span>;</span></span><br><span class="line"><span class="function"><span class="title">function</span> <span class="title">add</span>(<span class="params">a: Combinable, b: Combinable</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> a === <span class="string">"string"</span> || <span class="keyword">typeof</span> b === <span class="string">"string"</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> a.toString() + b.toString();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>方法重载是指在同一个类中方法同名，参数不同（参数类型不同、参数个数不同或参数个数相同时参数的先后顺序不同），调用时根据实参的形式，选择与它匹配的方法执行操作的一种技术。所以类中成员方法满足重载的条件是：在同一个类中，方法名相同且参数列表不同。下面我们来举一个成员方法重载的例子：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Calculator</span> </span>&#123;</span><br><span class="line">  add(a: number, <span class="attr">b</span>: number): number;</span><br><span class="line">  add(a: string, <span class="attr">b</span>: string): string;</span><br><span class="line">  add(a: string, <span class="attr">b</span>: number): string;</span><br><span class="line">  add(a: number, <span class="attr">b</span>: string): string;</span><br><span class="line">  add(a: Combinable, <span class="attr">b</span>: Combinable) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> a === <span class="string">"string"</span> || <span class="keyword">typeof</span> b === <span class="string">"string"</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> a.toString() + b.toString();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> calculator = <span class="keyword">new</span> Calculator();</span><br><span class="line"><span class="keyword">const</span> result = calculator.add(<span class="string">"cosyer"</span>, <span class="string">" chenyu"</span>);</span><br></pre></td></tr></table></figure>这里需要注意的是，当 TypeScript 编译器处理函数重载时，它会查找重载列表，尝试使用第一个重载定义。 如果匹配的话就使用这个。 因此，在定义重载的时候，一定要把最精确的定义放在最前面。另外在 Calculator 类中，add(a: Combinable, b: Combinable){ } 并不是重载列表的一部分，因此对于 add 成员方法来说，我们只定义了四个重载方法。</p><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="数组解构"><a href="#数组解构" class="headerlink" title="数组解构"></a>数组解构</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x: number; <span class="keyword">let</span> y: number; <span class="keyword">let</span> z: number;</span><br><span class="line"><span class="keyword">let</span> five_array = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line">[x,y,z] = five_array; <span class="comment">// 0 1 2</span></span><br></pre></td></tr></table></figure><h3 id="扩展运算符"><a href="#扩展运算符" class="headerlink" title="扩展运算符"></a>扩展运算符</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> two_array = [<span class="number">0</span>, <span class="number">1</span>];</span><br><span class="line"><span class="keyword">let</span> five_array = [...two_array, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br></pre></td></tr></table></figure><h3 id="数组遍历"><a href="#数组遍历" class="headerlink" title="数组遍历"></a>数组遍历</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> colors: string[] = [<span class="string">"red"</span>, <span class="string">"green"</span>, <span class="string">"blue"</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">of</span> colors) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><h3 id="对象解构"><a href="#对象解构" class="headerlink" title="对象解构"></a>对象解构</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">  name: <span class="string">"cosyer"</span>,</span><br><span class="line">  gender: <span class="string">"Male"</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123; name, gender &#125; = person;</span><br></pre></td></tr></table></figure><h3 id="对象展开扩展"><a href="#对象展开扩展" class="headerlink" title="对象展开扩展"></a>对象展开扩展</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">  name: <span class="string">"cosyer"</span>,</span><br><span class="line">  gender: <span class="string">"Male"</span>,</span><br><span class="line">  address: <span class="string">"Nanjing"</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 组装对象</span></span><br><span class="line"><span class="keyword">let</span> personWithAge = &#123; ...person, <span class="attr">age</span>: <span class="number">33</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取除了某些项外的其它项</span></span><br><span class="line"><span class="keyword">let</span> &#123; name, ...rest &#125; = person;</span><br></pre></td></tr></table></figure><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><p>在面向对象语言中，接口是一个很重要的概念，它是对行为的抽象，而具体如何行动需要由类去实现。</p><p>TypeScript 中的接口是一个非常灵活的概念，除了可用于对类的一部分行为进行抽象以外，也常用于对「对象的形状（Shape）」进行描述</p><h3 id="对象的形状-描述"><a href="#对象的形状-描述" class="headerlink" title="对象的形状(描述)"></a>对象的形状(描述)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">interface Person &#123;</span><br><span class="line">  name: string;</span><br><span class="line">  age: number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> cosyer: Person = &#123;</span><br><span class="line">  name: <span class="string">"cosyer"</span>,</span><br><span class="line">  age: <span class="number">25</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="可选、只读属性"><a href="#可选、只读属性" class="headerlink" title="可选、只读属性"></a>可选、只读属性</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">interface Person &#123;</span><br><span class="line">  readonly name: string;</span><br><span class="line">  age?: number;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只读属性用于限制只能在对象刚刚创建的时候修改其值。此外 TypeScript 还提供了 ReadonlyArray<T> 类型，它与 Array<T> 相似，只是把所有可变方法去掉了，因此可以确保数组创建后再也不能被修改。</T></T></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a: number[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">let</span> ro: ReadonlyArray&lt;number&gt; = a;</span><br><span class="line">ro[<span class="number">0</span>] = <span class="number">12</span>; <span class="comment">// error!</span></span><br><span class="line">ro.push(<span class="number">5</span>); <span class="comment">// error!</span></span><br><span class="line">ro.length = <span class="number">100</span>; <span class="comment">// error!</span></span><br><span class="line">a = ro; <span class="comment">// error!</span></span><br></pre></td></tr></table></figure><h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><p>软件工程中，我们不仅要创建一致的定义良好的 API，同时也要考虑可重用性。 组件不仅能够支持当前的数据类型，同时也能支持未来的数据类型，这在创建大型系统时为你提供了十分灵活的功能。</p><blockquote><p>在像 C# 和 Java 这样的语言中，可以使用泛型来创建可重用的组件，一个组件可以支持多种类型的数据。 这样用户就可以以自己的数据类型来使用组件。</p></blockquote><p>设计泛型的关键目的是在成员之间提供有意义的约束，这些成员可以是：类的实例成员、类的方法、函数参数和函数返回值。</p><p>泛型（Generics）是允许同一个函数接受不同类型参数的一种模板。相比于使用 any 类型，使用泛型来创建可复用的组件要更好，因为泛型会保留参数类型。</p><h3 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">interface GenericIdentityFn&lt;T&gt; &#123;</span><br><span class="line">  (arg: T): T;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GenericNumber</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  zeroValue: T;</span><br><span class="line">  add: <span class="function">(<span class="params">x: T, y: T</span>) =&gt;</span> T;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myGenericNumber = <span class="keyword">new</span> GenericNumber&lt;number&gt;();</span><br><span class="line">myGenericNumber.zeroValue = <span class="number">0</span>;</span><br><span class="line">myGenericNumber.add = <span class="function"><span class="keyword">function</span> (<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="泛型变量"><a href="#泛型变量" class="headerlink" title="泛型变量"></a>泛型变量</h3><p>对刚接触 TypeScript 泛型的小伙伴来说，看到 T 和 E，还有 K 和 V 这些泛型变量时，估计会一脸懵逼。其实这些大写字母并没有什么本质的区别，只不过是一个约定好的规范而已。也就是说使用大写字母 A-Z 定义的类型变量都属于泛型，把 T 换成 A，也是一样的。下面我们介绍一下一些常见泛型变量代表的意思：</p><ul><li>T（Type）：表示一个 TypeScript 类型</li><li>K（Key）：表示对象中的键类型</li><li>V（Value）：表示对象中的值类型</li><li>E（Element）：表示元素类型</li></ul><h3 id="泛型工具类型-6种"><a href="#泛型工具类型-6种" class="headerlink" title="泛型工具类型(6种)"></a>泛型工具类型(6种)</h3><p>为了方便开发者 TypeScript 内置了一些常用的工具类型，比如 Partial、Required、Readonly、Record 和 ReturnType 等。</p><h4 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a>typeof</h4><p>typeof 操作符可以用来获取一个变量声明或对象的类型。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">interface Person &#123;</span><br><span class="line">  name: string;</span><br><span class="line">  age: number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> cosyer: Person = &#123; <span class="attr">name</span>: <span class="string">'cosyer'</span>, <span class="attr">age</span>: <span class="number">25</span> &#125;;</span><br><span class="line">type Cosyer= <span class="keyword">typeof</span> cosyer; <span class="comment">// -&gt; Person</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toArray</span>(<span class="params">x: number</span>): <span class="title">Array</span>&lt;<span class="title">number</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> [x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">type Func = <span class="keyword">typeof</span> toArray; <span class="comment">// -&gt; (x: number) =&gt; number[]</span></span><br></pre></td></tr></table></figure></p><h4 id="keyof"><a href="#keyof" class="headerlink" title="keyof"></a>keyof</h4><p>keyof 操作符可以用来一个对象中的所有 key 值：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">interface Person &#123;</span><br><span class="line">    name: string;</span><br><span class="line">    age: number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">type K1 = keyof Person; <span class="comment">// "name" | "age"</span></span><br><span class="line">type K2 = keyof Person[]; <span class="comment">// "length" | "toString" | "pop" | "push" | "concat" | "join" </span></span><br><span class="line">type K3 = keyof &#123; [x: string]: Person &#125;;  <span class="comment">// string | number</span></span><br></pre></td></tr></table></figure></p><h4 id="in"><a href="#in" class="headerlink" title="in"></a>in</h4><p>in 用来遍历枚举类型：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">type Keys = <span class="string">"a"</span> | <span class="string">"b"</span> | <span class="string">"c"</span></span><br><span class="line"></span><br><span class="line">type Obj =  &#123;</span><br><span class="line">  [p <span class="keyword">in</span> Keys]: any</span><br><span class="line">&#125; <span class="comment">// -&gt; &#123; a: any, b: any, c: any &#125;</span></span><br></pre></td></tr></table></figure></p><h4 id="infer"><a href="#infer" class="headerlink" title="infer"></a>infer</h4><p>在条件类型语句中，可以用 infer 声明一个类型变量并且对它进行使用。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">type ReturnType&lt;T&gt; = T extends (</span><br><span class="line">  ...args: any[]</span><br><span class="line">) =&gt; infer R ? R : any;</span><br></pre></td></tr></table></figure>以上代码中 infer R 就是声明一个变量来承载传入函数签名的返回值类型，简单说就是用它取到函数返回值的类型方便之后使用。</p><h4 id="extends"><a href="#extends" class="headerlink" title="extends"></a>extends</h4><p>有时候我们定义的泛型不想过于灵活或者说想继承某些类等，可以通过 extends 关键字添加泛型约束。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">interface ILengthwise &#123;</span><br><span class="line">  length: number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loggingIdentity</span>&lt;<span class="title">T</span> <span class="title">extends</span> <span class="title">ILengthwise</span>&gt;(<span class="params">arg: T</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(arg.length);</span><br><span class="line">  <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// error, number doesn't have a .length property</span></span><br><span class="line">loggingIdentity(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">loggingIdentity(&#123;<span class="attr">length</span>: <span class="number">10</span>, <span class="attr">value</span>: <span class="number">3</span>&#125;);</span><br></pre></td></tr></table></figure></p><h4 id="Partial"><a href="#Partial" class="headerlink" title="Partial"></a>Partial</h4><p>Partial<T> 的作用就是将某个类型里的属性全部变为可选项 ?。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * node_modules/typescript/lib/lib.es5.d.ts</span></span><br><span class="line"><span class="comment"> * Make all properties in T optional</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">type Partial&lt;T&gt; = &#123;</span><br><span class="line">  [P <span class="keyword">in</span> keyof T]?: T[P];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></T></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">interface Todo &#123;</span><br><span class="line">  title: string;</span><br><span class="line">  description: string;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateTodo</span>(<span class="params">todo: Todo, fieldsToUpdate: Partial&lt;Todo&gt;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123; ...todo, ...fieldsToUpdate &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> todo1 = &#123;</span><br><span class="line">  title: <span class="string">"organize desk"</span>,</span><br><span class="line">  description: <span class="string">"clear clutter"</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> todo2 = updateTodo(todo1, &#123;</span><br><span class="line">  description: <span class="string">"throw out trash"</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h2><h3 id="装饰器是什么"><a href="#装饰器是什么" class="headerlink" title="装饰器是什么"></a>装饰器是什么</h3><ul><li>它是一个表达式</li><li>该表达式被执行后，返回一个函数</li><li>函数的入参分别为 target、name 和 descriptor</li><li>执行该函数后，可能返回 descriptor 对象，用于配置 target 对象</li></ul><h3 id="装饰器的分类"><a href="#装饰器的分类" class="headerlink" title="装饰器的分类"></a>装饰器的分类</h3><ul><li>类装饰器（Class decorators）</li><li>属性装饰器（Property decorators）</li><li>方法装饰器（Method decorators）</li><li>参数装饰器（Parameter decorators）</li></ul><h4 id="类装饰器"><a href="#类装饰器" class="headerlink" title="类装饰器"></a>类装饰器</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">declare type ClassDecorator = <span class="xml"><span class="tag">&lt;<span class="name">TFunction</span> <span class="attr">extends</span> <span class="attr">Function</span>&gt;</span>(</span></span><br><span class="line"><span class="xml">  target: TFunction</span></span><br><span class="line"><span class="xml">) =&gt; TFunction | void;</span></span><br></pre></td></tr></table></figure><p>类装饰器顾名思义，就是用来装饰类的。它接收一个参数：</p><ul><li>target: TFunction - 被装饰的类<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Greeter</span>(<span class="params">target: Function</span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">  target.prototype.greet = <span class="function"><span class="keyword">function</span> (<span class="params"></span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Hello cosyer!"</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Greeter</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Greeting</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="comment">// 内部实现</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myGreeting = <span class="keyword">new</span> Greeting();</span><br><span class="line">myGreeting.greet(); <span class="comment">// console output: 'Hello cosyer!';</span></span><br></pre></td></tr></table></figure></li></ul><p><code>自定义参数</code><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Greeter</span>(<span class="params">greeting: string</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">target: Function</span>) </span>&#123;</span><br><span class="line">    target.prototype.greet = <span class="function"><span class="keyword">function</span> (<span class="params"></span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(greeting);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Greeter(<span class="string">"Hello TS!"</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Greeting</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="comment">// 内部实现</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myGreeting = <span class="keyword">new</span> Greeting();</span><br><span class="line">myGreeting.greet(); <span class="comment">// console output: 'Hello TS!';</span></span><br></pre></td></tr></table></figure></p><h4 id="属性装饰器"><a href="#属性装饰器" class="headerlink" title="属性装饰器"></a>属性装饰器</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">declare type PropertyDecorator = (target:<span class="built_in">Object</span>, </span><br><span class="line">  propertyKey: string | symbol ) =&gt; <span class="keyword">void</span>;</span><br></pre></td></tr></table></figure><p>属性装饰器顾名思义，用来装饰类的属性。它接收两个参数：</p><ul><li>target: Object - 被装饰的类</li><li>propertyKey: string | symbol - 被装饰类的属性名</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logProperty</span>(<span class="params">target: any, key: string</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">delete</span> target[key];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> backingField = <span class="string">"_"</span> + key;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">Object</span>.defineProperty(target, backingField, &#123;</span><br><span class="line">    writable: <span class="literal">true</span>,</span><br><span class="line">    enumerable: <span class="literal">true</span>,</span><br><span class="line">    configurable: <span class="literal">true</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// property getter</span></span><br><span class="line">  <span class="keyword">const</span> getter = <span class="function"><span class="keyword">function</span> (<span class="params">this: any</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> currVal = <span class="keyword">this</span>[backingField];</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`Get: <span class="subst">$&#123;key&#125;</span> =&gt; <span class="subst">$&#123;currVal&#125;</span>`</span>);</span><br><span class="line">    <span class="keyword">return</span> currVal;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// property setter</span></span><br><span class="line">  <span class="keyword">const</span> setter = <span class="function"><span class="keyword">function</span> (<span class="params">this: any, newVal: any</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`Set: <span class="subst">$&#123;key&#125;</span> =&gt; <span class="subst">$&#123;newVal&#125;</span>`</span>);</span><br><span class="line">    <span class="keyword">this</span>[backingField] = newVal;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Create new property with getter and setter</span></span><br><span class="line">  <span class="built_in">Object</span>.defineProperty(target, key, &#123;</span><br><span class="line">    <span class="keyword">get</span>: getter,</span><br><span class="line">    <span class="keyword">set</span>: setter,</span><br><span class="line">    enumerable: true,</span><br><span class="line">    configurable: true</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Person &#123; </span><br><span class="line">  @logProperty</span><br><span class="line">  public name: string;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(name : string) &#123; </span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> Person(<span class="string">"cosyer"</span>);</span><br><span class="line">p1.name = <span class="string">"chenyu"</span>;</span><br><span class="line"><span class="comment">// Set: name =&gt; cosyer</span></span><br><span class="line"><span class="comment">// Set: name =&gt; chenyu</span></span><br></pre></td></tr></table></figure><h4 id="方法装饰器"><a href="#方法装饰器" class="headerlink" title="方法装饰器"></a>方法装饰器</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">declare type MethodDecorator = <span class="xml"><span class="tag">&lt;<span class="name">T</span>&gt;</span>(target:Object, propertyKey: string | symbol,  </span></span><br><span class="line">  descriptor: TypePropertyDescript&lt;T&gt;) =&gt; TypedPropertyDescriptor&lt;T&gt; | void;</span><br></pre></td></tr></table></figure><p>方法装饰器顾名思义，用来装饰类的方法。它接收三个参数：</p><ul><li>target: Object - 被装饰的类</li><li>propertyKey: string | symbol - 方法名</li><li>descriptor: TypePropertyDescript - 属性描述符</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">LogOutput</span>(<span class="params">tarage: Function, key: string, descriptor: any</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> originalMethod = descriptor.value;</span><br><span class="line">  <span class="keyword">let</span> newMethod = <span class="function"><span class="keyword">function</span>(<span class="params">...args: any[]</span>): <span class="title">any</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> result: any = originalMethod.apply(<span class="keyword">this</span>, args);</span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">this</span>.loggedOutput) &#123;</span><br><span class="line">      <span class="keyword">this</span>.loggedOutput = <span class="keyword">new</span> <span class="built_in">Array</span>&lt;any&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.loggedOutput.push(&#123;</span><br><span class="line">      method: key,</span><br><span class="line">      parameters: args,</span><br><span class="line">      output: result,</span><br><span class="line">      timestamp: <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;;</span><br><span class="line">  descriptor.value = newMethod;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Calculator</span> </span>&#123;</span><br><span class="line">  @LogOutput</span><br><span class="line">  double (num: number): number &#123;</span><br><span class="line">    <span class="keyword">return</span> num * <span class="number">2</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> calc = <span class="keyword">new</span> Calculator();</span><br><span class="line">calc.double(<span class="number">11</span>);</span><br><span class="line"><span class="comment">// console ouput: [&#123;method: "double", output: 22, ...&#125;]</span></span><br><span class="line"><span class="built_in">console</span>.log(calc.loggedOutput);</span><br></pre></td></tr></table></figure><h4 id="参数装饰器"><a href="#参数装饰器" class="headerlink" title="参数装饰器"></a>参数装饰器</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">declare type ParameterDecorator = (target: <span class="built_in">Object</span>, <span class="attr">propertyKey</span>: string | symbol, </span><br><span class="line">  parameterIndex: number ) =&gt; <span class="keyword">void</span></span><br></pre></td></tr></table></figure><p>参数装饰器顾名思义，是用来装饰函数参数，它接收三个参数：</p><ul><li>target: Object - 被装饰的类</li><li>propertyKey: string | symbol - 方法名</li><li>parameterIndex: number - 方法中参数的索引值</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Log</span>(<span class="params">target: Function, key: string, parameterIndex: number</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> functionLogged = key || target.prototype.constructor.name;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`The parameter in position <span class="subst">$&#123;parameterIndex&#125;</span> at <span class="subst">$&#123;functionLogged&#125;</span> has</span></span><br><span class="line"><span class="string">been decorated`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Greeter</span> </span>&#123;</span><br><span class="line">  greeting: string;</span><br><span class="line">  <span class="keyword">constructor</span>(@Log phrase: string) &#123;</span><br><span class="line"><span class="keyword">this</span>.greeting = phrase; </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// console output: The parameter in position 0 </span></span><br><span class="line"><span class="comment">// at Greeter has been decorated</span></span><br></pre></td></tr></table></figure><h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><h3 id="类的属性和方法"><a href="#类的属性和方法" class="headerlink" title="类的属性和方法"></a>类的属性和方法</h3><p>在面向对象语言中，类是一种面向对象计算机编程语言的构造，是创建对象的蓝图，描述了所创建的对象共同的属性和方法。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Greeter</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 静态属性</span></span><br><span class="line">  <span class="keyword">static</span> cname: string = <span class="string">"Greeter"</span>;</span><br><span class="line">  <span class="comment">// 成员属性</span></span><br><span class="line">  greeting: string;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 构造函数 - 执行初始化操作</span></span><br><span class="line">  <span class="keyword">constructor</span>(message: string) &#123;</span><br><span class="line">    <span class="keyword">this</span>.greeting = message;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 静态方法</span></span><br><span class="line">  <span class="keyword">static</span> getClassName() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Class name is Greeter"</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 成员方法</span></span><br><span class="line">  greet() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Hello, "</span> + <span class="keyword">this</span>.greeting;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> greeter = <span class="keyword">new</span> Greeter(<span class="string">"world"</span>);</span><br></pre></td></tr></table></figure>编译生成：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">"use strict"</span>;</span><br><span class="line"><span class="keyword">var</span> Greeter = <span class="comment">/** @class */</span> (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 构造函数 - 执行初始化操作</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Greeter</span>(<span class="params">message</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.greeting = message;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 静态方法</span></span><br><span class="line">    Greeter.getClassName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Class name is Greeter"</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// 成员方法</span></span><br><span class="line">    Greeter.prototype.greet = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello, "</span> + <span class="keyword">this</span>.greeting;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// 静态属性</span></span><br><span class="line">    Greeter.cname = <span class="string">"Greeter"</span>;</span><br><span class="line">    <span class="keyword">return</span> Greeter;</span><br><span class="line">&#125;());</span><br><span class="line"><span class="keyword">var</span> greeter = <span class="keyword">new</span> Greeter(<span class="string">"world"</span>);</span><br></pre></td></tr></table></figure></p><h3 id="访问器-getter-setter"><a href="#访问器-getter-setter" class="headerlink" title="访问器(getter/setter)"></a>访问器(getter/setter)</h3><p>在 TypeScript 中，我们可以通过 getter 和 setter 方法来实现数据的封装和有效性校验，防止出现异常数据。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> passcode = <span class="string">"Hello TypeScript"</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line">  private _fullName: string;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">get</span> fullName(): string &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>._fullName;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">set</span> fullName(newName: string) &#123;</span><br><span class="line">    <span class="keyword">if</span> (passcode &amp;&amp; passcode == <span class="string">"Hello TypeScript"</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>._fullName = newName;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"Error: Unauthorized update of employee!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> employee = <span class="keyword">new</span> Employee();</span><br><span class="line">employee.fullName = <span class="string">"cosyer"</span>;</span><br><span class="line"><span class="keyword">if</span> (employee.fullName) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(employee.fullName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>继承 (Inheritance) 是一种联结类与类的层次模型。指的是一个类（称为子类、子接口）继承另外的一个类（称为父类、父接口）的功能，并可以增加自己新功能的能力，继承是类与类或者接口与接口之间最常见的关系。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  name: string;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">constructor</span>(theName: string) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = theName;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  move(distanceInMeters: number = <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span> moved <span class="subst">$&#123;distanceInMeters&#125;</span>m.`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Snake</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(name: string) &#123;</span><br><span class="line">    <span class="keyword">super</span>(name);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  move(distanceInMeters = <span class="number">5</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Slithering..."</span>);</span><br><span class="line">    <span class="keyword">super</span>.move(distanceInMeters);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> sam = <span class="keyword">new</span> Snake(<span class="string">"Sammy the Python"</span>);</span><br><span class="line">sam.move();</span><br></pre></td></tr></table></figure></p><h3 id="私有字段"><a href="#私有字段" class="headerlink" title="私有字段"></a>私有字段</h3><p>在 TypeScript 3.8 版本就开始支持ECMAScript 私有字段<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  #name: string;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(name: string) &#123;</span><br><span class="line">    this.#name = name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  greet() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`Hello, my name is <span class="subst">$&#123;<span class="keyword">this</span>.#name&#125;</span>!`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> cosyer = <span class="keyword">new</span> Person(<span class="string">"cosyer"</span>);</span><br><span class="line"></span><br><span class="line">cosyer.#name;</span><br><span class="line"><span class="comment">// Property '#name' is not accessible outside class 'Person'</span></span><br><span class="line"><span class="comment">// because it has a private identifier.</span></span><br></pre></td></tr></table></figure></p><p>与常规属性（甚至使用 private 修饰符声明的属性）不同，私有字段要牢记以下规则：</p><ul><li>私有字段以 # 字符开头，有时我们称之为私有名称；</li><li>每个私有字段名称都唯一地限定于其包含的类；</li><li>不能在私有字段上使用 TypeScript 可访问性修饰符（如 public 或 private）；</li><li>私有字段不能在包含的类之外访问，甚至不能被检测到。</li></ul><h2 id="编译上下文"><a href="#编译上下文" class="headerlink" title="编译上下文"></a>编译上下文</h2><h3 id="tsconfig-json-的作用"><a href="#tsconfig-json-的作用" class="headerlink" title="tsconfig.json 的作用"></a>tsconfig.json 的作用</h3><ul><li>用于标识 TypeScript 项目的根路径；</li><li>用于配置 TypeScript 编译器；</li><li>用于指定编译的文件。</li></ul><h3 id="tsconfig-json-重要字段"><a href="#tsconfig-json-重要字段" class="headerlink" title="tsconfig.json 重要字段"></a>tsconfig.json 重要字段</h3><ul><li>files - 设置要编译的文件的名称；</li><li>include - 设置需要进行编译的文件，支持路径模式匹配；</li><li>exclude - 设置无需进行编译的文件，支持路径模式匹配；</li><li>compilerOptions - 设置与编译流程相关的选项。</li></ul><h3 id="compilerOptions-选项"><a href="#compilerOptions-选项" class="headerlink" title="compilerOptions 选项"></a>compilerOptions 选项</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"compilerOptions"</span>: &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 基本选项 */</span></span><br><span class="line">    <span class="string">"target"</span>: <span class="string">"es5"</span>,                       <span class="comment">// 指定 ECMAScript 目标版本: 'ES3' (default), 'ES5', 'ES6'/'ES2015', 'ES2016', 'ES2017', or 'ESNEXT'</span></span><br><span class="line">    <span class="string">"module"</span>: <span class="string">"commonjs"</span>,                  <span class="comment">// 指定使用模块: 'commonjs', 'amd', 'system', 'umd' or 'es2015'</span></span><br><span class="line">    <span class="string">"lib"</span>: [],                             <span class="comment">// 指定要包含在编译中的库文件</span></span><br><span class="line">    <span class="string">"allowJs"</span>: <span class="literal">true</span>,                       <span class="comment">// 允许编译 javascript 文件</span></span><br><span class="line">    <span class="string">"checkJs"</span>: <span class="literal">true</span>,                       <span class="comment">// 报告 javascript 文件中的错误</span></span><br><span class="line">    <span class="string">"jsx"</span>: <span class="string">"preserve"</span>,                     <span class="comment">// 指定 jsx 代码的生成: 'preserve', 'react-native', or 'react'</span></span><br><span class="line">    <span class="string">"declaration"</span>: <span class="literal">true</span>,                   <span class="comment">// 生成相应的 '.d.ts' 文件</span></span><br><span class="line">    <span class="string">"sourceMap"</span>: <span class="literal">true</span>,                     <span class="comment">// 生成相应的 '.map' 文件</span></span><br><span class="line">    <span class="string">"outFile"</span>: <span class="string">"./"</span>,                       <span class="comment">// 将输出文件合并为一个文件</span></span><br><span class="line">    <span class="string">"outDir"</span>: <span class="string">"./"</span>,                        <span class="comment">// 指定输出目录</span></span><br><span class="line">    <span class="string">"rootDir"</span>: <span class="string">"./"</span>,                       <span class="comment">// 用来控制输出目录结构 --outDir.</span></span><br><span class="line">    <span class="string">"removeComments"</span>: <span class="literal">true</span>,                <span class="comment">// 删除编译后的所有的注释</span></span><br><span class="line">    <span class="string">"noEmit"</span>: <span class="literal">true</span>,                        <span class="comment">// 不生成输出文件</span></span><br><span class="line">    <span class="string">"importHelpers"</span>: <span class="literal">true</span>,                 <span class="comment">// 从 tslib 导入辅助工具函数</span></span><br><span class="line">    <span class="string">"isolatedModules"</span>: <span class="literal">true</span>,               <span class="comment">// 将每个文件做为单独的模块 （与 'ts.transpileModule' 类似）.</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 严格的类型检查选项 */</span></span><br><span class="line">    <span class="string">"strict"</span>: <span class="literal">true</span>,                        <span class="comment">// 启用所有严格类型检查选项</span></span><br><span class="line">    <span class="string">"noImplicitAny"</span>: <span class="literal">true</span>,                 <span class="comment">// 在表达式和声明上有隐含的 any类型时报错</span></span><br><span class="line">    <span class="string">"strictNullChecks"</span>: <span class="literal">true</span>,              <span class="comment">// 启用严格的 null 检查</span></span><br><span class="line">    <span class="string">"noImplicitThis"</span>: <span class="literal">true</span>,                <span class="comment">// 当 this 表达式值为 any 类型的时候，生成一个错误</span></span><br><span class="line">    <span class="string">"alwaysStrict"</span>: <span class="literal">true</span>,                  <span class="comment">// 以严格模式检查每个模块，并在每个文件里加入 'use strict'</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 额外的检查 */</span></span><br><span class="line">    <span class="string">"noUnusedLocals"</span>: <span class="literal">true</span>,                <span class="comment">// 有未使用的变量时，抛出错误</span></span><br><span class="line">    <span class="string">"noUnusedParameters"</span>: <span class="literal">true</span>,            <span class="comment">// 有未使用的参数时，抛出错误</span></span><br><span class="line">    <span class="string">"noImplicitReturns"</span>: <span class="literal">true</span>,             <span class="comment">// 并不是所有函数里的代码都有返回值时，抛出错误</span></span><br><span class="line">    <span class="string">"noFallthroughCasesInSwitch"</span>: <span class="literal">true</span>,    <span class="comment">// 报告 switch 语句的 fallthrough 错误。（即，不允许 switch 的 case 语句贯穿）</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 模块解析选项 */</span></span><br><span class="line">    <span class="string">"moduleResolution"</span>: <span class="string">"node"</span>,            <span class="comment">// 选择模块解析策略： 'node' (Node.js) or 'classic' (TypeScript pre-1.6)</span></span><br><span class="line">    <span class="string">"baseUrl"</span>: <span class="string">"./"</span>,                       <span class="comment">// 用于解析非相对模块名称的基目录</span></span><br><span class="line">    <span class="string">"paths"</span>: &#123;&#125;,                           <span class="comment">// 模块名到基于 baseUrl 的路径映射的列表</span></span><br><span class="line">    <span class="string">"rootDirs"</span>: [],                        <span class="comment">// 根文件夹列表，其组合内容表示项目运行时的结构内容</span></span><br><span class="line">    <span class="string">"typeRoots"</span>: [],                       <span class="comment">// 包含类型声明的文件列表</span></span><br><span class="line">    <span class="string">"types"</span>: [],                           <span class="comment">// 需要包含的类型声明文件名列表</span></span><br><span class="line">    <span class="string">"allowSyntheticDefaultImports"</span>: <span class="literal">true</span>,  <span class="comment">// 允许从没有设置默认导出的模块中默认导入。</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Source Map Options */</span></span><br><span class="line">    <span class="string">"sourceRoot"</span>: <span class="string">"./"</span>,                    <span class="comment">// 指定调试器应该找到 TypeScript 文件而不是源文件的位置</span></span><br><span class="line">    <span class="string">"mapRoot"</span>: <span class="string">"./"</span>,                       <span class="comment">// 指定调试器应该找到映射文件而不是生成文件的位置</span></span><br><span class="line">    <span class="string">"inlineSourceMap"</span>: <span class="literal">true</span>,               <span class="comment">// 生成单个 soucemaps 文件，而不是将 sourcemaps 生成不同的文件</span></span><br><span class="line">    <span class="string">"inlineSources"</span>: <span class="literal">true</span>,                 <span class="comment">// 将代码与 sourcemaps 生成到一个文件中，要求同时设置了 --inlineSourceMap 或 --sourceMap 属性</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 其他选项 */</span></span><br><span class="line">    <span class="string">"experimentalDecorators"</span>: <span class="literal">true</span>,        <span class="comment">// 启用装饰器</span></span><br><span class="line">    <span class="string">"emitDecoratorMetadata"</span>: <span class="literal">true</span>          <span class="comment">// 为装饰器提供元数据的支持</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="仓库代码"><a href="#仓库代码" class="headerlink" title="仓库代码"></a>仓库代码</h2><p><a href="https://github.com/cosyer/typescript-learn" target="_blank" rel="noopener">typescript-learn</a></p><h2 id="相关问题"><a href="#相关问题" class="headerlink" title="相关问题"></a>相关问题</h2><p><a href="https://mydearest.cn/2020/TypeScript%20%E4%B8%AD%EF%BC%8Cinterface%20%E5%92%8C%20type%20%E7%9A%84%E5%8C%BA%E5%88%AB.html">TypeScript 中，interface 和 type 的区别</a></p><h2 id="问题记录"><a href="#问题记录" class="headerlink" title="问题记录"></a>问题记录</h2><ol><li>Element implicitly has an ‘any’ type because expression of type ‘string’ can’t be used to index<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> formData = <span class="keyword">new</span> FormData();</span><br><span class="line"><span class="built_in">Object</span>.keys(newCategory).map(<span class="function">(<span class="params">k,i</span>)=&gt;</span>&#123;  </span><br><span class="line">    <span class="keyword">var</span> d =<span class="built_in">Object</span>.values(newCategory)[i];</span><br><span class="line">    formData.append(k,d) </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>tsconfig.json中配置suppressImplicitAnyIndexErrors为true</p></blockquote></li></ol>]]></content:encoded>
      
      <comments>http://mydearest.cn/2020/%E8%B6%85%E8%AF%A6%E7%BB%86%E7%9A%84TypeScript%E6%95%99%E7%A8%8B.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>XSS学习&amp;实践</title>
      <link>http://mydearest.cn/2020/XSS%E5%AD%A6%E4%B9%A0&amp;%E5%AE%9E%E8%B7%B5.html</link>
      <guid>http://mydearest.cn/2020/XSS%E5%AD%A6%E4%B9%A0&amp;%E5%AE%9E%E8%B7%B5.html</guid>
      <pubDate>Tue, 23 Jun 2020 17:13:10 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;code&gt;web安全&lt;/code&gt;一直是开发中不可忽视的一部分。而xss作为web开发中最常见的攻击手段，防范是必然的。基于web浏览器tricks，JavaScript的发展，npm等开源项目漏
洞，web注入等会让开发者越来越防不胜防。&lt;/p&gt;
&lt;h2 id=&quot;插入执行标签&quot;&gt;&lt;a href=&quot;#插入执行标签&quot; class=&quot;headerlink&quot; title=&quot;插入执行标签&quot;&gt;&lt;/a&gt;插入执行标签&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;script&lt;/li&gt;
&lt;li&gt;img onerror触发&lt;/li&gt;
&lt;li&gt;iframe srcdoc触发&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;标签等提前闭合-截断&quot;&gt;&lt;a href=&quot;#标签等提前闭合-截断&quot; class=&quot;headerlink&quot; title=&quot;标签等提前闭合(截断)&quot;&gt;&lt;/a&gt;标签等提前闭合(截断)&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;如在富文本, input, textarea, 可编辑div等，&lt;a href=&quot;https://xss.haozi.me/#/0x01&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;0x01&lt;/a&gt;，&lt;a href=&quot;https://xss.haozi.me/#/0x02&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;0x02&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;style标签&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;style&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;&lt;span class=&quot;regexp&quot;&gt;/style &amp;gt;&amp;lt;script&amp;gt;alert(1)&amp;lt;/&lt;/span&gt;script&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;&lt;span class=&quot;regexp&quot;&gt;/style&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;注释提前闭合&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;--!&amp;gt;&lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;alert(1)&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p><code>web安全</code>一直是开发中不可忽视的一部分。而xss作为web开发中最常见的攻击手段，防范是必然的。基于web浏览器tricks，JavaScript的发展，npm等开源项目漏洞，web注入等会让开发者越来越防不胜防。</p><h2 id="插入执行标签"><a href="#插入执行标签" class="headerlink" title="插入执行标签"></a>插入执行标签</h2><ul><li>script</li><li>img onerror触发</li><li>iframe srcdoc触发</li></ul><h2 id="标签等提前闭合-截断"><a href="#标签等提前闭合-截断" class="headerlink" title="标签等提前闭合(截断)"></a>标签等提前闭合(截断)</h2><ul><li>如在富文本, input, textarea, 可编辑div等，<a href="https://xss.haozi.me/#/0x01" target="_blank" rel="noopener">0x01</a>，<a href="https://xss.haozi.me/#/0x02" target="_blank" rel="noopener">0x02</a></li><li>style标签<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">&lt;<span class="regexp">/style &gt;&lt;script&gt;alert(1)&lt;/</span>script&gt;</span><br><span class="line">&lt;<span class="regexp">/style&gt;</span></span><br></pre></td></tr></table></figure></li><li>注释提前闭合<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--!&gt;<span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span>alert(1)<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li></ul><hr><a id="more"></a><ul><li>input type重写input的type，在type之前可以重写为image，通过onerror注入</li></ul><h2 id="ES6-tag标签"><a href="#ES6-tag标签" class="headerlink" title="ES6 tag标签"></a>ES6 tag标签</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;alert<span class="string">`1`</span>&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h2 id="转义字符仍可执行"><a href="#转义字符仍可执行" class="headerlink" title="转义字符仍可执行"></a>转义字符仍可执行</h2><ul><li>script标签可执行 base64的html代码片段</li><li>onerror可执行 转义为 html 10进制， 16进制的代码片段</li><li>url转义为 html 10进制， 16进制 仍可执行, url的定义可获取其他域下的资源文件<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scheme:[<span class="comment">//[user:password@]host[:port]][/]path[?query][#fragment]</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="svg不闭合也执行"><a href="#svg不闭合也执行" class="headerlink" title="svg不闭合也执行"></a>svg不闭合也执行</h2><h2 id="正则替换不靠谱"><a href="#正则替换不靠谱" class="headerlink" title="正则替换不靠谱"></a>正则替换不靠谱</h2><ul><li>正则替换</li><li>正则命中</li><li>追加执行，正则替换失效</li></ul><h2 id="防护"><a href="#防护" class="headerlink" title="防护"></a>防护</h2><ul><li>配置安全头</li><li>xss监控</li><li>服务端白名单过滤</li></ul>]]></content:encoded>
      
      <comments>http://mydearest.cn/2020/XSS%E5%AD%A6%E4%B9%A0&amp;%E5%AE%9E%E8%B7%B5.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>windows安装mysql</title>
      <link>http://mydearest.cn/2020/windows%E5%AE%89%E8%A3%85mysql.html</link>
      <guid>http://mydearest.cn/2020/windows%E5%AE%89%E8%A3%85mysql.html</guid>
      <pubDate>Tue, 23 Jun 2020 09:05:10 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;安装包下载&quot;&gt;&lt;a href=&quot;#安装包下载&quot; class=&quot;headerlink&quot; title=&quot;安装包下载&quot;&gt;&lt;/a&gt;安装包下载&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;下载地址：&lt;a href=&quot;https://dev.mysql.com/downloads/mysql/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://dev.mysql.com/downloads/mysql/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Mysql国内镜像：&lt;a href=&quot;http://mirrors.sohu.com/mysql/MySQL-8.0/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://mirrors.sohu.com/mysql/MySQL-8.0/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下载完成后，选择一个磁盘内放置并解压。&lt;/p&gt;
&lt;h2 id=&quot;设置环境变量&quot;&gt;&lt;a href=&quot;#设置环境变量&quot; class=&quot;headerlink&quot; title=&quot;设置环境变量&quot;&gt;&lt;/a&gt;设置环境变量&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;变量名：MYSQL_HOME&lt;/li&gt;
&lt;li&gt;变量值：E:\mysql5.7.23&lt;/li&gt;
&lt;li&gt;path里添加：%MYSQL_HOME%\bin&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;初始化设置&quot;&gt;&lt;a href=&quot;#初始化设置&quot; class=&quot;headerlink&quot; title=&quot;初始化设置&quot;&gt;&lt;/a&gt;初始化设置&lt;/h2&gt;&lt;h3 id=&quot;创建data-Uploads文件夹&quot;&gt;&lt;a href=&quot;#创建data-Uploads文件夹&quot; class=&quot;headerlink&quot; title=&quot;创建data Uploads文件夹&quot;&gt;&lt;/a&gt;创建data Uploads文件夹&lt;/h3&gt;&lt;h3 id=&quot;my-init文件&quot;&gt;&lt;a href=&quot;#my-init文件&quot; class=&quot;headerlink&quot; title=&quot;my.init文件&quot;&gt;&lt;/a&gt;my.init文件&lt;/h3&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[mysqld]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;port=&lt;span class=&quot;number&quot;&gt;3306&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;character_set_server=utf8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;basedir=E:\mysql5&lt;span class=&quot;number&quot;&gt;.7&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.23&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;datadir=E:\mysql5&lt;span class=&quot;number&quot;&gt;.7&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.23&lt;/span&gt;\data&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;server-id=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sql_mode=NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;lower_case_table_names=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;innodb_file_per_table = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;log_timestamps=SYSTEM&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;log-error   = error.log&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;slow_query_log = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;slow_query_log_file = slow.log&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;long_query_time = &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;log-bin = binlog&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;binlog_format = row&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;expire_logs_days = &lt;span class=&quot;number&quot;&gt;15&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;log_bin_trust_function_creators = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;secure-file-priv=E:\mysql5&lt;span class=&quot;number&quot;&gt;.7&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.23&lt;/span&gt;\Uploads&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[client]   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt;-character-&lt;span class=&quot;keyword&quot;&gt;set&lt;/span&gt;=utf8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="安装包下载"><a href="#安装包下载" class="headerlink" title="安装包下载"></a>安装包下载</h2><ul><li><p>下载地址：<a href="https://dev.mysql.com/downloads/mysql/" target="_blank" rel="noopener">https://dev.mysql.com/downloads/mysql/</a></p></li><li><p>Mysql国内镜像：<a href="http://mirrors.sohu.com/mysql/MySQL-8.0/" target="_blank" rel="noopener">http://mirrors.sohu.com/mysql/MySQL-8.0/</a></p></li></ul><p>下载完成后，选择一个磁盘内放置并解压。</p><h2 id="设置环境变量"><a href="#设置环境变量" class="headerlink" title="设置环境变量"></a>设置环境变量</h2><ol><li>变量名：MYSQL_HOME</li><li>变量值：E:\mysql5.7.23</li><li>path里添加：%MYSQL_HOME%\bin</li></ol><h2 id="初始化设置"><a href="#初始化设置" class="headerlink" title="初始化设置"></a>初始化设置</h2><h3 id="创建data-Uploads文件夹"><a href="#创建data-Uploads文件夹" class="headerlink" title="创建data Uploads文件夹"></a>创建data Uploads文件夹</h3><h3 id="my-init文件"><a href="#my-init文件" class="headerlink" title="my.init文件"></a>my.init文件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">port=<span class="number">3306</span></span><br><span class="line">character_set_server=utf8</span><br><span class="line">basedir=E:\mysql5<span class="number">.7</span><span class="number">.23</span></span><br><span class="line">datadir=E:\mysql5<span class="number">.7</span><span class="number">.23</span>\data</span><br><span class="line">server-id=<span class="number">1</span></span><br><span class="line">sql_mode=NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION</span><br><span class="line">lower_case_table_names=<span class="number">1</span></span><br><span class="line">innodb_file_per_table = <span class="number">1</span></span><br><span class="line">log_timestamps=SYSTEM</span><br><span class="line"></span><br><span class="line">log-error   = error.log</span><br><span class="line">slow_query_log = <span class="number">1</span></span><br><span class="line">slow_query_log_file = slow.log</span><br><span class="line">long_query_time = <span class="number">5</span></span><br><span class="line">log-bin = binlog</span><br><span class="line">binlog_format = row</span><br><span class="line">expire_logs_days = <span class="number">15</span></span><br><span class="line">log_bin_trust_function_creators = <span class="number">1</span></span><br><span class="line">secure-file-priv=E:\mysql5<span class="number">.7</span><span class="number">.23</span>\Uploads</span><br><span class="line"></span><br><span class="line">[client]   </span><br><span class="line"><span class="keyword">default</span>-character-<span class="keyword">set</span>=utf8</span><br></pre></td></tr></table></figure><hr><a id="more"></a><h3 id="初始化生成data下文件-以管理员身份运行cmd"><a href="#初始化生成data下文件-以管理员身份运行cmd" class="headerlink" title="初始化生成data下文件(以管理员身份运行cmd)"></a>初始化生成data下文件(以管理员身份运行cmd)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqld --initialize-insecure</span><br></pre></td></tr></table></figure><h3 id="安装服务"><a href="#安装服务" class="headerlink" title="安装服务"></a>安装服务</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqld --install mysql8</span><br></pre></td></tr></table></figure><h3 id="启动和停止"><a href="#启动和停止" class="headerlink" title="启动和停止"></a>启动和停止</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">net start mysql8 </span><br><span class="line">net stop mysql8</span><br></pre></td></tr></table></figure><h2 id="MySQL初始化root密码"><a href="#MySQL初始化root密码" class="headerlink" title="MySQL初始化root密码"></a>MySQL初始化root密码</h2><ul><li>mysql默认root用户没有密码，输入mysql –u root 进入mysql</li></ul><ol><li><p>进入mysql数据库</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use mysql;</span><br></pre></td></tr></table></figure></li><li><p>初始化root密码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt;update user <span class="keyword">set</span> password=PASSWORD('123456') where User='root';</span><br></pre></td></tr></table></figure></li></ol><p><code>8.0+版本</code><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER USER <span class="string">'root'</span>@<span class="string">'localhost'</span> IDENTIFIED WITH mysql_native_password BY <span class="string">'123456'</span>;</span><br></pre></td></tr></table></figure></p><h2 id="root密码忘记解决方法（Windows环境）"><a href="#root密码忘记解决方法（Windows环境）" class="headerlink" title="root密码忘记解决方法（Windows环境）"></a>root密码忘记解决方法（Windows环境）</h2><ol><li><p>确保MySQL服务停止</p></li><li><p>打开第一个cmd窗口，进入MySQL安装目录下的bin目录</p></li><li><p>跳过权限安全检查，MySQL服务运行起来后，不用输入密码就能进入数据库</p></li></ol><p>例如，D:\mysql-5.5.35-win32\bin&gt;mysqld –defaults-file=”D:\mysql-5.5.35-win32\my.ini” –console –skip-grant-tables</p><ol start="4"><li>打开第二个cmd窗口，连接MySQL</li></ol><ul><li><p>输入命令：mysql -uroot -p</p></li><li><p>出现 Enter password: 直接回车</p></li></ul><ol start="5"><li><p>使用命令切换到mysql数据库：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use mysql;</span><br></pre></td></tr></table></figure></li><li><p>使用命令更改root密码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UPDATE user SET Password=PASSWORD(<span class="string">'123456'</span>) where USER=<span class="string">'root'</span>;</span><br></pre></td></tr></table></figure></li><li><p>刷新权限：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure></li><li><p>退出：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">quit;</span><br></pre></td></tr></table></figure></li><li><p>关闭上面打开的两个cmd窗口，重新启动MySQL服务。</p></li></ol>]]></content:encoded>
      
      <comments>http://mydearest.cn/2020/windows%E5%AE%89%E8%A3%85mysql.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>【Mac 终端配置】iTerm2 + oh-my-zsh</title>
      <link>http://mydearest.cn/2020/Mac%20iTerm2%20+%20oh-my-zsh.html</link>
      <guid>http://mydearest.cn/2020/Mac%20iTerm2%20+%20oh-my-zsh.html</guid>
      <pubDate>Sun, 21 Jun 2020 15:41:55 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;安装iterm2&quot;&gt;&lt;a href=&quot;#安装iterm2&quot; class=&quot;headerlink&quot; title=&quot;安装iterm2&quot;&gt;&lt;/a&gt;安装iterm2&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://iterm2.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;官网下载&lt;/a&gt;
下载完，拖到应用程序里即可&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;iterm2配置配色方案&quot;&gt;&lt;a href=&quot;#iterm2配置配色方案&quot; class=&quot;headerlink&quot; title=&quot;iterm2配置配色方案&quot;&gt;&lt;/a&gt;iterm2配置配色方案&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;下载复制文件内容&lt;a href=&quot;https://github.com/mbadolato/iTerm2-Color-Schemes/blob/master/schemes/
Solarized%20Dark%20Higher%20Contrast.itermcolors&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;保存为文件SolarizedDarkHigherContrast.itermcolors，双击安装&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;打开 iTerm2 终端，依次在菜单栏选择：iTerm2 –&amp;gt; Preferences –&amp;gt; Profiles –&amp;gt; Colors –&amp;gt; Colors Presets –&amp;gt; 
SolarizedDarkHigherContrast&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;恢复iterm2默认设置&quot;&gt;&lt;a href=&quot;#恢复iterm2默认设置&quot; class=&quot;headerlink&quot; title=&quot;恢复iterm2默认设置&quot;&gt;&lt;/a&gt;恢复iterm2默认设置&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;defaults delete com.googlecode.iterm2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;前置校验&quot;&gt;&lt;a href=&quot;#前置校验&quot; class=&quot;headerlink&quot; title=&quot;前置校验&quot;&gt;&lt;/a&gt;前置校验&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 1、默认已安装 Homebrew、iTerm2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 2、查看是否安装了zsh，查看是否返回 /usr/bin/zsh&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cat /etc/shells&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 若未安装&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;brew install zsh&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# iTerm2 启动项配置&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;chsh -s /bin/zsh      &lt;span class=&quot;comment&quot;&gt;# 设置为zsh&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;chsh -s /bin/bash     &lt;span class=&quot;comment&quot;&gt;# 设置为bash（Mac自带默认）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="安装iterm2"><a href="#安装iterm2" class="headerlink" title="安装iterm2"></a>安装iterm2</h2><ul><li><a href="https://iterm2.com/" target="_blank" rel="noopener">官网下载</a>下载完，拖到应用程序里即可</li></ul><h2 id="iterm2配置配色方案"><a href="#iterm2配置配色方案" class="headerlink" title="iterm2配置配色方案"></a>iterm2配置配色方案</h2><ul><li><p>下载复制文件内容<a href="https://github.com/mbadolato/iTerm2-Color-Schemes/blob/master/schemes/Solarized%20Dark%20Higher%20Contrast.itermcolors"></a></p></li><li><p>保存为文件SolarizedDarkHigherContrast.itermcolors，双击安装</p></li><li><p>打开 iTerm2 终端，依次在菜单栏选择：iTerm2 –&gt; Preferences –&gt; Profiles –&gt; Colors –&gt; Colors Presets –&gt; SolarizedDarkHigherContrast</p></li></ul><h2 id="恢复iterm2默认设置"><a href="#恢复iterm2默认设置" class="headerlink" title="恢复iterm2默认设置"></a>恢复iterm2默认设置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">defaults delete com.googlecode.iterm2</span><br></pre></td></tr></table></figure><h2 id="前置校验"><a href="#前置校验" class="headerlink" title="前置校验"></a>前置校验</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1、默认已安装 Homebrew、iTerm2</span></span><br><span class="line"><span class="comment"># 2、查看是否安装了zsh，查看是否返回 /usr/bin/zsh</span></span><br><span class="line">cat /etc/shells</span><br><span class="line"><span class="comment"># 若未安装</span></span><br><span class="line">brew install zsh</span><br><span class="line"></span><br><span class="line"><span class="comment"># iTerm2 启动项配置</span></span><br><span class="line">chsh -s /bin/zsh      <span class="comment"># 设置为zsh</span></span><br><span class="line">chsh -s /bin/bash     <span class="comment"># 设置为bash（Mac自带默认）</span></span><br></pre></td></tr></table></figure><hr><a id="more"></a><h2 id="安装-oh-my-zsh"><a href="#安装-oh-my-zsh" class="headerlink" title="安装 oh-my-zsh"></a>安装 oh-my-zsh</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 方式一：wegt安装</span></span><br><span class="line">wget https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh -O - | sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式二：curl 安装</span></span><br><span class="line">sh -c <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式三：手动安装</span></span><br><span class="line">git <span class="built_in">clone</span> git://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh</span><br><span class="line">cp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 卸载</span></span><br><span class="line">uninstall_oh_my_zsh zsh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新</span></span><br><span class="line">upgrade_oh_my_zsh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置主题 默认robbyrussell 随机主题random</span></span><br><span class="line">vim ~/.zshrc</span><br><span class="line">ZSH_THEME=<span class="string">"agnoster"</span></span><br><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 主题设置完成后，终端中却出现了乱码的字符 设置powerline字体</span></span><br><span class="line"><span class="comment">## 将 Powerline 字体文件下载到「下载」文件夹中</span></span><br><span class="line"><span class="built_in">cd</span> ~/Downloads &amp;&amp; git <span class="built_in">clone</span> https://github.com/powerline/fonts.git</span><br><span class="line"></span><br><span class="line"><span class="comment">## 将 Powerline 字体文件下载到「下载」文件夹中</span></span><br><span class="line"><span class="built_in">cd</span> fonts &amp;&amp; ./install.sh</span><br><span class="line"></span><br><span class="line"><span class="comment">## 删除下载的字体文件</span></span><br><span class="line"><span class="built_in">cd</span> &amp;&amp; rm -rf ~/Downloads/fonts</span><br><span class="line"></span><br><span class="line"><span class="comment"># 主题</span></span><br><span class="line">ls ~/.oh-my-zsh/themes</span><br><span class="line"></span><br><span class="line"><span class="comment"># zsh配置环境变量</span></span><br><span class="line">~/.zshrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 环境配置问题</span></span><br><span class="line">用zsh 环境变量配置文件为 .zshrc</span><br><span class="line"></span><br><span class="line">用bash 环境变量配置文件为 .bash_profile</span><br></pre></td></tr></table></figure><h2 id="卸载oh-my-zsh"><a href="#卸载oh-my-zsh" class="headerlink" title="卸载oh-my-zsh"></a>卸载oh-my-zsh</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">进入到.oh-my-zsh/tools目录，执行shell命令 ./uninstall.sh</span><br><span class="line">会提示不让执行shell命令</span><br><span class="line"></span><br><span class="line">解决办法</span><br><span class="line">输入 chmod +x uninstall.sh</span><br><span class="line">然后再执行 ./uninstall.sh ，发现oh-my-zsh被卸载</span><br><span class="line">最后删除.zshrc文件</span><br></pre></td></tr></table></figure><h2 id="安装-Powerline"><a href="#安装-Powerline" class="headerlink" title="安装 Powerline"></a>安装 Powerline</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1、检测是否已经安装，若有版本信息则已安装</span></span><br><span class="line">pip show powerline-status</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、将 powerline-status 安装在/usr/根目录中</span></span><br><span class="line">pip install --user powerline-status</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上一步若显示没有 pip,先安装pip</span></span><br><span class="line">sudo easy_install pip</span><br><span class="line"></span><br><span class="line"><span class="comment"># 卸载</span></span><br><span class="line">pip uninstall powerline-status</span><br><span class="line"></span><br><span class="line"><span class="comment"># 记录下location的安装路径 然后在.bash_profile文件加上启动脚本</span></span><br><span class="line">. /Powerline安装路径/powerline/bindings/bash/powerline.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重载配置</span></span><br><span class="line"><span class="built_in">source</span> .bash_profile</span><br><span class="line"></span><br><span class="line"><span class="comment"># 报错的话`powerline/bindings/bash/../../../scripts/powerline-config:: No such file or directory`</span></span><br><span class="line"><span class="comment"># 原因没有将powerline的相关命令添加到环境变量，可以使用软链接解决</span></span><br><span class="line">ln -s /Users/chenyu/Library/Python/2.7/bin/powerline /usr/<span class="built_in">local</span>/bin</span><br><span class="line">ln -s /Users/chenyu/Library/Python/2.7/bin/powerline-config /usr/<span class="built_in">local</span>/bin</span><br><span class="line">ln -s /Users/chenyu/Library/Python/2.7/bin/powerline-daemon /usr/<span class="built_in">local</span>/bin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 报错 write() failed: Bad file descriptor</span></span><br><span class="line">powerline-daemon</span><br></pre></td></tr></table></figure><h2 id="设置字体"><a href="#设置字体" class="headerlink" title="设置字体"></a>设置字体</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1、新建文件夹(如~/Desktop/OpenSource)，文件夹下</span></span><br><span class="line"><span class="built_in">cd</span> ~/Desktop/OpenSource</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/powerline/fonts.git --depth=1</span><br><span class="line"><span class="comment"># 2、进入脚本目录</span></span><br><span class="line"><span class="built_in">cd</span> fonts</span><br><span class="line"><span class="comment"># 3、执行脚本</span></span><br><span class="line">./install.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入 iTerm2 -&gt; Preferences -&gt; Profiles -&gt; Text -&gt; Font -&gt; Change Font</span></span><br><span class="line"><span class="comment"># 选择Meslo LG S for Powerfine, 常规， 12</span></span><br></pre></td></tr></table></figure><h2 id="设置配色方案"><a href="#设置配色方案" class="headerlink" title="设置配色方案"></a>设置配色方案</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 直接下载tar.zip包(包含全部配色)</span></span><br><span class="line"><span class="comment"># 进入 iTerm2 -&gt; Preferences -&gt; Profiles-&gt;Color </span></span><br><span class="line"><span class="comment"># 选择 Color Presets-&gt;import 选择解压好的目录下schemes目录中相应配色方案导入</span></span><br></pre></td></tr></table></figure><h2 id="安装-oh-my-zsh-主题"><a href="#安装-oh-my-zsh-主题" class="headerlink" title="安装 oh-my-zsh 主题"></a>安装 oh-my-zsh 主题</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载安装 agnoster 主题，将主题拷贝到oh my zsh的zsh中</span></span><br><span class="line"><span class="built_in">cd</span> ~/Desktop/OpenSource</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/fcamblor/oh-my-zsh-agnoster-fcamblor.git</span><br><span class="line"><span class="built_in">cd</span> oh-my-zsh-agnoster-fcamblor/</span><br><span class="line">./install</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将 ZSH_THEME 值改为 agnoster，ecs 退出，:wq 保存</span></span><br><span class="line">vi ~/.zshrc</span><br></pre></td></tr></table></figure><h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ======================== 高亮插件 ========================</span></span><br><span class="line"><span class="comment"># 在 ~ 目录下新建文件夹 zsh-plugins(~/.zshrc 默认目录)</span></span><br><span class="line"><span class="built_in">cd</span> zsh-plugins</span><br><span class="line">git <span class="built_in">clone</span> git://github.com/zsh-users/zsh-syntax-highlighting.git</span><br><span class="line">vim .zshrc</span><br><span class="line"><span class="comment"># 文末添加以下配置</span></span><br><span class="line"><span class="built_in">source</span> ~/zsh-pludins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh</span><br><span class="line"><span class="built_in">cd</span> ~/.oh-my-zsh/custom/plugins</span><br><span class="line">vim .zshrc</span><br><span class="line"><span class="comment"># 文末添加以下配置</span></span><br><span class="line">plugins=(zsh-syntax-highlighting)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ======================== 自动补齐插件 ========================</span></span><br><span class="line"><span class="built_in">cd</span> zsh-plugins</span><br><span class="line">http://mimosa-pudica.net/src/incr-0.2.zsh</span><br><span class="line"><span class="comment"># 将文件放到 ~/zsh-pludins/inrc下</span></span><br><span class="line">vim .zshrc</span><br><span class="line"><span class="built_in">source</span> ~/.oh-my-zsh/plugins/incr/incr*.zsh</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://mydearest.cn/2020/Mac%20iTerm2%20+%20oh-my-zsh.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>关于node的那些事(基础篇)</title>
      <link>http://mydearest.cn/2020/%E5%85%B3%E4%BA%8Enode%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B(%E5%9F%BA%E7%A1%80%E7%AF%87).html</link>
      <guid>http://mydearest.cn/2020/%E5%85%B3%E4%BA%8Enode%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B(%E5%9F%BA%E7%A1%80%E7%AF%87).html</guid>
      <pubDate>Sun, 21 Jun 2020 15:41:55 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;👨提问：最近Deno很火，会不会替代node的替代品，学node是不是没有前途？&quot;&gt;&lt;a href=&quot;#👨提问：最近Deno很火，会不会替代node的替代品，学node是不是没有前途？&quot; class=&quot;headerlink&quot; title=&quot;👨提问：最近Deno很火，会不会替代node的替代品，学node是不是没有前途？&quot;&gt;&lt;/a&gt;👨提问：最近Deno很火，会不会替代node的替代品，学node是不是没有前途？&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;莫慌，Node依旧是社区热捧的服务器端 JavaScript 运行环境，Deno的出现其实本质上是完善现阶段的Node（新轮子），包括原生支持TS、安全性、支持ES 
Module浏览器模块、等特征。万变不离其宗，虽然有了Deno，将来可能就不需要 Node.js，但是新事物总是需要不断推演和考验后，所以这一点而言，Node短时间内很
难被替换，毕竟背后依附着强大社区的支撑。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;node-如何获取命令行传来的参数？&quot;&gt;&lt;a href=&quot;#node-如何获取命令行传来的参数？&quot; class=&quot;headerlink&quot; title=&quot;node 如何获取命令行传来的参数？&quot;&gt;&lt;/a&gt;node 如何获取命令行传来的参数？&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;process.argv。process是一个全局变量，它提供当前 Node.js 进程的有关信息，而process.argv 属性则返回一个数组，数组中的信息包括启动Node.js进程时的命令行参数。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;process.argv[0] : 返回启动Node.js进程的可执行文件所在的绝对路径&lt;/li&gt;
&lt;li&gt;process.argv[1] : 为当前执行的JavaScript文件路径&lt;/li&gt;
&lt;li&gt;process.argv.splice(2) : 移除前两者后，剩余的元素为其他命令行参数(也就是我们自定义部分)&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;script&quot;&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;serve&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;node test.js arg1 arg2 arg3&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// test.js&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;arguments&lt;/span&gt; = process.argv.splice(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// [arg1, arg2, arg3]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 结合commander&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;commander.parse(process.argv)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="👨提问：最近Deno很火，会不会替代node的替代品，学node是不是没有前途？"><a href="#👨提问：最近Deno很火，会不会替代node的替代品，学node是不是没有前途？" class="headerlink" title="👨提问：最近Deno很火，会不会替代node的替代品，学node是不是没有前途？"></a>👨提问：最近Deno很火，会不会替代node的替代品，学node是不是没有前途？</h2><blockquote><p>莫慌，Node依旧是社区热捧的服务器端 JavaScript 运行环境，Deno的出现其实本质上是完善现阶段的Node（新轮子），包括原生支持TS、安全性、支持ES Module浏览器模块、等特征。万变不离其宗，虽然有了Deno，将来可能就不需要 Node.js，但是新事物总是需要不断推演和考验后，所以这一点而言，Node短时间内很难被替换，毕竟背后依附着强大社区的支撑。</p></blockquote><h2 id="node-如何获取命令行传来的参数？"><a href="#node-如何获取命令行传来的参数？" class="headerlink" title="node 如何获取命令行传来的参数？"></a>node 如何获取命令行传来的参数？</h2><blockquote><p>process.argv。process是一个全局变量，它提供当前 Node.js 进程的有关信息，而process.argv 属性则返回一个数组，数组中的信息包括启动Node.js进程时的命令行参数。</p></blockquote><ul><li>process.argv[0] : 返回启动Node.js进程的可执行文件所在的绝对路径</li><li>process.argv[1] : 为当前执行的JavaScript文件路径</li><li>process.argv.splice(2) : 移除前两者后，剩余的元素为其他命令行参数(也就是我们自定义部分)</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"script"</span>: &#123;</span><br><span class="line">    <span class="string">"serve"</span>: <span class="string">"node test.js arg1 arg2 arg3"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// test.js</span></span><br><span class="line"><span class="keyword">const</span> <span class="built_in">arguments</span> = process.argv.splice(<span class="number">2</span>) <span class="comment">// [arg1, arg2, arg3]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 结合commander</span></span><br><span class="line">commander.parse(process.argv)</span><br></pre></td></tr></table></figure><hr><a id="more"></a><h2 id="为什么要用node（基于v8引擎运行在服务端的JS运行环境）"><a href="#为什么要用node（基于v8引擎运行在服务端的JS运行环境）" class="headerlink" title="为什么要用node（基于v8引擎运行在服务端的JS运行环境）"></a>为什么要用node（基于v8引擎运行在服务端的JS运行环境）</h2><blockquote><p>总结起来node有以下几个特点:简单强大，轻量可扩展．简单体现在node使用的是javascript，json来进行编码，人人都会；强大体现在非阻塞IO,可以适应分块传输数据，较慢的网络环境，尤其擅长高并发访问；轻量体现在node本身既是代码，又是服务器，前后端使用统一语言;可扩展体现在可以轻松应对多实例，多服务器架构，同时有海量的第三方应用组件。</p></blockquote><ul><li>全局对象process、console、Buffer</li></ul><p><strong>基于事件驱动和无阻塞适合高并发的场景，统一语言</strong></p><h2 id="怎么看-nodejs-可支持高并发"><a href="#怎么看-nodejs-可支持高并发" class="headerlink" title="怎么看 nodejs 可支持高并发"></a>怎么看 nodejs 可支持高并发</h2><p>nodejs 其实并不是真正的单线程架构，因为 nodejs 还有I/O线程存在（网络I/O、磁盘I/O），这些I/O线程是由更底层的 libuv 处理，这部分线程对于开发者来说是透明的。 JavaScript 代码永远运行在V8上，是单线程的。异步通过一次次循环事件队列来实现的。</p><ul><li>单线程架构的优势和劣势：<ul><li>优势：</li></ul></li></ul><ol><li>单线程就一个线程在玩，省去了线程间切换的开销</li><li><p>还有线程同步的问题，线程冲突的问题的也不需要担心</p><ul><li>劣势：</li></ul></li><li><p>劣势也很明显，现在起步都是 4 核，单线程没法充分利用 cpu 的资源</p></li><li>单线程，一旦崩溃，应用就挂掉了，大家调试脚本也知道一旦执行过程报错了，本次调试就直接结束了</li><li>因为只能利用一个 cpu ，一旦 cpu 被某个计算一直占用， cpu 得不到释放，后续的请求就会一直被挂起，直接无响应了</li></ol><h2 id="node有哪些相关的文件路径？"><a href="#node有哪些相关的文件路径？" class="headerlink" title="node有哪些相关的文件路径？"></a>node有哪些相关的文件路径？</h2><blockquote><p>Node 中的文件路径有 <strong>dirname, </strong>filename, process.cwd(), ./ 或者 ../</p></blockquote><ul><li>__dirname: 总是返回被执行的 js 所在文件夹的绝对路径</li><li>__filename: 总是返回被执行的 js 的绝对路径</li><li>process.cwd(): 总是返回运行 node 命令时所在的文件夹的绝对路径</li></ul><h2 id="node相关path-API-有哪些？"><a href="#node相关path-API-有哪些？" class="headerlink" title="node相关path API 有哪些？"></a>node相关path API 有哪些？</h2><blockquote><p>path 模块提供了一些实用工具，用于处理文件和目录的路径，常用api有：path.dirname、path.join、path.resolve 其他的看文档 <a href="http://nodejs.cn/api/path.html" target="_blank" rel="noopener">Path API</a></p></blockquote><ul><li>path.dirname()： 返回 path 的目录名</li><li>path.join()：所有给定的 path 片段连接到一起，然后规范化生成的路径</li><li>path.resolve()：方法会将路径或路径片段的序列解析为绝对路径，解析为相对于当前目录的绝对路径，相当于cd命令</li></ul><p>path.join(<strong>dirname, ‘../lib/common.js’)和 path.resolve(</strong>dirname, ‘../lib/common.js’)返回的结果相同，难道可以相互替换？</p><ol><li><p>join是把各个path片段连接在一起， resolve把/当成根目录</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">path.join(<span class="string">'/a'</span>, <span class="string">'/b'</span>) <span class="comment">// '/a/b'</span></span><br><span class="line">path.resolve(<span class="string">'/a'</span>, <span class="string">'/b'</span>) <span class="comment">//'/b'</span></span><br></pre></td></tr></table></figure></li><li><p>join是直接拼接字段，resolve是解析路径并返回</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">path.join(<span class="string">"a"</span>,<span class="string">"b"</span>)  <span class="comment">// "a/b"</span></span><br><span class="line">path.resolve(<span class="string">"a"</span>, <span class="string">"b"</span>) <span class="comment">// "/Users/tree/Documents/infrastructure/KSDK/src/a/b"</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="node的文件读取怎么做的？"><a href="#node的文件读取怎么做的？" class="headerlink" title="node的文件读取怎么做的？"></a>node的文件读取怎么做的？</h2><blockquote><p>通过fs文件系统模块提供的API，也是node中重要的模块之一，fs模块主要用于文件的读写、移动、复制、删除、重命名等操作。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fs.rename(<span class="string">'a'</span>, <span class="string">'b'</span>, (err)=&gt;&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        exec(<span class="string">'rm -rf a'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, out</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>⏰需要注意的是，使用require(‘fs’)载入fs模块，fs模块中所有方法都有同步和异步两种形式,刚刚我们展示的rename是异步方法的调用，因为在繁忙的进程中，应使用异步方法， 同步的版本会阻塞整个进程（停止所有的连接），当然fs.rename对应的同步方法就是fs.renameSync</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 同步的例子</span></span><br><span class="line"><span class="keyword">let</span> isExists = fs.existsSync(<span class="string">'dirname'</span>)</span><br><span class="line"><span class="keyword">if</span> (isExists) &#123;</span><br><span class="line">    process.exit(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 无论同步异步尽量对抛出的异常做相应的处理</span></span><br></pre></td></tr></table></figure><h2 id="node的url模块是用来干嘛的？"><a href="#node的url模块是用来干嘛的？" class="headerlink" title="node的url模块是用来干嘛的？"></a>node的url模块是用来干嘛的？</h2><blockquote><p>用来对url的字符串解析、url组成等功能，主要包括以下几个API。url.parse()、url.format()</p></blockquote><ul><li>url.parse：可以将一个url的字符串解析并返回一个url的对象</li><li>url.format:将传入的url对象解析成一个url字符串并返回</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">url.parse(<span class="string">"https://baidu.com:8080/test/h?query=js#node"</span>)</span><br><span class="line"></span><br><span class="line">Url &#123;</span><br><span class="line">  protocol: <span class="string">'http:'</span>,</span><br><span class="line">  slashes: <span class="literal">true</span>,</span><br><span class="line">  auth: <span class="literal">null</span>,</span><br><span class="line">  host: <span class="string">'baidu.com:8080'</span>,</span><br><span class="line">  port: <span class="string">'8080'</span>,</span><br><span class="line">  hostname: <span class="string">'baidu.com'</span>,</span><br><span class="line">  hash: <span class="string">'#node'</span>,</span><br><span class="line">  search: <span class="string">'?query=js'</span>,</span><br><span class="line">  query: <span class="string">'query=js'</span>,</span><br><span class="line">  pathname: <span class="string">'/test/h'</span>,</span><br><span class="line">  path: <span class="string">'/test/h?query=js'</span>,</span><br><span class="line">  href: <span class="string">'http://baidu.com:8080/test/h?query=js#node'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="node的http模块创建服务与Express或Koa框架有何不同"><a href="#node的http模块创建服务与Express或Koa框架有何不同" class="headerlink" title="node的http模块创建服务与Express或Koa框架有何不同?"></a>node的http模块创建服务与Express或Koa框架有何不同?</h2><blockquote><p>express是一个服务端框架，框架简单封装了node的http模块，express支持node原生的写法，express不仅封装好服务器，还封装了中间件、路由等特征，方便开发web服务器，换句话说express = http模块 + 中间件 + 路由</p></blockquote><h3 id="http"><a href="#http" class="headerlink" title="http"></a>http</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</span><br><span class="line"><span class="keyword">const</span> server = http.createServer(<span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    res.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">       <span class="string">'content-type'</span>: <span class="string">'text/plain'</span></span><br><span class="line">    &#125;)</span><br><span class="line">    res.write(<span class="string">'hello world'</span>)</span><br><span class="line">    res.end()</span><br><span class="line">&#125;)</span><br><span class="line">server.listen(<span class="number">3000</span>)</span><br></pre></td></tr></table></figure><h3 id="express"><a href="#express" class="headerlink" title="express"></a>express</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line">app.user(middleware)</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">    res.send(<span class="string">'hello world'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">middleware</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">    next()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="koa"><a href="#koa" class="headerlink" title="koa"></a>koa</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">'koa'</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa()</span><br><span class="line">app.user(middleware)</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">middleware</span>(<span class="params">ctx, next</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">await</span> next()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Express和Koa框架中间件有什么不同？"><a href="#Express和Koa框架中间件有什么不同？" class="headerlink" title="Express和Koa框架中间件有什么不同？"></a>Express和Koa框架中间件有什么不同？</h2><blockquote><p>中间件： app.use方法就是往中间件队列中塞入新的中间件，express中间件处理方式是线性的，next过后继续寻找下一个中间件，当然如果没有调用next()的话，就不会调用下一个函数了，调用就会被终止。</p></blockquote><ul><li>express 中间件：是通过 next 的机制，即上一个中间件会通过 next 触发下一个中间件</li><li>koa2 中间件：是通过 async await 实现的，中间件执行顺序是“洋葱圈”模型（推荐）</li></ul><ol><li><p>语法区别experss 异步使用 回调koa1 异步使用 generator + yieldkoa2 异步使用 await/async</p></li><li><p>中间件区别koa采用洋葱模型，进行顺序执行，出去反向执行，支持context传递数据express本身无洋葱模型，需要引入插件，不支持contextexpress的中间件中执行异步函数，执行顺序不会按照洋葱模型，异步的执行结果有可能被放到最后，response之前。</p></li><li><p>集成度区别express 内置了很多中间件，集成度高，使用省心，koa 轻量简洁，容易定制</p></li></ol><h2 id="koa2和egg的区别"><a href="#koa2和egg的区别" class="headerlink" title="koa2和egg的区别"></a>koa2和egg的区别</h2><ul><li>egg是在koa2上的封装</li><li>egg有controller、service、router</li><li>egg约定了文件目录结构</li></ul><h2 id="什么是模版引擎？"><a href="#什么是模版引擎？" class="headerlink" title="什么是模版引擎？"></a>什么是模版引擎？</h2><blockquote><p>模板引擎是一个通过结合页面模板、要展示的数据生成HTML页面的工具，本质上是后端渲染（SSR）的需求，加上Node渲染页面本身是纯静态的，当我们需要页面多样化、更灵活，我们就需要使用模板引擎来强化页面，更好的凸显服务端渲染的优势。</p></blockquote><p>常见主流模版引擎有：</p><ul><li>art-template <a href="http://aui.github.io/art-template/" target="_blank" rel="noopener">官方文档</a> ：号称效率最高的，模版引擎</li><li>ejs  <a href="https://ejs.co/" target="_blank" rel="noopener">官方文档</a>：是一个JavaScript模板库，用来从JSON数据中生成HTML字符串。</li><li>pug <a href="https://pugjs.org/api/getting-started.html" target="_blank" rel="noopener">官方文档</a>：是一款健壮、灵活、功能丰富的模板引擎，专门为 Node.js 平台开发</li></ul><p><a href="https://github.com/cosyer/node-learn" target="_blank" rel="noopener">Node.js入门教程</a></p>]]></content:encoded>
      
      <comments>http://mydearest.cn/2020/%E5%85%B3%E4%BA%8Enode%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B(%E5%9F%BA%E7%A1%80%E7%AF%87).html#disqus_thread</comments>
    </item>
    
    <item>
      <title>react SSR教程</title>
      <link>http://mydearest.cn/2020/react%20SSR%E6%95%99%E7%A8%8B.html</link>
      <guid>http://mydearest.cn/2020/react%20SSR%E6%95%99%E7%A8%8B.html</guid>
      <pubDate>Wed, 10 Jun 2020 14:55:08 GMT</pubDate>
      <description>
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;本文是基于react ssr的入门教程，在实际项目中使用还需要做更多的配置和优化，比较适合第一次尝试react ssr的小伙伴们。技术涉及到 koa2 + react，案例使用create-react-app创建。&lt;/p&gt;
&lt;h2 id=&quot;客户端渲染与服务端渲染&quot;&gt;&lt;a href=&quot;#客户端渲染与服务端渲染&quot; class=&quot;headerlink&quot; title=&quot;客户端渲染与服务端渲染&quot;&gt;&lt;/a&gt;客户端渲染与服务端渲染&lt;/h2&gt;&lt;h3 id=&quot;客户端渲染&quot;&gt;&lt;a href=&quot;#客户端渲染&quot; class=&quot;headerlink&quot; title=&quot;客户端渲染&quot;&gt;&lt;/a&gt;客户端渲染&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;客户端渲染，实际上就是客户端向服务端请求页面，服务端返回的是一个非常简单的 HTML 页面，在这个页面里，只有很少的一些 HTML 标签&lt;/li&gt;
&lt;li&gt;客户端渲染时，页面中有两个比较重要的点，第一个是 script 标签，可能会有好几个 script 标签，这个标签是打包后的 js 代码，用来生成 DOM 元素，发送请求，事件绑定等。但是，生成的 DOM 元素需要有一个在页面上展示的容器，所以另外一个点就是容器，一般是一个 id 名为 root 或 app 的 div 标签，类似于这样 &lt;code&gt;&amp;lt;div id=&amp;quot;root&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt; 或&lt;code&gt;&amp;lt;div id=&amp;quot;app&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;客户端渲染的特点&lt;ul&gt;
&lt;li&gt;客户端加载所有的 js 资源，渲染 DOM 元素&lt;/li&gt;
&lt;li&gt;在浏览器页面上的所有资源，都由客户端主动去获取，服务端只负责静态资源的提供和 API 接口，不再负责页面的渲染，如果采用 CDN 的话，服务端仅仅需要提供 API 接口&lt;/li&gt;
&lt;li&gt;优点: 前后端分离，责任区分，前端专注页面的开发，后端专注接口的开发&lt;/li&gt;
&lt;li&gt;缺点: 首屏加载资源多，首屏加载时响应慢。页面上没有 DOM 元素，不利于 SEO 优化&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;服务端渲染&quot;&gt;&lt;a href=&quot;#服务端渲染&quot; class=&quot;headerlink&quot; title=&quot;服务端渲染&quot;&gt;&lt;/a&gt;服务端渲染&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;服务端渲染，就是客户端页面上的 HTML 元素，都要由服务端负责渲染。服务端利用模板引擎，把数据填充到模板中，生成 HTML 字符串，最终把 HTML 字符串返回到浏览器，浏览器接收到 HTML 字符串，通过 HTML 引擎解析，最终生成 DOM 元素，显示在页面上&lt;/li&gt;
&lt;li&gt;比如 Node.js 可以渲染的模板引擎有 ejs，nunjucks，pug 等。Java 最常见的是 JSP 模板引擎。Python 最常见的是 Jinja2 模板引擎。&lt;/li&gt;
&lt;li&gt;服务端渲染的特点&lt;ul&gt;
&lt;li&gt;优点: 页面资源大多由服务端负责处理，所以页面加载速度快，缩短首屏加载时间。有利于 SEO 优化。无需占用客户端资源&lt;/li&gt;
&lt;li&gt;缺点: 不利于前后端分离，开发效率低。占用服务器资源&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;区分与选择&quot;&gt;&lt;a href=&quot;#区分与选择&quot; class=&quot;headerlink&quot; title=&quot;区分与选择&quot;&gt;&lt;/a&gt;区分与选择&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;客户端渲染和服务端渲染本质的区别就是，是谁负责 HTML 页面的拼接，那么就是谁渲染的页面&lt;/li&gt;
&lt;li&gt;如果对首屏加载时间有非常高的需求，或者是需要 SEO 优化，那么就选择服务端渲染&lt;/li&gt;
&lt;li&gt;如果对首屏加载时间没有要求，也不需要做 SEO 优化，类似于做后台管理系列的业务，那么就可以选择客户端渲染&lt;/li&gt;
&lt;li&gt;具体选择客户端渲染还是服务端渲染，没有强制的要求，具体要根据项目的需求来区分选择&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文是基于react ssr的入门教程，在实际项目中使用还需要做更多的配置和优化，比较适合第一次尝试react ssr的小伙伴们。技术涉及到 koa2 + react，案例使用create-react-app创建。</p><h2 id="客户端渲染与服务端渲染"><a href="#客户端渲染与服务端渲染" class="headerlink" title="客户端渲染与服务端渲染"></a>客户端渲染与服务端渲染</h2><h3 id="客户端渲染"><a href="#客户端渲染" class="headerlink" title="客户端渲染"></a>客户端渲染</h3><ul><li>客户端渲染，实际上就是客户端向服务端请求页面，服务端返回的是一个非常简单的 HTML 页面，在这个页面里，只有很少的一些 HTML 标签</li><li>客户端渲染时，页面中有两个比较重要的点，第一个是 script 标签，可能会有好几个 script 标签，这个标签是打包后的 js 代码，用来生成 DOM 元素，发送请求，事件绑定等。但是，生成的 DOM 元素需要有一个在页面上展示的容器，所以另外一个点就是容器，一般是一个 id 名为 root 或 app 的 div 标签，类似于这样 <code>&lt;div id=&quot;root&quot;&gt;&lt;/div&gt;</code> 或<code>&lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</code></li><li>客户端渲染的特点<ul><li>客户端加载所有的 js 资源，渲染 DOM 元素</li><li>在浏览器页面上的所有资源，都由客户端主动去获取，服务端只负责静态资源的提供和 API 接口，不再负责页面的渲染，如果采用 CDN 的话，服务端仅仅需要提供 API 接口</li><li>优点: 前后端分离，责任区分，前端专注页面的开发，后端专注接口的开发</li><li>缺点: 首屏加载资源多，首屏加载时响应慢。页面上没有 DOM 元素，不利于 SEO 优化</li></ul></li></ul><h3 id="服务端渲染"><a href="#服务端渲染" class="headerlink" title="服务端渲染"></a>服务端渲染</h3><ul><li>服务端渲染，就是客户端页面上的 HTML 元素，都要由服务端负责渲染。服务端利用模板引擎，把数据填充到模板中，生成 HTML 字符串，最终把 HTML 字符串返回到浏览器，浏览器接收到 HTML 字符串，通过 HTML 引擎解析，最终生成 DOM 元素，显示在页面上</li><li>比如 Node.js 可以渲染的模板引擎有 ejs，nunjucks，pug 等。Java 最常见的是 JSP 模板引擎。Python 最常见的是 Jinja2 模板引擎。</li><li>服务端渲染的特点<ul><li>优点: 页面资源大多由服务端负责处理，所以页面加载速度快，缩短首屏加载时间。有利于 SEO 优化。无需占用客户端资源</li><li>缺点: 不利于前后端分离，开发效率低。占用服务器资源</li></ul></li></ul><h3 id="区分与选择"><a href="#区分与选择" class="headerlink" title="区分与选择"></a>区分与选择</h3><ul><li>客户端渲染和服务端渲染本质的区别就是，是谁负责 HTML 页面的拼接，那么就是谁渲染的页面</li><li>如果对首屏加载时间有非常高的需求，或者是需要 SEO 优化，那么就选择服务端渲染</li><li>如果对首屏加载时间没有要求，也不需要做 SEO 优化，类似于做后台管理系列的业务，那么就可以选择客户端渲染</li><li>具体选择客户端渲染还是服务端渲染，没有强制的要求，具体要根据项目的需求来区分选择</li></ul><hr><a id="more"></a><h2 id="SSR-介绍"><a href="#SSR-介绍" class="headerlink" title="SSR 介绍"></a>SSR 介绍</h2><p>Server Slide Rendering，缩写为 <strong>ssr</strong> 即服务器端渲染，这个要从SEO说起，目前react单页应用HTML代码是下面这样的<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"shortcut icon"</span> <span class="attr">href</span>=<span class="string">"favicon.ico"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1, shrink-to-fit=no"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"theme-color"</span> <span class="attr">content</span>=<span class="string">"#000000"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>React App<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">noscript</span>&gt;</span>You need to enable JavaScript to run this app.<span class="tag">&lt;/<span class="name">noscript</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/js/main.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><ol><li>如果main.js 加载比较慢，会出现白屏一闪的现象。</li><li>传统的搜索引擎爬虫因为不能抓取JS生成后的内容，遇到单页web项目，抓取到的内容啥也没有。在SEO上会吃很多亏，很难排搜索引擎到前面去。React SSR（react服务器渲染）正好解决了这2个问题。</li></ol><h2 id="React-SSR介绍"><a href="#React-SSR介绍" class="headerlink" title="React SSR介绍"></a>React SSR介绍</h2><p>这里通过一个例子来带大家入坑！先使用create-react-app创建一个react项目。因为要修改webpack，这里我们使用react-app-rewired启动项目。根目录创建一个server目录存放服务端代码，服务端代码我们这里使用koa2。</p><p>这里先来看看react ssr是怎么工作的。</p><p><img src="http://cdn.mydearest.cn/blog/images/react-ssr.png" alt="图片描述"></p><p>这个业务流程图比较清晰了，服务端只生成HTML代码，实际上前端会生成一份main.js提供给服务端的HTML使用。这就是react ssr的工作流程。有了这个图会更好的理解，如果这个业务没理解清楚，后面的估计很难理解。</p><blockquote><p>react提供的SSR方法有两个renderToString 和 renderToStaticMarkup，区别如下：</p></blockquote><ul><li>renderToString 方法渲染的时候带有 data-reactid 属性. 在浏览器访问页面的时候，main.js能识别到HTML的内容，不会执行React.createElement二次创建DOM。</li><li>renderToStaticMarkup 则没有 data-reactid 属性，页面看上去干净点。在浏览器访问页面的时候，main.js不能识别到HTML内容，会执行main.js里面的React.createElement方法重新创建DOM。适用于纯静态页面。</li></ul><h2 id="实现流程"><a href="#实现流程" class="headerlink" title="实现流程"></a>实现流程</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"./App.css"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> logo <span class="keyword">from</span> <span class="string">"./logo.svg"</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  componentDidMount() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'哈哈哈~ 服务器渲染成功了！'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div className=<span class="string">"App"</span>&gt;</span><br><span class="line">        &lt;header className=<span class="string">"App-header"</span>&gt;</span><br><span class="line">          &lt;img src=&#123;logo&#125; className=<span class="string">"App-logo"</span> alt=<span class="string">"logo"</span> /&gt;</span><br><span class="line">          &lt;p&gt;</span><br><span class="line">            Edit &lt;code&gt;src/App.js&lt;<span class="regexp">/code&gt; and save to reload.</span></span><br><span class="line"><span class="regexp">          &lt;/</span>p&gt;</span><br><span class="line">          &lt;a</span><br><span class="line">            className=<span class="string">"App-link"</span></span><br><span class="line">            href=<span class="string">"https://reactjs.org"</span></span><br><span class="line">            target=<span class="string">"_blank"</span></span><br><span class="line">            rel=<span class="string">"noopener noreferrer"</span></span><br><span class="line">          &gt;</span><br><span class="line">            Learn React</span><br><span class="line">          &lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>header&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default App;</span></span><br></pre></td></tr></table></figure><p>在项目中新建server目录，用于存放服务端代码。项目中我们用的ES6，所以还要配置下.babelrc</p><blockquote><p>.babelrc 配置，因为要使用到ES6<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"presets"</span>: [</span><br><span class="line">        <span class="string">"env"</span>,</span><br><span class="line">        <span class="string">"react"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"plugins"</span>: [</span><br><span class="line">        <span class="string">"transform-decorators-legacy"</span>,</span><br><span class="line">        <span class="string">"transform-runtime"</span>,</span><br><span class="line">        <span class="string">"react-hot-loader/babel"</span>,</span><br><span class="line">        <span class="string">"add-module-exports"</span>,</span><br><span class="line">        <span class="string">"transform-object-rest-spread"</span>,</span><br><span class="line">        <span class="string">"transform-class-properties"</span>,</span><br><span class="line">        [</span><br><span class="line">            <span class="string">"import"</span>,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"libraryName"</span>: <span class="string">"antd"</span>,</span><br><span class="line">                <span class="attr">"style"</span>: <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>index.js 项目入口做一些预处理，使用asset-require-hook过滤掉一些类似 <code>import logo from &quot;./logo.svg&quot;;</code> 这样的资源代码。因为我们服务端只需要纯的HTML代码，不过滤掉会报错。这里的name，我们是去掉了hash值的。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">"asset-require-hook"</span>)(&#123;</span><br><span class="line">  extensions: [<span class="string">"svg"</span>, <span class="string">"css"</span>, <span class="string">"less"</span>, <span class="string">"jpg"</span>, <span class="string">"png"</span>, <span class="string">"gif"</span>],</span><br><span class="line">  name: <span class="string">'/static/media/[name].[ext]'</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">require</span>(<span class="string">"babel-core/register"</span>)();</span><br><span class="line"><span class="built_in">require</span>(<span class="string">"babel-polyfill"</span>);</span><br><span class="line"><span class="built_in">require</span>(<span class="string">"./app"</span>);</span><br></pre></td></tr></table></figure><blockquote><p>public/index.html html模版代码要做个调整，<code></code> 这个可以是任何可以替换的字符串，等下服务端会替换这段字符串。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"shortcut icon"</span> <span class="attr">href</span>=<span class="string">"%PUBLIC_URL%/favicon.ico"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1, shrink-to-fit=no"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"theme-color"</span> <span class="attr">content</span>=<span class="string">"#000000"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"manifest"</span> <span class="attr">href</span>=<span class="string">"%PUBLIC_URL%/manifest.json"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>React App<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">noscript</span>&gt;</span>You need to enable JavaScript to run this app.<span class="tag">&lt;/<span class="name">noscript</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"root"</span>&gt;</span>&#123;&#123;root&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>app.js 服务端渲染的主要代码，加载App.js，使用renderToString 生成html代码，去替换掉 index.html 中的 <code></code> 部分</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'../src/App'</span>;</span><br><span class="line"><span class="keyword">import</span> Koa <span class="keyword">from</span> <span class="string">'koa'</span>;</span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">'koa-router'</span>;</span><br><span class="line"><span class="keyword">import</span> fs <span class="keyword">from</span> <span class="string">'fs'</span>;</span><br><span class="line"><span class="keyword">import</span> koaStatic <span class="keyword">from</span> <span class="string">'koa-static'</span>;</span><br><span class="line"><span class="keyword">import</span> path <span class="keyword">from</span> <span class="string">'path'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; renderToString &#125; <span class="keyword">from</span> <span class="string">'react-dom/server'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置文件</span></span><br><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">  port: <span class="number">3030</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例化 koa</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 静态资源</span></span><br><span class="line">app.use(</span><br><span class="line">  koaStatic(path.join(__dirname, <span class="string">'../build'</span>), &#123;</span><br><span class="line">    maxage: <span class="number">365</span> * <span class="number">24</span> * <span class="number">60</span> * <span class="number">1000</span>,</span><br><span class="line">    index: <span class="string">'root'</span> </span><br><span class="line">    <span class="comment">// 这里配置不要写成'index'就可以了，因为在访问localhost:3030时，不能让服务默认去加载index.html文件，这里很容易掉进坑。</span></span><br><span class="line">  &#125;)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置路由</span></span><br><span class="line">app.use(</span><br><span class="line">  <span class="keyword">new</span> Router()</span><br><span class="line">    .get(<span class="string">'*'</span>, <span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">      ctx.response.type = <span class="string">'html'</span>; <span class="comment">//指定content type</span></span><br><span class="line">      <span class="keyword">let</span> shtml = <span class="string">''</span>;</span><br><span class="line">      <span class="keyword">await</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        fs.readFile(path.join(__dirname, <span class="string">'../build/index.html'</span>), <span class="string">'utfa8'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            reject();</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">console</span>.log(err);</span><br><span class="line">          &#125;</span><br><span class="line">          shtml = data;</span><br><span class="line">          resolve();</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="comment">// 替换掉 &#123;&#123;root&#125;&#125; 为我们生成后的HTML</span></span><br><span class="line">      ctx.response.body = shtml.replace(<span class="string">'&#123;&#123;root&#125;&#125;'</span>, renderToString(<span class="xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span>));</span><br><span class="line">    &#125;)</span><br><span class="line">    .routes()</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">app.listen(config.port, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'服务器启动，监听 port： '</span> + config.port + <span class="string">'  running~'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>config-overrides.js 因为我们用的是create-react-app，这里使用react-app-rewired去改下webpack的配置。因为执行<strong>npm run build</strong>的时候会自动给资源加了hash值，而这个hash值，我们在asset-require-hook的时候去掉了hash值，配置里面需要改下，不然会出现图片不显示的问题，这里也是一个坑，要注意下。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  webpack: <span class="function"><span class="keyword">function</span>(<span class="params">config, env</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ...add your webpack config</span></span><br><span class="line">    <span class="comment">// console.log(JSON.stringify(config));</span></span><br><span class="line">    <span class="comment">// 去掉hash值，解决asset-require-hook资源问题</span></span><br><span class="line">    config.module.rules.forEach(<span class="function"><span class="params">d</span> =&gt;</span> &#123;</span><br><span class="line">      d.oneOf &amp;&amp;</span><br><span class="line">        d.oneOf.forEach(<span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (e &amp;&amp; e.options &amp;&amp; e.options.name) &#123;</span><br><span class="line">            e.options.name = e.options.name.replace(<span class="string">'[hash:8].'</span>, <span class="string">''</span>);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>好了，所有的代码就这些了，是不是很简单了？我们koa2读取的静态资源是 build目录下面的。先执行<strong>npm run build</strong>打包项目，再执行<strong>node ./server</strong> 启动服务端项目。看下<a href="http://localhost:3030" target="_blank" rel="noopener">http://localhost:3030</a> 页面的HTML代码检查下：</p><p><img src="http://cdn.mydearest.cn/blog/images/react-ssr-demo.png" alt="图片描述"></p><p>没有<code></code>了，服务器渲染成功！</p><blockquote><p>注: 这个项目只是用来学习 react 的服务端渲染，而非安利大家一定要使用服务端渲染，因为 react 和 vue 的服务端渲染和普通的服务端渲染有很多的不一样，所以可以学习一下，提高一下自己的水平。</p></blockquote><h2 id="代码仓库地址"><a href="#代码仓库地址" class="headerlink" title="代码仓库地址"></a>代码仓库地址</h2><p><a href="https://github.com/cosyer/react-koa2-ssr" target="_blank" rel="noopener">react-koa2-ssr</a></p>]]></content:encoded>
      
      <comments>http://mydearest.cn/2020/react%20SSR%E6%95%99%E7%A8%8B.html#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
