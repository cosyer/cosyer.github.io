<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>cosyer&#39;s Blog</title>
    <link>http://mydearest.cn/</link>
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>陈宇的博客</description>
    <pubDate>Sun, 18 Aug 2019 08:43:19 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>webpack</title>
      <link>http://mydearest.cn/2019/webpack.html</link>
      <guid>http://mydearest.cn/2019/webpack.html</guid>
      <pubDate>Sun, 18 Aug 2019 06:37:40 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;谈谈你对webpack的看法&quot;&gt;&lt;a href=&quot;#谈谈你对webpack的看法&quot; class=&quot;headerlink&quot; title=&quot;谈谈你对webpack的看法&quot;&gt;&lt;/a&gt;谈谈你对webpack的看法&lt;/h2&gt;&lt;p&gt;webpack是一个模块打包工具，可以使用它管理项目中的模块依赖，并编译输出模块所需的静态文件。它可以很好地管理、打包开发中所用到的HTML,CSS,JavaScript和静态文件（图片，字体）等，让开发更高效。对于不同类型的依赖，webpack有对应的模块加载器，而且会分析模块间的依赖关系，最后合并生成优化的静态资源。&lt;/p&gt;
&lt;h2 id=&quot;webpack的基本功能和工作原理？&quot;&gt;&lt;a href=&quot;#webpack的基本功能和工作原理？&quot; class=&quot;headerlink&quot; title=&quot;webpack的基本功能和工作原理？&quot;&gt;&lt;/a&gt;webpack的基本功能和工作原理？&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;代码转换：TypeScript 编译成 JavaScript、SCSS 编译成 CSS 等等&lt;/li&gt;
&lt;li&gt;文件优化：压缩 JavaScript、CSS、HTML 代码，压缩合并图片等&lt;/li&gt;
&lt;li&gt;代码分割：提取多个页面的公共代码、提取首屏不需要执行部分的代码让其异步加载&lt;/li&gt;
&lt;li&gt;模块合并：在采用模块化的项目有很多模块和文件，需要构建功能把模块分类合并成一个文件&lt;/li&gt;
&lt;li&gt;自动刷新：监听本地源代码的变化，自动构建，刷新浏览器&lt;/li&gt;
&lt;li&gt;代码校验：在代码被提交到仓库前需要检测代码是否符合规范，以及单元测试是否通过&lt;/li&gt;
&lt;li&gt;自动发布：更新完代码后，自动构建出线上发布代码并传输给发布系统。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;webpack构建过程&quot;&gt;&lt;a href=&quot;#webpack构建过程&quot; class=&quot;headerlink&quot; title=&quot;webpack构建过程&quot;&gt;&lt;/a&gt;webpack构建过程&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;从entry里配置的module开始递归解析entry依赖的所有module&lt;/li&gt;
&lt;li&gt;每找到一个module，就会根据配置的loader去找对应的转换规则&lt;/li&gt;
&lt;li&gt;对module进行转换后，再解析出当前module依赖的module&lt;/li&gt;
&lt;li&gt;这些模块会以entry为单位分组，一个entry和其所有依赖的module被分到一个组Chunk&lt;/li&gt;
&lt;li&gt;最后webpack会把所有Chunk转换成文件输出&lt;/li&gt;
&lt;li&gt;在整个流程中webpack会在恰当的时机执行plugin里定义的逻辑&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;webpack打包原理&quot;&gt;&lt;a href=&quot;#webpack打包原理&quot; class=&quot;headerlink&quot; title=&quot;webpack打包原理&quot;&gt;&lt;/a&gt;webpack打包原理&lt;/h2&gt;&lt;h2 id=&quot;将所有依赖打包成一个bundle-js，通过代码分割成单元片段按需加载&quot;&gt;&lt;a href=&quot;#将所有依赖打包成一个bundle-js，通过代码分割成单元片段按需加载&quot; class=&quot;headerlink&quot; title=&quot;将所有依赖打包成一个bundle.js，通过代码分割成单元片段按需加载&quot;&gt;&lt;/a&gt;将所有依赖打包成一个bundle.js，通过代码分割成单元片段按需加载&lt;/h2&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="谈谈你对webpack的看法"><a href="#谈谈你对webpack的看法" class="headerlink" title="谈谈你对webpack的看法"></a>谈谈你对webpack的看法</h2><p>webpack是一个模块打包工具，可以使用它管理项目中的模块依赖，并编译输出模块所需的静态文件。它可以很好地管理、打包开发中所用到的HTML,CSS,JavaScript和静态文件（图片，字体）等，让开发更高效。对于不同类型的依赖，webpack有对应的模块加载器，而且会分析模块间的依赖关系，最后合并生成优化的静态资源。</p><h2 id="webpack的基本功能和工作原理？"><a href="#webpack的基本功能和工作原理？" class="headerlink" title="webpack的基本功能和工作原理？"></a>webpack的基本功能和工作原理？</h2><ul><li>代码转换：TypeScript 编译成 JavaScript、SCSS 编译成 CSS 等等</li><li>文件优化：压缩 JavaScript、CSS、HTML 代码，压缩合并图片等</li><li>代码分割：提取多个页面的公共代码、提取首屏不需要执行部分的代码让其异步加载</li><li>模块合并：在采用模块化的项目有很多模块和文件，需要构建功能把模块分类合并成一个文件</li><li>自动刷新：监听本地源代码的变化，自动构建，刷新浏览器</li><li>代码校验：在代码被提交到仓库前需要检测代码是否符合规范，以及单元测试是否通过</li><li>自动发布：更新完代码后，自动构建出线上发布代码并传输给发布系统。</li></ul><h2 id="webpack构建过程"><a href="#webpack构建过程" class="headerlink" title="webpack构建过程"></a>webpack构建过程</h2><ul><li>从entry里配置的module开始递归解析entry依赖的所有module</li><li>每找到一个module，就会根据配置的loader去找对应的转换规则</li><li>对module进行转换后，再解析出当前module依赖的module</li><li>这些模块会以entry为单位分组，一个entry和其所有依赖的module被分到一个组Chunk</li><li>最后webpack会把所有Chunk转换成文件输出</li><li>在整个流程中webpack会在恰当的时机执行plugin里定义的逻辑</li></ul><h2 id="webpack打包原理"><a href="#webpack打包原理" class="headerlink" title="webpack打包原理"></a>webpack打包原理</h2><h2 id="将所有依赖打包成一个bundle-js，通过代码分割成单元片段按需加载"><a href="#将所有依赖打包成一个bundle-js，通过代码分割成单元片段按需加载" class="headerlink" title="将所有依赖打包成一个bundle.js，通过代码分割成单元片段按需加载"></a>将所有依赖打包成一个bundle.js，通过代码分割成单元片段按需加载</h2><a id="more"></a><h2 id="什么是webpack，与gulp-grunt有什么区别"><a href="#什么是webpack，与gulp-grunt有什么区别" class="headerlink" title="什么是webpack，与gulp,grunt有什么区别"></a>什么是webpack，与gulp,grunt有什么区别</h2><ul><li>webpack是一个模块打包工具，可以递归地打包项目中的所有模块，最终生成几个打包后的文件。</li><li>区别：webpack支持代码分割，模块化（AMD,CommonJ,ES2015），全局分析</li></ul><h2 id="什么是entry-output"><a href="#什么是entry-output" class="headerlink" title="什么是entry,output?"></a>什么是entry,output?</h2><ul><li>entry 入口，告诉webpack要使用哪个模块作为构建项目的起点，默认为./src/index.js</li><li>output 出口，告诉webpack在哪里输出它打包好的代码以及如何命名，默认为./dist</li></ul><h2 id="什么是loader，plugins"><a href="#什么是loader，plugins" class="headerlink" title="什么是loader，plugins?"></a>什么是loader，plugins?</h2><ul><li>loader是用来告诉webpack如何转换某一类型的文件，并且引入到打包出的文件中。</li><li>plugins(插件)作用更大，可以打包优化，资源管理和注入环境变量</li></ul><h2 id="什么是bundle-chunk-module"><a href="#什么是bundle-chunk-module" class="headerlink" title="什么是bundle,chunk,module?"></a>什么是bundle,chunk,module?</h2><p>bundle是webpack打包出来的文件，chunk是webpack在进行模块的依赖分析的时候，代码分割出来的代码块。module是开发中的单个模块</p><h2 id="如何自动生成webpack配置？"><a href="#如何自动生成webpack配置？" class="headerlink" title="如何自动生成webpack配置？"></a>如何自动生成webpack配置？</h2><p>可以用一些官方脚手架</p><ul><li>webpack-cli</li><li>vue-cli</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 首先安装</span></span><br><span class="line">npm install -g @vue/cli</span><br><span class="line"><span class="comment">// 新建项目hello</span></span><br><span class="line">vue create hello</span><br></pre></td></tr></table></figure><p>nuxt-cli<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 确保安装了npx,npx在npm5.2.0默认安装了</span></span><br><span class="line"><span class="comment">// 新建项目hello</span></span><br><span class="line">npx create-nuxt-app hello</span><br></pre></td></tr></table></figure></p><h2 id="webpack如何配置单页面和多页面的应用程序？"><a href="#webpack如何配置单页面和多页面的应用程序？" class="headerlink" title="webpack如何配置单页面和多页面的应用程序？"></a>webpack如何配置单页面和多页面的应用程序？</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 单个页面</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: <span class="string">'./path/to/my/entry/file.js'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 多页面应用程序</span></span><br><span class="line"><span class="built_in">module</span>.entrys = &#123;</span><br><span class="line">    entry: &#123;</span><br><span class="line">        pageOne: <span class="string">'./src/pageOne/index.js'</span>,</span><br><span class="line">        pageTwo: <span class="string">'./src/pageTwo/index.js'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="几个常见的loader"><a href="#几个常见的loader" class="headerlink" title="几个常见的loader"></a>几个常见的loader</h2><ul><li>file-loader：把文件输出到一个文件夹中，在代码中通过相对 URL 去引用输出的文件</li><li>url-loader：和 file-loader 类似，但是能在文件很小的情况下以 base64 的方式把文件内容注入到代码中去</li><li>source-map-loader：加载额外的 Source Map 文件，以方便断点调试</li><li>image-loader：加载并且压缩图片文件</li><li>babel-loader：把 ES6 转换成 ES5</li><li>css-loader：加载 CSS，支持模块化、压缩、文件导入等特性</li><li>style-loader：把 CSS 代码注入到 JavaScript 中，通过 DOM 操作去加载 CSS。</li><li>eslint-loader：通过 ESLint 检查 JavaScript 代码</li></ul><h2 id="几个常见的plugin"><a href="#几个常见的plugin" class="headerlink" title="几个常见的plugin"></a>几个常见的plugin</h2><ul><li>define-plugin：定义环境变量</li><li>terser-webpack-plugin：通过TerserPlugin压缩ES6代码</li><li>html-webpack-plugin 为html文件中引入的外部资源，可以生成创建html入口文件</li><li>mini-css-extract-plugin：分离css文件</li><li>clean-webpack-plugin：删除打包文件</li><li>happypack：实现多线程加速编译</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> UglifyJSPlugin = <span class="built_in">require</span>(<span class="string">'uglifyjs-webpack-plugin'</span>);</span><br><span class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line"><span class="keyword">var</span> ExtractTextPlugin = <span class="built_in">require</span>(<span class="string">"extract-text-webpack-plugin"</span>);</span><br><span class="line"><span class="keyword">var</span> providePlugin = <span class="keyword">new</span> webpack.ProvidePlugin(&#123;<span class="attr">$</span>: <span class="string">'jquery'</span>, <span class="attr">jQuery</span>: <span class="string">'jquery'</span>, <span class="string">'window.jQuery'</span>: <span class="string">'jquery'</span>&#125;);</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: &#123;</span><br><span class="line">        index: <span class="string">'./src/js/index.js'</span>,</span><br><span class="line">        goodsInfo: <span class="string">'./src/js/goodsInfo.js'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    output: &#123;</span><br><span class="line">        filename: <span class="string">'[name].js'</span>,</span><br><span class="line">        path: __dirname + <span class="string">'/out'</span>,</span><br><span class="line">        publicPath: <span class="string">'http://localhost:8080/out'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            &#123;<span class="attr">test</span>: <span class="regexp">/.js$/</span>, <span class="attr">use</span>: [<span class="string">'babel-loader'</span>]&#125;,</span><br><span class="line">            <span class="comment">// // &#123;test: /.css$/, use: ['style-loader','css-loader']&#125;,</span></span><br><span class="line">            <span class="comment">// &#123;</span></span><br><span class="line">            <span class="comment">//     test: /.css$/,</span></span><br><span class="line">            <span class="comment">//     use: ExtractTextPlugin.extract(&#123;</span></span><br><span class="line">            <span class="comment">//       fallback: "style-loader",</span></span><br><span class="line">            <span class="comment">//       use: "css-loader"</span></span><br><span class="line">            <span class="comment">//     &#125;)</span></span><br><span class="line">            <span class="comment">// &#125;,</span></span><br><span class="line">            &#123;<span class="attr">test</span>: <span class="regexp">/.jpg|png|gif|svg$/</span>, <span class="attr">use</span>: [<span class="string">'url-loader?limit=8192&amp;name=./[name].[ext]'</span>]&#125;, </span><br><span class="line">            &#123;<span class="attr">test</span>: <span class="regexp">/.less$/</span>, <span class="attr">use</span>: [<span class="string">'style-loader'</span>, <span class="string">'css-loader'</span>, <span class="string">'less-loader'</span>]&#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> UglifyJSPlugin(),</span><br><span class="line">        <span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class="line">            name: <span class="string">"commons"</span>,</span><br><span class="line">            filename: <span class="string">"commons.js"</span>,</span><br><span class="line">            minChunks:<span class="number">2</span>&#125;),  </span><br><span class="line">        <span class="keyword">new</span> ExtractTextPlugin(<span class="string">"[name].css"</span>), </span><br><span class="line">        providePlugin     </span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://mydearest.cn/2019/webpack.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>成为优秀程序员的建议</title>
      <link>http://mydearest.cn/2019/%E6%88%90%E4%B8%BA%E4%BC%98%E7%A7%80%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E5%BB%BA%E8%AE%AE.html</link>
      <guid>http://mydearest.cn/2019/%E6%88%90%E4%B8%BA%E4%BC%98%E7%A7%80%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E5%BB%BA%E8%AE%AE.html</guid>
      <pubDate>Sat, 17 Aug 2019 17:21:18 GMT</pubDate>
      <description>
      
        &lt;h3 id=&quot;1-善用google⭐&quot;&gt;&lt;a href=&quot;#1-善用google⭐&quot; class=&quot;headerlink&quot; title=&quot;1. 善用google⭐&quot;&gt;&lt;/a&gt;1. 善用google⭐&lt;/h3&gt;&lt;p&gt;作为一名程序员，你要知道如何搜索问题的答案。学会有效的使用google，你将节省大量开发时间。  &lt;/p&gt;
&lt;h3 id=&quot;2-谨慎承诺超额交付⭐&quot;&gt;&lt;a href=&quot;#2-谨慎承诺超额交付⭐&quot; class=&quot;headerlink&quot; title=&quot;2. 谨慎承诺超额交付⭐&quot;&gt;&lt;/a&gt;2. 谨慎承诺超额交付⭐&lt;/h3&gt;&lt;p&gt;让你的团队知道一项任务需要三周的时间，并在两周内完成，这比让他们知道相反的情况要好。通过谨慎承诺和超额交付，你会建立信任。&lt;/p&gt;
&lt;h3 id=&quot;3-善待产品设计人员，他们是你的朋友&quot;&gt;&lt;a href=&quot;#3-善待产品设计人员，他们是你的朋友&quot; class=&quot;headerlink&quot; title=&quot;3. 善待产品设计人员，他们是你的朋友&quot;&gt;&lt;/a&gt;3. 善待产品设计人员，他们是你的朋友&lt;/h3&gt;&lt;p&gt;产品设计人员为用户的痛点提供解决方案。向他们学习，团结一致地构建有效的产品。&lt;/p&gt;
&lt;h3 id=&quot;4-找到一名导师&quot;&gt;&lt;a href=&quot;#4-找到一名导师&quot; class=&quot;headerlink&quot; title=&quot;4. 找到一名导师&quot;&gt;&lt;/a&gt;4. 找到一名导师&lt;/h3&gt;&lt;p&gt;找到一个可以学习和借鉴的人。如果你需要技术指导，&lt;a href=&quot;https://codingcoach.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Coding Coach&lt;/a&gt;会是一个不错的地方。&lt;/p&gt;
&lt;h3 id=&quot;5-成为一名导师&quot;&gt;&lt;a href=&quot;#5-成为一名导师&quot; class=&quot;headerlink&quot; title=&quot;5. 成为一名导师&quot;&gt;&lt;/a&gt;5. 成为一名导师&lt;/h3&gt;&lt;p&gt;做一个别人可以学习和借鉴的人。你可以尝试在&lt;a href=&quot;https://codingcoach.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Coding Coach&lt;/a&gt;成为别人的导师。&lt;/p&gt;
&lt;h3 id=&quot;6-写些有用的评论&quot;&gt;&lt;a href=&quot;#6-写些有用的评论&quot; class=&quot;headerlink&quot; title=&quot;6. 写些有用的评论&quot;&gt;&lt;/a&gt;6. 写些有用的评论&lt;/h3&gt;&lt;p&gt;写下有用的回答而不是问为什么，mark和灌水也没什么意思。&lt;/p&gt;
&lt;hr&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h3 id="1-善用google⭐"><a href="#1-善用google⭐" class="headerlink" title="1. 善用google⭐"></a>1. 善用google⭐</h3><p>作为一名程序员，你要知道如何搜索问题的答案。学会有效的使用google，你将节省大量开发时间。  </p><h3 id="2-谨慎承诺超额交付⭐"><a href="#2-谨慎承诺超额交付⭐" class="headerlink" title="2. 谨慎承诺超额交付⭐"></a>2. 谨慎承诺超额交付⭐</h3><p>让你的团队知道一项任务需要三周的时间，并在两周内完成，这比让他们知道相反的情况要好。通过谨慎承诺和超额交付，你会建立信任。</p><h3 id="3-善待产品设计人员，他们是你的朋友"><a href="#3-善待产品设计人员，他们是你的朋友" class="headerlink" title="3. 善待产品设计人员，他们是你的朋友"></a>3. 善待产品设计人员，他们是你的朋友</h3><p>产品设计人员为用户的痛点提供解决方案。向他们学习，团结一致地构建有效的产品。</p><h3 id="4-找到一名导师"><a href="#4-找到一名导师" class="headerlink" title="4. 找到一名导师"></a>4. 找到一名导师</h3><p>找到一个可以学习和借鉴的人。如果你需要技术指导，<a href="https://codingcoach.io/" target="_blank" rel="noopener">Coding Coach</a>会是一个不错的地方。</p><h3 id="5-成为一名导师"><a href="#5-成为一名导师" class="headerlink" title="5. 成为一名导师"></a>5. 成为一名导师</h3><p>做一个别人可以学习和借鉴的人。你可以尝试在<a href="https://codingcoach.io/" target="_blank" rel="noopener">Coding Coach</a>成为别人的导师。</p><h3 id="6-写些有用的评论"><a href="#6-写些有用的评论" class="headerlink" title="6. 写些有用的评论"></a>6. 写些有用的评论</h3><p>写下有用的回答而不是问为什么，mark和灌水也没什么意思。</p><hr><a id="more"></a><h3 id="7-合理的命名变量和函数名"><a href="#7-合理的命名变量和函数名" class="headerlink" title="7. 合理的命名变量和函数名"></a>7. 合理的命名变量和函数名</h3><p>函数和变量应该准确地表示它们的用途，因此myCoolFunction不是一个好名字。</p><h3 id="8-给自己放个假"><a href="#8-给自己放个假" class="headerlink" title="8. 给自己放个假"></a>8. 给自己放个假</h3><p>我们都需要时间来缓解压力。去一个你一直想去的地方放个假。你的大脑和同事都会感谢你的。</p><h3 id="9-删除无用代码⭐"><a href="#9-删除无用代码⭐" class="headerlink" title="9. 删除无用代码⭐"></a>9. 删除无用代码⭐</h3><p>没有理由积累更多技术债务。</p><h3 id="10-学会阅读代码⭐"><a href="#10-学会阅读代码⭐" class="headerlink" title="10. 学会阅读代码⭐"></a>10. 学会阅读代码⭐</h3><p>阅读代码是一项非常宝贵的被低估的技能。</p><h3 id="11-找到健康工作和生活平衡点"><a href="#11-找到健康工作和生活平衡点" class="headerlink" title="11. 找到健康工作和生活平衡点"></a>11. 找到健康工作和生活平衡点</h3><p>结束一周的工作之后，周末放松一下。关闭工作通知，删除手机上的应用程序。</p><h3 id="12-只安排必要的会议"><a href="#12-只安排必要的会议" class="headerlink" title="12. 只安排必要的会议"></a>12. 只安排必要的会议</h3><p>能用邮件解决的就没必要开会，如果非要开，也应该让会议简短高效。</p><h3 id="13-结对编程"><a href="#13-结对编程" class="headerlink" title="13. 结对编程"></a>13. 结对编程</h3><p>结对编程可以让你同时扮演老师和学生的角色。</p><h3 id="14-写好邮件"><a href="#14-写好邮件" class="headerlink" title="14. 写好邮件"></a>14. 写好邮件</h3><p>邮件的内容应该简洁而清晰，抓住重点。没人会想看你的四页邮件，兄弟。</p><h3 id="15-加入社区⭐"><a href="#15-加入社区⭐" class="headerlink" title="15. 加入社区⭐"></a>15. 加入社区⭐</h3><p>和志同道合的人在一起会激励你走出低谷。</p><h3 id="16-清理你的分支⭐"><a href="#16-清理你的分支⭐" class="headerlink" title="16. 清理你的分支⭐"></a>16. 清理你的分支⭐</h3><p>清理你的版本控制分支，就像在你的岳父母来访之前清理你的房子一样。如果你不再需要，请删掉它，不删留着过年啊。</p><h3 id="17-接纳萌新"><a href="#17-接纳萌新" class="headerlink" title="17. 接纳萌新"></a>17. 接纳萌新</h3><p>包容点，不要告诉别人不够好，不能进入这个行业，每个人都是有价值。</p><h3 id="18-活到老学到老"><a href="#18-活到老学到老" class="headerlink" title="18. 活到老学到老"></a>18. 活到老学到老</h3><p>你选择了一个需要不断学习的职业，学会爱上它。</p><h3 id="19-永不言弃"><a href="#19-永不言弃" class="headerlink" title="19. 永不言弃"></a>19. 永不言弃</h3><p>这并不容易，但是我们都是从同一个地方开始，你也能做到。  </p><h3 id="20-敢于接受有挑战性的任务⭐"><a href="#20-敢于接受有挑战性的任务⭐" class="headerlink" title="20. 敢于接受有挑战性的任务⭐"></a>20. 敢于接受有挑战性的任务⭐</h3><p>如果任务没有挑战，它就不会帮助你成长。</p><h3 id="21-项目开始前明确需求⭐"><a href="#21-项目开始前明确需求⭐" class="headerlink" title="21. 项目开始前明确需求⭐"></a>21. 项目开始前明确需求⭐</h3><p>在开撸之前，你应该了解验收标准，这将为你节省时间和痛苦。</p><h3 id="22-工欲善其事，必先利其器⭐"><a href="#22-工欲善其事，必先利其器⭐" class="headerlink" title="22. 工欲善其事，必先利其器⭐"></a>22. 工欲善其事，必先利其器⭐</h3><p>拥有一套你熟悉的工具，了解哪些工具服务于哪些目的，以及项目何时可以从使用这些工具中获益。</p><h3 id="23-我们需要建设性的批评"><a href="#23-我们需要建设性的批评" class="headerlink" title="23. 我们需要建设性的批评"></a>23. 我们需要建设性的批评</h3><p>向信任的同事和朋友寻求建设性的批评，它将帮助你更优秀。 </p><h3 id="24-保持开放思维⭐"><a href="#24-保持开放思维⭐" class="headerlink" title="24. 保持开放思维⭐"></a>24. 保持开放思维⭐</h3><p>技术在变化，而且变化得很快。不要反对新技术，学习它，然后形成自己的观点。 </p><h3 id="25-保持在技术前沿，不要掉队⭐"><a href="#25-保持在技术前沿，不要掉队⭐" class="headerlink" title="25. 保持在技术前沿，不要掉队⭐"></a>25. 保持在技术前沿，不要掉队⭐</h3><p>通过关注出版物，博客，播客和科技新闻，及时了解最新的科技新闻。</p><h3 id="26-专注于解决问题⭐"><a href="#26-专注于解决问题⭐" class="headerlink" title="26. 专注于解决问题⭐"></a>26. 专注于解决问题⭐</h3><p>锻炼自己解决问题的能力，强大的解决问题的能力能够帮助你应付一切，专注于解决问题的方法。</p><h3 id="27-保持谦虚⭐"><a href="#27-保持谦虚⭐" class="headerlink" title="27. 保持谦虚⭐"></a>27. 保持谦虚⭐</h3><p>三人行必有我师，无论你什么头衔，什么公司，都要保持谦逊。</p><h3 id="28-不光要代码写的好，PPT也要讲得好"><a href="#28-不光要代码写的好，PPT也要讲得好" class="headerlink" title="28. 不光要代码写的好，PPT也要讲得好"></a>28. 不光要代码写的好，PPT也要讲得好</h3><p>学习如何吸引你的听众，并给出有效的演示。</p><h3 id="29-选型如买菜，也要货比三家⭐"><a href="#29-选型如买菜，也要货比三家⭐" class="headerlink" title="29.  选型如买菜，也要货比三家⭐"></a>29.  选型如买菜，也要货比三家⭐</h3><p>给自己更多选择，在开展工作前，调研尽可能多的解决方案。</p><h3 id="30-找到自己的定位⭐"><a href="#30-找到自己的定位⭐" class="headerlink" title="30. 找到自己的定位⭐"></a>30. 找到自己的定位⭐</h3><p>科技产业也有很多分类，找到你最感兴趣的领域，并成为一名专家。</p><h3 id="31-养成好习惯⭐"><a href="#31-养成好习惯⭐" class="headerlink" title="31. 养成好习惯⭐"></a>31. 养成好习惯⭐</h3><p>试着建立一致的、健康的习惯，比如保持专注，合理安排时间，出席会议，从最重要的任务开始。这可能需要一些时间来适应，但从长远来看是值得的。</p><h3 id="32-学会debug⭐"><a href="#32-学会debug⭐" class="headerlink" title="32. 学会debug⭐"></a>32. 学会debug⭐</h3><p>探索浏览器调试器工具。学习使用IDE调试的细节。通过学习最有效的调试问题和跟踪错误的方法，再困难的bug也能搞定。</p><h3 id="33-锻炼你现有的技能⭐"><a href="#33-锻炼你现有的技能⭐" class="headerlink" title="33. 锻炼你现有的技能⭐"></a>33. 锻炼你现有的技能⭐</h3><p>并不是说你已经掌握了一项技能就不需要再锻炼它。业精于勤荒于嬉，除非有意识地提高技能，否则技能会随着时间的推移而消失。而这个行业又发展得如此之快，坚持练习是很重要的。从“我一直都是这样做的”的心态中走出来，进入“有没有更好的方法来做这件事”的心态。  </p><p>仅仅是因为你现在拥有六块腹肌，不意味着你就可以每天吃一个🍩。</p><h3 id="34-了解原因⭐"><a href="#34-了解原因⭐" class="headerlink" title="34. 了解原因⭐"></a>34. 了解原因⭐</h3><p>有时你必须表达自己的意见，因此了解其背后的原因非常重要。为什么解决方案A比解决方案B更好？提供有效的论据，你的意见将更加可靠。</p><h3 id="35-了解自己的价值"><a href="#35-了解自己的价值" class="headerlink" title="35. 了解自己的价值"></a>35. 了解自己的价值</h3><p>技术也是商品，应该得到适当的报酬。了解你所在地区的行业平均水平。如果你赚的钱少了，是时候和你的老板谈谈，追求你应得的。</p><h3 id="36-不要害怕寻求帮助⭐"><a href="#36-不要害怕寻求帮助⭐" class="headerlink" title="36. 不要害怕寻求帮助⭐"></a>36. 不要害怕寻求帮助⭐</h3><p>如果你被困在一个问题上，花了太多时间寻找解决方案，是时候寻求帮助了。我们都是人，我们都需要帮助，寻求同事的援助并不可耻。</p><h3 id="37-学会学习⭐"><a href="#37-学会学习⭐" class="headerlink" title="37. 学会学习⭐"></a>37. 学会学习⭐</h3><p>人们学习的方式不同，有些人通过视频教程学得最好，有些人通过阅读书籍学得最好。弄清楚你的学习风格，然后努力实践。</p><h3 id="38-与人为善"><a href="#38-与人为善" class="headerlink" title="38. 与人为善"></a>38. 与人为善</h3><p>有时你会被要求向同事提供反馈，友善一点，你可以对某位同事不够积极表达看法，而不是出言不逊。</p><h3 id="39-休息一下"><a href="#39-休息一下" class="headerlink" title="39. 休息一下"></a>39. 休息一下</h3><p>连续敲8个小时代码几乎是不可能，你很快就会筋疲力尽，犯很多错误。所以设个闹钟来提醒自己停下来休息一下。去散散步，和同事一起喝杯咖啡，远离屏幕会对你的工作效率和质量产生积极的影响。</p><h3 id="40-跟踪你的学习进度"><a href="#40-跟踪你的学习进度" class="headerlink" title="40. 跟踪你的学习进度"></a>40. 跟踪你的学习进度</h3><p>学习编程需要时间，当你看不到进展时，你会感到非常沮丧。所以跟踪你的成就和实现目标的进展非常重要。在你的电脑旁边放一个小清单，每次你完成一件事，把它写下来，不管它有多小，最终将会从量变到质变。</p><h3 id="41-不要依赖库和框架⭐"><a href="#41-不要依赖库和框架⭐" class="headerlink" title="41. 不要依赖库和框架⭐"></a>41. 不要依赖库和框架⭐</h3><p>掌握一个框架和库不如深入学习这门语言，没有必要一个接一个的学习这些库和框架，但是理解框架和库如何实现可以帮助你写出更简洁强壮的代码。</p><h3 id="42-学会爱上代码审查"><a href="#42-学会爱上代码审查" class="headerlink" title="42. 学会爱上代码审查"></a>42. 学会爱上代码审查</h3><p>让别人阅读和分析你的代码可能会让你不安，但是可以提供宝贵的反馈，这会让你成为一个更好的程序员。而且你也应该提高进行良好代码评审的能力。</p><h3 id="43-多方位全面学习"><a href="#43-多方位全面学习" class="headerlink" title="43. 多方位全面学习"></a>43. 多方位全面学习</h3><p>学习其他领域的基础知识, 如设计、营销、前端开发或后端开发。它将帮助你成为一个更全面的程序员。</p><h3 id="44-不要选择熟悉的技术，而应该是正确的⭐"><a href="#44-不要选择熟悉的技术，而应该是正确的⭐" class="headerlink" title="44. 不要选择熟悉的技术，而应该是正确的⭐"></a>44. 不要选择熟悉的技术，而应该是正确的⭐</h3><p>每个项目都有不同的需求，因此我们必须为这项工作选择合适的工具。尽管选择以前使用过的技术很方便，但是如果它们不适合项目的需要，应该探索其他替代方案。</p><h3 id="45-勇于承担责任⭐"><a href="#45-勇于承担责任⭐" class="headerlink" title="45. 勇于承担责任⭐"></a>45. 勇于承担责任⭐</h3><p>所有人都会犯错，在你的职业生涯中，你会犯很多很多的错误。因此，当你犯了错误时，站出来承担责任是很重要的，它将与你的团队成员和管理层建立信任。</p><h3 id="46-检查自己的代码⭐"><a href="#46-检查自己的代码⭐" class="headerlink" title="46. 检查自己的代码⭐"></a>46. 检查自己的代码⭐</h3><p>在发起PR请求之前，检查自己的代码，如果这是同事的工作，你会发表什么评论？在请求代码审查之前首先尝试自己诊断问题或错误非常重要，就像考试交卷前应该自己检查一遍。</p><h3 id="47-从失败中吸取教训⭐"><a href="#47-从失败中吸取教训⭐" class="headerlink" title="47. 从失败中吸取教训⭐"></a>47. 从失败中吸取教训⭐</h3><p>失败只是没有达到预期的结果，并不一定是件坏事。在我们的职业生涯中，我们会面临很多失败，从失败中学习下次你能做些什么。   </p><h3 id="48-正视自己的缺点"><a href="#48-正视自己的缺点" class="headerlink" title="48. 正视自己的缺点"></a>48. 正视自己的缺点</h3><p>了解你自己，你的缺点是什么?也许你总是在推送之前忘记更新测试，或者你真的不擅长回复电子邮件。了解你的弱点，这样你就能积极地改善它们。</p><h3 id="49-保持好奇心⭐"><a href="#49-保持好奇心⭐" class="headerlink" title="49. 保持好奇心⭐"></a>49. 保持好奇心⭐</h3><p>这个行业在不断发展，所以好奇心很重要。如果你不明白什么，不管是项目需求还是一行代码，大声说出来。没有人会因为你要求说明而批评你，你会因此创造出更好的代码。   </p><h3 id="50-不要试图学习一切⭐"><a href="#50-不要试图学习一切⭐" class="headerlink" title="50. 不要试图学习一切⭐"></a>50. 不要试图学习一切⭐</h3><p>世界上有无穷无尽的知识宝库，你不可能征服它。选择几个要掌握的主题，其余的就不要管了。你可以获得其他领域的相关知识，但你不可能掌握所有内容。</p><h3 id="51-该舍弃就舍弃"><a href="#51-该舍弃就舍弃" class="headerlink" title="51.  该舍弃就舍弃"></a>51.  该舍弃就舍弃</h3><p>仅仅因为你写了一些代码并不意味着你需要对它产生感情。没有人喜欢他们所做的工作被丢弃，但是代码有一个生命周期，所以没有必要一直保留着它。</p><h3 id="52-团队支持"><a href="#52-团队支持" class="headerlink" title="52.  团队支持"></a>52.  团队支持</h3><p>优秀的团队相互支持，这为尝试新事物创造了一个安全的空间，而不用担心受到惩罚。</p><h3 id="53-在社区中寻找鼓舞"><a href="#53-在社区中寻找鼓舞" class="headerlink" title="53. 在社区中寻找鼓舞"></a>53. 在社区中寻找鼓舞</h3><p>在行业里找几个你钦佩的人。它会激励你继续你的项目或尝试新事物</p><h3 id="54-重视并且珍惜你的工作"><a href="#54-重视并且珍惜你的工作" class="headerlink" title="54. 重视并且珍惜你的工作"></a>54. 重视并且珍惜你的工作</h3><p>不管你有多少经验或者你的职位是什么，你的工作都是有价值的，给予它应有的价值。</p><h3 id="55-排除干扰"><a href="#55-排除干扰" class="headerlink" title="55. 排除干扰"></a>55. 排除干扰</h3><p>关掉闲置的通知、短信、电子邮件和社交媒体会帮助你集中精力，最大化你的工作日。晚30分钟回复你朋友的信息，他死不了，真有事就打电话了。</p><h3 id="56-乐于助人"><a href="#56-乐于助人" class="headerlink" title="56. 乐于助人"></a>56. 乐于助人</h3><p>试着支持你的团队成员，无论是参加一个重要的演讲，还是在他们遇到困难时帮助他们。</p><h3 id="57-不要吝啬你的赞美⭐"><a href="#57-不要吝啬你的赞美⭐" class="headerlink" title="57. 不要吝啬你的赞美⭐"></a>57. 不要吝啬你的赞美⭐</h3><p>如果有人做得很好，告诉他们。正面反馈是与团队成员建立信任和帮助他们事业发展的好方法。他们也更有可能帮助你</p><h3 id="58-测试你的代码⭐"><a href="#58-测试你的代码⭐" class="headerlink" title="58. 测试你的代码⭐"></a>58. 测试你的代码⭐</h3><p>测试是很重要的。单元测试、回归测试、集成测试、端到端测试。测试你的代码，你的产品将会更加稳定。</p><h3 id="59-制定应对计划"><a href="#59-制定应对计划" class="headerlink" title="59. 制定应对计划"></a>59. 制定应对计划</h3><p>当你收到一个新功能需求或bug修改时，先制定应对计划，你需要什么来解决这个问题或开发这个特性？花几分钟来做这件事，也许后面可以为你节省数小时的沮丧。</p><h3 id="60-掌握伪代码"><a href="#60-掌握伪代码" class="headerlink" title="60. 掌握伪代码"></a>60. 掌握伪代码</h3><p>伪代码是一项很好的技能，因为它允许你在不浪费时间编写代码的情况下考虑复杂的问题。将一种方法写在纸上，运行不同的测试用例，看看缺陷在哪里。</p><h3 id="61-记录你的成就"><a href="#61-记录你的成就" class="headerlink" title="61. 记录你的成就"></a>61. 记录你的成就</h3><p>如果你在工作中获得了嘉奖，把它写下来。如果你开发了一个重要的功能，把它写下来。你会拥有一些积累、沉淀，它将有助于你职业晋升亦或在某一艰难的日子鼓舞你的士气。</p><h3 id="62-学习编程基础⭐"><a href="#62-学习编程基础⭐" class="headerlink" title="62. 学习编程基础⭐"></a>62. 学习编程基础⭐</h3><p>学习一些基本的排序和搜索算法以及数据结构。它们与语言无关，可以帮助你跨语言解决问题。</p><h3 id="63-选择长期维护的技术"><a href="#63-选择长期维护的技术" class="headerlink" title="63. 选择长期维护的技术"></a>63. 选择长期维护的技术</h3><p>尽管测试最新的技术很有趣，但是选择那些在企业应用程序中易于维护的技术。你们的团队将在未来的岁月里感谢你们。</p><h3 id="64-学习设计模式⭐"><a href="#64-学习设计模式⭐" class="headerlink" title="64. 学习设计模式⭐"></a>64. 学习设计模式⭐</h3><p>设计模式是构建代码的有效工具。你可能不是每个项目都需要它们，但是对它们有一个基本的了解将有助于构建更大的应用程序。</p><h3 id="65-化繁为简⭐"><a href="#65-化繁为简⭐" class="headerlink" title="65. 化繁为简⭐"></a>65. 化繁为简⭐</h3><p>不要编写复杂的代码来展示你高超的编程技能，而要着眼于可读性和简单性。这将使你的团队成员更容易做出贡献。</p><h3 id="66-还清技术债务"><a href="#66-还清技术债务" class="headerlink" title="66. 还清技术债务"></a>66. 还清技术债务</h3><p>技术债务可能会对性能产生巨大影响，所以如果能够重构，就应该重构。（这个建议绝对是好的，但是现实中要面临诸多问题）</p><h3 id="67-优先小版本迭代"><a href="#67-优先小版本迭代" class="headerlink" title="67. 优先小版本迭代"></a>67. 优先小版本迭代</h3><p>与其每个月发布一次大规模的升级，不如更频繁地发布较小的变更。这样你不太可能会引入bug和破坏更改。</p><h3 id="68-尽早并经常提交⭐"><a href="#68-尽早并经常提交⭐" class="headerlink" title="68. 尽早并经常提交⭐"></a>68. 尽早并经常提交⭐</h3><p>尽早提交和经常提交是确保你的工作保持干净的最好方法，并且还可以减少意外地恢复重要更改的压力。</p><h3 id="69-了解何时寻求帮助"><a href="#69-了解何时寻求帮助" class="headerlink" title="69. 了解何时寻求帮助"></a>69. 了解何时寻求帮助</h3><p>你不仅不应该害怕寻求帮助，而且你应该学会什么时候寻求帮助。在寻求帮助之前，你应该试着解决问题，并记录下你尝试的事情。但是当你被一个简单的问题难住一个多小时的时候，代价大于收益，你应该向同事求助。</p><h3 id="70-问一些有效的问题⭐"><a href="#70-问一些有效的问题⭐" class="headerlink" title="70. 问一些有效的问题⭐"></a>70. 问一些有效的问题⭐</h3><p>当你问问题的时候，要尽可能的具体，（可以参考github提issue的要求）。</p><h3 id="71-工作中及时寻求反馈"><a href="#71-工作中及时寻求反馈" class="headerlink" title="71. 工作中及时寻求反馈"></a>71. 工作中及时寻求反馈</h3><p>你的工作不需要完成就能得到反馈。如果你不确定方向，请一位值得信赖的同事来检查你的解决方案的有效性。</p><h3 id="72-阅读文档⭐"><a href="#72-阅读文档⭐" class="headerlink" title="72. 阅读文档⭐"></a>72. 阅读文档⭐</h3><p>文档是关于技术的最纯粹的事实来源，因此学习阅读文档可以快速帮助你成为专家。</p><p>###　73. 尽可能做出各种尝试⭐没有什么能阻止你尝试解决问题的方法，你有什么损失呢？</p><h3 id="74-在会议上积极发言"><a href="#74-在会议上积极发言" class="headerlink" title="74. 在会议上积极发言"></a>74. 在会议上积极发言</h3><p>你的想法和意见是有价值的，所以参加会议将有助于你与你的团队和管理层建立融洽的关系。</p><h3 id="75-跨团队协作"><a href="#75-跨团队协作" class="headerlink" title="75. 跨团队协作"></a>75. 跨团队协作</h3><p>如果你有机会和公司里的其他团队一起工作，那就去争取吧。</p><h3 id="76-保持项目热情"><a href="#76-保持项目热情" class="headerlink" title="76. 保持项目热情"></a>76. 保持项目热情</h3><p>当你每周工作40个小时时，花时间做你感兴趣的项目是很重要的（72小时的话更要如此）。它们可以帮助你重新找回对编程的热爱，并尝试你在工作中可能无法接触到的新技术。</p><h3 id="77-确定你的职业目标⭐"><a href="#77-确定你的职业目标⭐" class="headerlink" title="77. 确定你的职业目标⭐"></a>77. 确定你的职业目标⭐</h3><p>对你的职业生涯有一个理想的轨迹是很重要的。如果你不这样做，你就是在没有目标的情况下射箭。</p><h3 id="78-加入到讨论中来⭐"><a href="#78-加入到讨论中来⭐" class="headerlink" title="78. 加入到讨论中来⭐"></a>78. 加入到讨论中来⭐</h3><p>在博客上发表评论，参与Twitter主题，参与社区活动，做一个积极的旁观者会比单纯的旁观学到更多东西。</p><h3 id="79-确定任务优先级"><a href="#79-确定任务优先级" class="headerlink" title="79. 确定任务优先级"></a>79. 确定任务优先级</h3><p>学会确定任务的优先顺序将有助于提高您的工作效率，建立一个日常任务和长期任务待办事项列表，并按最重要的顺序排序。</p><h3 id="80-不要忽略细节"><a href="#80-不要忽略细节" class="headerlink" title="80. 不要忽略细节"></a>80. 不要忽略细节</h3><p>细节可以在项目中产生很大的影响。</p><h3 id="81-信任你的同事"><a href="#81-信任你的同事" class="headerlink" title="81. 信任你的同事"></a>81. 信任你的同事</h3><p>你的同事因为他们的技能而被雇佣，交给他们工作，并相信他们能完成。</p><h3 id="82-学会委托"><a href="#82-学会委托" class="headerlink" title="82. 学会委托"></a>82. 学会委托</h3><p>如果你处于领导地位，学习如何有效地委派任务。它会节省你的时间，你不能做所有的事。</p><h3 id="83-不要拿自己和别人比较"><a href="#83-不要拿自己和别人比较" class="headerlink" title="83. 不要拿自己和别人比较"></a>83. 不要拿自己和别人比较</h3><p>你唯一应该比较的是昨天的自己。</p><h3 id="84-找到你的盟友"><a href="#84-找到你的盟友" class="headerlink" title="84. 找到你的盟友"></a>84. 找到你的盟友</h3><p>学习编程将是一个漫长而不怎么容易的过程，和那些帮助你成长并鼓励你坚持下去的人在一起。</p><h3 id="85-不要想一步登天⭐"><a href="#85-不要想一步登天⭐" class="headerlink" title="85. 不要想一步登天⭐"></a>85. 不要想一步登天⭐</h3><p>一开始考虑太多做一个大而全的项目会让你不堪重负。构建时要考虑可伸缩性，但在需要时才开始扩展。这样你就不会用不必要的膨胀来压倒你的团队，而是保持了成长的能力。</p><h3 id="86-衡量性能影响⭐"><a href="#86-衡量性能影响⭐" class="headerlink" title="86. 衡量性能影响⭐"></a>86. 衡量性能影响⭐</h3><p>如果你想使用一种很酷的新技术，你应该权衡这样做的性能影响。你能在不影响性能的情况下实现类似的功能吗？如果可以，你可能需要重新考虑你的方法了。</p><h3 id="87-技术歧视不可取⭐"><a href="#87-技术歧视不可取⭐" class="headerlink" title="87. 技术歧视不可取⭐"></a>87. 技术歧视不可取⭐</h3><p>不要歧视新技术或新想法，对学习新技能的可能性保持开放的心态，也不要歧视他人，我们都值得尊重。（也不要歧视旧技术，即使现在前端框架盛行，但你也不能说Jquery就没有任何可取之处。）</p><h3 id="88-申请你不能胜任的工作"><a href="#88-申请你不能胜任的工作" class="headerlink" title="88. 申请你不能胜任的工作"></a>88. 申请你不能胜任的工作</h3><p>你永远不可能满足工作的所有要求，所以抓住机会申请吧，你有什么损失呢？</p><h3 id="89-模块化你的代码"><a href="#89-模块化你的代码" class="headerlink" title="89. 模块化你的代码"></a>89. 模块化你的代码</h3><p>你可以在一个长文件中编写所有代码，但这是不可维护的。通过模块化，我们确保代码易于理解和测试。</p><h3 id="90-不要只是做代码的搬运工⭐"><a href="#90-不要只是做代码的搬运工⭐" class="headerlink" title="90. 不要只是做代码的搬运工⭐"></a>90. 不要只是做代码的搬运工⭐</h3><p>如果你要复制并粘贴<a href="https://stackoverflow.com/" target="_blank" rel="noopener">Stack Overflow</a>中的解决方案，你应该确切地理解它的作用，有意识地选择要引入的代码。</p><h3 id="91-创造一个舒适的工作环境⭐"><a href="#91-创造一个舒适的工作环境⭐" class="headerlink" title="91. 创造一个舒适的工作环境⭐"></a>91. 创造一个舒适的工作环境⭐</h3><p>如果你喜欢你的工作环境和技术设置，你会更有动力去工作，所以还在等什么？</p><h3 id="92-记住你来自哪里"><a href="#92-记住你来自哪里" class="headerlink" title="92. 记住你来自哪里"></a>92. 记住你来自哪里</h3><p>我们都是从同一个地方开始的，随着你的技能和职位的发展，不要忘记你来自哪里，不要膨胀。</p><h3 id="93-试着保持乐观"><a href="#93-试着保持乐观" class="headerlink" title="93. 试着保持乐观"></a>93. 试着保持乐观</h3><p>如果出了什么问题，试着乐观一点。明天是新的一天。乐观会帮助你的团队充满活力和精神健康。</p><h3 id="94-不断重新评估你的工作流程⭐"><a href="#94-不断重新评估你的工作流程⭐" class="headerlink" title="94. 不断重新评估你的工作流程⭐"></a>94. 不断重新评估你的工作流程⭐</h3><p>仅仅因为某样东西现在有效，并不意味着它永远有效。重新评估你的工作流程，并在必要时做出调整。</p><h3 id="95-学会在家办公"><a href="#95-学会在家办公" class="headerlink" title="95. 学会在家办公"></a>95. 学会在家办公</h3><p>如果你有能力在家工作，那就学会有效地在家工作。找一个独立的办公空间，远离干扰。<a href="https://dev.to/boneskull/pro-tips-for-devs-working-at-home-3b63" target="_blank" rel="noopener">Boneskull</a>写了一篇很棒的关于在家工作的文章，你应该看看。</p><h3 id="96-无障碍代码"><a href="#96-无障碍代码" class="headerlink" title="96. 无障碍代码"></a>96. 无障碍代码</h3><p>无障碍不是事后才想到的，也不一定很难，每个人都应该能够使用你的产品。</p><h3 id="97-遵守你的承诺⭐"><a href="#97-遵守你的承诺⭐" class="headerlink" title="97. 遵守你的承诺⭐"></a>97. 遵守你的承诺⭐</h3><p>如果你告诉别人你会在某一天完成某件事，要信守承诺。如果你不能在截止日期前完成任务，那就早点说出来。</p><h3 id="98-积极主动"><a href="#98-积极主动" class="headerlink" title="98. 积极主动"></a>98. 积极主动</h3><p>如果你有额外的精力，找一个任务来帮助你的团队，他们会很感激你是主动的。</p><h3 id="99-创建一个令人惊叹的作品集"><a href="#99-创建一个令人惊叹的作品集" class="headerlink" title="99. 创建一个令人惊叹的作品集"></a>99. 创建一个令人惊叹的作品集</h3><p>一个优秀的作品集让你与众不同，使用它作为展示你的编程和设计技巧的机会！</p><h3 id="100-记住你喜欢编程的原因⭐"><a href="#100-记住你喜欢编程的原因⭐" class="headerlink" title="100. 记住你喜欢编程的原因⭐"></a>100. 记住你喜欢编程的原因⭐</h3><p>你进入这个行业是因为它激发了你的兴趣，如果你感到沮丧和怨恨，休息一下，给自己空间重新点燃你对编程的激情。</p><h3 id="101-分享你的知识⭐"><a href="#101-分享你的知识⭐" class="headerlink" title="101. 分享你的知识⭐"></a>101. 分享你的知识⭐</h3><p>如果你学到了一些很酷的东西，不要吝惜分享它，参加当地的技术交流会，在午餐时间教你的同事或学员，分享你的知识可以让更多人受益同时自己也能巩固提高。</p><p>完结撒花 🎉🎉🎉</p><p>这就是我关于成为一个优秀程序员的全部建议，希望你们喜欢。</p>]]></content:encoded>
      
      <comments>http://mydearest.cn/2019/%E6%88%90%E4%B8%BA%E4%BC%98%E7%A7%80%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E5%BB%BA%E8%AE%AE.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>Commit Message规范</title>
      <link>http://mydearest.cn/2019/Commit%20Message%E8%A7%84%E8%8C%83.html</link>
      <guid>http://mydearest.cn/2019/Commit%20Message%E8%A7%84%E8%8C%83.html</guid>
      <pubDate>Mon, 12 Aug 2019 17:55:40 GMT</pubDate>
      <description>
      
        &lt;p&gt;在团队开发中，commit message（提交说明）就如同代码注释一样重要。良好的commit message能让团队中的其他成员对你的每次提交的目的、&lt;/p&gt;
&lt;p&gt;涉及的代码范围及作用一目了然，方便日常的查询和帮助其他成员更好的帮你Code Review，必要时还能方便的生成Change log。&lt;/p&gt;
&lt;hr&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>在团队开发中，commit message（提交说明）就如同代码注释一样重要。良好的commit message能让团队中的其他成员对你的每次提交的目的、</p><p>涉及的代码范围及作用一目了然，方便日常的查询和帮助其他成员更好的帮你Code Review，必要时还能方便的生成Change log。</p><hr><a id="more"></a><h2 id="Commit-message格式"><a href="#Commit-message格式" class="headerlink" title="Commit message格式"></a>Commit message格式</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 格式：&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;</span></span><br></pre></td></tr></table></figure><ol><li>type：<code>必填</code> 用于说明commit的类型。总共7个标识：</li></ol><ul><li>feat： 新增feature</li><li>fix: 修复bug</li><li>docs: 仅仅修改了文档，比如README, CHANGELOG, CONTRIBUTE等等</li><li>style: 仅仅修改了空格、格式缩进、变量名等等，不改变代码逻辑</li><li>refactor: 代码重构，没有加新功能或者修复bug</li><li>perf: 优化相关，比如提升性能、体验</li><li>test: 测试用例，包括单元测试、集成测试等</li><li>chore: 改变构建流程、或者增加依赖库、工具等</li><li>revert: 回滚到上一个版本</li></ul><ol><li><p>scope：<code>可选</code> scope用于说明 commit 影响的范围，比如数据层、控制层、视图层或者目录甚至文件等等，视项目不同而不同。</p></li><li><p>subject：<code>必填</code> subject是 commit 目的的简短描述，不超过50个字符。</p></li></ol><ul><li>约定好commit message的语言，对我们来说最好使用中文</li><li>最好以动词开头（如使用英文请使用第一人称现在时，并且第一个字母小写）</li><li><code>&lt;scope&gt;</code>之后的冒号后面留一个英文输入法的空格</li><li>结尾不加句号或其他标点符号</li><li>若此次commit是解决某个issue应该在行末尾注明并加链接，如：…(#101)</li></ul><h2 id="Commit-message检查工具"><a href="#Commit-message检查工具" class="headerlink" title="Commit message检查工具"></a>Commit message检查工具</h2><ol><li><p><a href="https://github.com/commitizen/cz-cli" target="_blank" rel="noopener">commitizen</a>: 一个撰写合格 Commit message 的工具；</p></li><li><p><a href="https://github.com/kentcdodds/validate-commit-msg" target="_blank" rel="noopener">validate-commit-msg</a>: 用于检查 Node 项目的 Commit </p></li></ol><p>message 是否符合格式。</p>]]></content:encoded>
      
      <comments>http://mydearest.cn/2019/Commit%20Message%E8%A7%84%E8%8C%83.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>提问的智慧</title>
      <link>http://mydearest.cn/2019/%E6%8F%90%E9%97%AE%E7%9A%84%E6%99%BA%E6%85%A7.html</link>
      <guid>http://mydearest.cn/2019/%E6%8F%90%E9%97%AE%E7%9A%84%E6%99%BA%E6%85%A7.html</guid>
      <pubDate>Mon, 12 Aug 2019 17:50:45 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;提问之前&quot;&gt;&lt;a href=&quot;#提问之前&quot; class=&quot;headerlink&quot; title=&quot;提问之前&quot;&gt;&lt;/a&gt;提问之前&lt;/h2&gt;&lt;p&gt;在向别人提出一个技术问题之前，请尝试从以下几个途径去寻找答案：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Google&lt;/p&gt;
&lt;/l
        
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="提问之前"><a href="#提问之前" class="headerlink" title="提问之前"></a>提问之前</h2><p>在向别人提出一个技术问题之前，请尝试从以下几个途径去寻找答案：</p><ol><li><p>Google</p></li><li><p>Stackoverflow</p></li><li><p>相应的社区</p></li><li><p>官方文档</p></li><li><p>项目的Issue</p></li><li><p>项目源码（看个人能力）</p></li></ol><h2 id="提问之时"><a href="#提问之时" class="headerlink" title="提问之时"></a>提问之时</h2><p>以上尝试无果的情况下向别人提出问题时：</p><ol><li><p>认真做足相关功课，并整理好提问思路</p></li><li><p>礼多人不怪，一定要谦虚礼貌</p></li><li><p>清楚描述使用的环境、需求及问题的症状，语言要精简</p></li><li><p>能够提供一些问题的必要的截图、例子或者错误信息</p></li></ol><h2 id="提问结束"><a href="#提问结束" class="headerlink" title="提问结束"></a>提问结束</h2><ol><li><p>一定要表示感谢，不管问题有没有得到解决</p></li><li><p>如果问题解决，在论坛或者社区一定要 留下你的解决方案并加以必要的说明，方便后人(我深受其害)；哪怕是问的身边的人，有价值的问题也要在博客上做记录</p></li><li><p>如果以上方法都尝试了还是解决不了那就先放一放，说不定过两天就有思路了</p></li><li><p>再不行，那就换个思路或者方案来解决你的需求吧</p></li></ol><p>参考资料：</p><p><a href="https://github.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/blob/master/README-zh_CN.md" target="_blank" rel="noopener">https://github.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/blob/master/README-zh_CN.md</a></p>]]></content:encoded>
      
      <comments>http://mydearest.cn/2019/%E6%8F%90%E9%97%AE%E7%9A%84%E6%99%BA%E6%85%A7.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>效率工作</title>
      <link>http://mydearest.cn/2019/%E6%95%88%E7%8E%87%E5%B7%A5%E4%BD%9C.html</link>
      <guid>http://mydearest.cn/2019/%E6%95%88%E7%8E%87%E5%B7%A5%E4%BD%9C.html</guid>
      <pubDate>Mon, 05 Aug 2019 15:29:31 GMT</pubDate>
      <description>
      
        
        
          &lt;ol&gt;
&lt;li&gt;&lt;p&gt;时间常有，时间在于优先。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;时间总会有的：每天只计划 4～5 小时真正的工作。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;当你在状态时，就多干点；不然就好好休息：有时候会连着几天不是工作状态，有时在工作状态时却又能天天忙活 12 小
        
      
      </description>
      
      <content:encoded><![CDATA[<ol><li><p>时间常有，时间在于优先。</p></li><li><p>时间总会有的：每天只计划 4～5 小时真正的工作。</p></li><li><p>当你在状态时，就多干点；不然就好好休息：有时候会连着几天不是工作状态，有时在工作状态时却又能天天忙活 12 小时，这都很正常的。</p></li><li><p>重视你的时间，并使其值得重视：你的时间值 1000 美元/小时，你得动起来。</p></li><li><p>不要多任务，这只会消耗注意力；保持专注，一心一用。</p></li><li><p>养成工作习惯，并持之以恒，你的身体会适应的。</p></li><li><p>在有限的时间内，我们总是非常专注并且有效率。</p></li><li><p>进入工作状态的最佳方式就是工作，从小任务开始做起，让工作运转起来。</p></li><li><p>迭代工作，期待完美收工会令人窒息：“做完事情，要胜于完美收工” 。动手做，胜过任何完美的想象。</p></li><li><p>工作时间越长，并不等于效率越高。</p></li><li><p>按重要性工作，提高效率。</p></li><li><p>有会议就尽早安排，用于准备会议的时间往往都浪费掉了。</p></li><li><p>把会议和沟通 (邮件或电话) 结合，创造不间断工作时间：一个小会，也会毁了一个下午，因为它会把下午撕成两个较小的时间段，以至于啥也干不成。PS：当看到一个程序员冥思苦想时，不要过去打扰，甚至一句问候都是多余的。</p></li><li><p>一整天保持相同的工作环境。在项目/客户之间切换，会效率低。</p></li><li><p>工作—放松—工作=高效(番茄工作法)。</p></li></ol><blockquote><p>番茄工作法是弗朗西斯科·西里洛于1992年创立的一种相对于GTD更微观的时间管理方法。使用番茄工作法，选择一个待完成的任务，将番茄时间设为25分钟，专注工作，中途不允许做任何与该任务无关的事，直到番茄时钟响起，然后在纸上画一个X短暂休息一下（5分钟就行），每4个番茄时段多休息一会儿。</p></blockquote><ol><li><p>把不切实际的任务分割成合理的小任务，只要每天都完成小任务，你就会越来越接近那个大目标了。</p></li><li><p>从来没有两个任务会有相同的优先级，总会有个更重要，仔细考虑待办事情列表。</p></li><li><p>必须清楚白天必须完成的那件事，是什么。 只去做那件有着最大影响的事情。</p></li><li><p>把任务按时间分段，就能感觉它快被搞定了。</p></li><li><p>授权并擅用他人的力量。—君子善假于物(人)也，如果某件事其他人也可以做到八成，那就给他做！</p></li><li><p>把昨天翻过去，只考虑今天和明天。昨天的全垒打赢不了今天的比赛。—好汉不提当年勇。</p></li><li><p>给所有事情都设定一个期限。不要让工作无期限地进行下去。</p></li><li><p>针对时间紧或有压力的任务，设置结束时间，万事皆可终结。</p></li><li><p>多记，多做笔记。</p></li><li><p>进入高效状态后，记下任何分散你注意力的东西比如Google搜索词、灵光乍现的想法、新点子等等。如果你把它们记下来，它就不会再蹦来蹦去了。</p></li><li><p>休息，休息一下～。</p></li></ol>]]></content:encoded>
      
      <comments>http://mydearest.cn/2019/%E6%95%88%E7%8E%87%E5%B7%A5%E4%BD%9C.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>ES6Proxy</title>
      <link>http://mydearest.cn/2019/ES6Proxy.html</link>
      <guid>http://mydearest.cn/2019/ES6Proxy.html</guid>
      <pubDate>Tue, 30 Jul 2019 17:25:34 GMT</pubDate>
      <description>
      
        &lt;p&gt;Proxy，代理，是ES6新增的功能，可以理解为代理器（即由它代理某些操作）。&lt;/p&gt;
&lt;p&gt;Proxy 对象用于定义或修改某些操作的自定义行为，可以在外界对目标对象进行访问前，对外界的访问进行改写。&lt;/p&gt;
&lt;hr&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>Proxy，代理，是ES6新增的功能，可以理解为代理器（即由它代理某些操作）。</p><p>Proxy 对象用于定义或修改某些操作的自定义行为，可以在外界对目标对象进行访问前，对外界的访问进行改写。</p><hr><a id="more"></a><h3 id="1-Proxy-定义"><a href="#1-Proxy-定义" class="headerlink" title="1. Proxy 定义"></a>1. Proxy 定义</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(target, handler)</span><br></pre></td></tr></table></figure><p><code>new Proxy()</code>表示生成一个 Proxy 实例</p><ul><li>target：目标对象</li><li>handler：一个对象，其属性是当执行一个操作时定义代理的行为的函数。</li></ul><p><strong>注意：要实现拦截操作，必须是对 Proxy 实例进行操作，而不是针对目标对象 target 进行操作。</strong></p><p>首先，看个例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> handler = &#123;</span><br><span class="line">    get: <span class="function"><span class="keyword">function</span>(<span class="params">target, key, receiver</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`getter <span class="subst">$&#123;key&#125;</span>!`</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Reflect</span>.get(target, key, receiver)</span><br><span class="line">    &#125;,</span><br><span class="line">    set: <span class="function"><span class="keyword">function</span>(<span class="params">target, key, value, receiver</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`setter <span class="subst">$&#123;key&#125;</span>=<span class="subst">$&#123;value&#125;</span>`</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Reflect</span>.set(target, key, value, receiver)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Proxy</span>(&#123;&#125;, handler)</span><br><span class="line">obj.a = <span class="number">1</span> <span class="comment">// setter a=1</span></span><br><span class="line">obj.b = <span class="literal">undefined</span> <span class="comment">// setter b=undefined</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(obj.a, obj.b) </span><br><span class="line"><span class="comment">// getter a!</span></span><br><span class="line"><span class="comment">// getter b!</span></span><br><span class="line"><span class="comment">// 1 undefined</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'c'</span> <span class="keyword">in</span> obj, obj.c)</span><br><span class="line"><span class="comment">// getter c!</span></span><br><span class="line"><span class="comment">// false undefined</span></span><br></pre></td></tr></table></figure><p>在这个例子中，proxy 拦截了get和set操作。</p><p>再看一个例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> handler = &#123;</span><br><span class="line">    get: <span class="function"><span class="keyword">function</span>(<span class="params">target, key, receiver</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    &#125;,</span><br><span class="line">  set: <span class="function"><span class="keyword">function</span> (<span class="params">target, key, value, receiver</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`setting <span class="subst">$&#123;key&#125;</span>!`</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Reflect</span>.set(target, key, value, receiver);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Proxy</span>(&#123;&#125;, handler)</span><br><span class="line">obj.a = <span class="number">5</span> <span class="comment">// setting a!</span></span><br><span class="line"><span class="built_in">console</span>.log(obj.a) <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p>则由上面代码看出：<strong>Proxy 不仅是拦截了行为，更是用自己定义的行为覆盖了组件的原始行为</strong>。</p><p><strong>若<code>handler = {}</code>，则代表 Proxy 没有做任何拦截，访问 Proxy 实例就相当于访问 target 目标对象。</strong>这里不再演示，有兴趣的可以自己举例尝试。</p><h3 id="2-Proxy-handler方法（拦截方法）"><a href="#2-Proxy-handler方法（拦截方法）" class="headerlink" title="2. Proxy handler方法（拦截方法）"></a>2. Proxy handler方法（拦截方法）</h3><ul><li><code>get(target, key, receiver)</code>：拦截 target 属性的读取</li><li><code>set(target, key, value, receiver)</code>：拦截 target 属性的设置</li><li><code>has(target, key)</code>：拦截 <code>key in proxy</code> 的操作，并返回是否存在（boolean值）</li><li><code>deleteProperty(target, key)</code>：拦截 <code>delete proxy[key]</code>的操作，并返回结果（boolean值）</li><li><code>ownKeys(target)</code>：拦截<code>Object.getOwnPropertyName(proxy)</code>、<code>Object.getOwnPropertySymbols(proxy)</code>、<code>Object.keys(proxy)</code>、<code>for ... in</code>循环。并返回目标对象所有自身属性的属性名数组。注意：<strong><code>Object.keys()</code>的返回结果数组中只包含目标对象自身的可遍历属性</strong></li><li><code>getOwnPropertyDescriptor(target, key)</code>：拦截 <code>Object.getOwnPropertyDescriptor(proxy, key)</code>，返回属性的描述对象</li><li><code>defineProperty(target, key, desc)</code>：拦截<code>Object.defineProperty(proxy, key, desc)</code>、<code>Object.defineProperties(proxy, descs)</code>，返回一个 boolean 值</li><li><code>preventExtensions(target)</code>：拦截<code>Object.preventExtensions(proxy)</code>，返回一个 boolean 值</li><li><code>getPrototypeOf(target)</code>：拦截<code>Object.getPrototypeOf(proxy)</code>，返回一个对象</li><li><code>isExtensible(target)</code>：拦截<code>Object.isExtensible(proxy)</code>，返回一个 boolean 值</li><li><code>setPrototypeOf(target, key)</code>：拦截<code>Object.setPrototypeOf(proxy, key)</code>，返回一个 boolean 值。如果目标对象是函数，则还有两种额外操作可以被拦截</li><li><code>apply(target, object, args)</code>：拦截 Proxy 实例作为函数调用的操作，比如<code>proxy(...args)</code>、<code>proxy.call(object, ...args)</code>、<code>proxy.apply(...)</code></li><li><code>construct(target, args)</code>：拦截 Proxy 实例作为构造函数调用的操作，比如<code>new proxy(...args)</code></li></ul><p>总共 13 个拦截方法，下面进行简要举例说明，更多可见阮一峰老师的 <a href="https://link.juejin.im/?target=http%3A%2F%2Fes6.ruanyifeng.com%2F%23docs%2Fproxy" target="_blank" rel="noopener">《ECMAScript 6 入门》</a></p><h4 id="1-get，set"><a href="#1-get，set" class="headerlink" title="1. get，set"></a>1. get，set</h4><p><code>get</code>方法用于拦截某个属性的读取操作，可以接受三个参数，依次为目标对象、属性名和 proxy 实例本身（严格地说，是操作行为所针对的对象），其中最后一个参数可选。</p><p><code>set</code>拦截 target 属性的设置，可以接受四个参数，依次为目标对象、属性名、value和 proxy 实例本身（严格地说，是操作行为所针对的对象），其中最后一个参数可选。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> target = &#123;<span class="attr">foo</span>: <span class="number">1</span>&#125;</span><br><span class="line"><span class="keyword">let</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(target, &#123;</span><br><span class="line">    get(target, key, receiver) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`getter <span class="subst">$&#123;key&#125;</span>!`</span>)</span><br><span class="line">        <span class="keyword">return</span> target[key]</span><br><span class="line">    &#125;,</span><br><span class="line">    set: <span class="function"><span class="keyword">function</span>(<span class="params">target, key, value, receiver</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`setter <span class="subst">$&#123;key&#125;</span>!`</span>)</span><br><span class="line">        target[key] = value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = <span class="built_in">Object</span>.create(proxy)</span><br><span class="line"><span class="built_in">console</span>.log(obj.foo) </span><br><span class="line"><span class="comment">// getter foo!</span></span><br><span class="line"><span class="comment">// 1</span></span><br></pre></td></tr></table></figure><h4 id="2-has"><a href="#2-has" class="headerlink" title="2. has"></a>2. has</h4><p>拦截 propKey in proxy 的操作，返回一个布尔值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 has 方法隐藏某些属性，不被 in 运算符发现</span></span><br><span class="line"><span class="keyword">var</span> handler = &#123;</span><br><span class="line">    has (target, key) &#123;</span><br><span class="line">        <span class="keyword">if</span> (key.startsWith(<span class="string">'_'</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> key <span class="keyword">in</span> target;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> foo = &#123; <span class="attr">_name</span>: <span class="string">'foo'</span>, <span class="attr">name</span>: <span class="string">'foo'</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(foo, handler);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'_name'</span> <span class="keyword">in</span> proxy); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'name'</span> <span class="keyword">in</span> proxy); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h4 id="3-ownKeys"><a href="#3-ownKeys" class="headerlink" title="3. ownKeys"></a>3. ownKeys</h4><p>拦截自身属性的读取操作。并返回目标对象所有自身属性的属性名数组。具体返回结果可结合 MDN <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Enumerability_and_ownership_of_properties" target="_blank" rel="noopener">属性的可枚举性和所有权</a></p><ul><li><code>Object.getOwnPropertyName(proxy)</code></li><li><code>Object.getOwnPropertySymbols(proxy)</code></li><li><code>Object.keys(proxy)</code></li><li><code>for ... in</code>循环</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> target = &#123;</span><br><span class="line">  _foo: <span class="string">'foo'</span>,</span><br><span class="line">  _bar: <span class="string">'bar'</span>,</span><br><span class="line">  name: <span class="string">'An'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> handler = &#123;</span><br><span class="line">  ownKeys (target) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Reflect</span>.ownKeys(target).filter(key =key.startsWith(<span class="string">'_'</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(target, handler);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">of</span> <span class="built_in">Object</span>.keys(proxy)) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(target[key]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// "An"</span></span><br></pre></td></tr></table></figure><h4 id="4-apply"><a href="#4-apply" class="headerlink" title="4. apply"></a>4. apply</h4><p>apply 拦截 Proxy 实例作为函数调用的操作，比如函数的调用（<code>proxy(...args)</code>）、call（<code>proxy.call(object, ...args)</code>）、apply（<code>proxy.apply(...)</code>）等。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> target = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="string">'I am the target'</span>; &#125;;</span><br><span class="line"><span class="keyword">var</span> handler = &#123;</span><br><span class="line">  apply: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'I am the proxy'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(target, handler);</span><br><span class="line"></span><br><span class="line">proxy();</span><br><span class="line"><span class="comment">// "I am the proxy"</span></span><br></pre></td></tr></table></figure><p>Proxy 方法太多，这里只是将常用的简要介绍，更多请看阮一峰老师的 <a href="https://link.juejin.im/?target=http%3A%2F%2Fes6.ruanyifeng.com%2F%23docs%2Fproxy" target="_blank" rel="noopener">《ECMAScript 6 入门》</a></p>]]></content:encoded>
      
      <comments>http://mydearest.cn/2019/ES6Proxy.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>linux安装mongodb及常见命令</title>
      <link>http://mydearest.cn/2019/linux%E5%AE%89%E8%A3%85mongodb%E5%8F%8A%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4.html</link>
      <guid>http://mydearest.cn/2019/linux%E5%AE%89%E8%A3%85mongodb%E5%8F%8A%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4.html</guid>
      <pubDate>Sat, 20 Jul 2019 06:20:40 GMT</pubDate>
      <description>
      
        &lt;span itemprop=&quot;image&quot; itemscope=&quot;&quot; itemtype=&quot;http://schema.org/ImageObject&quot;&gt;&lt;img itemprop=&quot;url image&quot; src=&quot;http://cdn.mydearest.cn/blog/images/mongodb.jpg&quot; class=&quot;full-image&quot; alt=&quot;MongoDB&quot; title=&quot;MongoDB&quot;&gt;&lt;meta itemprop=&quot;width&quot; content=&quot;auto&quot;&gt;&lt;meta itemprop=&quot;height&quot; content=&quot;auto&quot;&gt;&lt;/span&gt;
&lt;h2 id=&quot;MongoDB-是一个基于分布式文件存储的数据库。由-C-语言编写。旨在为-WEB-应用提供可扩展的高性能数据存储解决方案。&quot;&gt;&lt;a href=&quot;#MongoDB-是一个基于分布式文件存储的数据库。由-C-语言编写。旨在为-WEB-应用提供可扩展的高性能数据存储解决方案。&quot; class=&quot;headerlink&quot; title=&quot;MongoDB 是一个基于分布式文件存储的数据库。由 C++ 语言编写。旨在为 WEB 应用提供可扩展的高性能数据存储解决方案。&quot;&gt;&lt;/a&gt;MongoDB 是一个基于分布式文件存储的数据库。由 C++ 语言编写。旨在为 WEB 应用提供可扩展的高性能数据存储解决方案。&lt;/h2&gt;
      
      </description>
      
      <content:encoded><![CDATA[<span itemprop="image" itemscope="" itemtype="http://schema.org/ImageObject"><img itemprop="url image" src="http://cdn.mydearest.cn/blog/images/mongodb.jpg" class="full-image" alt="MongoDB" title="MongoDB"><meta itemprop="width" content="auto"><meta itemprop="height" content="auto"></span><h2 id="MongoDB-是一个基于分布式文件存储的数据库。由-C-语言编写。旨在为-WEB-应用提供可扩展的高性能数据存储解决方案。"><a href="#MongoDB-是一个基于分布式文件存储的数据库。由-C-语言编写。旨在为-WEB-应用提供可扩展的高性能数据存储解决方案。" class="headerlink" title="MongoDB 是一个基于分布式文件存储的数据库。由 C++ 语言编写。旨在为 WEB 应用提供可扩展的高性能数据存储解决方案。"></a>MongoDB 是一个基于分布式文件存储的数据库。由 C++ 语言编写。旨在为 WEB 应用提供可扩展的高性能数据存储解决方案。</h2><a id="more"></a><h2 id="安装、配置"><a href="#安装、配置" class="headerlink" title="安装、配置"></a>安装、配置</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 下载</span></span></span><br><span class="line">curl -O https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-3.6.5.tgz</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 解压</span></span></span><br><span class="line">tar -zxvf mongodb-linux-x86_64-3.6.5.tgz </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 移动到指定目录</span></span></span><br><span class="line">mv  mongodb-linux-x86_64-3.6.5/ /usr/local/mongodb</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># MongoDB 的可执行文件位于 bin 目录下，所以可以将其添加到 PATH 路径中：当前终端有效(可跳过)</span></span></span><br><span class="line">export PATH=/usr/local/mongodb/bin:$PATH</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 到根目录创建文件夹 或者mongodb下</span></span></span><br><span class="line">mkdir data/db</span><br><span class="line">mkdir data/log</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># vim /etc/profile 添加到全局命令</span></span></span><br><span class="line">export PATH=/usr/local/mongodb/bin:$PATH </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 如果有多个</span></span></span><br><span class="line">export PATH=$JAVA_HOME/bin:$JRE_HOME/bin:/usr/local/mongodb/bin:$PATH</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 保存，退出，然后运行</span></span></span><br><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># mongodb.conf</span></span></span><br><span class="line">dbpath=/usr/local/mongodb/db</span><br><span class="line">logpath=/usr/local/mongodb/log/mongodb.log</span><br><span class="line">bind_ip=0.0.0.0</span><br><span class="line">fork=true</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 关闭</span></span></span><br><span class="line">ps -ef|grep mongod</span><br><span class="line">kill -9</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 后台启动 开启用户认证</span></span></span><br><span class="line">nohup mongod --auth -f /usr/local/mongodb/mongodb.conf &gt; myLog.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><h2 id="常见命令"><a href="#常见命令" class="headerlink" title="常见命令"></a>常见命令</h2><h3 id="设置用户和命令"><a href="#设置用户和命令" class="headerlink" title="设置用户和命令"></a>设置用户和命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 创建管理员</span></span></span><br><span class="line">mongo</span><br><span class="line"></span><br><span class="line">use admin</span><br><span class="line"></span><br><span class="line">db.createUser(</span><br><span class="line">  &#123;</span><br><span class="line">    user: "testuser",</span><br><span class="line">    pwd: "testpassword",</span><br><span class="line">    roles: [ &#123; role: "readWriteAnyDatabase", db: "admin" &#125; ]</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 认证登录</span></span></span><br><span class="line">db.auth("admin", "password")</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 显示当前系统用户</span></span></span><br><span class="line">db.system.users.find()</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 删除用户(删除用户的时候需要切换到用户管理的数据库才可以删除)</span></span></span><br><span class="line">db.dropUser("testuser")</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 修改密码</span></span></span><br><span class="line">db.addUser('testUser','111')</span><br><span class="line"></span><br><span class="line">db.changeUserPassword('tank2','test')</span><br></pre></td></tr></table></figure><h3 id="mongoose账号密码连接"><a href="#mongoose账号密码连接" class="headerlink" title="mongoose账号密码连接"></a>mongoose账号密码连接</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mongoose.connect(<span class="string">"mongodb://user:pwd@111.231.121.29/ticket"</span>, &#123;</span><br><span class="line">  authSource: <span class="string">"admin"</span>,</span><br><span class="line">  useMongoClient: <span class="literal">true</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="导入导出表字段"><a href="#导入导出表字段" class="headerlink" title="导入导出表字段"></a>导入导出表字段</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mongoexport -d book -c books -o books.json --type json</span><br><span class="line"></span><br><span class="line">mongoimport -d book -c books --file /home/mongodump/articles.json --type json</span><br></pre></td></tr></table></figure><h2 id="备份恢复数据库"><a href="#备份恢复数据库" class="headerlink" title="备份恢复数据库"></a>备份恢复数据库</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mongodump -h <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> -d book -o D:\iview-book-admin\<span class="keyword">static</span>\js</span><br><span class="line"></span><br><span class="line">mongorestore -h dbhost -d book --dir D:\iview-book-admin\<span class="keyword">static</span>\js\book</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://mydearest.cn/2019/linux%E5%AE%89%E8%A3%85mongodb%E5%8F%8A%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>blur事件与click事件冲突的解决办法</title>
      <link>http://mydearest.cn/2019/blur%E4%BA%8B%E4%BB%B6%E4%B8%8Eclick%E4%BA%8B%E4%BB%B6%E5%86%B2%E7%AA%81%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95.html</link>
      <guid>http://mydearest.cn/2019/blur%E4%BA%8B%E4%BB%B6%E4%B8%8Eclick%E4%BA%8B%E4%BB%B6%E5%86%B2%E7%AA%81%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95.html</guid>
      <pubDate>Fri, 12 Jul 2019 16:59:46 GMT</pubDate>
      <description>
      
        &lt;p&gt;在处理表单登录的过程中，遇到了一个问题，当我们在输入框输入内容输入框获取到焦点时，输入框后面会出现一个图标删除已输入的内容，因此删除图标会绑定一个click事件，但是当我们点击图标的时候，也触发了input的blur事件，blur事件会让input失去焦点时隐藏删除的图标，并且blur事件先于图标的click事件执行，因此这时候点击图标并不会删除输入框已输入的内容，而是图标消失了。还有弹窗输入框blur同时点击取消按钮关闭，也会出现需要点击2次的情况。&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;http://cdn.mydearest.cn/blog/images/blur.png&quot; alt=&quot;blur img&quot;&gt;&lt;/p&gt;

&lt;hr&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>在处理表单登录的过程中，遇到了一个问题，当我们在输入框输入内容输入框获取到焦点时，输入框后面会出现一个图标删除已输入的内容，因此删除图标会绑定一个click事件，但是当我们点击图标的时候，也触发了input的blur事件，blur事件会让input失去焦点时隐藏删除的图标，并且blur事件先于图标的click事件执行，因此这时候点击图标并不会删除输入框已输入的内容，而是图标消失了。还有弹窗输入框blur同时点击取消按钮关闭，也会出现需要点击2次的情况。</p><p align="center"><img src="http://cdn.mydearest.cn/blog/images/blur.png" alt="blur img"></p><hr><a id="more"></a><ul><li><p>blur事件：当元素失去焦点时触发blur事件；blur 事件仅发生于表单元素上。在新浏览器中，该事件可用于任何元素，blur和focus事件不会冒泡，其他表单事件都可以。</p></li><li><p>click事件：当点击元素时触发click事件；所有元素都有此事件，会产生冒泡。</p></li></ul><h3 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h3><blockquote><p>blur事件比click事件先触发，而javascript为单线程，同一时间只能执行处理一个事件，所以当blur执行时，导致其后续click事件并不会执行。</p></blockquote><h3 id="方案一-加定时器延时触发blur事件"><a href="#方案一-加定时器延时触发blur事件" class="headerlink" title="方案一 加定时器延时触发blur事件"></a>方案一 加定时器延时触发blur事件</h3><p>缺点：设置多久的延时是一个难以两全的问题，时间太短不能保证click事件的100%触发，时间太长则会造成卡顿的感觉，影响用户体验。</p><h3 id="方案二-将click事件改为mousedown事件，mousedown事件是优先于blur事件执行"><a href="#方案二-将click事件改为mousedown事件，mousedown事件是优先于blur事件执行" class="headerlink" title="方案二 将click事件改为mousedown事件，mousedown事件是优先于blur事件执行"></a>方案二 将click事件改为mousedown事件，mousedown事件是优先于blur事件执行</h3><p>缺点：鼠标按下便触发了事件，不收起、长按也会触发，可能造成用户体验不好。还需要判断是否是鼠标左键点击(event.button===0)。</p><h3 id="方案三-给click所在元素再添加一个mousedown事件，在其中执行event-preventDefault-阻止浏览器默认事件，这样点击按钮时输入框就不会失去焦点了"><a href="#方案三-给click所在元素再添加一个mousedown事件，在其中执行event-preventDefault-阻止浏览器默认事件，这样点击按钮时输入框就不会失去焦点了" class="headerlink" title="方案三 给click所在元素再添加一个mousedown事件，在其中执行event.preventDefault()阻止浏览器默认事件，这样点击按钮时输入框就不会失去焦点了"></a>方案三 给click所在元素再添加一个mousedown事件，在其中执行event.preventDefault()阻止浏览器默认事件，这样点击按钮时输入框就不会失去焦点了</h3><p>缺点：如果是弹窗下次打开时，焦点仍然存在。</p><h3 id="方案四-动态绑定移除blur事件"><a href="#方案四-动态绑定移除blur事件" class="headerlink" title="方案四 动态绑定移除blur事件"></a>方案四 动态绑定移除blur事件</h3><p><strong>推荐方案三和四</strong></p>]]></content:encoded>
      
      <comments>http://mydearest.cn/2019/blur%E4%BA%8B%E4%BB%B6%E4%B8%8Eclick%E4%BA%8B%E4%BB%B6%E5%86%B2%E7%AA%81%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>前端模块化发展扩展</title>
      <link>http://mydearest.cn/2019/%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E5%8C%96%E5%8F%91%E5%B1%95%E6%89%A9%E5%B1%95.html</link>
      <guid>http://mydearest.cn/2019/%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E5%8C%96%E5%8F%91%E5%B1%95%E6%89%A9%E5%B1%95.html</guid>
      <pubDate>Tue, 09 Jul 2019 16:51:20 GMT</pubDate>
      <description>
      
        &lt;p&gt;JavaScript 一开始并没有内建模块化支持，也几乎没有模块化这种概念。当时没那么大的需求，搞个模块化显得大材小用啊。随着互联网的发展，尤其是 2006 年 ajax 技术的出现和之后 Web 2.0 的兴起，越来越多的业务逻辑向前端转移，前端开发的复杂程度和代码量逐渐提升。这时，由于缺乏模块化概念，JavaScript 的一些问题便凸显出来：代码难以复用、容易出现全局变量污染和命名冲突、依赖管理难以维护等等。一开始，开发者们使用诸如暴露全局对象、自执行函数等方法来规避这些问题，但仍无法从根本上解决问题。&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>JavaScript 一开始并没有内建模块化支持，也几乎没有模块化这种概念。当时没那么大的需求，搞个模块化显得大材小用啊。随着互联网的发展，尤其是 2006 年 ajax 技术的出现和之后 Web 2.0 的兴起，越来越多的业务逻辑向前端转移，前端开发的复杂程度和代码量逐渐提升。这时，由于缺乏模块化概念，JavaScript 的一些问题便凸显出来：代码难以复用、容易出现全局变量污染和命名冲突、依赖管理难以维护等等。一开始，开发者们使用诸如暴露全局对象、自执行函数等方法来规避这些问题，但仍无法从根本上解决问题。</p><a id="more"></a><h2 id="CommonJS"><a href="#CommonJS" class="headerlink" title="CommonJS"></a>CommonJS</h2><p>2009 年，基于将 JavaScript 应用于服务端的尝试，ServerJS 诞生了。之后 ServerJS 更名为 CommonJS，并逐步发展为一个完整的模块规范。简称 CMD(Common Module Definition)</p><p><a href="http://www.commonjs.org/" target="_blank" rel="noopener">CommonJS官网</a><a href="http://javascript.ruanyifeng.com/nodejs/module.html" target="_blank" rel="noopener">CommonJS阮一峰</a></p><p>CommonJS 为模块的使用定义了一套 API。比如，它定义了全局函数 require，通过传入模块标识来引入其他模块，如果被引入的模块又依赖了其他模块，那么会依次加载这些模块；通过 module.exports 向外部暴露 API，以便其他的模块引入。</p><p>由于 CommonJS 是使用<code>同步方式</code>加载模块的，即只有加载完成才能进行接下来的操作，因此当应用于浏览器端时会受到网速的限制。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> $ = <span class="built_in">require</span>(<span class="string">'jquery'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义私有方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">log</span> (<span class="params">...arg</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(...arg)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定义公有方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHello</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> el = $(<span class="string">'body'</span>)</span><br><span class="line">  log(<span class="string">'zhouyu, hello'</span>, el)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 暴露公有方法</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  sayHello</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="AMD"><a href="#AMD" class="headerlink" title="AMD"></a>AMD</h2><p>之后，在 CommonJS 组织的讨论中，AMD(Asynchronous Module Definition)应运而生。和 CommonJS 不同的是，它使用<code>异步方式</code>加载模块，因此更适合被浏览器端采用。AMD 用全局函数 define 来定义模块，它需要三个参数：模块名称、模块的依赖数组、所有依赖都可用之后执行的回调函数(该函数按照依赖声明的顺序，接收依赖作为参数)。</p><p><a href="https://github.com/amdjs/amdjs-api/wiki/AMD" target="_blank" rel="noopener">AMD</a><a href="https://github.com/amdjs/amdjs-api/wiki/AMD-(%E4%B8%AD%E6%96%87%E7%89%88" target="_blank" rel="noopener">AMD中文</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">define([<span class="string">'jquery'</span>], <span class="function"><span class="keyword">function</span> (<span class="params">$</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 定义私有方法</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">log</span> (<span class="params">...arg</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(...arg)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 定义公有方法</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">sayHello</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> el = $(<span class="string">'body'</span>)</span><br><span class="line">    log(<span class="string">'zhouyu, hello'</span>, el)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 暴露公有方法</span></span><br><span class="line">  <span class="keyword">return</span> sayHello</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="UMD"><a href="#UMD" class="headerlink" title="UMD"></a>UMD</h2><p>如果需要同时支持 CommonJS 和 AMD 两种格式，那么可以使用 UMD(Universal Module Definition)。事实上，UMD 通过一系列 if/else 判断来确定当前环境支持的模块体系，因此多数情况下 UMD 格式的模块会占用更大的体积。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">root, factory</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> define === <span class="string">'function'</span> &amp;&amp; define.amd) &#123;</span><br><span class="line">    <span class="comment">// AMD</span></span><br><span class="line">    define([<span class="string">'jquery'</span>], factory)</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> exports === <span class="string">'object'</span>) &#123;</span><br><span class="line">    <span class="comment">// Nodejs 或 CommonJS</span></span><br><span class="line">    <span class="built_in">module</span>.exports = factory(<span class="built_in">require</span>(<span class="string">'jquery'</span>))</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 浏览器全局变量(root 即 window)</span></span><br><span class="line">    root.returnExports = factory(root.jQuery)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;(<span class="keyword">this</span>, <span class="function"><span class="keyword">function</span> (<span class="params">$</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 定义私有方法</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">log</span> (<span class="params">...arg</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(...arg)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 定义公有方法</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">sayHello</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> el = $(<span class="string">'body'</span>)</span><br><span class="line">    log(<span class="string">'zhouyu, hello'</span>, el)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 暴露公有方法</span></span><br><span class="line">  <span class="keyword">return</span> sayHello</span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure><h2 id="ES6-Modules"><a href="#ES6-Modules" class="headerlink" title="ES6 Modules"></a>ES6 Modules</h2><p>无论是 CommonJS，AMD 还是 UMD，它们都不是标准的 JavaScript 模块解决方案。换句话说，它们都没有被写进 ECMA 的规范中。直到 2015 年 6 月，TC39 委员会终于将 Modules 写进 ECMAScript 2015 中，标志着原生模块新时代的到来。至此，JavaScript 文件有了两种形式：脚本(自 JavaScript 诞生起我们就在使用的)和模块(即 ECMAScript 2015 Modules)。下面就让我们来一起探索 ECMAScript 2015 Modules(以下简称 ES6 Modules)</p><p><a href="http://www.ecma-international.org/ecma-262/6.0/#sec-modules" target="_blank" rel="noopener">ES6 Modules</a><a href="http://es6.ruanyifeng.com/#docs/module" target="_blank" rel="noopener">ES6阮一峰</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> $ <span class="keyword">from</span>(<span class="string">'jquery'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义私有方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">log</span> (<span class="params">...arg</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(...arg)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定义公有方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHello</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> el = $(<span class="string">'body'</span>)</span><br><span class="line">  log(<span class="string">'zhouyu, hello'</span>, el)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> sayHello</span><br></pre></td></tr></table></figure><h2 id="ES6-Modules-现状"><a href="#ES6-Modules-现状" class="headerlink" title="ES6 Modules 现状"></a>ES6 Modules 现状</h2><p>时至今日，几大主流浏览器都在积极推进支持原生 ES6 Modules 的工作，部分浏览器的技术预览版也已经初步完成了这一使命。可以通过 <a href="https://caniuse.com/#search=module" target="_blank" rel="noopener">caniuse</a> 查看目前浏览器的支持情况。</p><h2 id="使用-Babel-和-webpack"><a href="#使用-Babel-和-webpack" class="headerlink" title="使用 Babel 和 webpack"></a>使用 Babel 和 webpack</h2><p>由于绝大多数浏览器都不支持 ES6 Modules，所以目前如果想使用它的语法，需要借助 Babel 和 webpack，即通过 Babel 将代码编译为 ES5 的语法，然后使用 webpack 打包成目标格式。</p><h2 id="直接使用-ES6-Modules"><a href="#直接使用-ES6-Modules" class="headerlink" title="直接使用 ES6 Modules"></a>直接使用 ES6 Modules</h2><p>有些游览器已经支持 ES6 Modules，我们利用 <code>&lt;script type=&quot;module&quot;&gt;</code>(默认是 defer)来使用。</p><h2 id="其他探索"><a href="#其他探索" class="headerlink" title="其他探索"></a>其他探索</h2><ul><li>动态加载方案 <code>import()</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> load = <span class="keyword">async</span> (url) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="built_in">module</span> = <span class="keyword">await</span> <span class="keyword">import</span>(url)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">module</span>, <span class="built_in">window</span>[tempGlobal])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">load</span> (<span class="params">url</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>)</span><br><span class="line">    <span class="keyword">const</span> tempGlobal = <span class="string">'__tempModuleLoadingVariable'</span> + <span class="built_in">Math</span>.random().toString(<span class="number">32</span>).substring(<span class="number">2</span>)</span><br><span class="line">    script.type = <span class="string">'module'</span></span><br><span class="line">    script.textContent = <span class="string">`import * as m from "<span class="subst">$&#123;url&#125;</span>"; window.<span class="subst">$&#123;tempGlobal&#125;</span> = m;`</span></span><br><span class="line"></span><br><span class="line">    script.onload = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      resolve(<span class="built_in">window</span>[tempGlobal])</span><br><span class="line">      <span class="keyword">delete</span> <span class="built_in">window</span>[tempGlobal]</span><br><span class="line">      script.remove()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    script.onerror = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Failed to load module script with URL '</span> + url))</span><br><span class="line">      <span class="keyword">delete</span> <span class="built_in">window</span>[tempGlobal]</span><br><span class="line">      script.remove()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">document</span>.documentElement.appendChild(script)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>基于 ES6 Modules 的 <code>module-pusher</code> 尝试</li></ul>]]></content:encoded>
      
      <comments>http://mydearest.cn/2019/%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E5%8C%96%E5%8F%91%E5%B1%95%E6%89%A9%E5%B1%95.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>健康指标</title>
      <link>http://mydearest.cn/2019/%E5%81%A5%E5%BA%B7%E6%8C%87%E6%A0%87.html</link>
      <guid>http://mydearest.cn/2019/%E5%81%A5%E5%BA%B7%E6%8C%87%E6%A0%87.html</guid>
      <pubDate>Tue, 09 Jul 2019 16:19:31 GMT</pubDate>
      <description>
      
        &lt;p&gt;接上次的&lt;a href=&quot;https://mydearest.cn/2019/%E7%BB%B4%E7%94%9F%E7%B4%A0.html&quot;&gt;维生素&lt;/a&gt;😊，罗列一些生活中需要知道健康指标。&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>接上次的<a href="https://mydearest.cn/2019/%E7%BB%B4%E7%94%9F%E7%B4%A0.html">维生素</a>😊，罗列一些生活中需要知道健康指标。</p><a id="more"></a><h1 id="血糖"><a href="#血糖" class="headerlink" title="血糖"></a>血糖</h1><p>血中的葡萄糖称为血糖。</p><p>血糖的来源包括：①食物消化、吸收；②肝内储存的糖原分解；③脂肪和蛋白质的转化。</p><p>血糖的去路包括：①氧化转变为能量；②转化为糖原储存于肝脏、肾脏和肌肉中；③转变为脂肪和蛋白质等其他营养成分加以储存。</p><p>胰岛是体内调节血糖的血糖浓度的主要器官，肝脏储存肝糖元。此外，血糖浓度还受神经、内分泌激素的调节。</p><h2 id="血糖值"><a href="#血糖值" class="headerlink" title="血糖值"></a>血糖值</h2><h3 id="空腹血糖"><a href="#空腹血糖" class="headerlink" title="空腹血糖"></a>空腹血糖</h3><p>全血血糖(手指)。血浆血糖(静脉)。</p><p>空腹血糖正常值，全血血糖：3.89～6.11 mmol/L，血浆血糖：3.90～6.90 mmol/L</p><p>空腹全血血糖 ≥ 6.70 mmol/L，血浆血糖 ≥ 7.80 mmol/L，2 次重复测定可诊断为糖尿病。</p><h3 id="餐后血糖"><a href="#餐后血糖" class="headerlink" title="餐后血糖"></a>餐后血糖</h3><p>餐后 1 小时：血糖 6.7-9.4 mmol/L。最多也不超过 11.1 mmol/L。</p><p>餐后 2 小时：血糖 ≤ 7.8 mmol/L。</p><p>餐后 3 小时：第三小时后恢复正常，各次尿糖均为阴性。</p><h3 id="孕妇血糖"><a href="#孕妇血糖" class="headerlink" title="孕妇血糖"></a>孕妇血糖</h3><p>空腹不超过 5.1 mmol/L。</p><p>餐后 1 小时不得超过 10.0 mmol/L 才是血糖的正常水平。</p><h2 id="糖尿病"><a href="#糖尿病" class="headerlink" title="糖尿病"></a>糖尿病</h2><p>糖尿病患者的空腹血糖参考值：</p><p>轻度糖尿病：7.0~8.4 mmol/L，中度糖尿病：8.4~11.1 mmol/L，重度糖尿病：大于 11.1 mmol/L。</p><h2 id="药物"><a href="#药物" class="headerlink" title="药物"></a>药物</h2><p>二甲双胍。</p><ol><li>二甲双胍片首选用单纯饮食控制及体育锻炼治疗无效的2型糖尿病，特别是肥胖的2型糖尿病。</li><li>本品与胰岛素合用，可减少胰岛素用量，防止低血糖发生。</li><li>可与磺酰脲类降血糖药合用，具协同作用。</li></ol><p>服用本品时应尽量避免饮酒。</p><h2 id="哪些食物降血糖"><a href="#哪些食物降血糖" class="headerlink" title="哪些食物降血糖"></a>哪些食物降血糖</h2><p>1.饮食宜清淡，忌辛辣，低糖、低油、低盐，按时饮食</p><p>2.可以吃：苦瓜、洋葱、山药、海带、魔芋多吃，冬瓜、芹菜、菠菜、藕等少吃</p><p>3.可以吃：柚子、苹果、橘子、樱桃、草莓、梨、桃等升糖指数比较低，西瓜吃靠近瓜皮的，不吃瓜心</p><p>4.不能吃：香蕉、山楂、柿子、枣子</p><p>5.多喝凉白开，不要憋尿</p><p>6.检测足部，保护足部</p><p>7.多做足部运动，踮脚、脚趾抓地、泡完脚后用掌心搓脚心</p><p>8.不含糖的甜味剂，比如木糖醇、三氯蔗糖、阿斯巴甜、甜菊糖苷这类甜味剂；如果含有这些的食品，可以少量食用。燕麦片</p><p>多吃：冬瓜、苦瓜、洋葱、山药、海带、魔芋、芹菜、菠菜、木耳、藕</p><h3 id="燕麦片"><a href="#燕麦片" class="headerlink" title="燕麦片"></a>燕麦片</h3><p>燕麦片是燕麦粒轧制而成，呈扁平状，直径约相当于黄豆粒，形状完整的一种食品。燕麦煮出来高度粘稠，其中 beta 葡聚糖健康成分所带来的，具有降血脂、降血糖、高饱腹的效果，长期食用具有减肥功效。此外，燕麦中含有丰富的维生素 B1、B2、E、叶酸等，可以改善血液循环、缓解生活工作带来的压力；含有的钙、磷、铁、锌、锰等矿物质也有预防骨质疏松、促进伤口愈合、防止贫血的功效。</p><h3 id="魔芋"><a href="#魔芋" class="headerlink" title="魔芋"></a>魔芋</h3><p>降血糖、降血脂、降血压、散毒、养颜、通脉、减肥、通便、开胃。</p><p>生魔芋有毒，必须煎煮 3 小时以上才可食用。</p><p>消化不良的人，每次食量不宜过多。</p><p>有皮肤病的人少食。</p><p>魔芋性寒，有伤寒感冒症状的应少食用。</p><h3 id="海带"><a href="#海带" class="headerlink" title="海带"></a>海带</h3><p>海带是一种营养价值很高的蔬菜，同时具有一定的药用价值。含有丰富的碘等矿物质元素。海带含热量低、蛋白质含量中等、矿物质丰富。研究发现，海带具有降血脂、降血糖、调节免疫、抗凝血、抗肿瘤、排铅解毒和抗氧化等多种生物功能。</p><p>吃海带后不要马上喝茶(茶含鞣酸)，也不要立刻吃酸涩的水果(酸涩水果含植物酸)。</p><p>吃多也不好，会得甲亢。</p><h3 id="山药"><a href="#山药" class="headerlink" title="山药"></a>山药</h3><p>具有滋养强壮，助消化，敛虚汗，止泻之功效，主治脾虚腹泻、肺虚咳嗽、糖尿病消渴、小便短频、遗精、妇女带下及消化不良的慢性肠炎。</p><h1 id="血压"><a href="#血压" class="headerlink" title="血压"></a>血压</h1><p>是指血液在血管内流动时作用于单位面积血管壁的侧压力，它是推动血液在血管内流动的动力。在不同血管内被分别称为动脉血压、毛细血管压和静脉血压，通常所说的血压是指体循环的动脉血压。</p><p>影响动脉血压的因素主要有五个方面：①每搏输出量；②外周阻力；③心率；④主动脉和大动脉管壁的弹性；⑤循环血量与血管容量。</p><h2 id="血压值"><a href="#血压值" class="headerlink" title="血压值"></a>血压值</h2><p>收缩压：高压。舒张压：低压。</p><p>正常成人安静状态下的血压范围较稳定，正常范围收缩压 90～139 mmHg，舒张压 60～89 mmHg，脉压 30～40 mmHg。</p><p>高血压：未使用抗高血压药的前提下，18 岁以上成人收缩压 ≥ 140 mmHg 和(或)舒张压 ≥ 90mmHg。</p><p>低血压：未使用抗高血压药的前提下，18 岁以上成人收缩压 &lt; 90 mmHg 和(或)舒张压 &lt; 60mmHg。</p><h2 id="哪些食物降血压"><a href="#哪些食物降血压" class="headerlink" title="哪些食物降血压"></a>哪些食物降血压</h2><h3 id="茄子"><a href="#茄子" class="headerlink" title="茄子"></a>茄子</h3><p>降低胆固醇，降血脂、降血压，防治胃癌，治疗慢性胃炎、肾炎水肿，防治坏血病及促进伤口愈合，清热解毒。</p><p>消化不良、容易腹泻、脾胃虚寒、便溏症状的人不宜多吃。</p><p>秋后的茄子有一定的毒素，不要吃。</p><h3 id="白萝卜"><a href="#白萝卜" class="headerlink" title="白萝卜"></a>白萝卜</h3><p>清肠排毒，促进消化，增强食欲，防癌抗癌，降血压</p><h3 id="芹菜"><a href="#芹菜" class="headerlink" title="芹菜"></a>芹菜</h3><p>降低胆固醇，降血压</p><p>【芹菜+鸡肉】容易伤元气。</p><p>【芹菜+兔肉】容易引起脱皮。</p><h1 id="BMI-指数"><a href="#BMI-指数" class="headerlink" title="BMI 指数"></a>BMI 指数</h1><p>身体质量指数，简称体质指数，又称体重.</p><p>体质指数(BMI)= 体重(kg)÷ 身高(m)^ 2</p><p>成人的BMI数值：</p><ul><li>过轻：低于 18.5</li><li>正常：18.5-23.9</li><li>过重：24-27</li><li>肥胖：28-32</li><li>非常肥胖：高于 32</li></ul><p>60 / (1.68 * 1.68) = 21.26</p><p>65 / (1.68 * 1.68) = 23.04</p><p>67 / (1.68 * 1.68) = 23.74</p><p>60 / (1.70 * 1.70) = 20.77</p><p>65 / (1.70 * 1.70) = 22.50</p><p>69 / (1.70 * 1.70) = 23.88</p><p>60 / (1.72 * 1.72) = 20.29</p><p>65 / (1.72 * 1.72) = 21.98</p><p>70 / (1.72 * 1.72) = 23.67</p><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="韭菜"><a href="#韭菜" class="headerlink" title="韭菜"></a>韭菜</h2><p>补肾，健胃，提神，降低胆固醇。</p><p>春食则香，夏食则臭。</p><p>【韭菜+菠菜】同食会有滑肠作用，容易引起腹泻。</p><p>【韭菜+牛肉】发 热动火，引起牙齿肿痛，口疮。</p><p>【韭菜+白酒】引起胃炎，胃溃肠病复发。</p><p>【韭菜+蜂蜜】同食容易引起腹泻。</p>]]></content:encoded>
      
      <comments>http://mydearest.cn/2019/%E5%81%A5%E5%BA%B7%E6%8C%87%E6%A0%87.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>EventLoop</title>
      <link>http://mydearest.cn/2019/EventLoop.html</link>
      <guid>http://mydearest.cn/2019/EventLoop.html</guid>
      <pubDate>Sun, 16 Jun 2019 04:38:46 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;描述事件队列的过程？&quot;&gt;&lt;a href=&quot;#描述事件队列的过程？&quot; class=&quot;headerlink&quot; title=&quot;描述事件队列的过程？&quot;&gt;&lt;/a&gt;描述事件队列的过程？&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;js是单线程的，会出现阻塞问题，因此有了异步队列的出现&lt;/li&gt;
&lt;li&gt;主进程同步执行任务，异步操作将添加到异步队列中&lt;/li&gt;
&lt;li&gt;等候主进程执行完毕后再执行异步队列中的操作&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="描述事件队列的过程？"><a href="#描述事件队列的过程？" class="headerlink" title="描述事件队列的过程？"></a>描述事件队列的过程？</h2><ul><li>js是单线程的，会出现阻塞问题，因此有了异步队列的出现</li><li>主进程同步执行任务，异步操作将添加到异步队列中</li><li>等候主进程执行完毕后再执行异步队列中的操作</li></ul><hr><a id="more"></a><h2 id="什么是宏任务什么是微任务？"><a href="#什么是宏任务什么是微任务？" class="headerlink" title="什么是宏任务什么是微任务？"></a>什么是宏任务什么是微任务？</h2><ul><li>异步队列中有宏任务微任务之分</li><li>一次事件循环：先运行宏任务队列中的一个，然后运行微任务队列中的所有任务。接着开始下一次循环</li></ul><h2 id="哪些是宏任务哪些是微任务？"><a href="#哪些是宏任务哪些是微任务？" class="headerlink" title="哪些是宏任务哪些是微任务？"></a>哪些是宏任务哪些是微任务？</h2><h3 id="宏任务"><a href="#宏任务" class="headerlink" title="宏任务"></a>宏任务</h3><ul><li>setTimeout</li><li>setImmediate</li><li>setIntarval</li><li>requestAnimationFrame</li><li>I/O</li><li>UI rendering</li></ul><h3 id="微任务"><a href="#微任务" class="headerlink" title="微任务"></a>微任务</h3><ul><li>process.nextTick</li><li>Promise.then</li><li>Object.observe</li><li>MutationObserver</li></ul><h3 id="练习题"><a href="#练习题" class="headerlink" title="练习题"></a>练习题</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line"><span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">3</span>)</span><br><span class="line">    resolve();</span><br><span class="line">&#125;)</span><br><span class="line">promise.then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">4</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">5</span>)</span><br><span class="line"><span class="comment">// 13542</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">&#125;,<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> intervalId = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">3</span>)</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">10</span>)</span><br><span class="line">    <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">11</span>)</span><br><span class="line">        resolve()</span><br><span class="line">    &#125;).then(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">12</span>)</span><br><span class="line">    &#125;).then(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">13</span>)</span><br><span class="line">        clearInterval(intervalId)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line"><span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">7</span>)</span><br><span class="line">&#125;).then(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">8</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">9</span>)</span><br><span class="line"><span class="comment">// 1 9 7 8 2 3 10 11 12 13</span></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://mydearest.cn/2019/EventLoop.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>前端模块化发展</title>
      <link>http://mydearest.cn/2019/%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E5%8C%96%E5%8F%91%E5%B1%95.html</link>
      <guid>http://mydearest.cn/2019/%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E5%8C%96%E5%8F%91%E5%B1%95.html</guid>
      <pubDate>Thu, 13 Jun 2019 15:37:20 GMT</pubDate>
      <description>
      
        &lt;h1 id=&quot;一、前端模块化发展简介&quot;&gt;&lt;a href=&quot;#一、前端模块化发展简介&quot; class=&quot;headerlink&quot; title=&quot;一、前端模块化发展简介&quot;&gt;&lt;/a&gt;一、前端模块化发展简介&lt;/h1&gt;&lt;h2 id=&quot;1-CommonJS&quot;&gt;&lt;a href=&quot;#1-CommonJS&quot; class=&quot;headerlink&quot; title=&quot;1.CommonJS&quot;&gt;&lt;/a&gt;1.CommonJS&lt;/h2&gt;&lt;p&gt;2009年，美国程序员Ryan Dahl创造了&lt;a href=&quot;http://nodejs.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;node.js&lt;/a&gt;项目，将javascript语言用于服务器端编程。这标志”Javascript模块化编程”正式诞生。nodeJs中的模块，一律为&lt;a href=&quot;https://en.wikipedia.org/wiki/CommonJS&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CommonJS&lt;/a&gt; 格式。&lt;/p&gt;
&lt;h3 id=&quot;1-1-语法风格&quot;&gt;&lt;a href=&quot;#1-1-语法风格&quot; class=&quot;headerlink&quot; title=&quot;1.1 语法风格&quot;&gt;&lt;/a&gt;1.1 语法风格&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//Math.js&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;.exports = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&#39;add&#39;&lt;/span&gt;: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;a, b&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; a + b;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//main.js&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt; = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;./Math&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.add(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;done&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="一、前端模块化发展简介"><a href="#一、前端模块化发展简介" class="headerlink" title="一、前端模块化发展简介"></a>一、前端模块化发展简介</h1><h2 id="1-CommonJS"><a href="#1-CommonJS" class="headerlink" title="1.CommonJS"></a>1.CommonJS</h2><p>2009年，美国程序员Ryan Dahl创造了<a href="http://nodejs.org/" target="_blank" rel="noopener">node.js</a>项目，将javascript语言用于服务器端编程。这标志”Javascript模块化编程”正式诞生。nodeJs中的模块，一律为<a href="https://en.wikipedia.org/wiki/CommonJS" target="_blank" rel="noopener">CommonJS</a> 格式。</p><h3 id="1-1-语法风格"><a href="#1-1-语法风格" class="headerlink" title="1.1 语法风格"></a>1.1 语法风格</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Math.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line"><span class="string">'add'</span>: <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main.js</span></span><br><span class="line"><span class="keyword">const</span> <span class="built_in">Math</span> = <span class="built_in">require</span>(<span class="string">'./Math'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.add(<span class="number">2</span>, <span class="number">3</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'done'</span>);</span><br></pre></td></tr></table></figure><hr><a id="more"></a><h3 id="1-2-同步加载"><a href="#1-2-同步加载" class="headerlink" title="1.2 同步加载"></a>1.2 同步加载</h3><h3 id="1-3-动态加载"><a href="#1-3-动态加载" class="headerlink" title="1.3 动态加载"></a>1.3 动态加载</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main.js</span></span><br><span class="line"><span class="keyword">const</span> <span class="built_in">Math</span> = <span class="built_in">require</span>(<span class="string">'./Ma'</span> + <span class="string">'th'</span>);<span class="comment">//动态拼接</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.add(<span class="number">2</span>, <span class="number">3</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'done'</span>);</span><br></pre></td></tr></table></figure><h3 id="1-4-浏览器不支持CommonJS规范。"><a href="#1-4-浏览器不支持CommonJS规范。" class="headerlink" title="1.4 浏览器不支持CommonJS规范。"></a>1.4 浏览器不支持CommonJS规范。</h3><p>浏览器不兼容CommonJS的根本原因，在于缺少四个Node.js环境的变量。</p><ul><li>module</li><li>exports</li><li>require</li><li>global</li></ul><p>可以使用工具进行转换，例如：<a href="http://browserify.org/" target="_blank" rel="noopener">Browserify</a></p><hr><h2 id="2-AMD"><a href="#2-AMD" class="headerlink" title="2.AMD"></a>2.AMD</h2><p>CommonJS是主要为了JS在后端的表现制定的，他是不适合前端的。</p><p><a href="http://github.com/amdjs/amdjs-api/wiki/AMD" target="_blank" rel="noopener">AMD</a>是”Asynchronous Module Definition”的缩写，意思就是”异步模块定义”。</p><p><strong>RequireJS</strong>实现了AMD规范。下面以RequireJS为例，了解一下AMD规范。</p><h3 id="2-1-语法风格"><a href="#2-1-语法风格" class="headerlink" title="2.1 语法风格"></a>2.1 语法风格</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Math.js</span></span><br><span class="line">define([], <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="string">'add'</span>: <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main.js</span></span><br><span class="line"><span class="built_in">require</span>.config(&#123;</span><br><span class="line">    paths : &#123;</span><br><span class="line">        <span class="string">"math"</span> : <span class="string">"Math"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">require</span>([<span class="string">'math'</span>], <span class="function"><span class="keyword">function</span> (<span class="params">math</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(math.add(<span class="number">2</span>, <span class="number">3</span>));</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'done'</span>);</span><br><span class="line"><span class="comment">//done</span></span><br><span class="line"><span class="comment">//5</span></span><br></pre></td></tr></table></figure><h3 id="2-2-异步加载"><a href="#2-2-异步加载" class="headerlink" title="2.2 异步加载"></a>2.2 异步加载</h3><h3 id="2-3-动态加载"><a href="#2-3-动态加载" class="headerlink" title="2.3 动态加载"></a>2.3 动态加载</h3><h3 id="2-4-依赖前置，提前执行"><a href="#2-4-依赖前置，提前执行" class="headerlink" title="2.4 依赖前置，提前执行"></a>2.4 依赖前置，提前执行</h3><hr><h2 id="3-CMD"><a href="#3-CMD" class="headerlink" title="3.CMD"></a>3.CMD</h2><p>CMD是SeaJS 在推广过程中对模块定义的规范化产出。</p><h3 id="3-1-语法风格"><a href="#3-1-语法风格" class="headerlink" title="3.1 语法风格"></a>3.1 语法风格</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// CMD</span></span><br><span class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params">require, exports, module</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="built_in">require</span>(<span class="string">'./a'</span>);</span><br><span class="line">    a.doSomething();</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="keyword">var</span> b = <span class="built_in">require</span>(<span class="string">'./b'</span>);   <span class="comment">// 依赖可以就近书写</span></span><br><span class="line">    b.doSomething();</span><br><span class="line">    <span class="comment">// ... </span></span><br><span class="line">    <span class="built_in">require</span>.async(<span class="string">'./c'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">c</span>)</span>&#123; <span class="comment">//支持异步加载</span></span><br><span class="line">        c.doSomething();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// AMD 默认推荐的是</span></span><br><span class="line">define([<span class="string">'./a'</span>, <span class="string">'./b'</span>], <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123; <span class="comment">// 依赖必须一开始就写好</span></span><br><span class="line">    a.doSomething();</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    b.doSomething();</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="3-2-AMD和CMD的区别"><a href="#3-2-AMD和CMD的区别" class="headerlink" title="3.2 AMD和CMD的区别"></a>3.2 AMD和CMD的区别</h3><p>1) <strong>对于依赖的模块，AMD 是提前执行，CMD 是延迟执行。</strong>不过 RequireJS 从 2.0 开始，也改成可以延迟执行（根据写法不同，处理方式不同）。CMD 推崇 as lazy as possible（尽可能的懒加载，也称为延迟加载，即在需要的时候才加载）。</p><p>2) <strong>CMD 推崇依赖就近，AMD 推崇依赖前置。</strong>虽然 AMD 也支持 CMD 的写法，同时还支持将 require 作为依赖项传递，但 RequireJS 的作者默认是最喜欢上面的写法，也是官方文档里默认的模块定义写法。</p><h3 id="3-3-推荐链接"><a href="#3-3-推荐链接" class="headerlink" title="3.3 推荐链接"></a>3.3 推荐链接</h3><p><a href="https://github.com/seajs/seajs/issues/277" target="_blank" rel="noopener">与 RequireJS 的异同</a></p><p><a href="https://seajs.github.io/seajs/docs/" target="_blank" rel="noopener">SeaJS官方文档</a></p><h1 id="二、Module"><a href="#二、Module" class="headerlink" title="二、Module"></a>二、Module</h1><p>ES6中Module的特点</p><ul><li>浏览器，服务器通用</li><li>静态加载</li></ul><h2 id="1-基本语法"><a href="#1-基本语法" class="headerlink" title="1. 基本语法"></a>1. 基本语法</h2><h3 id="1-1-export"><a href="#1-1-export" class="headerlink" title="1.1 export"></a>1.1 export</h3><p>一个模块就是一个独立的文件。<code>export</code>关键字用来输出该变量。可以输出变量，函数或类。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// test.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> firstName = <span class="string">'cheng'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> lastName = <span class="string">'zhang'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> age = <span class="number">18</span>;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// test.js</span></span><br><span class="line"><span class="keyword">var</span> firstName = <span class="string">'cheng'</span>;</span><br><span class="line"><span class="keyword">var</span> lastName = <span class="string">'zhang'</span>;</span><br><span class="line"><span class="keyword">var</span> age = <span class="number">18</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123; firstName, lastName, age &#125;;</span><br></pre></td></tr></table></figure><p>可以使用<code>as</code>为输出变量重命名。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> firstName = <span class="string">'cheng'</span>;</span><br><span class="line"><span class="keyword">var</span> lastName = <span class="string">'zhang'</span>;</span><br><span class="line"><span class="keyword">var</span> age = <span class="number">18</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">firstName <span class="keyword">as</span> name, </span><br><span class="line">    lastName <span class="keyword">as</span> lastname, </span><br><span class="line">    age</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>需要特别注意的是，<code>export</code><strong>命令规定的是对外的接口</strong>，必须与模块内部的变量建立一一对应关系。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 报错</span></span><br><span class="line"><span class="keyword">export</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 报错</span></span><br><span class="line"><span class="keyword">var</span> m = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">export</span> m;</span><br></pre></td></tr></table></figure><p><code>export</code>语句输出的接口，与其对应的值是<strong>动态绑定关系</strong>，即通过该接口，可以取到模块内部实时的值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> foo = <span class="string">'bar'</span>;</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> foo = <span class="string">'baz'</span>, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure><p><code>export</code>命令可以出现在模块的任何位置，只要处于<strong>模块顶层</strong>就可以。</p><h3 id="1-2-import"><a href="#1-2-import" class="headerlink" title="1.2 import"></a>1.2 import</h3><p>其他 JS 文件通过<code>import</code>命令加载模块。大括号里面的变量名，必须与被导入模块（<code>test.js</code>）对外接口的名称相同。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; firstName, lastName, age &#125; <span class="keyword">from</span> <span class="string">'./test.js'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(firstName + <span class="string">' '</span> + lastName);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//cheng zhang</span></span><br></pre></td></tr></table></figure><p><code>import</code>命令输入的变量都是<strong>只读</strong>的，因为它的本质是输入接口。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;a&#125; <span class="keyword">from</span> <span class="string">'./xxx.js'</span></span><br><span class="line"></span><br><span class="line">a = &#123;&#125;; <span class="comment">// Assignment to constant variable.</span></span><br></pre></td></tr></table></figure><p>如果<code>a</code>是一个对象，改写<code>a</code>的属性是允许的。和const一样。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;a&#125; <span class="keyword">from</span> <span class="string">'./xxx.js'</span></span><br><span class="line"></span><br><span class="line">a.foo = <span class="string">'hello'</span>; <span class="comment">// 合法操作</span></span><br></pre></td></tr></table></figure><p>可以用星号（<code>*</code>）指定一个对象，进行整体加载。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> test <span class="keyword">from</span> <span class="string">'./test.js'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(test.firstName + <span class="string">' '</span> + test.lastName);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//cheng zhang</span></span><br><span class="line"></span><br><span class="line">test.lastName = <span class="string">'yun'</span>;</span><br><span class="line"><span class="comment">//Cannot assign to read only property 'lastName' of object '[object Module]'</span></span><br><span class="line"><span class="comment">//如果是对象，可以修改对象的属性。</span></span><br></pre></td></tr></table></figure><p><code>import</code>命令<strong>具有提升效果</strong>，会提升到整个模块的头部，首先执行。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">foo();</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; foo &#125; <span class="keyword">from</span> <span class="string">'my_module'</span>;</span><br></pre></td></tr></table></figure><p>由于<code>import</code>是静态执行，所以<strong>不能使用表达式和变量</strong>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 报错</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="string">'f'</span> + <span class="string">'oo'</span> &#125; <span class="keyword">from</span> <span class="string">'my_module'</span>;</span><br></pre></td></tr></table></figure><p><code>import</code>语句<strong>会执行所加载的模块</strong>，因此可以有下面的写法。仅仅执行<code>lodash</code>模块，但是不输入任何值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'lodash'</span>;</span><br></pre></td></tr></table></figure><p>即使加载多次，也只会执行一次。也就是说，<code>import</code>语句是 <strong>Singleton 模式</strong>。</p><h3 id="1-3-单例模式解读"><a href="#1-3-单例模式解读" class="headerlink" title="1.3 单例模式解读"></a>1.3 单例模式解读</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//counter.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> counter = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">addCounter</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    counter++;</span><br><span class="line">&#125;</span><br><span class="line">addCounter();</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main.js</span></span><br><span class="line"><span class="keyword">import</span> &#123;counter, addCounter&#125; <span class="keyword">from</span> <span class="string">'./counter'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'main:'</span> + counter);</span><br><span class="line">addCounter();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'main:'</span> + counter);</span><br><span class="line"></span><br><span class="line"><span class="comment">//main:2</span></span><br><span class="line"><span class="comment">//main:3</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>module test<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"module"</span> <span class="attr">src</span>=<span class="string">'main.js'</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"module"</span> <span class="attr">src</span>=<span class="string">'main2.js'</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main2.js</span></span><br><span class="line"><span class="keyword">import</span> &#123;counter, addCounter&#125; <span class="keyword">from</span> <span class="string">'./counter'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'main2:'</span> + counter);</span><br><span class="line">addCounter();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'main2:'</span> + counter);</span><br><span class="line"></span><br><span class="line"><span class="comment">//main2:3</span></span><br><span class="line"><span class="comment">//main2:4</span></span><br></pre></td></tr></table></figure><h3 id="1-4-export-default"><a href="#1-4-export-default" class="headerlink" title="1.4 export default"></a>1.4 export default</h3><p>使用<code>export default</code>可以不用关注输出模块中的变量名。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// export-default.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'foo'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// import-default.js</span></span><br><span class="line"><span class="keyword">import</span> customName <span class="keyword">from</span> <span class="string">'./export-default'</span>;</span><br><span class="line">customName(); <span class="comment">// 'foo'</span></span><br></pre></td></tr></table></figure><p><code>import</code>命令可以为该匿名函数指定任意名字。<code>import</code>命令后面，不使用大括号。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// export-default.js</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'foo'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> foo;</span><br></pre></td></tr></table></figure><p><code>export default</code>的本质，就是输出一个叫做<code>default</code>的变量或方法。</p><p><code>imort something from ..</code>.的本质，就是<code>import {default as something} from ...</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 正确</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> a;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 错误</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">var</span> a = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 正确</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="number">42</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 报错</span></span><br><span class="line"><span class="keyword">export</span> <span class="number">42</span>;</span><br></pre></td></tr></table></figure><p>所以<code>export default</code>是比较常用的方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MyClass.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> </span>&#123; ... &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> MyClass <span class="keyword">from</span> <span class="string">'MyClass'</span>;</span><br><span class="line"><span class="keyword">let</span> o = <span class="keyword">new</span> MyClass();</span><br></pre></td></tr></table></figure><h3 id="1-5-import-amp-export混合使用"><a href="#1-5-import-amp-export混合使用" class="headerlink" title="1.5 import&amp;export混合使用"></a>1.5 import&amp;export混合使用</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> &#123; foo, bar &#125; <span class="keyword">from</span> <span class="string">'my_module'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以简单理解为</span></span><br><span class="line"><span class="keyword">import</span> &#123; foo, bar &#125; <span class="keyword">from</span> <span class="string">'my_module'</span>;</span><br><span class="line"><span class="keyword">export</span> &#123; foo, bar &#125;;</span><br></pre></td></tr></table></figure><p>上面代码中，<code>export</code>和<code>import</code>语句可以结合在一起，写成一行。但需要注意的是，写成一行以后，<code>foo</code>和<code>bar</code><strong>实际上并没有被导入当前模块</strong>，只是相当于对外转发了这两个接口，导致<strong>当前模块不能直接使用</strong><code>foo</code>和<code>bar</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 接口改名</span></span><br><span class="line"><span class="keyword">export</span> &#123; fooName <span class="keyword">as</span> newName &#125; <span class="keyword">from</span> <span class="string">'my_module'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//具名接口改为默认接口</span></span><br><span class="line"><span class="keyword">export</span> &#123; foo <span class="keyword">as</span> <span class="keyword">default</span> &#125; <span class="keyword">from</span> <span class="string">'./someModule'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//接口也可以改名为具名接口</span></span><br><span class="line"><span class="keyword">export</span> &#123; <span class="keyword">default</span> <span class="keyword">as</span> es6 &#125; <span class="keyword">from</span> <span class="string">'./someModule'</span>;</span><br></pre></td></tr></table></figure><h3 id="1-6-模块的继承"><a href="#1-6-模块的继承" class="headerlink" title="1.6 模块的继承"></a>1.6 模块的继承</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//calculator.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//calculatorPlus.js</span></span><br><span class="line"><span class="keyword">export</span> * <span class="keyword">from</span> <span class="string">'./calculator.js'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">multiply</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a * b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main.js</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> cal <span class="keyword">from</span> <span class="string">'./calculatorPlus.js'</span>;</span><br><span class="line"></span><br><span class="line">cal.add(<span class="number">2</span>, <span class="number">3</span>);<span class="comment">//5</span></span><br><span class="line">cal.multiply(<span class="number">2</span>, <span class="number">3</span>);<span class="comment">//6</span></span><br></pre></td></tr></table></figure><h3 id="1-7-import"><a href="#1-7-import" class="headerlink" title="1.7 import()"></a>1.7 import()</h3><p><code>import()</code>提案是为了解决<code>import</code><strong>动态加载</strong>，和<strong>不能写在代码块中</strong>的问题。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>(a + <span class="string">'.js'</span>)</span><br><span class="line">.then(...);</span><br><span class="line">      </span><br><span class="line"><span class="keyword">import</span>(f())</span><br><span class="line">.then(...);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (condition) &#123;</span><br><span class="line">  <span class="keyword">import</span>(<span class="string">'moduleA'</span>).then(...);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="keyword">import</span>(<span class="string">'moduleB'</span>).then(...);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-Module补充"><a href="#2-Module补充" class="headerlink" title="2. Module补充"></a>2. Module补充</h2><h3 id="2-1-浏览器加载"><a href="#2-1-浏览器加载" class="headerlink" title="2.1 浏览器加载"></a>2.1 浏览器加载</h3><p>html中加载 ES6 模块，也使用<code>&lt;script&gt;</code>标签，但是要加入<code>type=&quot;module&quot;</code>属性。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"module"</span> <span class="attr">src</span>=<span class="string">"./myModule.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--等同于--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"module"</span> <span class="attr">src</span>=<span class="string">"./myModule.js"</span> <span class="attr">defer</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"module"</span> <span class="attr">src</span>=<span class="string">"./myModule.js"</span> <span class="attr">async</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p><code>defer</code>:要等到整个页面在内存中正常渲染结束（DOM 结构完全生成，以及其他脚本执行完成），才会执行。保证执行顺序。</p></li><li><p><code>async</code>:一旦下载完，渲染引擎就会中断渲染，执行这个脚本以后，再继续渲染。不能保证执行顺序。</p></li></ul><p>对于外部的模块脚本，要注意：</p><ul><li>代码是在模块作用域之中运行，而不是在全局作用域运行。模块内部的顶层变量，外部不可见。</li><li>模块脚本自动采用严格模式，不管有没有声明<code>use strict</code>。</li><li>模块之中，可以使用<code>import</code>命令加载其他模块（<code>.js</code>后缀不可省略，需要提供绝对 URL 或相对 URL），也可以使用<code>export</code>命令输出对外接口。</li><li><strong>模块之中，顶层的<code>this</code>关键字返回<code>undefined</code>，而不是指向<code>window</code>。也就是说，在模块顶层使用<code>this</code>关键字，是无意义的</strong>。</li><li>同一个模块如果加载多次，将只执行一次。</li></ul><h3 id="2-2-循环加载"><a href="#2-2-循环加载" class="headerlink" title="2.2 循环加载"></a>2.2 循环加载</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// a.js</span></span><br><span class="line"><span class="keyword">import</span> &#123;bar&#125; <span class="keyword">from</span> <span class="string">'./b'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'a.js'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(bar);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> foo = <span class="string">'foo'</span>;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// b.js</span></span><br><span class="line"><span class="keyword">import</span> &#123;foo&#125; <span class="keyword">from</span> <span class="string">'./a'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'b.js'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(foo);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> bar = <span class="string">'bar'</span>;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>module test<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"module"</span> <span class="attr">src</span>=<span class="string">'a.js'</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Cannot access 'foo' before initialization--&gt;</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// a.js</span></span><br><span class="line"><span class="keyword">import</span> &#123;bar&#125; <span class="keyword">from</span> <span class="string">'./b'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'a.js'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(bar());</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="string">'foo'</span> &#125;</span><br><span class="line"><span class="keyword">export</span> &#123;foo&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// b.js</span></span><br><span class="line"><span class="keyword">import</span> &#123;foo&#125; <span class="keyword">from</span> <span class="string">'./a'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'b.js'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(foo());</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="string">'bar'</span> &#125;</span><br><span class="line"><span class="keyword">export</span> &#123;bar&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//b.mjs</span></span><br><span class="line"><span class="comment">//foo</span></span><br><span class="line"><span class="comment">//a.mjs</span></span><br><span class="line"><span class="comment">//bar</span></span><br></pre></td></tr></table></figure><p>因为函数具有提升作用。</p><h3 id="2-3-ES6模块和CommonJS模块的差异"><a href="#2-3-ES6模块和CommonJS模块的差异" class="headerlink" title="2.3 ES6模块和CommonJS模块的差异"></a>2.3 ES6模块和CommonJS模块的差异</h3><ol><li><p><code>import</code>和<code>export</code>是关键字，<code>require</code>不是。</p></li><li><p>CommonJS 模块输出的是一个值的拷贝，ES6 模块输出的是值的引用。(详情见上方【单例模式解读】)</p></li><li><p>CommonJS 模块是运行时加载，ES6 模块是编译时输出接口。</p><pre><code>   因为 CommonJS 加载的是一个对象（即`module.exports`属性），该对象只有在脚本运行完才会生成。而 ES6 模块不是对象，它的对外接口只是一种静态定义，在代码静态解析阶段就会生成。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//counter.js</span></span><br><span class="line"><span class="keyword">let</span> counter = <span class="number">2</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addCounter</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    counter++;</span><br><span class="line">&#125;</span><br><span class="line">addCounter();</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    counter,</span><br><span class="line">    addCounter: addCunter</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main.js</span></span><br><span class="line"><span class="keyword">var</span> counter = <span class="built_in">require</span>(<span class="string">'./addCounter.js'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'main:'</span> + counter.counter);<span class="comment">//3</span></span><br><span class="line">counter.addCounter();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'main:'</span> + counter.counter);<span class="comment">//3</span></span><br></pre></td></tr></table></figure></code></pre></li><li><p><strong><code>this</code>指向不同</strong>。ES6 模块之中，顶层的<code>this</code>指向<code>undefined</code>；CommonJS 模块的顶层<code>this</code>指向当前模块，这是两者的一个重大差异。</p></li></ol>]]></content:encoded>
      
      <comments>http://mydearest.cn/2019/%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E5%8C%96%E5%8F%91%E5%B1%95.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>PWA手记</title>
      <link>http://mydearest.cn/2019/PWA%E6%89%8B%E8%AE%B0.html</link>
      <guid>http://mydearest.cn/2019/PWA%E6%89%8B%E8%AE%B0.html</guid>
      <pubDate>Sun, 26 May 2019 13:18:30 GMT</pubDate>
      <description>
      
        &lt;p&gt;PWA作为2018最火热的技术概念之一，对提升Web应用的安全、性能和体验有着很大的意义，非常值得我们去了解与学习。&lt;/p&gt;
&lt;p&gt;PWA是Progressive Web App的英文缩写，也就是渐进式增强WEB应用。目的就是在移动端利用提供的标准化框架，在网页应用中实现和原生应用相近的用户体验。&lt;/p&gt;
&lt;p&gt;一个 PWA 应用首先是一个网页, 可以通过 Web 技术编写出一个网页应用. 随后添加上 App Manifest 和 Service Worker 来实现 PWA 的&lt;/p&gt;
&lt;p&gt;安装和离线等功能。&lt;/p&gt;
&lt;p&gt;我们需要理解的是，PWA不是某一项技术，或者某一个新的产物；而是一系列Web技术与标准的集合与应用。通过应用这些新的技术与标准，可以从安&lt;/p&gt;
&lt;h2 id=&quot;全、性能和体验三个方面，优化我们的Web-App。所以，其实PWA本质上依然是一个Web-App。&quot;&gt;&lt;a href=&quot;#全、性能和体验三个方面，优化我们的Web-App。所以，其实PWA本质上依然是一个Web-App。&quot; class=&quot;headerlink&quot; title=&quot;全、性能和体验三个方面，优化我们的Web App。所以，其实PWA本质上依然是一个Web App。&quot;&gt;&lt;/a&gt;全、性能和体验三个方面，优化我们的Web App。所以，其实PWA本质上依然是一个Web App。&lt;/h2&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>PWA作为2018最火热的技术概念之一，对提升Web应用的安全、性能和体验有着很大的意义，非常值得我们去了解与学习。</p><p>PWA是Progressive Web App的英文缩写，也就是渐进式增强WEB应用。目的就是在移动端利用提供的标准化框架，在网页应用中实现和原生应用相近的用户体验。</p><p>一个 PWA 应用首先是一个网页, 可以通过 Web 技术编写出一个网页应用. 随后添加上 App Manifest 和 Service Worker 来实现 PWA 的</p><p>安装和离线等功能。</p><p>我们需要理解的是，PWA不是某一项技术，或者某一个新的产物；而是一系列Web技术与标准的集合与应用。通过应用这些新的技术与标准，可以从安</p><h2 id="全、性能和体验三个方面，优化我们的Web-App。所以，其实PWA本质上依然是一个Web-App。"><a href="#全、性能和体验三个方面，优化我们的Web-App。所以，其实PWA本质上依然是一个Web-App。" class="headerlink" title="全、性能和体验三个方面，优化我们的Web App。所以，其实PWA本质上依然是一个Web App。"></a>全、性能和体验三个方面，优化我们的Web App。所以，其实PWA本质上依然是一个Web App。</h2><a id="more"></a><h2 id="核心技术"><a href="#核心技术" class="headerlink" title="核心技术"></a>核心技术</h2><ul><li><p>Service Worker （可以理解为服务工厂）</p></li><li><p>Manifest （应用清单）</p></li><li><p>Push Notification（推送通知）</p></li></ul><h2 id="service-worker-web-worker"><a href="#service-worker-web-worker" class="headerlink" title="service worker (web worker)"></a>service worker (web worker)</h2><ul><li>一个独立的 worker 线程，独立于当前网页进程，有自己独立的 worker context。</li><li>一旦被 install，就永远存在，除非被 uninstall</li><li>需要的时候可以直接唤醒，不需要的时候自动睡眠（有效利用资源）</li><li>可编程拦截代理请求和返回，缓存文件，缓存的文件可以被网页进程取到（包括网络离线状态）</li><li>不能直接操作DOM出于安全的考虑，必须在 HTTPS 环境下才能工作</li><li>异步实现，内部大都是通过 Promise 实现</li></ul><p>web workerweb worker  是运行在后台的JavaScript，独立于其他脚本，不会影响页面的性能。</p><p>浏览器一般有三类 web Worker</p><ul><li><p>Dedicated Worker ：专用的 worker，只能被创建它的 JS 访问，创建它的页面关闭，它的生命周期就结束了。</p></li><li><p>Shared  Worker ：共享的 worker，可以被同一域名下的 JS 访问，关联的页面都关闭时，它的生命周期就结束了。</p></li><li><p>Service Worker ：是事件驱动的 worker，生命周期与页面无关，关联页面未关闭时，它也可以退出，没有关联页面时，它也可以启动。SW 作用于浏览器与服务器之间，相当于一个代理服务器。</p></li></ul><h3 id="Service-Worker生命周期"><a href="#Service-Worker生命周期" class="headerlink" title="Service Worker生命周期"></a>Service Worker生命周期</h3><p>看成红绿灯红 下载和解析黄 正在执行 还没准备好绿 随时可使用且第一次加载页面 sw还没有激活 不会处理任何请求 只有安装和激活后才能使用。（刷新页面和跳转新页面才会生效）</p><ul><li>步骤</li></ul><ol><li>用户导航到url</li><li>注册sw 过程中浏览器下载解析执行sw</li><li>一旦执行激活安装时间</li><li>安装成功就可以控制客户端功能事件</li></ol><h3 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h3><ul><li>self: 表示 Service Worker 作用域, 也是全局变量SW 的默认作用域为基于当前文件 URL 的 ./。意思就是如果你在//example.com/foo/bar.js里注册了一个 SW，那么它默认的作用域为 //example.com/foo/。</li></ul><p>通过查看navigator.serviceWorker.controller是否为 null 来查看一个client是否被 SW 控制。</p><ul><li>caches: 表示缓存</li><li>skipWaiting: 表示强制当前处在 waiting 状态的脚本进入 activate 状态（为了在页面更新的过程当中，新的 SW 脚本能够立刻激活和生效。无需刷新或者跳转新页面。）</li><li>clients: 表示 Service Worker 接管的页面</li><li>clients.claim() 在 activate 事件回调中执行该方法表示取得页面的控制权, 这样之后打开页面都会使用版本更新的缓存。旧的 Service Worker 脚本不再控制着页面，之后会被停止。</li></ul><h3 id="Service-Worker-注册"><a href="#Service-Worker-注册" class="headerlink" title="Service Worker 注册"></a>Service Worker 注册</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 检查当前浏览器是否支持sw</span></span><br><span class="line"><span class="keyword">if</span> (<span class="string">'serviceWorker'</span> <span class="keyword">in</span> navigator) &#123;</span><br><span class="line">    <span class="comment">// 如果支持开始注册sw</span></span><br><span class="line">    navigator.serviceWorker</span><br><span class="line">        .register(<span class="string">'./service-worker.js'</span>)</span><br><span class="line">        .then(<span class="function"><span class="params">registration</span> =&gt;</span> &#123; </span><br><span class="line">            <span class="built_in">console</span>,log(<span class="string">'注册成功'</span>, registration)</span><br><span class="line">            <span class="comment">// 消息推送 获取授权</span></span><br><span class="line">            <span class="comment">// Notification.requestPermission(function(result) &#123;</span></span><br><span class="line">            <span class="comment">//         console.log('result', result)</span></span><br><span class="line">            <span class="comment">//         if (result === 'granted') &#123;</span></span><br><span class="line">            <span class="comment">//             registration.showNotification('Vibration Sample', &#123;</span></span><br><span class="line">            <span class="comment">//                 body: 'Buzz! Buzz!',</span></span><br><span class="line">            <span class="comment">//                 icon: './img/mario.png',</span></span><br><span class="line">            <span class="comment">//                 vibrate: [200, 100, 200, 100, 200, 100, 200],</span></span><br><span class="line">            <span class="comment">//                 tag: 'vibration-sample'</span></span><br><span class="line">            <span class="comment">//             &#125;);</span></span><br><span class="line">            <span class="comment">//         &#125; else &#123;</span></span><br><span class="line">            <span class="comment">//             alert(result);</span></span><br><span class="line">            <span class="comment">//         &#125;     </span></span><br><span class="line">            <span class="comment">// &#125;);</span></span><br><span class="line">            <span class="comment">// 手动更新</span></span><br><span class="line">            <span class="comment">// registration.update();</span></span><br><span class="line">        &#125;)</span><br><span class="line">        .catch(<span class="function"><span class="params">err</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'注册失败'</span>,err));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 查看是否注册成功可以在 PC 上chrome 浏览器, 输入 chrome://inspect/#service-workers</span></span><br></pre></td></tr></table></figure><h3 id="Service-Worker-安装（处理静态缓存）"><a href="#Service-Worker-安装（处理静态缓存）" class="headerlink" title="Service Worker 安装（处理静态缓存）"></a>Service Worker 安装（处理静态缓存）</h3><ol><li><p>这个状态发生在 Service Worker 注册之后，是 sw 触发的第一个事件并且只触发一次。表示开始安装，触发 install 事件回调指定一些静态资源进行离线缓存。修改你的 SW 后，浏览器会认为这是一个新的 SW，从而会再触发这个新 SW 的install事件。</p></li><li><p>e.waitUntil() 传入一个 Promise 为参数，等到该 Promise 为 resolve 状态为止。如果 Promise 被拒绝，则安装失败，SW会进入 Redundant（ 废弃 ）状态。确保 Service Worker 不会在 waitUntil() 里面的代码执行完毕之前安装完成。</p></li><li><p>sw 在安装成功和激活之前不会触发任何的 fetch 或 push 等事件。</p></li><li><p>默认情况下，页面的请求（fetch）不会通过 SW，除非它本身是通过 SW 获取的，也就是说，在安装 SW 之后，需要刷新页面才能有效果。</p></li><li><p>clients.claim()可以改变这种默认行为。</p></li></ol><p>localStorage 的用法和 Service Worker cache 的用法很相似，但是由于 localStorage 是同步的用法，所以不允许在 Service Worker 中使用。 IndexedDB 也可以在 Service Worker 内做数据存储。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 首先定义需要缓存的路径, 以及需要缓存的静态文件的列表。</span></span><br><span class="line"><span class="keyword">var</span> cacheName = <span class="string">'minimal-pwa-1'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> cacheList = [</span><br><span class="line">  <span class="string">'/'</span>,</span><br><span class="line">  <span class="string">"index.html"</span>,</span><br><span class="line">  <span class="string">"main.css"</span>,</span><br><span class="line">  <span class="string">"e.png"</span></span><br><span class="line">]</span><br><span class="line">self.addEventListener(<span class="string">'install'</span>, e =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"安装事件，注册后触发只触发一次"</span>);</span><br><span class="line">    e.waitUntil(</span><br><span class="line">        <span class="comment">// 使用指定的缓存名来打开缓存</span></span><br><span class="line">        caches.open(cacheName)</span><br><span class="line">            .then(<span class="function"><span class="params">cache</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"加入缓存"</span>, cacheList);</span><br><span class="line">                <span class="keyword">return</span> cache.addAll(cacheList);</span><br><span class="line">            &#125;)</span><br><span class="line">            <span class="comment">// 可加</span></span><br><span class="line">            .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'跳过等待'</span>)</span><br><span class="line">                <span class="keyword">return</span> self.skipWaiting()</span><br><span class="line">            &#125;)</span><br><span class="line">    );</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// self.oninstall = e =&gt; &#123;&#125;</span></span><br></pre></td></tr></table></figure><h3 id="Service-Worker-激活（更新缓存）"><a href="#Service-Worker-激活（更新缓存）" class="headerlink" title="Service Worker 激活（更新缓存）"></a>Service Worker 激活（更新缓存）</h3><p>在这个状态下没有被其他的 Service Worker 控制的客户端，允许当前的 worker 完成安装，并且清除了其他的 worker 以及关联缓存的旧缓存资源，等待新的 Service Worker 线程被激活。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 激活 缓存更新</span></span><br><span class="line">self.addEventListener(<span class="string">'activate'</span>, e =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'[ServiceWorker] Activate'</span>);</span><br><span class="line">    e.waitUntil(</span><br><span class="line">        caches.keys()</span><br><span class="line">            .then(<span class="function"><span class="params">keyList</span> =&gt;</span> <span class="built_in">Promise</span>.all(keyList.map(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (key !== cacheName) &#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">'移除旧缓存'</span>, key);</span><br><span class="line">                    <span class="keyword">return</span> caches.delete(key);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)))</span><br><span class="line">            <span class="comment">// 可加</span></span><br><span class="line">            .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> self.clients.matchAll()</span><br><span class="line">                .then(<span class="function"><span class="params">clients</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (clients &amp;&amp; clients.length) &#123;</span><br><span class="line">                    clients.forEach(<span class="function">(<span class="params">v,i</span>) =&gt;</span> &#123;</span><br><span class="line">                        <span class="comment">// 发送字符串'sw.update'</span></span><br><span class="line">                        v.postMessage(<span class="string">'sw '</span>+i+<span class="string">' update'</span>)</span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;)</span><br><span class="line">            <span class="comment">// return self.clients.claim();</span></span><br><span class="line">    );</span><br><span class="line">    <span class="comment">// return self.clients.claim();</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="已激活-（activated）"><a href="#已激活-（activated）" class="headerlink" title="已激活 （activated）"></a>已激活 （activated）</h3><p>在这个状态会处理 activate 事件回调 (提供了更新缓存策略的机会)。并可以处理功能性的事件 fetch (请求)、 sync (后台同步)、 push (推送)。</p><h3 id="废弃-（redunant）"><a href="#废弃-（redunant）" class="headerlink" title="废弃 （redunant）"></a>废弃 （redunant）</h3><p>这个状态表示一个 Service Worker 的生命周期结束。</p><p>这里特别说明一下，进入废弃 (redundant) 状态的原因可能为这几种：</p><ul><li><p>安装 (installing) 失败</p></li><li><p>激活 (activating) 失败</p></li><li><p>新版本的 Service Worker 替换了它并成为激活状态</p></li></ul><h3 id="处理动态缓存"><a href="#处理动态缓存" class="headerlink" title="处理动态缓存"></a>处理动态缓存</h3><p>监听捕获 fetch 事件，在 caches 中去 match 事件的 request ，如果 response 不为空的话就返回 response ，最后返回 fetch 请求，在 fetch 事件中我们也可以手动生成 response 返回给页面。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 捕获请求</span></span><br><span class="line">self.addEventListener(<span class="string">'fetch'</span>, e =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'fetch事件'</span>, e.request.url);</span><br><span class="line">    e.respondWith(</span><br><span class="line">        caches.match(e.request)</span><br><span class="line">            .then(<span class="function"><span class="params">response</span> =&gt;</span> response || fetch(e.request))</span><br><span class="line">    );</span><br><span class="line">    <span class="comment">// e.respondWith(</span></span><br><span class="line">    <span class="comment">//     caches.match(e.request)</span></span><br><span class="line">    <span class="comment">//         .then(response =&gt; &#123;</span></span><br><span class="line">    <span class="comment">//             if(response) &#123;</span></span><br><span class="line">    <span class="comment">//                 return response; // || fetch(e.request)</span></span><br><span class="line">    <span class="comment">//             &#125;</span></span><br><span class="line">    <span class="comment">//             // 新的内容添加到缓存中</span></span><br><span class="line">    <span class="comment">//             // 复制请求 请求是一个流 只能使用一次</span></span><br><span class="line">    <span class="comment">//             var requestToCache = e.request.clone();</span></span><br><span class="line">    <span class="comment">//             return fetch(requestToCache).then(function(response)&#123;</span></span><br><span class="line">    <span class="comment">//                 if(!response || response.status !==200) &#123;</span></span><br><span class="line">    <span class="comment">//                     // 错误信息立即返回</span></span><br><span class="line">    <span class="comment">//                     return response;</span></span><br><span class="line">    <span class="comment">//                 &#125;</span></span><br><span class="line">    <span class="comment">//                 var responseToCache = response.clone();</span></span><br><span class="line">    <span class="comment">//                 // 将响应添加到缓存中</span></span><br><span class="line">    <span class="comment">//                 caches.open(cacheName).then(function (cache)&#123;</span></span><br><span class="line">    <span class="comment">//                     cache.put(requestToCache, responseToCache);</span></span><br><span class="line">    <span class="comment">//                 &#125;)</span></span><br><span class="line">    <span class="comment">//             &#125;)</span></span><br><span class="line">    <span class="comment">//         &#125;) </span></span><br><span class="line">    <span class="comment">// );</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 自定义响应</span></span><br><span class="line">    <span class="comment">// e.respondWith(new Response('&lt;p&gt;it is a response&lt;/p&gt;', &#123;</span></span><br><span class="line">    <span class="comment">//     headers:&#123;</span></span><br><span class="line">    <span class="comment">//         'Content-Type': 'text/html'</span></span><br><span class="line">    <span class="comment">//     &#125;</span></span><br><span class="line">    <span class="comment">// &#125;))</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>通过存放到 Cache Storage 中，我们下次访问的时候如果是弱网或者断网的情况下，就可以不走网络请求，而直接就能将本地缓存的内容展示给用户，优化用户的弱网及断网体验。</p><p>两种方式的比较</p><ul><li><p>on install 的优点是第二次访问即可离线，缺点是需要将需要缓存的 URL 在编译时插入到脚本中，增加代码量和降低可维护性；</p></li><li><p>on fetch 的优点是无需更改编译过程，也不会产生额外的流量，缺点是需要多一次访问才能离线可用。</p></li></ul><h3 id="Service-Worker-调试"><a href="#Service-Worker-调试" class="headerlink" title="Service Worker 调试"></a>Service Worker 调试</h3><ul><li><p>借助 Chrome 浏览器 debug使用 Chrome 浏览器，可以通过进入控制台 Application -&gt; Service Workers 面板查看和调试。</p></li><li><p>查看缓存Service Worker 使用 Cache API 缓存只读资源，可以在 Chrome DevTools 上查看缓存的资源列表。</p></li></ul><p>http缓存：由服务器告知资源何时缓存和何时过期。sw缓存是对http缓存的增强</p><h3 id="Service-Worker-网络跟踪"><a href="#Service-Worker-网络跟踪" class="headerlink" title="Service Worker 网络跟踪"></a>Service Worker 网络跟踪</h3><p>经过 Service Worker 的 fetch 请求 Chrome 都会在 Chrome DevTools Network 标签页里标注出来，其中：</p><ul><li><p>来自 Service Worker 的内容会在 Size 字段中标注为 from ServiceWorker</p></li><li><p>Service Worker 发出的请求会在 Name 字段中添加 ‘齿轮’ 图标。</p></li></ul><h3 id="Service-Worker-功能性事件"><a href="#Service-Worker-功能性事件" class="headerlink" title="Service Worker 功能性事件"></a>Service Worker 功能性事件</h3><ul><li><p>fetch (请求)：当浏览器在当前指定的 scope 下发起请求时，会触发 fetch 事件，并得到传有 response 参数的回调函数，回调中就可以做各种代理缓存的事情了。</p></li><li><p>push (推送)：push 事件是为推送准备的。不过首先需要了解一下 Notification API 和 PUSH API。通过 PUSH API，当订阅了推送服务后，可以使用推送方式唤醒 Service Worker 以响应来自系统消息传递服务的消息，即使用户已经关闭了页面。</p></li><li><p>sync (后台同步)：sync 事件由 background sync (后台同步)发出。background sync 配合 Service Worker 推出的 API，用于为 Service Worker 提供一个可以实现注册和监听同步处理的方法。但它还不在 W3C Web API 标准中。在 Chrome 中这也只是一个实验性功能，需要访问 chrome://flags/#enable-experimental-web-platform-features ，开启该功能，然后重启生效。</p></li></ul><h2 id="APP-Manifest-与添加到主屏幕"><a href="#APP-Manifest-与添加到主屏幕" class="headerlink" title="APP Manifest 与添加到主屏幕"></a>APP Manifest 与添加到主屏幕</h2><p>允许将站点添加至主屏幕，是 PWA 提供的一项重要功能</p><ol><li><p>定义 manifest.json 配置添加到主屏幕功能</p></li><li><p>创建 manifest.json 文件，并将它放到你的站点目录中</p></li><li><p>在所有页面引入该文件</p></li><li><p>可以在 Service Worker 中监听 beforeinstallprompt 事件做一些应用内的行为处理</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123; </span><br><span class="line">    <span class="string">"name"</span> : <span class="string">"Minimal PWA"</span> , </span><br><span class="line">    <span class="string">"short_name"</span> : <span class="string">"PWA Demo"</span> , </span><br><span class="line">    <span class="string">"display"</span> : <span class="string">"standalone"</span> , </span><br><span class="line">    <span class="string">"start_url"</span> : <span class="string">"/"</span> , </span><br><span class="line">    <span class="string">"theme_color"</span> : <span class="string">"#313131"</span> , </span><br><span class="line">    <span class="string">"background_color"</span> : <span class="string">"#313131"</span> , </span><br><span class="line">    <span class="string">"icons"</span> : [ </span><br><span class="line">        &#123; </span><br><span class="line">        <span class="string">"src"</span> : <span class="string">"e.png"</span> , </span><br><span class="line">        <span class="string">"sizes"</span> : <span class="string">"256x256"</span> , </span><br><span class="line">        <span class="string">"type"</span> : <span class="string">"image/png"</span> </span><br><span class="line">        &#125; </span><br><span class="line">    ] </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>name ：定义此PWA的名称。</p></li><li><p>icons ：定义一系列的图标以适应不同型号的设备。</p></li><li><p>theme_color ：主题颜色（影响手机状态栏颜色）。</p></li><li><p>background_color ：背景颜色。</p></li><li><p>start_url ：启动地址。由于PWA实际上是一个web页面，所以需要定义PWA 在启动时应该访问哪个地址。</p></li><li><p>display ：”standalone”表示其以类似原生APP的全屏方式启动。</p></li></ul><h3 id="IOS-Safari-设置"><a href="#IOS-Safari-设置" class="headerlink" title="IOS Safari 设置"></a>IOS Safari 设置</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">应用图标： </span><br><span class="line">&lt;link rel=<span class="string">"apple-touch-icon"</span> href=<span class="string">"apple-touch-icon.png"</span> &gt; </span><br><span class="line">启动画面： </span><br><span class="line">&lt;link rel=<span class="string">"apple-touch-startup-image"</span> href=<span class="string">"launch.png"</span> &gt; </span><br><span class="line">应用名称： </span><br><span class="line">&lt;meta name=<span class="string">"apple-mobile-web-app-title"</span> content=<span class="string">"Todo-PWA"</span> &gt; </span><br><span class="line">全屏效果： </span><br><span class="line">&lt;meta name=<span class="string">"apple-mobile-web-app-capable"</span> content=<span class="string">"yes"</span> &gt; </span><br><span class="line">设置状态栏颜色： </span><br><span class="line">&lt;meta name=<span class="string">"apple-mobile-web-app-status-bar-style"</span> content=<span class="string">"#fff"</span> &gt;</span><br></pre></td></tr></table></figure><h3 id="window10-贴片图标"><a href="#window10-贴片图标" class="headerlink" title="window10 贴片图标"></a>window10 贴片图标</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta name=<span class="string">"msapplication-TileImage"</span> content=<span class="string">"images/logo/144x144.png"</span> &gt; </span><br><span class="line">&lt;meta name=<span class="string">"msapplication-TileColor"</span> content=<span class="string">"#2F3BA2"</span> &gt;</span><br></pre></td></tr></table></figure><h3 id="在线生成-manifest-json-文件"><a href="#在线生成-manifest-json-文件" class="headerlink" title="在线生成 manifest.json 文件"></a>在线生成 manifest.json 文件</h3><ul><li><p><a href="https://app-manifest.firebaseapp.com/" target="_blank" rel="noopener">https://app-manifest.firebaseapp.com/</a></p></li><li><p><a href="https://tomitm.github.io/appmanifest/" target="_blank" rel="noopener">https://tomitm.github.io/appmanifest/</a></p></li><li><p><a href="https://brucelawson.github.io/manifest/" target="_blank" rel="noopener">https://brucelawson.github.io/manifest/</a></p></li></ul><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol><li><p><a href="https://developer.mozilla.org/en-US/docs/Web/Manifest" target="_blank" rel="noopener">Web App Manifest</a></p></li><li><p><a href="https://lavas.baidu.com/doc/engage-retain-users/add-to-home-screen/introduction" target="_blank" rel="noopener">manifest.json 简介</a></p></li></ol><h2 id="App-Shell"><a href="#App-Shell" class="headerlink" title="App Shell"></a>App Shell</h2><p>App Shell，顾名思义，就是<code>壳</code>的意思，也可以理解为<code>骨架屏</code>，说白了就是在内容尚未加载完全的时候，优先展示页面的结构、占位图、主题和背景颜色等，它们都是一些被强缓存的html，css和javascript。</p><p>要用好App Shell，就必须保证这部分的资源被Service Worker缓存起来。我们在组织代码的时候，可以优先完成App Shell的部分，然后把这部分代码分别打包构建出来。</p><h3 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h3><ul><li><p>始终快速的可靠性能</p></li><li><p>如同本机一样的交互</p></li><li><p>数据的经济使用</p></li></ul><h3 id="参考资料-1"><a href="#参考资料-1" class="headerlink" title="参考资料"></a>参考资料</h3><ol><li><a href="https://developers.google.cn/web/fundamentals/architecture/app-shell" target="_blank" rel="noopener">App Shell 模型</a></li></ol><h2 id="使用Offine-Plugin把网站升级成-PWA"><a href="#使用Offine-Plugin把网站升级成-PWA" class="headerlink" title="使用Offine-Plugin把网站升级成 PWA"></a>使用Offine-Plugin把网站升级成 PWA</h2><h3 id="参考资料-2"><a href="#参考资料-2" class="headerlink" title="参考资料"></a>参考资料</h3><ol><li><p><a href="https://github.com/NekR/offline-plugin" target="_blank" rel="noopener">offline-plugin</a></p></li><li><p><a href="https://offline-plugin.now.sh" target="_blank" rel="noopener">offline-plugin DEMO</a></p></li><li><p><a href="https://segmentfault.com/a/1190000010669126" target="_blank" rel="noopener">使用offline-plugin搭配webpack轻松实现PWA</a></p></li></ol><h2 id="与PWA相关的开源框架"><a href="#与PWA相关的开源框架" class="headerlink" title="与PWA相关的开源框架"></a>与PWA相关的开源框架</h2><h3 id="Lavas"><a href="#Lavas" class="headerlink" title="Lavas"></a>Lavas</h3><p>基于 Vue 的 PWA 解决方案，帮助开发者快速搭建 PWA 应用，解决接入 PWA 的各种问题</p><ol><li><p><a href="https://lavas.baidu.com/" target="_blank" rel="noopener">Lavas 官 网</a></p></li><li><p><a href="https://github.com/lavas-project/lavas" target="_blank" rel="noopener">Lavas GitHub</a></p></li></ol><h3 id="加载库"><a href="#加载库" class="headerlink" title="加载库"></a>加载库</h3><p>importScripts() // sw里的全局函数<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">importScripts(<span class="string">'workbox-sw.prod.v1.1.0.js'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> workboxSW = <span class="keyword">new</span> self.WorkboxSW();</span><br><span class="line"></span><br><span class="line">workbox.precaching([</span><br><span class="line">  <span class="comment">// 注册成功后要立即缓存的资源列表</span></span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// html的缓存策略</span></span><br><span class="line">workbox.routing.registerRoute(</span><br><span class="line">  <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">''</span>.*\.html<span class="string">'),</span></span><br><span class="line"><span class="string">  workbox.strategies.networkFirst()</span></span><br><span class="line"><span class="string">);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">workbox.routing.registerRoute(</span></span><br><span class="line"><span class="string">  new RegExp('</span>.*\.(?:js|css)<span class="string">'),</span></span><br><span class="line"><span class="string">  workbox.strategies.cacheFirst()</span></span><br><span class="line"><span class="string">);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">workbox.routing.registerRoute(</span></span><br><span class="line"><span class="string">  new RegExp('</span>https:<span class="comment">//your\.cdn\.com/'),</span></span><br><span class="line">  workbox.strategies.staleWhileRevalidate()</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">workbox.routing.registerRoute(</span><br><span class="line">  <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'https://your\.img\.cdn\.com/'</span>),</span><br><span class="line">  workbox.strategies.cacheFirst(&#123;</span><br><span class="line">    cacheName: <span class="string">'example:img'</span></span><br><span class="line">  &#125;)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p><p>通过 workbox.precaching 中的是 install 以后要塞进 caches 中的内容，workbox.routing.registerRoute 中第一个参数是一个正则，匹配经过 fetch 事件的所有请求，如果匹配上了，就走相应的缓存策略。</p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul><li>避免改变 SW 的 URL（对index.html做了缓存，这样永远拿不到新的sw）</li></ul>]]></content:encoded>
      
      <comments>http://mydearest.cn/2019/PWA%E6%89%8B%E8%AE%B0.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>use strict</title>
      <link>http://mydearest.cn/2019/use%20strict.html</link>
      <guid>http://mydearest.cn/2019/use%20strict.html</guid>
      <pubDate>Tue, 07 May 2019 17:13:46 GMT</pubDate>
      <description>
      
        &lt;p&gt;严格模式是ES5引入的，更好的将错误检测引入代码的方法。顾名思义，使得JS在更严格的条件下运行。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;变量必须先声明，再使用&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;test&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&quot;use strict&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;foo = &lt;span class=&quot;string&quot;&gt;&#39;bar&#39;&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;// Error&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;不能对变量执行&lt;span class=&quot;keyword&quot;&gt;delete&lt;/span&gt;操作&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; foo = &lt;span class=&quot;string&quot;&gt;&quot;test&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;test&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;delete&lt;/span&gt; foo; &lt;span class=&quot;comment&quot;&gt;// Error&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;delete&lt;/span&gt; test; &lt;span class=&quot;comment&quot;&gt;// Error&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;test2&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;arg&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;delete&lt;/span&gt; arg; &lt;span class=&quot;comment&quot;&gt;// Error&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;对象的属性名不能重复&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123; &lt;span class=&quot;attr&quot;&gt;foo&lt;/span&gt;: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;attr&quot;&gt;foo&lt;/span&gt;: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt; &amp;#125; &lt;span class=&quot;comment&quot;&gt;// Error&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;禁用&lt;span class=&quot;built_in&quot;&gt;eval&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;函数的&lt;span class=&quot;built_in&quot;&gt;arguments&lt;/span&gt;参数&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;setTimeout(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;later&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// do stuff...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;setTimeout( later, &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt; );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;, &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt; );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;禁用&lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt;()&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;不能修改&lt;span class=&quot;built_in&quot;&gt;arguments&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;不能在函数内定义&lt;span class=&quot;built_in&quot;&gt;arguments&lt;/span&gt;变量&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;不能使用arugment.caller和argument.callee。因此如果你要引用匿名函数，需要对匿名函数命名。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;严格模式&lt;/code&gt;的优点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;消除Javascript语法的一些不合理、不严谨之处，减少一些怪异行为;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;消除代码运行的一些不安全之处，保证代码运行的安全；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;提高编译器效率，增加运行速度；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;为未来新版本的Javascript做好铺垫。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;注：经过测试 IE6,7,8,9 均不支持严格模式。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;缺点：&lt;/p&gt;
&lt;p&gt;现在网站的 JS 都会进行压缩，一些文件用了严格模式，而另一些没有。这时这些本来是严格模式的文件，被 merge 后，这个串就到了文件的中间，不仅没有指示严格模式，反而在压缩后浪费了字节。&lt;/p&gt;
&lt;hr&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>严格模式是ES5引入的，更好的将错误检测引入代码的方法。顾名思义，使得JS在更严格的条件下运行。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">变量必须先声明，再使用</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="meta">"use strict"</span>;</span><br><span class="line">foo = <span class="string">'bar'</span>; <span class="comment">// Error</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">不能对变量执行<span class="keyword">delete</span>操作</span><br><span class="line"><span class="keyword">var</span> foo = <span class="string">"test"</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> foo; <span class="comment">// Error</span></span><br><span class="line"><span class="keyword">delete</span> test; <span class="comment">// Error</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test2</span>(<span class="params">arg</span>) </span>&#123;</span><br><span class="line"><span class="keyword">delete</span> arg; <span class="comment">// Error</span></span><br><span class="line">&#125;</span><br><span class="line">对象的属性名不能重复</span><br><span class="line">&#123; <span class="attr">foo</span>: <span class="literal">true</span>, <span class="attr">foo</span>: <span class="literal">false</span> &#125; <span class="comment">// Error</span></span><br><span class="line"></span><br><span class="line">禁用<span class="built_in">eval</span>()</span><br><span class="line"></span><br><span class="line">函数的<span class="built_in">arguments</span>参数</span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span> <span class="title">later</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">// do stuff...</span></span><br><span class="line">setTimeout( later, <span class="number">1000</span> );</span><br><span class="line">&#125;, <span class="number">1000</span> );</span><br><span class="line"></span><br><span class="line">禁用<span class="keyword">with</span>()&#123;&#125;</span><br><span class="line"></span><br><span class="line">不能修改<span class="built_in">arguments</span></span><br><span class="line">不能在函数内定义<span class="built_in">arguments</span>变量</span><br><span class="line">不能使用arugment.caller和argument.callee。因此如果你要引用匿名函数，需要对匿名函数命名。</span><br></pre></td></tr></table></figure><p><code>严格模式</code>的优点：</p><ol><li><p>消除Javascript语法的一些不合理、不严谨之处，减少一些怪异行为;</p></li><li><p>消除代码运行的一些不安全之处，保证代码运行的安全；</p></li><li><p>提高编译器效率，增加运行速度；</p></li><li><p>为未来新版本的Javascript做好铺垫。</p></li></ol><ul><li>注：经过测试 IE6,7,8,9 均不支持严格模式。</li></ul><p>缺点：</p><p>现在网站的 JS 都会进行压缩，一些文件用了严格模式，而另一些没有。这时这些本来是严格模式的文件，被 merge 后，这个串就到了文件的中间，不仅没有指示严格模式，反而在压缩后浪费了字节。</p><hr><a id="more"></a><h2 id="详细说明"><a href="#详细说明" class="headerlink" title="详细说明"></a>详细说明</h2><p>1.使调试更加容易。那些被忽略或默默失败了的代码错误，会产生错误或抛出异常，因此尽早提醒你代码中的问题，你才能更快地指引到它们的源代码。</p><p>2.变量在赋值之前必须声明,防止意外的全局变量。如果没有严格模式，将值分配给一个未声明的变量会自动创建该名称的全局变量。这是JavaScript中最常见的错误之一。在严格模式下，这样做的话会抛出错误。</p><p>3.取消this值的强制转换。如果没有严格模式，引用null或未定义的值到 this 值会自动强制到全局变量。在严格模式下，引用 null或未定义的 this 值会抛出错误。严格模式下，this不会指向window </p><p>4.不允许重复的属性名称或参数值。当检测到对象中重复命名的属性，例如：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> object = &#123;<span class="attr">foo</span>: <span class="string">"bar"</span>, <span class="attr">foo</span>: <span class="string">"baz"</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或检测到函数中重复命名的参数时,例如：</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">val1, val2, val1</span>)</span>&#123;&#125;）</span><br><span class="line"></span><br><span class="line"><span class="comment">// 严格模式会抛出错误，因此捕捉几乎可以肯定是代码中的bug可以避免浪费大量的跟踪时间。</span></span><br></pre></td></tr></table></figure></p><p>5.使 eval() 更安全。在严格模式和非严格模式下， eval() 的行为方式有所不同。最显而易见的是，在严格模式下，变量和声明在 eval() 语句内部的函数不会在包含范围内创建（它们会在非严格模式下的包含范围中被创建，这也是一个常见的问题源）。</p><p>eval()没有被移除，但它在严格模式下发生了一些变化。最大的改变是：在eval()语句中声明的变量以及函数不会在包含域中创建。例如：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">eval</span>(<span class="string">"var x = 10;"</span>);  </span><br><span class="line"> </span><br><span class="line"><span class="comment">// 非严格模式下，x为10  </span></span><br><span class="line"><span class="comment">// 严格模式下，x没有声明，抛出一个错误  </span></span><br><span class="line">alert(x);  </span><br><span class="line">&#125;)(); </span><br><span class="line">任意由<span class="built_in">eval</span>()创建的变量或函数仍呆在<span class="built_in">eval</span>()里。然而，你可以通过从<span class="built_in">eval</span>()中返回一个值的方式实现值的传递：</span><br><span class="line"></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> result = <span class="built_in">eval</span>(<span class="string">"var x = 10, y = 20; x + y"</span>);  </span><br><span class="line"> </span><br><span class="line"><span class="comment">// 严格模式与非严格模式下都能正常工作（得到30）  </span></span><br><span class="line">alert(result);  </span><br><span class="line">&#125;());</span><br></pre></td></tr></table></figure></p><p>6.在 delete 使用无效时抛出错误。 delete 操作符（用于从对象中删除属性）不能用在对象不可配置的属性上。当试图删除一个不可配置的属性时，非严格代码将默默地失败，而严格模式将在这样的情况下抛出异常。</p><p>7.严格模式去除了with语句</p><p>8.不能修改arguments ，不能在函数内定义arguments变量  ，不能使用arugment.caller和argument.callee。因此如果你要引用匿名函数，需要对匿名函数命名。  </p><h2 id="简洁说明"><a href="#简洁说明" class="headerlink" title="简洁说明"></a>简洁说明</h2><ul><li>变量必须声明后再使用</li><li>函数的参数不能有同名属性，否则报错</li><li>不能使用with语句</li><li>不能对只读属性赋值，否则报错</li><li>不能使用前缀 0 表示八进制数，否则报错</li><li>不能删除不可删除的属性，否则报错</li><li>eval不会在它的外层作用域引入变量</li><li>eval和arguments不能被重新赋值</li><li>arguments不会自动反映函数参数的变化</li><li>不能使用arguments.callee</li><li>不能使用arguments.caller</li><li>禁止this指向全局对象</li><li>不能使用fn.caller和fn.arguments获取函数调用的堆栈</li><li>增加了保留字（比如protected、static和interface）</li></ul>]]></content:encoded>
      
      <comments>http://mydearest.cn/2019/use%20strict.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>ES6Reflect对象</title>
      <link>http://mydearest.cn/2019/ES6Reflect%E5%AF%B9%E8%B1%A1.html</link>
      <guid>http://mydearest.cn/2019/ES6Reflect%E5%AF%B9%E8%B1%A1.html</guid>
      <pubDate>Wed, 01 May 2019 18:31:52 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;Reflect 是一个内置的对象，它提供拦截 JavaScript 操作的方法。这些方法与处理器对象的方法相同。Reflect不是一个函数对象，因此它是不可构造的。&lt;/p&gt;
&lt;p&gt;Reflect这个对象在新版本的chrome是支持的， ff比较早就支持Proxy和Reflect了，要让node支持Reflect可以安装&lt;a href=&quot;https://github.com/tvcutsem/harmony-reflect/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;harmony-reflect&lt;/a&gt;;&lt;/p&gt;
&lt;p&gt;Reflect不是构造函数， 要使用的时候直接通过Reflect.method()调用， Reflect有的方法和Proxy差不多， 而且多数Reflect方法原生的Object已经重新实现了。&lt;/p&gt;
&lt;p&gt;与大多数全局对象不同，Reflect没有构造函数。你不能将其与一个new运算符一起使用，或者将Reflect对象作为一个函数来调用。Reflect的所有属性和方法都是静态的（就像Math对象）。&lt;/p&gt;
&lt;hr&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Reflect 是一个内置的对象，它提供拦截 JavaScript 操作的方法。这些方法与处理器对象的方法相同。Reflect不是一个函数对象，因此它是不可构造的。</p><p>Reflect这个对象在新版本的chrome是支持的， ff比较早就支持Proxy和Reflect了，要让node支持Reflect可以安装<a href="https://github.com/tvcutsem/harmony-reflect/" target="_blank" rel="noopener">harmony-reflect</a>;</p><p>Reflect不是构造函数， 要使用的时候直接通过Reflect.method()调用， Reflect有的方法和Proxy差不多， 而且多数Reflect方法原生的Object已经重新实现了。</p><p>与大多数全局对象不同，Reflect没有构造函数。你不能将其与一个new运算符一起使用，或者将Reflect对象作为一个函数来调用。Reflect的所有属性和方法都是静态的（就像Math对象）。</p><hr><a id="more"></a><h2 id="为什么使用"><a href="#为什么使用" class="headerlink" title="为什么使用"></a>为什么使用</h2><ul><li>更加有用的返回值</li></ul><p>Reflect有一些方法和ES5中Object方法一样样的， 比如： Reflect.getOwnPropertyDescriptor和Reflect.defineProperty,  不过, Object.defineProperty(obj, name, desc)执行成功会返回obj， 以及其它原因导致的错误， Reflect.defineProperty只会返回false或者true来表示对象的属性是否设置上了，</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="built_in">Object</span>.defineProperty(obj, name, desc);</span><br><span class="line">  <span class="comment">// property defined successfully</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">  <span class="comment">// possible failure (and might accidentally catch the wrong exception)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以重构成<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="built_in">Reflect</span>.defineProperty(obj, name, desc)) &#123;</span><br><span class="line">  <span class="comment">// success</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// failure</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li><p>函数操作</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name <span class="keyword">in</span> obj <span class="comment">// Reflect.has(obj, name)</span></span><br><span class="line"><span class="keyword">delete</span> obj[name] <span class="comment">// Reflect.deleteProperty(obj, name)</span></span><br></pre></td></tr></table></figure></li><li><p>更加可靠的函数式执行方式： 在ES中， 要执行一个函数f，并给它传一组参数args， 还要绑定this的话， 要这么写：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">f.apply(obj, args) <span class="comment">// apply有可能被篡改</span></span><br><span class="line"><span class="built_in">Function</span>.prototype.apply.call(f, obj, args) <span class="comment">// Reflect.apply(f, obj, args)</span></span><br></pre></td></tr></table></figure></li><li><p>可变参数形式的构造函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> F(...args)</span><br><span class="line"><span class="keyword">var</span> obj = <span class="built_in">Reflect</span>.construct(F, args)</span><br></pre></td></tr></table></figure></li><li><p>控制访问器或者读取器的this</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">obj.name</span><br><span class="line">obj[<span class="string">'name'</span>]</span><br><span class="line"><span class="built_in">Reflect</span>.get(obj, name, wrapper)</span><br><span class="line"><span class="built_in">Reflect</span>.set(obj, name, value, wrapper)</span><br></pre></td></tr></table></figure></li></ul><p>访问器中不想使用自己的方法，而是想要重定向this到wrapper：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span>  obj = &#123;</span><br><span class="line">    set foo(value)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.bar();</span><br><span class="line">    &#125;</span><br><span class="line">    bar()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> wrapper = &#123;</span><br><span class="line">    bar()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Reflect</span>.set(obj, <span class="string">"foo"</span>, <span class="string">"value"</span>, wrapper)</span><br></pre></td></tr></table></figure></p><ul><li>避免直接访问<strong>proto</strong></li></ul><h3 id="Reflect-apply"><a href="#Reflect-apply" class="headerlink" title="Reflect.apply"></a>Reflect.apply</h3><p>Reflect.apply其实就是ES5中的 Function.prototype.apply() 替身， 执行Reflect.apply需要三个参数</p><p>第一个参数为： 需要执行的函数；第二个参数为： 需要执行函数的上下文this；第三个参数为： 是一个数组或者伪数组， 会作为执行函数的参数；</p><h3 id="Reflect-construct"><a href="#Reflect-construct" class="headerlink" title="Reflect.construct"></a>Reflect.construct</h3><p>Reflect.construct其实就是实例化构造函数，通过传参形式的实现， 执行的方式不同， 效果其实一样， construct的第一个参数为构造函数， 第二个参数由参数组成的数组或者伪数组， 第三个参数为一个超类， 新元素会继承这个超类；<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Fn = <span class="function"><span class="keyword">function</span>(<span class="params">arg</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.args = [arg]</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log( <span class="keyword">new</span> Fn(<span class="number">1</span>), <span class="built_in">Reflect</span>.construct(Fn,[<span class="number">1</span>]) ); <span class="comment">// 输出是一样的</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> d = <span class="built_in">Reflect</span>.construct(<span class="built_in">Date</span>, [<span class="number">2019</span>, <span class="number">5</span>, <span class="number">2</span>]);</span><br><span class="line">d <span class="keyword">instanceof</span> <span class="built_in">Date</span>; <span class="comment">// true</span></span><br><span class="line">d.getFullYear(); <span class="comment">// 2019</span></span><br></pre></td></tr></table></figure></p><h3 id="Reflect-defineProperty"><a href="#Reflect-defineProperty" class="headerlink" title="Reflect.defineProperty"></a>Reflect.defineProperty</h3><p>Reflect.defineProperty返回的是一个布尔值， 通过直接赋值的方式把属性和属性值添加给对象返回的是一整个对象， 如果添加失败会抛错；<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"><span class="keyword">if</span>( <span class="built_in">Reflect</span>.defineProperty(obj, <span class="string">"x"</span>, &#123;<span class="attr">value</span> : <span class="number">7</span> &#125;) ) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"added success"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"添加失败"</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h3 id="Reflect-deleteProperty"><a href="#Reflect-deleteProperty" class="headerlink" title="Reflect.deleteProperty"></a>Reflect.deleteProperty</h3><p>Reflect.deleteProperty和Reflect.defineProperty的使用方法差不多， Reflect.deleteProperty和 delete obj.xx的操作结果是一样， 区别是使用形式不同：一个是操作符，一个是函数调用；<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Reflect</span>.deleteProperty(<span class="built_in">Object</span>.freeze(&#123;<span class="attr">foo</span>: <span class="number">1</span>&#125;), <span class="string">"foo"</span>); <span class="comment">// false</span></span><br><span class="line"><span class="keyword">delete</span> <span class="built_in">Object</span>.freeze(&#123;<span class="attr">foo</span>: <span class="number">1</span>&#125;).foo; <span class="comment">//输出：false；</span></span><br></pre></td></tr></table></figure></p><h3 id="Reflect-get"><a href="#Reflect-get" class="headerlink" title="Reflect.get"></a>Reflect.get</h3><p>这个方法的有两个必须的参数： 第一个为obj目标对象， 第二个为属性名对象， 第三个是可选的，是作为读取器的上下文(this);<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line">obj.foo = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.log( obj.foo ); <span class="comment">//输出：1;</span></span><br><span class="line"><span class="built_in">console</span>.log( <span class="built_in">Reflect</span>.get(obj, <span class="string">"foo"</span>) ) <span class="comment">//输出：1;</span></span><br></pre></td></tr></table></figure></p><h3 id="Reflect-getOwnPropertyDescritptor"><a href="#Reflect-getOwnPropertyDescritptor" class="headerlink" title="Reflect.getOwnPropertyDescritptor"></a>Reflect.getOwnPropertyDescritptor</h3><p>获取属性描述<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Reflect</span>.getOwnPropertyDescriptor(&#123;<span class="attr">x</span>: <span class="string">"hello"</span>&#125;, <span class="string">"x"</span>);</span><br><span class="line"><span class="comment">//也可以这样获取：</span></span><br><span class="line"><span class="built_in">Object</span>.getOwnPropertyDescriptor(&#123;<span class="attr">x</span>:<span class="string">"1"</span>&#125;,<span class="string">"x"</span>);</span><br><span class="line"><span class="comment">//这两个的区别是一个会包装对象， 一个不会：</span></span><br><span class="line"><span class="built_in">Reflect</span>.getOwnPropertyDescriptor(<span class="string">"hello"</span>,<span class="number">0</span>); <span class="comment">//抛出异常</span></span><br><span class="line"><span class="built_in">Object</span>.getOwnPropertyDescriptor(<span class="string">"hello"</span>,<span class="number">0</span>); <span class="comment">//输出： &#123;value: "h", writable: false, enumerable: true, configurable: false&#125;</span></span><br></pre></td></tr></table></figure></p><h3 id="Reflect-getPrototypeOf"><a href="#Reflect-getPrototypeOf" class="headerlink" title="Reflect.getPrototypeOf"></a>Reflect.getPrototypeOf</h3><p>同Object.getPrototypeOf</p><h3 id="Reflect-has"><a href="#Reflect-has" class="headerlink" title="Reflect.has"></a>Reflect.has</h3><p>同 in<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Reflect</span>.has(&#123;<span class="attr">x</span>:<span class="number">0</span>&#125;, <span class="string">"x"</span>) <span class="comment">//输出： true；</span></span><br></pre></td></tr></table></figure></p><h3 id="Reflect-isExtensible"><a href="#Reflect-isExtensible" class="headerlink" title="Reflect.isExtensible"></a>Reflect.isExtensible</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 现在这个元素是可以扩展的；</span></span><br><span class="line"><span class="keyword">var</span> empty = &#123;&#125;;</span><br><span class="line"><span class="built_in">Reflect</span>.isExtensible(empty); <span class="comment">// === true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用preventExtensions方法， 让这个对象无法扩展新属性；</span></span><br><span class="line"><span class="built_in">Reflect</span>.preventExtensions(empty);</span><br><span class="line"><span class="built_in">Reflect</span>.isExtensible(empty); <span class="comment">// === false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 这个对象无法扩展新属性， 可写的属性依然可以改动</span></span><br><span class="line"><span class="keyword">var</span> sealed = <span class="built_in">Object</span>.seal(&#123;&#125;);</span><br><span class="line"><span class="built_in">Reflect</span>.isExtensible(sealed); <span class="comment">// === false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 这个对象完全被冻结了</span></span><br><span class="line"><span class="keyword">var</span> frozen = <span class="built_in">Object</span>.freeze(&#123;&#125;);</span><br><span class="line"><span class="built_in">Reflect</span>.isExtensible(frozen); <span class="comment">// === false</span></span><br></pre></td></tr></table></figure><h3 id="Reflect-ownKeys"><a href="#Reflect-ownKeys" class="headerlink" title="Reflect.ownKeys"></a>Reflect.ownKeys</h3><p>返回对象的keys<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Reflect</span>.ownKeys(&#123;<span class="string">"a"</span>:<span class="number">0</span>,<span class="string">"b"</span>:<span class="number">1</span>,<span class="string">"c"</span>:<span class="number">2</span>,<span class="string">"d"</span>:<span class="number">3</span>&#125;)); <span class="comment">//输出 ：["a", "b", "c", "d"]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Reflect</span>.ownKeys([])); <span class="comment">// ["length"]</span></span><br></pre></td></tr></table></figure></p><p>reflect.ownKeys的排序是根据: 先显示数字， 数字根据大小排序，然后是 字符串根据插入的顺序排序， 最后是symbol类型的key也根据插入插入顺序排序;</p><h3 id="Reflect-set"><a href="#Reflect-set" class="headerlink" title="Reflect.set"></a>Reflect.set</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"><span class="built_in">Reflect</span>.set(obj, <span class="string">"prop"</span>, <span class="string">"value"</span>); <span class="comment">// 输出：true</span></span><br><span class="line"><span class="built_in">console</span>.log( obj.prop ); <span class="comment">// 输出："value"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"><span class="built_in">Reflect</span>.set(obj); <span class="comment">// 输出：true</span></span><br><span class="line"><span class="comment">// 相当于 Reflect.set(obj, undefined, undefined);</span></span><br></pre></td></tr></table></figure><h3 id="Reflect-setPrototypeOf"><a href="#Reflect-setPrototypeOf" class="headerlink" title="Reflect.setPrototypeOf"></a>Reflect.setPrototypeOf</h3><p>修改对象的__proto__属性<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Reflect</span>.setPrototypeOf(&#123;&#125;, <span class="built_in">Object</span>.prototype); <span class="comment">// 输出true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 给该对象数组[[Prototype]] 为null.</span></span><br><span class="line"><span class="built_in">Reflect</span>.setPrototypeOf(&#123;&#125;, <span class="literal">null</span>); <span class="comment">// true</span></span><br><span class="line"><span class="comment">// 此时的obj.__proto__为undefine</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//把对象冻结以后重新设置[[prototype]]</span></span><br><span class="line"><span class="built_in">Reflect</span>.setPrototypeOf(<span class="built_in">Object</span>.freeze(&#123;&#125;), <span class="literal">null</span>); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果原型链循环依赖的话就会返回false.</span></span><br><span class="line"><span class="keyword">var</span> target = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> proto = <span class="built_in">Object</span>.create(target);</span><br><span class="line"><span class="built_in">Reflect</span>.setPrototypeOf(target, proto); <span class="comment">// false</span></span><br></pre></td></tr></table></figure></p>]]></content:encoded>
      
      <comments>http://mydearest.cn/2019/ES6Reflect%E5%AF%B9%E8%B1%A1.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>深入了解HTTP</title>
      <link>http://mydearest.cn/2019/%E6%B7%B1%E5%85%A5%E4%BA%86%E8%A7%A3HTTP.html</link>
      <guid>http://mydearest.cn/2019/%E6%B7%B1%E5%85%A5%E4%BA%86%E8%A7%A3HTTP.html</guid>
      <pubDate>Mon, 29 Apr 2019 16:48:20 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;HTTP-特性&quot;&gt;&lt;a href=&quot;#HTTP-特性&quot; class=&quot;headerlink&quot; title=&quot;HTTP 特性&quot;&gt;&lt;/a&gt;HTTP 特性&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;基于TCP-IP协议 应用层协议 默认端口号80&lt;/li&gt;
&lt;li&gt;无连接无状态&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;什么是无状态&quot;&gt;&lt;a href=&quot;#什么是无状态&quot; class=&quot;headerlink&quot; title=&quot;什么是无状态&quot;&gt;&lt;/a&gt;什么是无状态&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;状态】的含义就是：客户端和服务器在某次会话中产生的数据&lt;/li&gt;
&lt;li&gt;那么对应的【无状态】就意味着：这些数据不会被保留&lt;/li&gt;
&lt;li&gt;通过增加cookie和session机制，现在的网络请求其实是有状态的&lt;/li&gt;
&lt;li&gt;在没有状态的http协议下，服务器也一定会保留你每次网络请求对数据的修改，但这跟保留每次访问的数据是不一样的，保留的只是会话产生的结果，而没有保留会话&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;HTTP-报文&quot;&gt;&lt;a href=&quot;#HTTP-报文&quot; class=&quot;headerlink&quot; title=&quot;HTTP 报文&quot;&gt;&lt;/a&gt;HTTP 报文&lt;/h2&gt;&lt;h3 id=&quot;请求报文&quot;&gt;&lt;a href=&quot;#请求报文&quot; class=&quot;headerlink&quot; title=&quot;请求报文&quot;&gt;&lt;/a&gt;请求报文&lt;/h3&gt;&lt;p&gt;HTTP 协议是以 ASCII （a s ki）码传输，建立在 TCP/IP 协议之上的应用层规范。规范把 HTTP 请求分为三个部分：状态行、请求头、消息主体。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GET 可提交的数据量受到URL长度的限制，HTTP 协议规范没有对 URL 长度进行限制。这个限制是特定的浏览器及服务器对它的限制&lt;/li&gt;
&lt;li&gt;理论上讲，POST 是没有大小限制的，HTTP 协议规范也没有进行大小限制，出于安全考虑，服务器软件在实现时会做一定限制&lt;/li&gt;
&lt;li&gt;参考上面的报文示例，可以发现 GET 和 POST 数据内容是一模一样的，只是位置不同，一个在 URL 里，一个在 HTTP 包的包体里&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="HTTP-特性"><a href="#HTTP-特性" class="headerlink" title="HTTP 特性"></a>HTTP 特性</h2><ul><li>基于TCP-IP协议 应用层协议 默认端口号80</li><li>无连接无状态</li></ul><h3 id="什么是无状态"><a href="#什么是无状态" class="headerlink" title="什么是无状态"></a>什么是无状态</h3><ul><li>状态】的含义就是：客户端和服务器在某次会话中产生的数据</li><li>那么对应的【无状态】就意味着：这些数据不会被保留</li><li>通过增加cookie和session机制，现在的网络请求其实是有状态的</li><li>在没有状态的http协议下，服务器也一定会保留你每次网络请求对数据的修改，但这跟保留每次访问的数据是不一样的，保留的只是会话产生的结果，而没有保留会话</li></ul><h2 id="HTTP-报文"><a href="#HTTP-报文" class="headerlink" title="HTTP 报文"></a>HTTP 报文</h2><h3 id="请求报文"><a href="#请求报文" class="headerlink" title="请求报文"></a>请求报文</h3><p>HTTP 协议是以 ASCII （a s ki）码传输，建立在 TCP/IP 协议之上的应用层规范。规范把 HTTP 请求分为三个部分：状态行、请求头、消息主体。</p><ul><li>GET 可提交的数据量受到URL长度的限制，HTTP 协议规范没有对 URL 长度进行限制。这个限制是特定的浏览器及服务器对它的限制</li><li>理论上讲，POST 是没有大小限制的，HTTP 协议规范也没有进行大小限制，出于安全考虑，服务器软件在实现时会做一定限制</li><li>参考上面的报文示例，可以发现 GET 和 POST 数据内容是一模一样的，只是位置不同，一个在 URL 里，一个在 HTTP 包的包体里</li></ul><hr><a id="more"></a><h3 id="POST提交的方式"><a href="#POST提交的方式" class="headerlink" title="POST提交的方式"></a>POST提交的方式</h3><p>HTTP 协议中规定 POST 提交的数据必须在 body 部分中，但是协议中没有规定数据使用哪种编码方式或者数据格式。实际上，开发者完全可以自己决定消息主体的格式，只要最后发送的 HTTP 请求满足上面的格式就可以。</p><p>但是，数据发送出去，还要服务端解析成功才有意义。一般服务端语言如 PHP、Python 等，以及它们的 framework，都内置了自动解析常见数据格式的功能。服务端通常是根据请求头（headers）中的 Content-Type 字段来获知请求中的消息主体是用何种方式编码，再对主体进行解析。所以说到 POST 提交数据方案，包含了 Content-Type 和消息主体编码方式两部分。</p><ol><li><p>application/x-www-form-urlencoded这是最常见的 POST 数据提交方式。浏览器的原生 <form> 表单，如果不设置 enctype 属性，那么最终就会以 application/x-www-form-urlencoded 方式提交数据。</form></p></li><li><p>multipart/form-data使用表单上传文件时，必须让 <form> 表单的 enctype 等于 multipart/form-data。</form></p></li></ol><p>上面提到的这两种 POST 数据的方式，都是浏览器原生支持的，而且现阶段标准中原生 <form> 表单也只支持这两种方式（通过 <form> 元素的 enctype 属性指定，默认为 application/x-www-form-urlencoded。其实 enctype 还支持 text/plain，不过用得非常少）。</form></form></p><p>随着越来越多的 Web 站点，尤其是 WebApp，全部使用 Ajax 进行数据交互之后，我们完全可以定义新的数据提交方式，例如 application/json，application/form-data，text/xml，乃至 application/x-protobuf 这种二进制格式，只要服务器可以根据 Content-Type 和 Content-Encoding 正确地解析出请求，都是没有问题的。</p><h3 id="响应报文"><a href="#响应报文" class="headerlink" title="响应报文"></a>响应报文</h3><ul><li>状态行</li><li>响应头(Response Header)</li><li>响应正文</li></ul><p>GET 请求 304获取缓存第一次请求时，服务器端返回请求数据，之后的请求，服务器根据请求中的 If-Modified-Since 字段判断响应文件没有更新，如果没有更新，服务器返回一个 304 Not Modified响应，告诉浏览器请求的资源在浏览器上没有更新，可以使用已缓存的上次获取的文件。</p><p>/<em>    </em>通过RandomSource.getRandomValues() 方法获取符合密码学要求的安全的随机值    <em>/this.getRandomNumbers = function (min, max) {    var minValue = min || ‘’;    var maxValue = max || ‘’;    var cryptoObj = window.crypto || window.msCrypto;    /</em>eslint-disable<em>/    var array = new Uint32Array(1);    /</em>eslint-enable*/    cryptoObj &amp;&amp; cryptoObj.getRandomValues(array);    var result = 0;    if (minValue || maxValue) {        if (!maxValue) {            minValue = 0;            maxValue = min;        }        result = parseInt(minValue, 10) + (array[0] % (parseInt(maxValue, 10) - parseInt(minValue, 10)));    } else {        result = array[0];    }    return result;};</p><h3 id="持久连接"><a href="#持久连接" class="headerlink" title="持久连接"></a>持久连接</h3><p>在 HTTP 1.0 版本中，并没有官方的标准来规定 Keep-Alive 如何工作，因此实际上它是被附加到 HTTP 1.0协议上，如果客户端浏览器支持 Keep-Alive ，那么就在HTTP请求头中添加一个字段 Connection: Keep-Alive，当服务器收到附带有 Connection: Keep-Alive 的请求时，它也会在响应头中添加一个同样的字段来使用 Keep-Alive 。这样一来，客户端和服务器之间的HTTP连接就会被保持，不会断开（超过 Keep-Alive 规定的时间，意外断电等情况除外），当客户端发送另外一个请求时，就使用这条已经建立的连接。</p><p>在 HTTP 1.1 版本中，默认情况下所有连接都被保持，如果加入 “Connection: close” 才关闭。目前大部分浏览器都使用 HTTP 1.1 协议，也就是说默认都会发起 Keep-Alive 的连接请求了。</p><ul><li><p>HTTP Keep-Alive 简单说就是保持当前的TCP连接，避免了重新建立连接。</p></li><li><p>HTTP 长连接不可能一直保持，例如 Keep-Alive: timeout=5, max=100，表示这个TCP通道可以保持5秒，max=100，表示这个长连接最多接收100次请求就断开。</p></li></ul><h3 id="HTTP-Pipelining（HTTP-管线化）"><a href="#HTTP-Pipelining（HTTP-管线化）" class="headerlink" title="HTTP Pipelining（HTTP 管线化）"></a>HTTP Pipelining（HTTP 管线化）</h3><p>默认情况下 HTTP 协议中每个传输层连接只能承载一个 HTTP 请求和响应，浏览器会在收到上一个请求的响应之后，再发送下一个请求。在使用持久连接的情况下，某个连接上消息的传递类似于请求1 -&gt; 响应1 -&gt; 请求2 -&gt; 响应2 -&gt; 请求3 -&gt; 响应3。</p><p>HTTP Pipelining（管线化）是将多个 HTTP 请求整批提交的技术，在传送过程中不需等待服务端的回应。使用 HTTP Pipelining 技术之后，某个连接上的消息变成了类似这样请求1 -&gt; 请求2 -&gt; 请求3 -&gt; 响应1 -&gt; 响应2 -&gt; 响应3</p><h3 id="会话跟踪"><a href="#会话跟踪" class="headerlink" title="会话跟踪"></a>会话跟踪</h3><ol><li>什么是会话？</li></ol><p>客户端打开与服务器的连接发出请求到服务器响应客户端请求的全过程称之为会话。</p><ol><li>什么是会话跟踪？</li></ol><p>会话跟踪指的是对同一个用户对服务器的连续的请求和接受响应的监视。</p><ol><li>为什么需要会话跟踪？</li></ol><p>浏览器与服务器之间的通信是通过HTTP协议进行通信的，而HTTP协议是”无状态”的协议，它不能保存客户的信息，即一次响应完成之后连接就断开了，下一次的请求需要重新连接，这样就需要判断是否是同一个用户，所以才有会话跟踪技术来实现这种要求。</p><p>Cookie</p><p>Cookie 是Web 服务器发送给客户端的一小段信息，客户端请求时可以读取该信息发送到服务器端，进而进行用户的识别。对于客户端的每次请求，服务器都会将 Cookie 发送到客户端,在客户端可以进行保存,以便下次使用。</p><p>客户端可以采用两种方式来保存这个 Cookie 对象，一种方式是保存在客户端内存中，称为临时 Cookie，浏览器关闭后这个 Cookie 对象将消失。另外一种方式是保存在客户机的磁盘上，称为永久 Cookie。以后客户端只要访问该网站，就会将这个 Cookie 再次发送到服务器上，前提是这个 Cookie 在有效期内，这样就实现了对客户的跟踪。</p><p>Cookie 是可以被客户端禁用的。</p><p>Session:</p><p>每一个用户都有一个不同的 session，各个用户之间是不能共享的，是每个用户所独享的，在 session 中可以存放信息。</p><p>在服务器端会创建一个 session 对象，产生一个 sessionID 来标识这个 session 对象，然后将这个 sessionID 放入到 Cookie 中发送到客户端，下一次访问时，sessionID 会发送到服务器，在服务器端进行识别不同的用户。</p><p>Session 的实现依赖于 Cookie，如果 Cookie 被禁用，那么 session 也将失效。</p><h3 id="跨站攻击"><a href="#跨站攻击" class="headerlink" title="跨站攻击"></a>跨站攻击</h3><h4 id="CSRF（Cross-site-request-forgery，跨站请求伪造）"><a href="#CSRF（Cross-site-request-forgery，跨站请求伪造）" class="headerlink" title="CSRF（Cross-site request forgery，跨站请求伪造）"></a>CSRF（Cross-site request forgery，跨站请求伪造）</h4><ul><li>如何防范 CSRF 攻击？</li></ul><ol><li>关键操作只接受 POST 请求</li><li>验证码</li><li>检测referer</li><li>token</li></ol><h4 id="XSS（Cross-Site-Scripting，跨站脚本攻击）"><a href="#XSS（Cross-Site-Scripting，跨站脚本攻击）" class="headerlink" title="XSS（Cross Site Scripting，跨站脚本攻击）"></a>XSS（Cross Site Scripting，跨站脚本攻击）</h4><p>XSS 全称“跨站脚本”，是注入攻击的一种。其特点是不对服务器端造成任何伤害，而是通过一些正常的站内交互途径，例如发布评论，提交含有 JavaScript 的内容文本。这时服务器端如果没有过滤或转义掉这些脚本，作为内容发布到了页面上，其他用户访问这个页面的时候就会运行这些脚本。</p><p>XSS 是实现 CSRF 的诸多途径中的一条，但绝对不是唯一的一条。一般习惯上把通过 XSS 来实现的 CSRF 称为 XSRF。</p><h3 id="http缓存"><a href="#http缓存" class="headerlink" title="http缓存"></a>http缓存</h3><ul><li>强缓存<ul><li>cache-control</li><li>Expires</li><li>Pragma</li></ul></li><li>协商缓存<ul><li>last-modified</li><li>Etag</li></ul></li></ul><h2 id="HTTPS基本过程"><a href="#HTTPS基本过程" class="headerlink" title="HTTPS基本过程"></a>HTTPS基本过程</h2><p>HTTPS即 HTTP over TLS，是一种在加密信道进行HTTP内容传输的协议</p><blockquote><p>TLS 的早期版本叫做 SSL。SSL 的 1.0, 2.0, 3.0 版本均已经被废弃，出于安全问题考虑广大浏览器也不再对老旧的 SSL 版本进行支持了，因此这里我们就统一使用 TLS 名称了。</p></blockquote>]]></content:encoded>
      
      <comments>http://mydearest.cn/2019/%E6%B7%B1%E5%85%A5%E4%BA%86%E8%A7%A3HTTP.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>维生素</title>
      <link>http://mydearest.cn/2019/%E7%BB%B4%E7%94%9F%E7%B4%A0.html</link>
      <guid>http://mydearest.cn/2019/%E7%BB%B4%E7%94%9F%E7%B4%A0.html</guid>
      <pubDate>Wed, 24 Apr 2019 16:02:31 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;维生素分类&quot;&gt;&lt;a href=&quot;#维生素分类&quot; class=&quot;headerlink&quot; title=&quot;维生素分类&quot;&gt;&lt;/a&gt;维生素分类&lt;/h2&gt;&lt;h3 id=&quot;维生素A&quot;&gt;&lt;a href=&quot;#维生素A&quot; class=&quot;headerlink&quot; title=&quot;维生素A&quot;&gt;&lt;/a&gt;维生素A&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;长期用眼。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;维生素A缺乏，会带来眼睛干涩，夜间视力下降等问题。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://cdn.mydearest.cn/blog/images/VA.jpg&quot; alt=&quot;维生素A&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="维生素分类"><a href="#维生素分类" class="headerlink" title="维生素分类"></a>维生素分类</h2><h3 id="维生素A"><a href="#维生素A" class="headerlink" title="维生素A"></a>维生素A</h3><blockquote><p>长期用眼。</p></blockquote><p>维生素A缺乏，会带来眼睛干涩，夜间视力下降等问题。</p><p><img src="http://cdn.mydearest.cn/blog/images/VA.jpg" alt="维生素A"></p><hr><a id="more"></a><h3 id="维生素C"><a href="#维生素C" class="headerlink" title="维生素C"></a>维生素C</h3><blockquote><p>果蔬没吃够的</p></blockquote><p><img src="http://cdn.mydearest.cn/blog/images/VC.jpg" alt="维生素A"></p><h3 id="维生素D"><a href="#维生素D" class="headerlink" title="维生素D"></a>维生素D</h3><blockquote><p>太阳晒的少，影响钙吸收</p></blockquote><h3 id="维生素B"><a href="#维生素B" class="headerlink" title="维生素B"></a>维生素B</h3><p>B类的维生素有很多种。</p><h4 id="硫胺素-维生素B1"><a href="#硫胺素-维生素B1" class="headerlink" title="硫胺素(维生素B1)"></a>硫胺素(维生素B1)</h4><p>运动越多，消耗能量（主要是碳水化合物）越多，硫胺素需要也越多。随着进食量增加，硫胺素摄入可能也会增加，<strong>所以一般不必额外补充。</strong></p><h4 id="核黄素（维生素B2）"><a href="#核黄素（维生素B2）" class="headerlink" title="核黄素（维生素B2）"></a>核黄素（维生素B2）</h4><p>核黄素跟蛋白质、脂肪、碳水化合物的能量产生都有关系。我国目前是成年男性1.4毫克/天，女性1.2毫克/天。运动人群，增加到推荐量的1-2倍足矣。食物补充的话，平时可以多吃肉、蛋和奶制品。花椰菜、芦笋、菠菜这类绿色蔬菜核黄素含量也比较高。<strong>这些东西吃的少的话，可以考虑补充剂。</strong></p><h4 id="烟酸（维生素B3）"><a href="#烟酸（维生素B3）" class="headerlink" title="烟酸（维生素B3）"></a>烟酸（维生素B3）</h4><p>烟酸跟蛋白质、碳水化合物、脂肪的能量产生都有关。含烟酸比较丰富的食物有肉类、谷类、豆类食物。因为色氨酸在体内能转化成烟酸，动物蛋白摄入比较多的人，<strong>烟酸一般都不会缺乏</strong>。所以，常吃较多肉的人，即便是运动人群，也基本不用额外补充烟酸。</p><h4 id="维生素B6"><a href="#维生素B6" class="headerlink" title="维生素B6"></a>维生素B6</h4><p>这种维生素主要跟糖原和蛋白质代谢有关。体内储存的糖原想变成葡萄糖，氨基酸想转换利用，都需要维生素B6，所以这东西跟运动关系密切。</p><p>维生素B6跟别的B族维生素不一样，这玩意有毒性。但一般都要达到药物剂量才会中毒。比如治疗经期按综合症、哮喘有时会用到B6。维生素B6的最高耐受上限是100毫克/天。低于这个剂量一般没有太大问题。</p><p>比较安全的补充方式还是食物，肉、蔬菜、坚果、香蕉、全谷物食品里含B6都很丰富。比如100克鸡胸肉里就有大约0.6毫克维生素B6。所以，这些东西吃的比较多的话，一般不用吃补充剂额外补充。</p><h4 id="橙子、橘子、柚子、青柠、西柚、柠檬、芦柑的关系。"><a href="#橙子、橘子、柚子、青柠、西柚、柠檬、芦柑的关系。" class="headerlink" title="橙子、橘子、柚子、青柠、西柚、柠檬、芦柑的关系。"></a>橙子、橘子、柚子、青柠、西柚、柠檬、芦柑的关系。</h4><p>橙子是橘子和柚子杂交来的，橘子和橙子杂交成了芦柑，柚子和橙子又杂交成了青柠，橙子和青柠杂交了柠檬，橙子和柚子杂交成了西柚。</p>]]></content:encoded>
      
      <comments>http://mydearest.cn/2019/%E7%BB%B4%E7%94%9F%E7%B4%A0.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>vuex学习笔记</title>
      <link>http://mydearest.cn/2019/vuex%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html</link>
      <guid>http://mydearest.cn/2019/vuex%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html</guid>
      <pubDate>Thu, 18 Apr 2019 16:25:20 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;vuex&quot;&gt;&lt;a href=&quot;#vuex&quot; class=&quot;headerlink&quot; title=&quot;vuex&quot;&gt;&lt;/a&gt;vuex&lt;/h2&gt;&lt;p&gt;数据驱动模板（管理共享状态）
核心store仓库（响应式的状态存储）
提交mutation才能修改内部状态 记录每次改变保存状态快照&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; store = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Vuex.Store(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    state:&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        count:&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mutations: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        increase(state)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            state.count++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 开启严格模式&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    strict: process.env.NODE_ENV !== &lt;span class=&quot;string&quot;&gt;&#39;production&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 在严格模式下，无论何时发生了状态变更且不是由 mutation 函数引起的，将会抛出错误。这能保证所有的状态变更都能被调试工具跟踪到。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;store.commit(&lt;span class=&quot;string&quot;&gt;&#39;increase&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;store.state.count;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;不要在发布环境下启用严格模式！严格模式会深度监测状态树来检测不合规的状态变更——请确保在发布环境下关闭严格模式，以避免性能损失。&lt;/p&gt;
&lt;hr&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="vuex"><a href="#vuex" class="headerlink" title="vuex"></a>vuex</h2><p>数据驱动模板（管理共享状态）核心store仓库（响应式的状态存储）提交mutation才能修改内部状态 记录每次改变保存状态快照</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">    state:&#123;</span><br><span class="line">        count:<span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    mutations: &#123;</span><br><span class="line">        increase(state)&#123;</span><br><span class="line">            state.count++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 开启严格模式</span></span><br><span class="line">    strict: process.env.NODE_ENV !== <span class="string">'production'</span></span><br><span class="line">    <span class="comment">// 在严格模式下，无论何时发生了状态变更且不是由 mutation 函数引起的，将会抛出错误。这能保证所有的状态变更都能被调试工具跟踪到。</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">store.commit(<span class="string">'increase'</span>);</span><br><span class="line">store.state.count;</span><br></pre></td></tr></table></figure><p>不要在发布环境下启用严格模式！严格模式会深度监测状态树来检测不合规的状态变更——请确保在发布环境下关闭严格模式，以避免性能损失。</p><hr><a id="more"></a><h3 id="state（单一状态树）"><a href="#state（单一状态树）" class="headerlink" title="state（单一状态树）"></a>state（单一状态树）</h3><p>用一个对象包含所有的应用层级状态</p><ul><li><p>从store实例中读取状态</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 计算属性</span></span><br><span class="line"><span class="keyword">const</span> Counter = &#123;</span><br><span class="line">  template: <span class="string">`&lt;div&gt;&#123;&#123; count &#125;&#125;&lt;/div&gt;`</span>,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    count () &#123;</span><br><span class="line">      <span class="keyword">return</span> store.state.count</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>从根组件注入实例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  <span class="comment">// 把 store 对象提供给 “store” 选项，这可以把 store 的实例注入所有的子组件</span></span><br><span class="line">  store,</span><br><span class="line">  components: &#123; Counter &#125;,</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div class="app"&gt;</span></span><br><span class="line"><span class="string">      &lt;counter&gt;&lt;/counter&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 读取</span></span><br><span class="line"><span class="keyword">this</span>.$store.state.count</span><br></pre></td></tr></table></figure></li><li><p>多个属性使用mapState()辅助函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">computed: mapState(&#123;</span><br><span class="line">    count: <span class="function"><span class="params">state</span> =&gt;</span> state.count,</span><br><span class="line">    name: <span class="function"><span class="params">state</span>=&gt;</span> state.name</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 如果属性与state子节点名称相同 传入字符串数组</span></span><br><span class="line"><span class="comment">// 映射 this.count 为 store.state.count</span></span><br><span class="line">mapState([<span class="string">'count'</span>])</span><br></pre></td></tr></table></figure></li></ul><h3 id="getter对state数据的派生操作（共享数据的共享函数）"><a href="#getter对state数据的派生操作（共享数据的共享函数）" class="headerlink" title="getter对state数据的派生操作（共享数据的共享函数）"></a>getter对state数据的派生操作（共享数据的共享函数）</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">    state:&#123;</span><br><span class="line">        todos: [</span><br><span class="line">            &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">text</span>: <span class="string">'...'</span>, <span class="attr">done</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">            &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">text</span>: <span class="string">'...'</span>, <span class="attr">done</span>: <span class="literal">false</span> &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    getters: &#123;</span><br><span class="line">        doneTodos: <span class="function"><span class="params">state</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> state.todos.filter(<span class="function"><span class="params">todo</span> =&gt;</span> todo.done)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 接收getter参数</span></span><br><span class="line">        doneTodosCount: <span class="function">(<span class="params">state, getters</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> getters.doneTodos.length</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 方法</span></span><br><span class="line">        getTodoById: <span class="function">(<span class="params">state</span>) =&gt;</span> (id) =&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> state.todos.find(<span class="function"><span class="params">todo</span> =&gt;</span> todo.id === id)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 访问</span></span><br><span class="line">store.getters.doneTodos <span class="comment">// -&gt; [&#123; id: 1, text: '...', done: true &#125;]</span></span><br></pre></td></tr></table></figure><ul><li>mapGetters()辅助函数<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">    <span class="comment">// 使用对象展开运算符将 getter 混入 computed 对象中</span></span><br><span class="line">    ...mapGetters([</span><br><span class="line">        <span class="string">'doneTodosCount'</span>,</span><br><span class="line">        <span class="string">'anotherGetter'</span>,</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    ])</span><br><span class="line">&#125;</span><br><span class="line">mapGetters(&#123;</span><br><span class="line">    <span class="comment">// 把 `this.doneCount` 映射为 `this.$store.getters.doneTodosCount`</span></span><br><span class="line">    doneCount: <span class="string">'doneTodosCount'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h3 id="mutation"><a href="#mutation" class="headerlink" title="mutation"></a>mutation</h3><p>提交mutation<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">store.commit(<span class="string">"increase"</span>)</span><br><span class="line"><span class="comment">// 传参</span></span><br><span class="line">store.commit(<span class="string">'increase'</span>, <span class="number">10</span>)</span><br><span class="line"><span class="comment">// 最好还是规范传payload对象</span></span><br><span class="line">store.commit(<span class="string">'increase'</span>, &#123;</span><br><span class="line">    amount:<span class="number">10</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 对象风格提交</span></span><br><span class="line">store.commit(&#123;</span><br><span class="line">  type: <span class="string">'increase'</span>,</span><br><span class="line">  amount: <span class="number">10</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>1.最好提前在你的 store 中初始化好所有所需属性。</p><p>2.当需要在对象上添加新属性时，你应该</p><p>•使用 Vue.set(obj, ‘newProp’, 123), 或者</p><p>•以新对象替换老对象。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">state.obj = &#123; ...state.obj, <span class="attr">newProp</span>: <span class="number">123</span> &#125;</span><br></pre></td></tr></table></figure></p><ul><li>常量替代事件类型<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// mutation-types.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> SOME_MUTATION = <span class="string">'SOME_MUTATION'</span></span><br></pre></td></tr></table></figure></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// store.js</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"><span class="keyword">import</span> &#123; SOME_MUTATION &#125; <span class="keyword">from</span> <span class="string">'./mutation-types'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state: &#123; ... &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    <span class="comment">// 我们可以使用 ES2015 风格的计算属性命名功能来使用一个常量作为函数名</span></span><br><span class="line">    [SOME_MUTATION] (state) &#123;</span><br><span class="line">      <span class="comment">// mutate state</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>mutation必须是同步函数</strong>一条 mutation 被记录，devtools 都需要捕捉到前一状态和后一状态的快照。devtools 不知道什么时候回调函数实际上被调用——实质上任何在回调函数中进行的状态的改变都是不可追踪的。</p><h4 id="组件中提交mutation"><a href="#组件中提交mutation" class="headerlink" title="组件中提交mutation"></a>组件中提交mutation</h4><ol><li><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$store.commit(<span class="string">'xxx'</span>)</span><br></pre></td></tr></table></figure></li><li><p>mapMutations 辅助函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">    ...mapMutations([</span><br><span class="line">      <span class="string">'increase'</span>, <span class="comment">// 将 `this.increase()` 映射为 `this.$store.commit('increase')`</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// `mapMutations` 也支持载荷：</span></span><br><span class="line">      <span class="string">'increaseBy'</span> <span class="comment">// 将 `this.increaseBy(amount)` 映射为 `this.$store.commit('increaseBy', amount)`</span></span><br><span class="line">    ]),</span><br><span class="line">    ...mapMutations(&#123;</span><br><span class="line">      add: <span class="string">'increase'</span> <span class="comment">// 将 `this.add()` 映射为 `this.$store.commit('increase')`</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="action"><a href="#action" class="headerlink" title="action"></a>action</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">store.commit(<span class="string">'increment'</span>)</span><br><span class="line"><span class="comment">// 任何由 "increment" 导致的状态变更都应该在此刻完成。</span></span><br></pre></td></tr></table></figure><p>Action 类似于 mutation，不同在于：•Action 提交的是 mutation，而不是直接变更状态。•Action 可以包含任意异步操作。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    count: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    increase (state) &#123;</span><br><span class="line">      state.count++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  actions: &#123;</span><br><span class="line">    increase (context) &#123;</span><br><span class="line">      context.commit(<span class="string">'increase'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    increaseOr(&#123;commit&#125;) &#123;</span><br><span class="line">      commit(<span class="string">'increase'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    increaseAsync (&#123; commit &#125;) &#123;</span><br><span class="line">        <span class="comment">// 支持异步操作</span></span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        commit(<span class="string">'increment'</span>)</span><br><span class="line">        &#125;, <span class="number">1000</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Action 函数接受一个与 store 实例具有相同方法和属性的 context 对象，因此你可以调用 context.commit 提交一个 mutation，或者通过 context.state 和 context.getters 来获取 state 和 getters。</p><ul><li><p>触发action</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">store.dispatch(<span class="string">'increase'</span>)</span><br></pre></td></tr></table></figure></li><li><p>支持同样的载荷方式和对象方式分发</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 以载荷形式分发</span></span><br><span class="line">store.dispatch(<span class="string">'increaseAsync'</span>, &#123;</span><br><span class="line">  amount: <span class="number">10</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以对象形式分发</span></span><br><span class="line">store.dispatch(&#123;</span><br><span class="line">  type: <span class="string">'increaseAsync'</span>,</span><br><span class="line">  amount: <span class="number">10</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 购物车操作实例</span></span><br><span class="line">actions: &#123;</span><br><span class="line">  checkout (&#123; commit, state &#125;, products) &#123;</span><br><span class="line">    <span class="comment">// 把当前购物车的物品备份起来</span></span><br><span class="line">    <span class="keyword">const</span> savedCartItems = [...state.cart.added]</span><br><span class="line">    <span class="comment">// 发出结账请求，然后乐观地清空购物车</span></span><br><span class="line">    commit(types.CHECKOUT_REQUEST)</span><br><span class="line">    <span class="comment">// 购物 API 接受一个成功回调和一个失败回调</span></span><br><span class="line">    shop.buyProducts(</span><br><span class="line">      products,</span><br><span class="line">      <span class="comment">// 成功操作</span></span><br><span class="line">      () =&gt; commit(types.CHECKOUT_SUCCESS),</span><br><span class="line">      <span class="comment">// 失败操作</span></span><br><span class="line">      () =&gt; commit(types.CHECKOUT_FAILURE, savedCartItems)</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="组件中分发action"><a href="#组件中分发action" class="headerlink" title="组件中分发action"></a>组件中分发action</h4><p>在组件中使用 this.$store.dispatch(‘xxx’) 分发 action，或者使用 mapActions 辅助函数将组件的 methods 映射为 store.dispatch 调用（需要先在根节点注入 store）<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; mapActions &#125; <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  methods: &#123;</span><br><span class="line">    ...mapActions([</span><br><span class="line">      <span class="string">'increase'</span>, <span class="comment">// 将 `this.increase()` 映射为 `this.$store.dispatch('increase')`</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// `mapActions` 也支持载荷：</span></span><br><span class="line">      <span class="string">'increaseBy'</span> <span class="comment">// 将 `this.increaseBy(amount)` 映射为 `this.$store.dispatch('increaseBy', amount)`</span></span><br><span class="line">    ]),</span><br><span class="line">    ...mapActions(&#123;</span><br><span class="line">      add: <span class="string">'increase'</span> <span class="comment">// 将 `this.add()` 映射为 `this.$store.dispatch('increase')`</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="action组合嵌套"><a href="#action组合嵌套" class="headerlink" title="action组合嵌套"></a>action组合嵌套</h4><p>store.dispatch 可以处理被触发的 action 的处理函数返回的 Promise，并且 store.dispatch 仍旧返回 Promise<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">actions: &#123;</span><br><span class="line">  actionA (&#123; commit &#125;) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        commit(<span class="string">'someMutation'</span>)</span><br><span class="line">        resolve()</span><br><span class="line">      &#125;, <span class="number">1000</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">   actionB (&#123; dispatch, commit &#125;) &#123;</span><br><span class="line">    <span class="keyword">return</span> dispatch(<span class="string">'actionA'</span>).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      commit(<span class="string">'someOtherMutation'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">store.dispatch(<span class="string">'actionA'</span>).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>采用async await</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// getData() 和 getOtherData() 返回的是 Promise</span></span><br><span class="line">actions: &#123;</span><br><span class="line">  <span class="keyword">async</span> actionA (&#123; commit &#125;) &#123;</span><br><span class="line">    commit(<span class="string">'gotData'</span>, <span class="keyword">await</span> getData())</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">async</span> actionB (&#123; dispatch, commit &#125;) &#123;</span><br><span class="line">    <span class="keyword">await</span> dispatch(<span class="string">'actionA'</span>) <span class="comment">// 等待 actionA 完成</span></span><br><span class="line">    commit(<span class="string">'gotOtherData'</span>, <span class="keyword">await</span> getOtherData())</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="module切分模块"><a href="#module切分模块" class="headerlink" title="module切分模块"></a>module切分模块</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> moduleA = &#123;</span><br><span class="line">  state: &#123; ... &#125;,</span><br><span class="line">  mutations: &#123; ... &#125;,</span><br><span class="line">  actions: &#123; ... &#125;,</span><br><span class="line">  getters: &#123; ... &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> moduleB = &#123;</span><br><span class="line">  state: &#123; ... &#125;,</span><br><span class="line">  mutations: &#123; ... &#125;,</span><br><span class="line">  actions: &#123; ... &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  modules: &#123;</span><br><span class="line">    a: moduleA,</span><br><span class="line">    b: moduleB</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">store.state.a <span class="comment">// -&gt; moduleA 的状态</span></span><br><span class="line">store.state.b <span class="comment">// -&gt; moduleB 的状态</span></span><br></pre></td></tr></table></figure><ul><li><p>模块内部的action</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> moduleA = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  actions: &#123;</span><br><span class="line">    incrementIfOddOnRootSum (&#123; state, commit, rootState &#125;) &#123;</span><br><span class="line">      <span class="keyword">if</span> ((state.count + rootState.count) % <span class="number">2</span> === <span class="number">1</span>) &#123;</span><br><span class="line">        commit(<span class="string">'increment'</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">   getters: &#123;</span><br><span class="line">    sumWithRootCount (state, getters, rootState) &#123;</span><br><span class="line">      <span class="keyword">return</span> state.count + rootState.count</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>命名空间</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  modules: &#123;</span><br><span class="line">    account: &#123;</span><br><span class="line">      namespaced: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 模块内容（module assets）</span></span><br><span class="line">      state: &#123; ... &#125;, <span class="comment">// 模块内的状态已经是嵌套的了，使用 `namespaced` 属性不会对其产生影响</span></span><br><span class="line">      getters: &#123;</span><br><span class="line">        isAdmin () &#123; ... &#125; <span class="comment">// -&gt; getters['account/isAdmin']</span></span><br><span class="line">      &#125;,</span><br><span class="line">      actions: &#123;</span><br><span class="line">        login () &#123; ... &#125; <span class="comment">// -&gt; dispatch('account/login')</span></span><br><span class="line">      &#125;,</span><br><span class="line">      mutations: &#123;</span><br><span class="line">        login () &#123; ... &#125; <span class="comment">// -&gt; commit('account/login')</span></span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 嵌套模块</span></span><br><span class="line">      modules: &#123;</span><br><span class="line">        <span class="comment">// 继承父模块的命名空间</span></span><br><span class="line">        myPage: &#123;</span><br><span class="line">          state: &#123; ... &#125;,</span><br><span class="line">          getters: &#123;</span><br><span class="line">            profile () &#123; ... &#125; <span class="comment">// -&gt; getters['account/profile']</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 进一步嵌套命名空间</span></span><br><span class="line">        posts: &#123;</span><br><span class="line">          namespaced: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">          state: &#123; ... &#125;,</span><br><span class="line">          getters: &#123;</span><br><span class="line">            popular () &#123; ... &#125; <span class="comment">// -&gt; getters['account/posts/popular']</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>在带命名空间的模块内访问全局内容（Global Assets）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">modules: &#123;</span><br><span class="line">  foo: &#123;</span><br><span class="line">    namespaced: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">    getters: &#123;</span><br><span class="line">      <span class="comment">// 在这个模块的 getter 中，`getters` 被局部化了</span></span><br><span class="line">      <span class="comment">// 你可以使用 getter 的第四个参数来调用 `rootGetters`</span></span><br><span class="line">      someGetter (state, getters, rootState, rootGetters) &#123;</span><br><span class="line">        getters.someOtherGetter <span class="comment">// -&gt; 'foo/someOtherGetter'</span></span><br><span class="line">        rootGetters.someOtherGetter <span class="comment">// -&gt; 'someOtherGetter'</span></span><br><span class="line">      &#125;,</span><br><span class="line">      someOtherGetter: <span class="function"><span class="params">state</span> =&gt;</span> &#123; ... &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    actions: &#123;</span><br><span class="line">      <span class="comment">// 在这个模块中， dispatch 和 commit 也被局部化了</span></span><br><span class="line">      <span class="comment">// 他们可以接受 `root` 属性以访问根 dispatch 或 commit</span></span><br><span class="line">      someAction (&#123; dispatch, commit, getters, rootGetters &#125;) &#123;</span><br><span class="line">        getters.someGetter <span class="comment">// -&gt; 'foo/someGetter'</span></span><br><span class="line">        rootGetters.someGetter <span class="comment">// -&gt; 'someGetter'</span></span><br><span class="line"></span><br><span class="line">        dispatch(<span class="string">'someOtherAction'</span>) <span class="comment">// -&gt; 'foo/someOtherAction'</span></span><br><span class="line">        dispatch(<span class="string">'someOtherAction'</span>, <span class="literal">null</span>, &#123; <span class="attr">root</span>: <span class="literal">true</span> &#125;) <span class="comment">// -&gt; 'someOtherAction'</span></span><br><span class="line"></span><br><span class="line">        commit(<span class="string">'someMutation'</span>) <span class="comment">// -&gt; 'foo/someMutation'</span></span><br><span class="line">        commit(<span class="string">'someMutation'</span>, <span class="literal">null</span>, &#123; <span class="attr">root</span>: <span class="literal">true</span> &#125;) <span class="comment">// -&gt; 'someMutation'</span></span><br><span class="line">      &#125;,</span><br><span class="line">      someOtherAction (ctx, payload) &#123; ... &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在带命名空间的模块注册全局 action若需要在带命名空间的模块注册全局 action，可添加 root: true，并将这个 action 的定义放在函数 handler 中。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  actions: &#123;</span><br><span class="line">    someOtherAction (&#123;dispatch&#125;) &#123;</span><br><span class="line">      dispatch(<span class="string">'someAction'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  modules: &#123;</span><br><span class="line">    foo: &#123;</span><br><span class="line">      namespaced: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">      actions: &#123;</span><br><span class="line">        someAction: &#123;</span><br><span class="line">          root: <span class="literal">true</span>,</span><br><span class="line">          handler (namespacedContext, payload) &#123; ... &#125; <span class="comment">// -&gt; 'someAction'</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>带命名空间的绑定函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">  ...mapState(&#123;</span><br><span class="line">    a: <span class="function"><span class="params">state</span> =&gt;</span> state.some.nested.module.a,</span><br><span class="line">    b: <span class="function"><span class="params">state</span> =&gt;</span> state.some.nested.module.b</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">  ...mapActions([</span><br><span class="line">    <span class="string">'some/nested/module/foo'</span>, <span class="comment">// -&gt; this['some/nested/module/foo']()</span></span><br><span class="line">    <span class="string">'some/nested/module/bar'</span> <span class="comment">// -&gt; this['some/nested/module/bar']()</span></span><br><span class="line">  ])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>简化<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">  ...mapState(<span class="string">'some/nested/module'</span>, &#123;</span><br><span class="line">    a: <span class="function"><span class="params">state</span> =&gt;</span> state.a,</span><br><span class="line">    b: <span class="function"><span class="params">state</span> =&gt;</span> state.b</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">  ...mapActions(<span class="string">'some/nested/module'</span>, [</span><br><span class="line">    <span class="string">'foo'</span>, <span class="comment">// -&gt; this.foo()</span></span><br><span class="line">    <span class="string">'bar'</span> <span class="comment">// -&gt; this.bar()</span></span><br><span class="line">  ])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>也可以通过使用 createNamespacedHelpers 创建基于某个命名空间辅助函数。它返回一个对象，对象里有新的绑定在给定命名空间值上的组件绑定辅助函数<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createNamespacedHelpers &#125; <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; mapState, mapActions &#125; = createNamespacedHelpers(<span class="string">'some/nested/module'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  computed: &#123;</span><br><span class="line">    <span class="comment">// 在 `some/nested/module` 中查找</span></span><br><span class="line">    ...mapState(&#123;</span><br><span class="line">      a: <span class="function"><span class="params">state</span> =&gt;</span> state.a,</span><br><span class="line">      b: <span class="function"><span class="params">state</span> =&gt;</span> state.b</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    <span class="comment">// 在 `some/nested/module` 中查找</span></span><br><span class="line">    ...mapActions([</span><br><span class="line">      <span class="string">'foo'</span>,</span><br><span class="line">      <span class="string">'bar'</span></span><br><span class="line">    ])</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="定义插件"><a href="#定义插件" class="headerlink" title="定义插件"></a>定义插件</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myPlugin = <span class="function"><span class="params">store</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 传入store初始化时调用</span></span><br><span class="line">    store.subscribe(<span class="function">(<span class="params">mutation, state</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="comment">// 每次mutation之后调用</span></span><br><span class="line">        <span class="comment">// mutation 的格式为 &#123;type, payload&#125;</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="表单处理"><a href="#表单处理" class="headerlink" title="表单处理"></a>表单处理</h2><p>因为提交mutation才能修改状态，所以v-model不适合绑定vuex里的state，不符合vuex的思想。<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"obj.message"</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>假设这里的 obj 是在计算属性中返回的一个属于 Vuex store 的对象，在用户输入时，v-model 会试图直接修改 obj.message。在严格模式中，由于这个修改不是在 mutation 函数中执行的, 这里会抛出一个错误。</p><ol><li>不采用v-model所以需要input绑定value，然后调用input或者change提交mutation修改状态<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">:value</span>=<span class="string">"message"</span> @<span class="attr">input</span>=<span class="string">"updateMessage"</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">    ...mapState(&#123;</span><br><span class="line">        message: <span class="function"><span class="params">state</span> =&gt;</span> state.obj.message</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;,</span><br><span class="line">method: &#123;</span><br><span class="line">    updateMessage(e)&#123;</span><br><span class="line">        <span class="keyword">this</span>.$store.commit(<span class="string">"updateMessage"</span>, e.target.value)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>采用v-model<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line">computed: &#123;</span><br><span class="line">  message: &#123;</span><br><span class="line">    get () &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.$store.state.obj.message</span><br><span class="line">    &#125;,</span><br><span class="line">    set (value) &#123;</span><br><span class="line">      <span class="keyword">this</span>.$store.commit(<span class="string">'updateMessage'</span>, value)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content:encoded>
      
      <comments>http://mydearest.cn/2019/vuex%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>macvscode更新失败：Permissiondenied解决办法</title>
      <link>http://mydearest.cn/2019/macvscode%E6%9B%B4%E6%96%B0%E5%A4%B1%E8%B4%A5%EF%BC%9APermissiondenied%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95.html</link>
      <guid>http://mydearest.cn/2019/macvscode%E6%9B%B4%E6%96%B0%E5%A4%B1%E8%B4%A5%EF%BC%9APermissiondenied%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95.html</guid>
      <pubDate>Tue, 09 Apr 2019 15:15:24 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;场景-–-mac-vscode不能安装更新&quot;&gt;&lt;a href=&quot;#场景-–-mac-vscode不能安装更新&quot; class=&quot;headerlink&quot; title=&quot;场景 – mac vscode不能安装更新&quot;&gt;&lt;/a&gt;场景 – mac vscode不能安装更新&lt;/
        
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="场景-–-mac-vscode不能安装更新"><a href="#场景-–-mac-vscode不能安装更新" class="headerlink" title="场景 – mac vscode不能安装更新"></a>场景 – mac vscode不能安装更新</h2><blockquote><p>Could not create temporary directory: Permission denied</p></blockquote><h2 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h2><p>mac下<code>/Users/username/Library/Caches/</code>用户文件不一样，root和username</p><p>导致</p><blockquote><p>drwxr-xr-x   6 username  staff   204B Jan 17 20:33 com.microsoft.VSCodedrwxr–r–   2 root    staff    68B Dec 17 13:51 com.microsoft.VSCode.ShipIt</p></blockquote><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// 1. 关闭vscode</span><br><span class="line"></span><br><span class="line">// 2. 这一步是需要输入密码的</span><br><span class="line">sudo chown $USER ~/Library/Caches/com.microsoft.VSCode.ShipIt/ </span><br><span class="line"></span><br><span class="line">// 3. 这一步是不需要输入密码的, 如果不进行第一步，第二步会报错</span><br><span class="line">sudo chown $USER ~/Library/Caches/com.microsoft.VSCode.ShipIt/*</span><br><span class="line"></span><br><span class="line">// 4. 更新xattr</span><br><span class="line">xattr -dr com.apple.quarantine /Applications/Visual\ Studio\ Code.app</span><br></pre></td></tr></table></figure><h2 id="重新安装更新-完成😁"><a href="#重新安装更新-完成😁" class="headerlink" title="重新安装更新 完成😁"></a>重新安装更新 完成😁</h2>]]></content:encoded>
      
      <comments>http://mydearest.cn/2019/macvscode%E6%9B%B4%E6%96%B0%E5%A4%B1%E8%B4%A5%EF%BC%9APermissiondenied%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>borderRadius百分比50和100究竟有什么区别</title>
      <link>http://mydearest.cn/2019/borderRadius%E7%99%BE%E5%88%86%E6%AF%9450%E5%92%8C100%E7%A9%B6%E7%AB%9F%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB.html</link>
      <guid>http://mydearest.cn/2019/borderRadius%E7%99%BE%E5%88%86%E6%AF%9450%E5%92%8C100%E7%A9%B6%E7%AB%9F%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB.html</guid>
      <pubDate>Sun, 31 Mar 2019 16:39:52 GMT</pubDate>
      <description>
      
        &lt;p&gt;border-radius的值是百分比的话，就相当于盒子的宽度和高度的百分比。我们知道在一个正方形内做一个面积最大的圆形，这个圆的半径就为正方形边长的一半。所&lt;/p&gt;
&lt;p&gt;以border-radius为50%时，则会形成圆。那么可能有人就会问，border-radius为100%时，对应圆的半径长度不就是正方形的宽高么，这种情况下，为什么还是会&lt;/p&gt;
&lt;p&gt;形成一个和值为50%一样的圆形呢？&lt;/p&gt;
&lt;hr&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>border-radius的值是百分比的话，就相当于盒子的宽度和高度的百分比。我们知道在一个正方形内做一个面积最大的圆形，这个圆的半径就为正方形边长的一半。所</p><p>以border-radius为50%时，则会形成圆。那么可能有人就会问，border-radius为100%时，对应圆的半径长度不就是正方形的宽高么，这种情况下，为什么还是会</p><p>形成一个和值为50%一样的圆形呢？</p><hr><a id="more"></a><p>　　其实这是W3C对于<a href="https://www.w3.org/TR/css-backgrounds-3/#corner-overlap" target="_blank" rel="noopener">重合曲线</a>有这样的规范：如果两个相邻角的半径和超过了对应的</p><p>盒子的边的长度，那么浏览器要重新计算保证它们不会重合。下面我们假定一个宽</p><p>高为100px的正方形A。此时设置border-top-left-radius=100%；则正方形A会变成一个半径为100px的四分之一圆弧。 </p><p><img src="http://cdn.mydearest.cn/blog/images/radius1.png" alt="radius1"></p><p>　　然后我们再给border-top-right-radius=100%。此时相邻的角的半径已经超过了对应的盒子的边的长度。浏览器需要重新计算。重新计算的规则是同时缩放两</p><p>个圆角的半径知道他们刚好符合这个方形。</p><p>　　建议使用border-radius = 50% 来避免浏览器不必要的计算。值得注意的是在涉及到与圆角相关动画的情况下，值为50%和100%，在动画效果上会有不同。</p><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>动画效果差异<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">div&#123;</span></span><br><span class="line"><span class="undefined">  width: 100px;</span></span><br><span class="line"><span class="undefined">  height: 100px;</span></span><br><span class="line"><span class="undefined">  margin-bottom: 10px;</span></span><br><span class="line"><span class="undefined">  </span></span><br><span class="line"><span class="undefined">  transition: border-radius 3s;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.half</span>&#123;</span></span><br><span class="line"><span class="undefined">  border-radius: 50%;</span></span><br><span class="line"><span class="css">  <span class="selector-tag">background</span>: <span class="selector-id">#000</span>;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.full</span>&#123;</span></span><br><span class="line"><span class="undefined">  border-radius: 100%;</span></span><br><span class="line"><span class="css">  <span class="selector-tag">background</span>: <span class="selector-id">#f00</span>;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-class">.box1</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="undefined">  border-radius: 0;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.wrap</span>&#123;</span></span><br><span class="line"><span class="css">  <span class="selector-tag">width</span><span class="selector-pseudo">:100px</span>;</span></span><br><span class="line"><span class="undefined">  height: 250px;</span></span><br><span class="line"><span class="undefined">  border: 1px solid red;</span></span><br><span class="line"><span class="undefined">  cursor: pointer;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-class">.box2</span> <span class="selector-class">.half</span>&#123;</span></span><br><span class="line"><span class="undefined">    border-radius: 0;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">background</span>: <span class="selector-id">#000</span>;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-class">.box2</span> <span class="selector-class">.full</span>&#123;</span></span><br><span class="line"><span class="undefined">    border-radius: 0;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">background</span>: <span class="selector-id">#f00</span>;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.box2</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.half</span>&#123;</span></span><br><span class="line"><span class="undefined">  border-radius: 50%;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.box2</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.full</span>&#123;</span></span><br><span class="line"><span class="css">  <span class="selector-tag">border-radius</span><span class="selector-pseudo">:100</span>%</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'wrap box1'</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"half"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"full"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'wrap box2'</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"half"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"full"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>将鼠标移到红框内<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://mydearest.cn/2019/borderRadius%E7%99%BE%E5%88%86%E6%AF%9450%E5%92%8C100%E7%A9%B6%E7%AB%9F%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB.html#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
